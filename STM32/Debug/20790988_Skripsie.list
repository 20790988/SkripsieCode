
20790988_Skripsie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018d8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001a60  08001a60  00011a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a98  08001a98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a98  08001a98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a98  08001a98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a98  08001a98  00011a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a9c  08001a9c  00011a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08001aac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08001aac  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008ceb  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a14  00000000  00000000  00028d27  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006c8  00000000  00000000  0002a740  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000688  00000000  00000000  0002ae08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001ae16  00000000  00000000  0002b490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006a3b  00000000  00000000  000462a6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009af6f  00000000  00000000  0004cce1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e7c50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001000  00000000  00000000  000e7ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00003b8f  00000000  00000000  000e8ccc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a48 	.word	0x08001a48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001a48 	.word	0x08001a48

080001c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001cc:	2400      	movs	r4, #0
 80001ce:	9403      	str	r4, [sp, #12]
 80001d0:	9404      	str	r4, [sp, #16]
 80001d2:	9405      	str	r4, [sp, #20]
 80001d4:	9406      	str	r4, [sp, #24]
 80001d6:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001d8:	4b1f      	ldr	r3, [pc, #124]	; (8000258 <MX_GPIO_Init+0x90>)
 80001da:	695a      	ldr	r2, [r3, #20]
 80001dc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80001e0:	615a      	str	r2, [r3, #20]
 80001e2:	695a      	ldr	r2, [r3, #20]
 80001e4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80001e8:	9200      	str	r2, [sp, #0]
 80001ea:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ec:	695a      	ldr	r2, [r3, #20]
 80001ee:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80001f2:	615a      	str	r2, [r3, #20]
 80001f4:	695a      	ldr	r2, [r3, #20]
 80001f6:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 80001fa:	9201      	str	r2, [sp, #4]
 80001fc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001fe:	695a      	ldr	r2, [r3, #20]
 8000200:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000204:	615a      	str	r2, [r3, #20]
 8000206:	695b      	ldr	r3, [r3, #20]
 8000208:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800020c:	9302      	str	r3, [sp, #8]
 800020e:	9b02      	ldr	r3, [sp, #8]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000210:	4622      	mov	r2, r4
 8000212:	2120      	movs	r1, #32
 8000214:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000218:	f000 fb46 	bl	80008a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800021c:	4d0f      	ldr	r5, [pc, #60]	; (800025c <MX_GPIO_Init+0x94>)
 800021e:	4622      	mov	r2, r4
 8000220:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000224:	4628      	mov	r0, r5
 8000226:	f000 fb3f 	bl	80008a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 800022a:	2320      	movs	r3, #32
 800022c:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2601      	movs	r6, #1
 8000230:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000234:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000236:	a903      	add	r1, sp, #12
 8000238:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800023c:	f000 fa70 	bl	8000720 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000240:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000244:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000246:	9604      	str	r6, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000248:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800024c:	a903      	add	r1, sp, #12
 800024e:	4628      	mov	r0, r5
 8000250:	f000 fa66 	bl	8000720 <HAL_GPIO_Init>

}
 8000254:	b008      	add	sp, #32
 8000256:	bd70      	pop	{r4, r5, r6, pc}
 8000258:	40021000 	.word	0x40021000
 800025c:	48000400 	.word	0x48000400

08000260 <MX_USART2_UART_Init>:
{
 8000260:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8000262:	4c0f      	ldr	r4, [pc, #60]	; (80002a0 <MX_USART2_UART_Init+0x40>)
 8000264:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <MX_USART2_UART_Init+0x44>)
 8000266:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 8000268:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800026c:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026e:	2300      	movs	r3, #0
 8000270:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000272:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000274:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000276:	220c      	movs	r2, #12
 8000278:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800027a:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800027c:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800027e:	6223      	str	r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000280:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000282:	4620      	mov	r0, r4
 8000284:	f001 fb81 	bl	800198a <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(&huart2,UART_FLAG_RXNE);
 8000288:	6822      	ldr	r2, [r4, #0]
 800028a:	6813      	ldr	r3, [r2, #0]
 800028c:	f043 0301 	orr.w	r3, r3, #1
 8000290:	6013      	str	r3, [r2, #0]
  __HAL_UART_ENABLE_IT(&huart2,UART_FLAG_TC);
 8000292:	6822      	ldr	r2, [r4, #0]
 8000294:	6853      	ldr	r3, [r2, #4]
 8000296:	f043 0301 	orr.w	r3, r3, #1
 800029a:	6053      	str	r3, [r2, #4]
}
 800029c:	bd10      	pop	{r4, pc}
 800029e:	bf00      	nop
 80002a0:	200000b0 	.word	0x200000b0
 80002a4:	40004400 	.word	0x40004400

080002a8 <MX_USART1_UART_Init>:
{
 80002a8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80002aa:	4809      	ldr	r0, [pc, #36]	; (80002d0 <MX_USART1_UART_Init+0x28>)
 80002ac:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <MX_USART1_UART_Init+0x2c>)
 80002ae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80002b0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80002b4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002b6:	2300      	movs	r3, #0
 80002b8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002bc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002be:	220c      	movs	r2, #12
 80002c0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002c2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002c6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002c8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ca:	f001 fb5e 	bl	800198a <HAL_UART_Init>
}
 80002ce:	bd08      	pop	{r3, pc}
 80002d0:	20000030 	.word	0x20000030
 80002d4:	40013800 	.word	0x40013800

080002d8 <MX_NVIC_Init>:
{
 80002d8:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80002da:	2200      	movs	r2, #0
 80002dc:	4611      	mov	r1, r2
 80002de:	2026      	movs	r0, #38	; 0x26
 80002e0:	f000 f9a0 	bl	8000624 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80002e4:	2026      	movs	r0, #38	; 0x26
 80002e6:	f000 f9d1 	bl	800068c <HAL_NVIC_EnableIRQ>
}
 80002ea:	bd08      	pop	{r3, pc}

080002ec <SystemClock_Config>:
{
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002f0:	2224      	movs	r2, #36	; 0x24
 80002f2:	2100      	movs	r1, #0
 80002f4:	a80d      	add	r0, sp, #52	; 0x34
 80002f6:	f001 fb9f 	bl	8001a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fa:	2400      	movs	r4, #0
 80002fc:	9407      	str	r4, [sp, #28]
 80002fe:	9408      	str	r4, [sp, #32]
 8000300:	9409      	str	r4, [sp, #36]	; 0x24
 8000302:	940a      	str	r4, [sp, #40]	; 0x28
 8000304:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000306:	9400      	str	r4, [sp, #0]
 8000308:	9401      	str	r4, [sp, #4]
 800030a:	9402      	str	r4, [sp, #8]
 800030c:	9403      	str	r4, [sp, #12]
 800030e:	9404      	str	r4, [sp, #16]
 8000310:	9405      	str	r4, [sp, #20]
 8000312:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000314:	2302      	movs	r3, #2
 8000316:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000318:	2501      	movs	r5, #1
 800031a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800031c:	2310      	movs	r3, #16
 800031e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000320:	a80c      	add	r0, sp, #48	; 0x30
 8000322:	f000 fac7 	bl	80008b4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000326:	230f      	movs	r3, #15
 8000328:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032a:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800032e:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000330:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000332:	4621      	mov	r1, r4
 8000334:	a807      	add	r0, sp, #28
 8000336:	f000 fe17 	bl	8000f68 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800033a:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800033c:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033e:	4668      	mov	r0, sp
 8000340:	f000 ff16 	bl	8001170 <HAL_RCCEx_PeriphCLKConfig>
}
 8000344:	b017      	add	sp, #92	; 0x5c
 8000346:	bd30      	pop	{r4, r5, pc}

08000348 <main>:
{
 8000348:	b508      	push	{r3, lr}
  HAL_Init();
 800034a:	f000 f935 	bl	80005b8 <HAL_Init>
  SystemClock_Config();
 800034e:	f7ff ffcd 	bl	80002ec <SystemClock_Config>
  MX_GPIO_Init();
 8000352:	f7ff ff39 	bl	80001c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000356:	f7ff ff83 	bl	8000260 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800035a:	f7ff ffa5 	bl	80002a8 <MX_USART1_UART_Init>
  MX_NVIC_Init();
 800035e:	f7ff ffbb 	bl	80002d8 <MX_NVIC_Init>
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_RXNE);
 8000362:	4a0c      	ldr	r2, [pc, #48]	; (8000394 <main+0x4c>)
 8000364:	6811      	ldr	r1, [r2, #0]
 8000366:	680b      	ldr	r3, [r1, #0]
 8000368:	f043 0320 	orr.w	r3, r3, #32
 800036c:	600b      	str	r3, [r1, #0]
  __HAL_UART_ENABLE_IT(&huart2,UART_IT_TC);
 800036e:	6812      	ldr	r2, [r2, #0]
 8000370:	6813      	ldr	r3, [r2, #0]
 8000372:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000376:	6013      	str	r3, [r2, #0]
    if (msg_pending == TRUE)
 8000378:	4b07      	ldr	r3, [pc, #28]	; (8000398 <main+0x50>)
 800037a:	681b      	ldr	r3, [r3, #0]
 800037c:	2b01      	cmp	r3, #1
 800037e:	d1fb      	bne.n	8000378 <main+0x30>
      HAL_UART_Transmit_IT(&huart2, (uint8_t*)rxdata, INPUT_LENGTH);
 8000380:	2214      	movs	r2, #20
 8000382:	4906      	ldr	r1, [pc, #24]	; (800039c <main+0x54>)
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <main+0x4c>)
 8000386:	f001 f81d 	bl	80013c4 <HAL_UART_Transmit_IT>
      msg_pending = FALSE;
 800038a:	4b03      	ldr	r3, [pc, #12]	; (8000398 <main+0x50>)
 800038c:	2200      	movs	r2, #0
 800038e:	601a      	str	r2, [r3, #0]
 8000390:	e7f2      	b.n	8000378 <main+0x30>
 8000392:	bf00      	nop
 8000394:	200000b0 	.word	0x200000b0
 8000398:	20000028 	.word	0x20000028
 800039c:	20000130 	.word	0x20000130

080003a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003a0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003a2:	4b0a      	ldr	r3, [pc, #40]	; (80003cc <HAL_MspInit+0x2c>)
 80003a4:	699a      	ldr	r2, [r3, #24]
 80003a6:	f042 0201 	orr.w	r2, r2, #1
 80003aa:	619a      	str	r2, [r3, #24]
 80003ac:	699a      	ldr	r2, [r3, #24]
 80003ae:	f002 0201 	and.w	r2, r2, #1
 80003b2:	9200      	str	r2, [sp, #0]
 80003b4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003b6:	69da      	ldr	r2, [r3, #28]
 80003b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80003bc:	61da      	str	r2, [r3, #28]
 80003be:	69db      	ldr	r3, [r3, #28]
 80003c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003c4:	9301      	str	r3, [sp, #4]
 80003c6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003c8:	b002      	add	sp, #8
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80003d0:	b500      	push	{lr}
 80003d2:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003d4:	2300      	movs	r3, #0
 80003d6:	9305      	str	r3, [sp, #20]
 80003d8:	9306      	str	r3, [sp, #24]
 80003da:	9307      	str	r3, [sp, #28]
 80003dc:	9308      	str	r3, [sp, #32]
 80003de:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 80003e0:	6803      	ldr	r3, [r0, #0]
 80003e2:	4a25      	ldr	r2, [pc, #148]	; (8000478 <HAL_UART_MspInit+0xa8>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d005      	beq.n	80003f4 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80003e8:	4a24      	ldr	r2, [pc, #144]	; (800047c <HAL_UART_MspInit+0xac>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d022      	beq.n	8000434 <HAL_UART_MspInit+0x64>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80003ee:	b00b      	add	sp, #44	; 0x2c
 80003f0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80003f4:	4b22      	ldr	r3, [pc, #136]	; (8000480 <HAL_UART_MspInit+0xb0>)
 80003f6:	699a      	ldr	r2, [r3, #24]
 80003f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80003fc:	619a      	str	r2, [r3, #24]
 80003fe:	699a      	ldr	r2, [r3, #24]
 8000400:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000404:	9201      	str	r2, [sp, #4]
 8000406:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000408:	695a      	ldr	r2, [r3, #20]
 800040a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800040e:	615a      	str	r2, [r3, #20]
 8000410:	695b      	ldr	r3, [r3, #20]
 8000412:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000416:	9302      	str	r3, [sp, #8]
 8000418:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800041a:	2330      	movs	r3, #48	; 0x30
 800041c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800041e:	2302      	movs	r3, #2
 8000420:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000422:	2303      	movs	r3, #3
 8000424:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000426:	2307      	movs	r3, #7
 8000428:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800042a:	a905      	add	r1, sp, #20
 800042c:	4815      	ldr	r0, [pc, #84]	; (8000484 <HAL_UART_MspInit+0xb4>)
 800042e:	f000 f977 	bl	8000720 <HAL_GPIO_Init>
 8000432:	e7dc      	b.n	80003ee <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000434:	4b12      	ldr	r3, [pc, #72]	; (8000480 <HAL_UART_MspInit+0xb0>)
 8000436:	69da      	ldr	r2, [r3, #28]
 8000438:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800043c:	61da      	str	r2, [r3, #28]
 800043e:	69da      	ldr	r2, [r3, #28]
 8000440:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000444:	9203      	str	r2, [sp, #12]
 8000446:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000448:	695a      	ldr	r2, [r3, #20]
 800044a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800044e:	615a      	str	r2, [r3, #20]
 8000450:	695b      	ldr	r3, [r3, #20]
 8000452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000456:	9304      	str	r3, [sp, #16]
 8000458:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800045a:	230c      	movs	r3, #12
 800045c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045e:	2302      	movs	r3, #2
 8000460:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000462:	2303      	movs	r3, #3
 8000464:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000466:	2307      	movs	r3, #7
 8000468:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	a905      	add	r1, sp, #20
 800046c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000470:	f000 f956 	bl	8000720 <HAL_GPIO_Init>
}
 8000474:	e7bb      	b.n	80003ee <HAL_UART_MspInit+0x1e>
 8000476:	bf00      	nop
 8000478:	40013800 	.word	0x40013800
 800047c:	40004400 	.word	0x40004400
 8000480:	40021000 	.word	0x40021000
 8000484:	48000800 	.word	0x48000800

08000488 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000488:	4770      	bx	lr

0800048a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800048a:	e7fe      	b.n	800048a <HardFault_Handler>

0800048c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800048c:	e7fe      	b.n	800048c <MemManage_Handler>

0800048e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800048e:	e7fe      	b.n	800048e <BusFault_Handler>

08000490 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000490:	e7fe      	b.n	8000490 <UsageFault_Handler>

08000492 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000492:	4770      	bx	lr

08000494 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000494:	4770      	bx	lr

08000496 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000496:	4770      	bx	lr

08000498 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000498:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800049a:	f000 f89f 	bl	80005dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800049e:	bd08      	pop	{r3, pc}

080004a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80004a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  int  flag = __HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE);
 80004a2:	4808      	ldr	r0, [pc, #32]	; (80004c4 <USART2_IRQHandler+0x24>)
 80004a4:	6803      	ldr	r3, [r0, #0]
 80004a6:	69dc      	ldr	r4, [r3, #28]
 80004a8:	f004 0420 	and.w	r4, r4, #32
  char  inchar;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80004ac:	f000 ffd2 	bl	8001454 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if (flag == 1)
 80004b0:	b904      	cbnz	r4, 80004b4 <USART2_IRQHandler+0x14>
  {
    inchar = (uint8_t)huart2.Instance->RDR;
    handleUARTInterrupt(inchar);
  }
  /* USER CODE END USART2_IRQn 1 */
}
 80004b2:	bd10      	pop	{r4, pc}
    inchar = (uint8_t)huart2.Instance->RDR;
 80004b4:	4b03      	ldr	r3, [pc, #12]	; (80004c4 <USART2_IRQHandler+0x24>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    handleUARTInterrupt(inchar);
 80004ba:	b2c0      	uxtb	r0, r0
 80004bc:	f000 f812 	bl	80004e4 <handleUARTInterrupt>
}
 80004c0:	e7f7      	b.n	80004b2 <USART2_IRQHandler+0x12>
 80004c2:	bf00      	nop
 80004c4:	200000b0 	.word	0x200000b0

080004c8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004c8:	4b05      	ldr	r3, [pc, #20]	; (80004e0 <SystemInit+0x18>)
 80004ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80004ce:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80004d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004da:	609a      	str	r2, [r3, #8]
#endif
}
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	e000ed00 	.word	0xe000ed00

080004e4 <handleUARTInterrupt>:
char rxdata[INPUT_LENGTH];
volatile int rxlen = 0;

void handleUARTInterrupt(char inchar)
{
  rxdata[rxlen] = inchar;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <handleUARTInterrupt+0x28>)
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	4909      	ldr	r1, [pc, #36]	; (8000510 <handleUARTInterrupt+0x2c>)
 80004ea:	5488      	strb	r0, [r1, r2]
  rxlen++;
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	3201      	adds	r2, #1
 80004f0:	601a      	str	r2, [r3, #0]
  if (rxlen>=INPUT_LENGTH || inchar == '\r')
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2b13      	cmp	r3, #19
 80004f6:	dc01      	bgt.n	80004fc <handleUARTInterrupt+0x18>
 80004f8:	280d      	cmp	r0, #13
 80004fa:	d105      	bne.n	8000508 <handleUARTInterrupt+0x24>
  {
    rxlen = 0;
 80004fc:	4b03      	ldr	r3, [pc, #12]	; (800050c <handleUARTInterrupt+0x28>)
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
    msg_pending = TRUE;
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <handleUARTInterrupt+0x30>)
 8000504:	2201      	movs	r2, #1
 8000506:	601a      	str	r2, [r3, #0]
  }
}
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop
 800050c:	2000002c 	.word	0x2000002c
 8000510:	20000130 	.word	0x20000130
 8000514:	20000028 	.word	0x20000028

08000518 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000518:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000550 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800051c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800051e:	e003      	b.n	8000528 <LoopCopyDataInit>

08000520 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000520:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000522:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000524:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000526:	3104      	adds	r1, #4

08000528 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000528:	480b      	ldr	r0, [pc, #44]	; (8000558 <LoopForever+0xa>)
	ldr	r3, =_edata
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <LoopForever+0xe>)
	adds	r2, r0, r1
 800052c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800052e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000530:	d3f6      	bcc.n	8000520 <CopyDataInit>
	ldr	r2, =_sbss
 8000532:	4a0b      	ldr	r2, [pc, #44]	; (8000560 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000534:	e002      	b.n	800053c <LoopFillZerobss>

08000536 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000536:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000538:	f842 3b04 	str.w	r3, [r2], #4

0800053c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800053c:	4b09      	ldr	r3, [pc, #36]	; (8000564 <LoopForever+0x16>)
	cmp	r2, r3
 800053e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000540:	d3f9      	bcc.n	8000536 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000542:	f7ff ffc1 	bl	80004c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000546:	f001 fa53 	bl	80019f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800054a:	f7ff fefd 	bl	8000348 <main>

0800054e <LoopForever>:

LoopForever:
    b LoopForever
 800054e:	e7fe      	b.n	800054e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000550:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000554:	08001aa0 	.word	0x08001aa0
	ldr	r0, =_sdata
 8000558:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800055c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000560:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000564:	20000148 	.word	0x20000148

08000568 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000568:	e7fe      	b.n	8000568 <ADC1_2_IRQHandler>
	...

0800056c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800056c:	b510      	push	{r4, lr}
 800056e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000570:	4b0e      	ldr	r3, [pc, #56]	; (80005ac <HAL_InitTick+0x40>)
 8000572:	7818      	ldrb	r0, [r3, #0]
 8000574:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000578:	fbb3 f3f0 	udiv	r3, r3, r0
 800057c:	4a0c      	ldr	r2, [pc, #48]	; (80005b0 <HAL_InitTick+0x44>)
 800057e:	6810      	ldr	r0, [r2, #0]
 8000580:	fbb0 f0f3 	udiv	r0, r0, r3
 8000584:	f000 f890 	bl	80006a8 <HAL_SYSTICK_Config>
 8000588:	b968      	cbnz	r0, 80005a6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800058a:	2c0f      	cmp	r4, #15
 800058c:	d901      	bls.n	8000592 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800058e:	2001      	movs	r0, #1
 8000590:	e00a      	b.n	80005a8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000592:	2200      	movs	r2, #0
 8000594:	4621      	mov	r1, r4
 8000596:	f04f 30ff 	mov.w	r0, #4294967295
 800059a:	f000 f843 	bl	8000624 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <HAL_InitTick+0x48>)
 80005a0:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 80005a2:	2000      	movs	r0, #0
 80005a4:	e000      	b.n	80005a8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80005a6:	2001      	movs	r0, #1
}
 80005a8:	bd10      	pop	{r4, pc}
 80005aa:	bf00      	nop
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000008 	.word	0x20000008

080005b8 <HAL_Init>:
{
 80005b8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <HAL_Init+0x20>)
 80005bc:	6813      	ldr	r3, [r2, #0]
 80005be:	f043 0310 	orr.w	r3, r3, #16
 80005c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f81b 	bl	8000600 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ffce 	bl	800056c <HAL_InitTick>
  HAL_MspInit();
 80005d0:	f7ff fee6 	bl	80003a0 <HAL_MspInit>
}
 80005d4:	2000      	movs	r0, #0
 80005d6:	bd08      	pop	{r3, pc}
 80005d8:	40022000 	.word	0x40022000

080005dc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80005dc:	4a03      	ldr	r2, [pc, #12]	; (80005ec <HAL_IncTick+0x10>)
 80005de:	6811      	ldr	r1, [r2, #0]
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_IncTick+0x14>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	440b      	add	r3, r1
 80005e6:	6013      	str	r3, [r2, #0]
}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000144 	.word	0x20000144
 80005f0:	20000004 	.word	0x20000004

080005f4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80005f4:	4b01      	ldr	r3, [pc, #4]	; (80005fc <HAL_GetTick+0x8>)
 80005f6:	6818      	ldr	r0, [r3, #0]
}
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	20000144 	.word	0x20000144

08000600 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000600:	4a07      	ldr	r2, [pc, #28]	; (8000620 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000602:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000604:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800060c:	0200      	lsls	r0, r0, #8
 800060e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000612:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000614:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000618:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800061c:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800061e:	4770      	bx	lr
 8000620:	e000ed00 	.word	0xe000ed00

08000624 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000624:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <HAL_NVIC_SetPriority+0x60>)
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800062e:	f1c3 0407 	rsb	r4, r3, #7
 8000632:	2c04      	cmp	r4, #4
 8000634:	bf28      	it	cs
 8000636:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000638:	1d1d      	adds	r5, r3, #4
 800063a:	2d06      	cmp	r5, #6
 800063c:	d918      	bls.n	8000670 <HAL_NVIC_SetPriority+0x4c>
 800063e:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000640:	f04f 35ff 	mov.w	r5, #4294967295
 8000644:	fa05 f404 	lsl.w	r4, r5, r4
 8000648:	ea21 0104 	bic.w	r1, r1, r4
 800064c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800064e:	fa05 f303 	lsl.w	r3, r5, r3
 8000652:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000656:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000658:	2800      	cmp	r0, #0
 800065a:	db0b      	blt.n	8000674 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800065c:	0109      	lsls	r1, r1, #4
 800065e:	b2c9      	uxtb	r1, r1
 8000660:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000664:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000668:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800066c:	bc30      	pop	{r4, r5}
 800066e:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000670:	2300      	movs	r3, #0
 8000672:	e7e5      	b.n	8000640 <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000674:	f000 000f 	and.w	r0, r0, #15
 8000678:	0109      	lsls	r1, r1, #4
 800067a:	b2c9      	uxtb	r1, r1
 800067c:	4b02      	ldr	r3, [pc, #8]	; (8000688 <HAL_NVIC_SetPriority+0x64>)
 800067e:	5419      	strb	r1, [r3, r0]
 8000680:	e7f4      	b.n	800066c <HAL_NVIC_SetPriority+0x48>
 8000682:	bf00      	nop
 8000684:	e000ed00 	.word	0xe000ed00
 8000688:	e000ed14 	.word	0xe000ed14

0800068c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800068c:	2800      	cmp	r0, #0
 800068e:	db07      	blt.n	80006a0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000690:	f000 021f 	and.w	r2, r0, #31
 8000694:	0940      	lsrs	r0, r0, #5
 8000696:	2301      	movs	r3, #1
 8000698:	4093      	lsls	r3, r2
 800069a:	4a02      	ldr	r2, [pc, #8]	; (80006a4 <HAL_NVIC_EnableIRQ+0x18>)
 800069c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	e000e100 	.word	0xe000e100

080006a8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80006a8:	3801      	subs	r0, #1
 80006aa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ae:	d20a      	bcs.n	80006c6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <HAL_SYSTICK_Config+0x24>)
 80006b2:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006b4:	4a06      	ldr	r2, [pc, #24]	; (80006d0 <HAL_SYSTICK_Config+0x28>)
 80006b6:	21f0      	movs	r1, #240	; 0xf0
 80006b8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80006bc:	2000      	movs	r0, #0
 80006be:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80006c0:	2207      	movs	r2, #7
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80006c6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e010 	.word	0xe000e010
 80006d0:	e000ed00 	.word	0xe000ed00

080006d4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80006d4:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80006d6:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80006da:	2b02      	cmp	r3, #2
 80006dc:	d003      	beq.n	80006e6 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80006de:	2304      	movs	r3, #4
 80006e0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80006e2:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80006e4:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80006e6:	6802      	ldr	r2, [r0, #0]
 80006e8:	6813      	ldr	r3, [r2, #0]
 80006ea:	f023 030e 	bic.w	r3, r3, #14
 80006ee:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80006f0:	6802      	ldr	r2, [r0, #0]
 80006f2:	6813      	ldr	r3, [r2, #0]
 80006f4:	f023 0301 	bic.w	r3, r3, #1
 80006f8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80006fa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80006fc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80006fe:	2201      	movs	r2, #1
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8000706:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800070a:	2300      	movs	r3, #0
 800070c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000710:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8000712:	b113      	cbz	r3, 800071a <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8000714:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000716:	2000      	movs	r0, #0
 8000718:	e7e4      	b.n	80006e4 <HAL_DMA_Abort_IT+0x10>
 800071a:	2000      	movs	r0, #0
 800071c:	e7e2      	b.n	80006e4 <HAL_DMA_Abort_IT+0x10>
	...

08000720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000720:	b4f0      	push	{r4, r5, r6, r7}
 8000722:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8000724:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000726:	e036      	b.n	8000796 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000728:	2403      	movs	r4, #3
 800072a:	e000      	b.n	800072e <HAL_GPIO_Init+0xe>
 800072c:	2400      	movs	r4, #0
 800072e:	40b4      	lsls	r4, r6
 8000730:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000732:	3502      	adds	r5, #2
 8000734:	4e58      	ldr	r6, [pc, #352]	; (8000898 <HAL_GPIO_Init+0x178>)
 8000736:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800073a:	4c58      	ldr	r4, [pc, #352]	; (800089c <HAL_GPIO_Init+0x17c>)
 800073c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800073e:	43d4      	mvns	r4, r2
 8000740:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000744:	684f      	ldr	r7, [r1, #4]
 8000746:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800074a:	d001      	beq.n	8000750 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 800074c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8000750:	4d52      	ldr	r5, [pc, #328]	; (800089c <HAL_GPIO_Init+0x17c>)
 8000752:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8000754:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8000756:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800075a:	684f      	ldr	r7, [r1, #4]
 800075c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8000760:	d001      	beq.n	8000766 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8000762:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8000766:	4d4d      	ldr	r5, [pc, #308]	; (800089c <HAL_GPIO_Init+0x17c>)
 8000768:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800076a:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 800076c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000770:	684f      	ldr	r7, [r1, #4]
 8000772:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8000776:	d001      	beq.n	800077c <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8000778:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 800077c:	4d47      	ldr	r5, [pc, #284]	; (800089c <HAL_GPIO_Init+0x17c>)
 800077e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8000780:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8000782:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000784:	684e      	ldr	r6, [r1, #4]
 8000786:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800078a:	d001      	beq.n	8000790 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 800078c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8000790:	4a42      	ldr	r2, [pc, #264]	; (800089c <HAL_GPIO_Init+0x17c>)
 8000792:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8000794:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000796:	680a      	ldr	r2, [r1, #0]
 8000798:	fa32 f403 	lsrs.w	r4, r2, r3
 800079c:	d078      	beq.n	8000890 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800079e:	2401      	movs	r4, #1
 80007a0:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80007a2:	4022      	ands	r2, r4
 80007a4:	d0f6      	beq.n	8000794 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007a6:	684d      	ldr	r5, [r1, #4]
 80007a8:	2d02      	cmp	r5, #2
 80007aa:	d001      	beq.n	80007b0 <HAL_GPIO_Init+0x90>
 80007ac:	2d12      	cmp	r5, #18
 80007ae:	d110      	bne.n	80007d2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 80007b0:	08de      	lsrs	r6, r3, #3
 80007b2:	3608      	adds	r6, #8
 80007b4:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80007b8:	f003 0507 	and.w	r5, r3, #7
 80007bc:	00af      	lsls	r7, r5, #2
 80007be:	250f      	movs	r5, #15
 80007c0:	40bd      	lsls	r5, r7
 80007c2:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80007c6:	690d      	ldr	r5, [r1, #16]
 80007c8:	40bd      	lsls	r5, r7
 80007ca:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80007ce:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80007d2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80007d4:	005f      	lsls	r7, r3, #1
 80007d6:	2503      	movs	r5, #3
 80007d8:	40bd      	lsls	r5, r7
 80007da:	43ed      	mvns	r5, r5
 80007dc:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80007e0:	684e      	ldr	r6, [r1, #4]
 80007e2:	f006 0603 	and.w	r6, r6, #3
 80007e6:	40be      	lsls	r6, r7
 80007e8:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 80007ec:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80007ee:	684e      	ldr	r6, [r1, #4]
 80007f0:	f106 3cff 	add.w	ip, r6, #4294967295
 80007f4:	f1bc 0f01 	cmp.w	ip, #1
 80007f8:	d903      	bls.n	8000802 <HAL_GPIO_Init+0xe2>
 80007fa:	2e11      	cmp	r6, #17
 80007fc:	d001      	beq.n	8000802 <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80007fe:	2e12      	cmp	r6, #18
 8000800:	d110      	bne.n	8000824 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 8000802:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000804:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000808:	68ce      	ldr	r6, [r1, #12]
 800080a:	40be      	lsls	r6, r7
 800080c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8000810:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000812:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000814:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000818:	684e      	ldr	r6, [r1, #4]
 800081a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800081e:	409e      	lsls	r6, r3
 8000820:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8000822:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000824:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000826:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000828:	688c      	ldr	r4, [r1, #8]
 800082a:	40bc      	lsls	r4, r7
 800082c:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800082e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000830:	684c      	ldr	r4, [r1, #4]
 8000832:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8000836:	d0ad      	beq.n	8000794 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000838:	4c19      	ldr	r4, [pc, #100]	; (80008a0 <HAL_GPIO_Init+0x180>)
 800083a:	69a5      	ldr	r5, [r4, #24]
 800083c:	f045 0501 	orr.w	r5, r5, #1
 8000840:	61a5      	str	r5, [r4, #24]
 8000842:	69a4      	ldr	r4, [r4, #24]
 8000844:	f004 0401 	and.w	r4, r4, #1
 8000848:	9401      	str	r4, [sp, #4]
 800084a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800084c:	089d      	lsrs	r5, r3, #2
 800084e:	1cae      	adds	r6, r5, #2
 8000850:	4c11      	ldr	r4, [pc, #68]	; (8000898 <HAL_GPIO_Init+0x178>)
 8000852:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000856:	f003 0403 	and.w	r4, r3, #3
 800085a:	00a6      	lsls	r6, r4, #2
 800085c:	240f      	movs	r4, #15
 800085e:	40b4      	lsls	r4, r6
 8000860:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000864:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8000868:	f43f af60 	beq.w	800072c <HAL_GPIO_Init+0xc>
 800086c:	4c0d      	ldr	r4, [pc, #52]	; (80008a4 <HAL_GPIO_Init+0x184>)
 800086e:	42a0      	cmp	r0, r4
 8000870:	d00a      	beq.n	8000888 <HAL_GPIO_Init+0x168>
 8000872:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8000876:	42a0      	cmp	r0, r4
 8000878:	d008      	beq.n	800088c <HAL_GPIO_Init+0x16c>
 800087a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800087e:	42a0      	cmp	r0, r4
 8000880:	f43f af52 	beq.w	8000728 <HAL_GPIO_Init+0x8>
 8000884:	2405      	movs	r4, #5
 8000886:	e752      	b.n	800072e <HAL_GPIO_Init+0xe>
 8000888:	2401      	movs	r4, #1
 800088a:	e750      	b.n	800072e <HAL_GPIO_Init+0xe>
 800088c:	2402      	movs	r4, #2
 800088e:	e74e      	b.n	800072e <HAL_GPIO_Init+0xe>
  }
}
 8000890:	b002      	add	sp, #8
 8000892:	bcf0      	pop	{r4, r5, r6, r7}
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	40010000 	.word	0x40010000
 800089c:	40010400 	.word	0x40010400
 80008a0:	40021000 	.word	0x40021000
 80008a4:	48000400 	.word	0x48000400

080008a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80008a8:	b90a      	cbnz	r2, 80008ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80008aa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80008ac:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80008ae:	6181      	str	r1, [r0, #24]
 80008b0:	4770      	bx	lr
	...

080008b4 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008b4:	2800      	cmp	r0, #0
 80008b6:	f000 830d 	beq.w	8000ed4 <HAL_RCC_OscConfig+0x620>
{
 80008ba:	b570      	push	{r4, r5, r6, lr}
 80008bc:	b082      	sub	sp, #8
 80008be:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80008c0:	6803      	ldr	r3, [r0, #0]
 80008c2:	f013 0f01 	tst.w	r3, #1
 80008c6:	d03b      	beq.n	8000940 <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80008c8:	4bb5      	ldr	r3, [pc, #724]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 80008ca:	685b      	ldr	r3, [r3, #4]
 80008cc:	f003 030c 	and.w	r3, r3, #12
 80008d0:	2b04      	cmp	r3, #4
 80008d2:	d01e      	beq.n	8000912 <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80008d4:	4bb2      	ldr	r3, [pc, #712]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	f003 030c 	and.w	r3, r3, #12
 80008dc:	2b08      	cmp	r3, #8
 80008de:	d013      	beq.n	8000908 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008e0:	6863      	ldr	r3, [r4, #4]
 80008e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008e6:	d068      	beq.n	80009ba <HAL_RCC_OscConfig+0x106>
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	f040 8092 	bne.w	8000a12 <HAL_RCC_OscConfig+0x15e>
 80008ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80008f2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80008fc:	601a      	str	r2, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	e05d      	b.n	80009c4 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000908:	4ba5      	ldr	r3, [pc, #660]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000910:	d0e6      	beq.n	80008e0 <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000912:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000916:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800091a:	4ba1      	ldr	r3, [pc, #644]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 800091c:	6819      	ldr	r1, [r3, #0]
 800091e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000922:	fa93 f3a3 	rbit	r3, r3
 8000926:	fab3 f383 	clz	r3, r3
 800092a:	f003 031f 	and.w	r3, r3, #31
 800092e:	2201      	movs	r2, #1
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	420b      	tst	r3, r1
 8000936:	d003      	beq.n	8000940 <HAL_RCC_OscConfig+0x8c>
 8000938:	6863      	ldr	r3, [r4, #4]
 800093a:	2b00      	cmp	r3, #0
 800093c:	f000 82cc 	beq.w	8000ed8 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000940:	6823      	ldr	r3, [r4, #0]
 8000942:	f013 0f02 	tst.w	r3, #2
 8000946:	f000 80c6 	beq.w	8000ad6 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800094a:	4b95      	ldr	r3, [pc, #596]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	f013 0f0c 	tst.w	r3, #12
 8000952:	f000 809c 	beq.w	8000a8e <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000956:	4b92      	ldr	r3, [pc, #584]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	f003 030c 	and.w	r3, r3, #12
 800095e:	2b08      	cmp	r3, #8
 8000960:	f000 808f 	beq.w	8000a82 <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000964:	6923      	ldr	r3, [r4, #16]
 8000966:	2b00      	cmp	r3, #0
 8000968:	f000 80f3 	beq.w	8000b52 <HAL_RCC_OscConfig+0x29e>
 800096c:	2201      	movs	r2, #1
 800096e:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000972:	fab3 f383 	clz	r3, r3
 8000976:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800097a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000982:	f7ff fe37 	bl	80005f4 <HAL_GetTick>
 8000986:	4605      	mov	r5, r0
 8000988:	2302      	movs	r3, #2
 800098a:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800098e:	4b84      	ldr	r3, [pc, #528]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000990:	6819      	ldr	r1, [r3, #0]
 8000992:	2302      	movs	r3, #2
 8000994:	fa93 f3a3 	rbit	r3, r3
 8000998:	fab3 f383 	clz	r3, r3
 800099c:	f003 031f 	and.w	r3, r3, #31
 80009a0:	2201      	movs	r2, #1
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	420b      	tst	r3, r1
 80009a8:	f040 80c4 	bne.w	8000b34 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80009ac:	f7ff fe22 	bl	80005f4 <HAL_GetTick>
 80009b0:	1b40      	subs	r0, r0, r5
 80009b2:	2802      	cmp	r0, #2
 80009b4:	d9e8      	bls.n	8000988 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80009b6:	2003      	movs	r0, #3
 80009b8:	e295      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009ba:	4a79      	ldr	r2, [pc, #484]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 80009bc:	6813      	ldr	r3, [r2, #0]
 80009be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009c2:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80009c4:	4a76      	ldr	r2, [pc, #472]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 80009c6:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80009c8:	f023 030f 	bic.w	r3, r3, #15
 80009cc:	68a1      	ldr	r1, [r4, #8]
 80009ce:	430b      	orrs	r3, r1
 80009d0:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80009d2:	6863      	ldr	r3, [r4, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d036      	beq.n	8000a46 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 80009d8:	f7ff fe0c 	bl	80005f4 <HAL_GetTick>
 80009dc:	4605      	mov	r5, r0
 80009de:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e2:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009e6:	4b6e      	ldr	r3, [pc, #440]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 80009e8:	6819      	ldr	r1, [r3, #0]
 80009ea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009ee:	fa93 f3a3 	rbit	r3, r3
 80009f2:	fab3 f383 	clz	r3, r3
 80009f6:	f003 031f 	and.w	r3, r3, #31
 80009fa:	2201      	movs	r2, #1
 80009fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000a00:	420b      	tst	r3, r1
 8000a02:	d19d      	bne.n	8000940 <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a04:	f7ff fdf6 	bl	80005f4 <HAL_GetTick>
 8000a08:	1b40      	subs	r0, r0, r5
 8000a0a:	2864      	cmp	r0, #100	; 0x64
 8000a0c:	d9e7      	bls.n	80009de <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 8000a0e:	2003      	movs	r0, #3
 8000a10:	e269      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a16:	d009      	beq.n	8000a2c <HAL_RCC_OscConfig+0x178>
 8000a18:	4b61      	ldr	r3, [pc, #388]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000a1a:	681a      	ldr	r2, [r3, #0]
 8000a1c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	e7cb      	b.n	80009c4 <HAL_RCC_OscConfig+0x110>
 8000a2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000a30:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	681a      	ldr	r2, [r3, #0]
 8000a3e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000a42:	601a      	str	r2, [r3, #0]
 8000a44:	e7be      	b.n	80009c4 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8000a46:	f7ff fdd5 	bl	80005f4 <HAL_GetTick>
 8000a4a:	4605      	mov	r5, r0
 8000a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a50:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a54:	4b52      	ldr	r3, [pc, #328]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000a56:	6819      	ldr	r1, [r3, #0]
 8000a58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a5c:	fa93 f3a3 	rbit	r3, r3
 8000a60:	fab3 f383 	clz	r3, r3
 8000a64:	f003 031f 	and.w	r3, r3, #31
 8000a68:	2201      	movs	r2, #1
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	420b      	tst	r3, r1
 8000a70:	f43f af66 	beq.w	8000940 <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a74:	f7ff fdbe 	bl	80005f4 <HAL_GetTick>
 8000a78:	1b40      	subs	r0, r0, r5
 8000a7a:	2864      	cmp	r0, #100	; 0x64
 8000a7c:	d9e6      	bls.n	8000a4c <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 8000a7e:	2003      	movs	r0, #3
 8000a80:	e231      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000a82:	4b47      	ldr	r3, [pc, #284]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000a84:	685b      	ldr	r3, [r3, #4]
 8000a86:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8000a8a:	f47f af6b 	bne.w	8000964 <HAL_RCC_OscConfig+0xb0>
 8000a8e:	2302      	movs	r3, #2
 8000a90:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a94:	4b42      	ldr	r3, [pc, #264]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000a96:	6819      	ldr	r1, [r3, #0]
 8000a98:	2302      	movs	r3, #2
 8000a9a:	fa93 f3a3 	rbit	r3, r3
 8000a9e:	fab3 f383 	clz	r3, r3
 8000aa2:	f003 031f 	and.w	r3, r3, #31
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aac:	420b      	tst	r3, r1
 8000aae:	d004      	beq.n	8000aba <HAL_RCC_OscConfig+0x206>
 8000ab0:	6923      	ldr	r3, [r4, #16]
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d001      	beq.n	8000aba <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	e215      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000aba:	4839      	ldr	r0, [pc, #228]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000abc:	6803      	ldr	r3, [r0, #0]
 8000abe:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000ac2:	6961      	ldr	r1, [r4, #20]
 8000ac4:	22f8      	movs	r2, #248	; 0xf8
 8000ac6:	fa92 f2a2 	rbit	r2, r2
 8000aca:	fab2 f282 	clz	r2, r2
 8000ace:	fa01 f202 	lsl.w	r2, r1, r2
 8000ad2:	4313      	orrs	r3, r2
 8000ad4:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ad6:	6823      	ldr	r3, [r4, #0]
 8000ad8:	f013 0f08 	tst.w	r3, #8
 8000adc:	f000 808c 	beq.w	8000bf8 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ae0:	69a3      	ldr	r3, [r4, #24]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d060      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x2f4>
 8000ae6:	2101      	movs	r1, #1
 8000ae8:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000aec:	fab2 f282 	clz	r2, r2
 8000af0:	4b2c      	ldr	r3, [pc, #176]	; (8000ba4 <HAL_RCC_OscConfig+0x2f0>)
 8000af2:	4413      	add	r3, r2
 8000af4:	009b      	lsls	r3, r3, #2
 8000af6:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000af8:	f7ff fd7c 	bl	80005f4 <HAL_GetTick>
 8000afc:	4605      	mov	r5, r0
 8000afe:	2302      	movs	r3, #2
 8000b00:	fa93 f2a3 	rbit	r2, r3
 8000b04:	fa93 f2a3 	rbit	r2, r3
 8000b08:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000b0c:	4a24      	ldr	r2, [pc, #144]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000b0e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000b10:	fa93 f3a3 	rbit	r3, r3
 8000b14:	fab3 f383 	clz	r3, r3
 8000b18:	f003 031f 	and.w	r3, r3, #31
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	420b      	tst	r3, r1
 8000b24:	d168      	bne.n	8000bf8 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b26:	f7ff fd65 	bl	80005f4 <HAL_GetTick>
 8000b2a:	1b40      	subs	r0, r0, r5
 8000b2c:	2802      	cmp	r0, #2
 8000b2e:	d9e6      	bls.n	8000afe <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 8000b30:	2003      	movs	r0, #3
 8000b32:	e1d8      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000b34:	481a      	ldr	r0, [pc, #104]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000b36:	6803      	ldr	r3, [r0, #0]
 8000b38:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000b3c:	6961      	ldr	r1, [r4, #20]
 8000b3e:	22f8      	movs	r2, #248	; 0xf8
 8000b40:	fa92 f2a2 	rbit	r2, r2
 8000b44:	fab2 f282 	clz	r2, r2
 8000b48:	fa01 f202 	lsl.w	r2, r1, r2
 8000b4c:	4313      	orrs	r3, r2
 8000b4e:	6003      	str	r3, [r0, #0]
 8000b50:	e7c1      	b.n	8000ad6 <HAL_RCC_OscConfig+0x222>
 8000b52:	2301      	movs	r3, #1
 8000b54:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8000b58:	fab3 f383 	clz	r3, r3
 8000b5c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b60:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	2200      	movs	r2, #0
 8000b68:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b6a:	f7ff fd43 	bl	80005f4 <HAL_GetTick>
 8000b6e:	4605      	mov	r5, r0
 8000b70:	2302      	movs	r3, #2
 8000b72:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000b76:	4b0a      	ldr	r3, [pc, #40]	; (8000ba0 <HAL_RCC_OscConfig+0x2ec>)
 8000b78:	6819      	ldr	r1, [r3, #0]
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	fa93 f3a3 	rbit	r3, r3
 8000b80:	fab3 f383 	clz	r3, r3
 8000b84:	f003 031f 	and.w	r3, r3, #31
 8000b88:	2201      	movs	r2, #1
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	420b      	tst	r3, r1
 8000b90:	d0a1      	beq.n	8000ad6 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000b92:	f7ff fd2f 	bl	80005f4 <HAL_GetTick>
 8000b96:	1b40      	subs	r0, r0, r5
 8000b98:	2802      	cmp	r0, #2
 8000b9a:	d9e9      	bls.n	8000b70 <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 8000b9c:	2003      	movs	r0, #3
 8000b9e:	e1a2      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
 8000ba0:	40021000 	.word	0x40021000
 8000ba4:	10908120 	.word	0x10908120
 8000ba8:	2201      	movs	r2, #1
 8000baa:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	4bbc      	ldr	r3, [pc, #752]	; (8000ea4 <HAL_RCC_OscConfig+0x5f0>)
 8000bb4:	4413      	add	r3, r2
 8000bb6:	009b      	lsls	r3, r3, #2
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000bbc:	f7ff fd1a 	bl	80005f4 <HAL_GetTick>
 8000bc0:	4605      	mov	r5, r0
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	fa93 f2a3 	rbit	r2, r3
 8000bc8:	fa93 f2a3 	rbit	r2, r3
 8000bcc:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000bd0:	4ab5      	ldr	r2, [pc, #724]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000bd2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000bd4:	fa93 f3a3 	rbit	r3, r3
 8000bd8:	fab3 f383 	clz	r3, r3
 8000bdc:	f003 031f 	and.w	r3, r3, #31
 8000be0:	2201      	movs	r2, #1
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	420b      	tst	r3, r1
 8000be8:	d006      	beq.n	8000bf8 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000bea:	f7ff fd03 	bl	80005f4 <HAL_GetTick>
 8000bee:	1b40      	subs	r0, r0, r5
 8000bf0:	2802      	cmp	r0, #2
 8000bf2:	d9e6      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	e176      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000bf8:	6823      	ldr	r3, [r4, #0]
 8000bfa:	f013 0f04 	tst.w	r3, #4
 8000bfe:	f000 80b3 	beq.w	8000d68 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c02:	4ba9      	ldr	r3, [pc, #676]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000c04:	69db      	ldr	r3, [r3, #28]
 8000c06:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8000c0a:	d120      	bne.n	8000c4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c0c:	4ba6      	ldr	r3, [pc, #664]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000c0e:	69da      	ldr	r2, [r3, #28]
 8000c10:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c14:	61da      	str	r2, [r3, #28]
 8000c16:	69db      	ldr	r3, [r3, #28]
 8000c18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	9301      	str	r3, [sp, #4]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c20:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c22:	4ba2      	ldr	r3, [pc, #648]	; (8000eac <HAL_RCC_OscConfig+0x5f8>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c2a:	d012      	beq.n	8000c52 <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c2c:	68e3      	ldr	r3, [r4, #12]
 8000c2e:	2b01      	cmp	r3, #1
 8000c30:	d023      	beq.n	8000c7a <HAL_RCC_OscConfig+0x3c6>
 8000c32:	bb73      	cbnz	r3, 8000c92 <HAL_RCC_OscConfig+0x3de>
 8000c34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000c38:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000c3c:	6a1a      	ldr	r2, [r3, #32]
 8000c3e:	f022 0201 	bic.w	r2, r2, #1
 8000c42:	621a      	str	r2, [r3, #32]
 8000c44:	6a1a      	ldr	r2, [r3, #32]
 8000c46:	f022 0204 	bic.w	r2, r2, #4
 8000c4a:	621a      	str	r2, [r3, #32]
 8000c4c:	e01a      	b.n	8000c84 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 8000c4e:	2500      	movs	r5, #0
 8000c50:	e7e7      	b.n	8000c22 <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c52:	4a96      	ldr	r2, [pc, #600]	; (8000eac <HAL_RCC_OscConfig+0x5f8>)
 8000c54:	6813      	ldr	r3, [r2, #0]
 8000c56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c5a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8000c5c:	f7ff fcca 	bl	80005f4 <HAL_GetTick>
 8000c60:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c62:	4b92      	ldr	r3, [pc, #584]	; (8000eac <HAL_RCC_OscConfig+0x5f8>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f413 7f80 	tst.w	r3, #256	; 0x100
 8000c6a:	d1df      	bne.n	8000c2c <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000c6c:	f7ff fcc2 	bl	80005f4 <HAL_GetTick>
 8000c70:	1b80      	subs	r0, r0, r6
 8000c72:	2864      	cmp	r0, #100	; 0x64
 8000c74:	d9f5      	bls.n	8000c62 <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 8000c76:	2003      	movs	r0, #3
 8000c78:	e135      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c7a:	4a8b      	ldr	r2, [pc, #556]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000c7c:	6a13      	ldr	r3, [r2, #32]
 8000c7e:	f043 0301 	orr.w	r3, r3, #1
 8000c82:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000c84:	68e3      	ldr	r3, [r4, #12]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d041      	beq.n	8000d0e <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000c8a:	f7ff fcb3 	bl	80005f4 <HAL_GetTick>
 8000c8e:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000c90:	e02b      	b.n	8000cea <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000c92:	2b05      	cmp	r3, #5
 8000c94:	d009      	beq.n	8000caa <HAL_RCC_OscConfig+0x3f6>
 8000c96:	4b84      	ldr	r3, [pc, #528]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000c98:	6a1a      	ldr	r2, [r3, #32]
 8000c9a:	f022 0201 	bic.w	r2, r2, #1
 8000c9e:	621a      	str	r2, [r3, #32]
 8000ca0:	6a1a      	ldr	r2, [r3, #32]
 8000ca2:	f022 0204 	bic.w	r2, r2, #4
 8000ca6:	621a      	str	r2, [r3, #32]
 8000ca8:	e7ec      	b.n	8000c84 <HAL_RCC_OscConfig+0x3d0>
 8000caa:	4b7f      	ldr	r3, [pc, #508]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000cac:	6a1a      	ldr	r2, [r3, #32]
 8000cae:	f042 0204 	orr.w	r2, r2, #4
 8000cb2:	621a      	str	r2, [r3, #32]
 8000cb4:	6a1a      	ldr	r2, [r3, #32]
 8000cb6:	f042 0201 	orr.w	r2, r2, #1
 8000cba:	621a      	str	r2, [r3, #32]
 8000cbc:	e7e2      	b.n	8000c84 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cbe:	4b7a      	ldr	r3, [pc, #488]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000cc0:	6a19      	ldr	r1, [r3, #32]
 8000cc2:	2302      	movs	r3, #2
 8000cc4:	fa93 f3a3 	rbit	r3, r3
 8000cc8:	fab3 f383 	clz	r3, r3
 8000ccc:	f003 031f 	and.w	r3, r3, #31
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd6:	4219      	tst	r1, r3
 8000cd8:	d145      	bne.n	8000d66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000cda:	f7ff fc8b 	bl	80005f4 <HAL_GetTick>
 8000cde:	1b80      	subs	r0, r0, r6
 8000ce0:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ce4:	4298      	cmp	r0, r3
 8000ce6:	f200 80f9 	bhi.w	8000edc <HAL_RCC_OscConfig+0x628>
 8000cea:	2302      	movs	r3, #2
 8000cec:	fa93 f2a3 	rbit	r2, r3
 8000cf0:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000cf4:	fab3 f383 	clz	r3, r3
 8000cf8:	095b      	lsrs	r3, r3, #5
 8000cfa:	f043 0302 	orr.w	r3, r3, #2
 8000cfe:	2b02      	cmp	r3, #2
 8000d00:	d0dd      	beq.n	8000cbe <HAL_RCC_OscConfig+0x40a>
 8000d02:	2302      	movs	r3, #2
 8000d04:	fa93 f3a3 	rbit	r3, r3
 8000d08:	4b67      	ldr	r3, [pc, #412]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000d0a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d0c:	e7d9      	b.n	8000cc2 <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d0e:	f7ff fc71 	bl	80005f4 <HAL_GetTick>
 8000d12:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d14:	e015      	b.n	8000d42 <HAL_RCC_OscConfig+0x48e>
 8000d16:	4b64      	ldr	r3, [pc, #400]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000d18:	6a19      	ldr	r1, [r3, #32]
 8000d1a:	2302      	movs	r3, #2
 8000d1c:	fa93 f3a3 	rbit	r3, r3
 8000d20:	fab3 f383 	clz	r3, r3
 8000d24:	f003 031f 	and.w	r3, r3, #31
 8000d28:	2201      	movs	r2, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	4219      	tst	r1, r3
 8000d30:	d019      	beq.n	8000d66 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000d32:	f7ff fc5f 	bl	80005f4 <HAL_GetTick>
 8000d36:	1b80      	subs	r0, r0, r6
 8000d38:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	f200 80cf 	bhi.w	8000ee0 <HAL_RCC_OscConfig+0x62c>
 8000d42:	2302      	movs	r3, #2
 8000d44:	fa93 f2a3 	rbit	r2, r3
 8000d48:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000d4c:	fab3 f383 	clz	r3, r3
 8000d50:	095b      	lsrs	r3, r3, #5
 8000d52:	f043 0302 	orr.w	r3, r3, #2
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d0dd      	beq.n	8000d16 <HAL_RCC_OscConfig+0x462>
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	fa93 f3a3 	rbit	r3, r3
 8000d60:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000d62:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000d64:	e7d9      	b.n	8000d1a <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d66:	bbb5      	cbnz	r5, 8000dd6 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000d68:	69e3      	ldr	r3, [r4, #28]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	f000 80ba 	beq.w	8000ee4 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d70:	4a4d      	ldr	r2, [pc, #308]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000d72:	6852      	ldr	r2, [r2, #4]
 8000d74:	f002 020c 	and.w	r2, r2, #12
 8000d78:	2a08      	cmp	r2, #8
 8000d7a:	f000 8099 	beq.w	8000eb0 <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d02f      	beq.n	8000de2 <HAL_RCC_OscConfig+0x52e>
 8000d82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d86:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000d8a:	fab3 f383 	clz	r3, r3
 8000d8e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d92:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d96:	009b      	lsls	r3, r3, #2
 8000d98:	2200      	movs	r2, #0
 8000d9a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d9c:	f7ff fc2a 	bl	80005f4 <HAL_GetTick>
 8000da0:	4604      	mov	r4, r0
 8000da2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000da6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000daa:	4b3f      	ldr	r3, [pc, #252]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000dac:	6819      	ldr	r1, [r3, #0]
 8000dae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000db2:	fa93 f3a3 	rbit	r3, r3
 8000db6:	fab3 f383 	clz	r3, r3
 8000dba:	f003 031f 	and.w	r3, r3, #31
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc4:	4219      	tst	r1, r3
 8000dc6:	d06b      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000dc8:	f7ff fc14 	bl	80005f4 <HAL_GetTick>
 8000dcc:	1b00      	subs	r0, r0, r4
 8000dce:	2802      	cmp	r0, #2
 8000dd0:	d9e7      	bls.n	8000da2 <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 8000dd2:	2003      	movs	r0, #3
 8000dd4:	e087      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000dd6:	4a34      	ldr	r2, [pc, #208]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000dd8:	69d3      	ldr	r3, [r2, #28]
 8000dda:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000dde:	61d3      	str	r3, [r2, #28]
 8000de0:	e7c2      	b.n	8000d68 <HAL_RCC_OscConfig+0x4b4>
 8000de2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000de6:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000dea:	fab3 f383 	clz	r3, r3
 8000dee:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000df2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000dfc:	f7ff fbfa 	bl	80005f4 <HAL_GetTick>
 8000e00:	4605      	mov	r5, r0
 8000e02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e06:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000e0a:	4b27      	ldr	r3, [pc, #156]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000e0c:	6819      	ldr	r1, [r3, #0]
 8000e0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e12:	fa93 f3a3 	rbit	r3, r3
 8000e16:	fab3 f383 	clz	r3, r3
 8000e1a:	f003 031f 	and.w	r3, r3, #31
 8000e1e:	2201      	movs	r2, #1
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	4219      	tst	r1, r3
 8000e26:	d006      	beq.n	8000e36 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e28:	f7ff fbe4 	bl	80005f4 <HAL_GetTick>
 8000e2c:	1b40      	subs	r0, r0, r5
 8000e2e:	2802      	cmp	r0, #2
 8000e30:	d9e7      	bls.n	8000e02 <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 8000e32:	2003      	movs	r0, #3
 8000e34:	e057      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000e36:	491c      	ldr	r1, [pc, #112]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000e38:	684b      	ldr	r3, [r1, #4]
 8000e3a:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8000e3e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e40:	6a20      	ldr	r0, [r4, #32]
 8000e42:	4302      	orrs	r2, r0
 8000e44:	4313      	orrs	r3, r2
 8000e46:	604b      	str	r3, [r1, #4]
 8000e48:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000e4c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000e50:	fab3 f383 	clz	r3, r3
 8000e54:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000e58:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000e5c:	009b      	lsls	r3, r3, #2
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000e62:	f7ff fbc7 	bl	80005f4 <HAL_GetTick>
 8000e66:	4604      	mov	r4, r0
 8000e68:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e6c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000e70:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_RCC_OscConfig+0x5f4>)
 8000e72:	6819      	ldr	r1, [r3, #0]
 8000e74:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000e78:	fa93 f3a3 	rbit	r3, r3
 8000e7c:	fab3 f383 	clz	r3, r3
 8000e80:	f003 031f 	and.w	r3, r3, #31
 8000e84:	2201      	movs	r2, #1
 8000e86:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8a:	4219      	tst	r1, r3
 8000e8c:	d106      	bne.n	8000e9c <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000e8e:	f7ff fbb1 	bl	80005f4 <HAL_GetTick>
 8000e92:	1b00      	subs	r0, r0, r4
 8000e94:	2802      	cmp	r0, #2
 8000e96:	d9e7      	bls.n	8000e68 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8000e98:	2003      	movs	r0, #3
 8000e9a:	e024      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 8000e9c:	2000      	movs	r0, #0
 8000e9e:	e022      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
 8000ea0:	2000      	movs	r0, #0
 8000ea2:	e020      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
 8000ea4:	10908120 	.word	0x10908120
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d01a      	beq.n	8000eea <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 8000eb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ef4 <HAL_RCC_OscConfig+0x640>)
 8000eb6:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000eb8:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8000ebc:	6a22      	ldr	r2, [r4, #32]
 8000ebe:	4291      	cmp	r1, r2
 8000ec0:	d001      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 8000ec2:	2001      	movs	r0, #1
 8000ec4:	e00f      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8000ec6:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000eca:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d00e      	beq.n	8000eee <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	e008      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8000ed4:	2001      	movs	r0, #1
}
 8000ed6:	4770      	bx	lr
        return HAL_ERROR;
 8000ed8:	2001      	movs	r0, #1
 8000eda:	e004      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8000edc:	2003      	movs	r0, #3
 8000ede:	e002      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	e000      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8000ee4:	2000      	movs	r0, #0
}
 8000ee6:	b002      	add	sp, #8
 8000ee8:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8000eea:	2001      	movs	r0, #1
 8000eec:	e7fb      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8000eee:	2000      	movs	r0, #0
 8000ef0:	e7f9      	b.n	8000ee6 <HAL_RCC_OscConfig+0x632>
 8000ef2:	bf00      	nop
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000ef8:	4b16      	ldr	r3, [pc, #88]	; (8000f54 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000efa:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000efc:	f001 030c 	and.w	r3, r1, #12
 8000f00:	2b08      	cmp	r3, #8
 8000f02:	d124      	bne.n	8000f4e <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000f04:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000f08:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000f0c:	fa93 f3a3 	rbit	r3, r3
 8000f10:	fab3 f383 	clz	r3, r3
 8000f14:	fa22 f303 	lsr.w	r3, r2, r3
 8000f18:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_RCC_GetSysClockFreq+0x60>)
 8000f1a:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000f1c:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_RCC_GetSysClockFreq+0x5c>)
 8000f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f20:	f003 030f 	and.w	r3, r3, #15
 8000f24:	220f      	movs	r2, #15
 8000f26:	fa92 f2a2 	rbit	r2, r2
 8000f2a:	fab2 f282 	clz	r2, r2
 8000f2e:	40d3      	lsrs	r3, r2
 8000f30:	4a0a      	ldr	r2, [pc, #40]	; (8000f5c <HAL_RCC_GetSysClockFreq+0x64>)
 8000f32:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000f34:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8000f38:	d103      	bne.n	8000f42 <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_RCC_GetSysClockFreq+0x68>)
 8000f3c:	fb03 f000 	mul.w	r0, r3, r0
 8000f40:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000f42:	4b08      	ldr	r3, [pc, #32]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x6c>)
 8000f44:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f48:	fb00 f003 	mul.w	r0, r0, r3
 8000f4c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8000f4e:	4805      	ldr	r0, [pc, #20]	; (8000f64 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	40021000 	.word	0x40021000
 8000f58:	08001a78 	.word	0x08001a78
 8000f5c:	08001a88 	.word	0x08001a88
 8000f60:	003d0900 	.word	0x003d0900
 8000f64:	007a1200 	.word	0x007a1200

08000f68 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8000f68:	2800      	cmp	r0, #0
 8000f6a:	f000 80c1 	beq.w	80010f0 <HAL_RCC_ClockConfig+0x188>
{
 8000f6e:	b570      	push	{r4, r5, r6, lr}
 8000f70:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f72:	4b61      	ldr	r3, [pc, #388]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d20c      	bcs.n	8000f98 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f7e:	4a5e      	ldr	r2, [pc, #376]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8000f80:	6813      	ldr	r3, [r2, #0]
 8000f82:	f023 0307 	bic.w	r3, r3, #7
 8000f86:	430b      	orrs	r3, r1
 8000f88:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000f8a:	6813      	ldr	r3, [r2, #0]
 8000f8c:	f003 0307 	and.w	r3, r3, #7
 8000f90:	428b      	cmp	r3, r1
 8000f92:	d001      	beq.n	8000f98 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8000f94:	2001      	movs	r0, #1
}
 8000f96:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000f98:	6823      	ldr	r3, [r4, #0]
 8000f9a:	f013 0f02 	tst.w	r3, #2
 8000f9e:	d006      	beq.n	8000fae <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000fa0:	4a56      	ldr	r2, [pc, #344]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 8000fa2:	6853      	ldr	r3, [r2, #4]
 8000fa4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000fa8:	68a0      	ldr	r0, [r4, #8]
 8000faa:	4303      	orrs	r3, r0
 8000fac:	6053      	str	r3, [r2, #4]
 8000fae:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	f013 0f01 	tst.w	r3, #1
 8000fb6:	d05a      	beq.n	800106e <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000fb8:	6863      	ldr	r3, [r4, #4]
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d02d      	beq.n	800101a <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d040      	beq.n	8001044 <HAL_RCC_ClockConfig+0xdc>
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000fc8:	4a4c      	ldr	r2, [pc, #304]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 8000fca:	6810      	ldr	r0, [r2, #0]
 8000fcc:	2202      	movs	r2, #2
 8000fce:	fa92 f2a2 	rbit	r2, r2
 8000fd2:	fab2 f282 	clz	r2, r2
 8000fd6:	f002 021f 	and.w	r2, r2, #31
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4210      	tst	r0, r2
 8000fe2:	f000 8087 	beq.w	80010f4 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000fe6:	4945      	ldr	r1, [pc, #276]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 8000fe8:	684a      	ldr	r2, [r1, #4]
 8000fea:	f022 0203 	bic.w	r2, r2, #3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8000ff2:	f7ff faff 	bl	80005f4 <HAL_GetTick>
 8000ff6:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 030c 	and.w	r3, r3, #12
 8001000:	6862      	ldr	r2, [r4, #4]
 8001002:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001006:	d032      	beq.n	800106e <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001008:	f7ff faf4 	bl	80005f4 <HAL_GetTick>
 800100c:	1b80      	subs	r0, r0, r6
 800100e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001012:	4298      	cmp	r0, r3
 8001014:	d9f0      	bls.n	8000ff8 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8001016:	2003      	movs	r0, #3
 8001018:	e7bd      	b.n	8000f96 <HAL_RCC_ClockConfig+0x2e>
 800101a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101e:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	4a36      	ldr	r2, [pc, #216]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 8001024:	6810      	ldr	r0, [r2, #0]
 8001026:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800102a:	fa92 f2a2 	rbit	r2, r2
 800102e:	fab2 f282 	clz	r2, r2
 8001032:	f002 021f 	and.w	r2, r2, #31
 8001036:	2101      	movs	r1, #1
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	4202      	tst	r2, r0
 800103e:	d1d2      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8001040:	2001      	movs	r0, #1
 8001042:	e7a8      	b.n	8000f96 <HAL_RCC_ClockConfig+0x2e>
 8001044:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001048:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800104c:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 800104e:	6810      	ldr	r0, [r2, #0]
 8001050:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001054:	fa92 f2a2 	rbit	r2, r2
 8001058:	fab2 f282 	clz	r2, r2
 800105c:	f002 021f 	and.w	r2, r2, #31
 8001060:	2101      	movs	r1, #1
 8001062:	fa01 f202 	lsl.w	r2, r1, r2
 8001066:	4210      	tst	r0, r2
 8001068:	d1bd      	bne.n	8000fe6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
 800106c:	e793      	b.n	8000f96 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800106e:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	42ab      	cmp	r3, r5
 8001078:	d90c      	bls.n	8001094 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800107a:	4a1f      	ldr	r2, [pc, #124]	; (80010f8 <HAL_RCC_ClockConfig+0x190>)
 800107c:	6813      	ldr	r3, [r2, #0]
 800107e:	f023 0307 	bic.w	r3, r3, #7
 8001082:	432b      	orrs	r3, r5
 8001084:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001086:	6813      	ldr	r3, [r2, #0]
 8001088:	f003 0307 	and.w	r3, r3, #7
 800108c:	42ab      	cmp	r3, r5
 800108e:	d001      	beq.n	8001094 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8001090:	2001      	movs	r0, #1
 8001092:	e780      	b.n	8000f96 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	f013 0f04 	tst.w	r3, #4
 800109a:	d006      	beq.n	80010aa <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800109c:	4a17      	ldr	r2, [pc, #92]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 800109e:	6853      	ldr	r3, [r2, #4]
 80010a0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80010a4:	68e1      	ldr	r1, [r4, #12]
 80010a6:	430b      	orrs	r3, r1
 80010a8:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010aa:	6823      	ldr	r3, [r4, #0]
 80010ac:	f013 0f08 	tst.w	r3, #8
 80010b0:	d007      	beq.n	80010c2 <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010b2:	4a12      	ldr	r2, [pc, #72]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 80010b4:	6853      	ldr	r3, [r2, #4]
 80010b6:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80010ba:	6921      	ldr	r1, [r4, #16]
 80010bc:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80010c0:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80010c2:	f7ff ff19 	bl	8000ef8 <HAL_RCC_GetSysClockFreq>
 80010c6:	4b0d      	ldr	r3, [pc, #52]	; (80010fc <HAL_RCC_ClockConfig+0x194>)
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80010ce:	22f0      	movs	r2, #240	; 0xf0
 80010d0:	fa92 f2a2 	rbit	r2, r2
 80010d4:	fab2 f282 	clz	r2, r2
 80010d8:	40d3      	lsrs	r3, r2
 80010da:	4a09      	ldr	r2, [pc, #36]	; (8001100 <HAL_RCC_ClockConfig+0x198>)
 80010dc:	5cd3      	ldrb	r3, [r2, r3]
 80010de:	40d8      	lsrs	r0, r3
 80010e0:	4b08      	ldr	r3, [pc, #32]	; (8001104 <HAL_RCC_ClockConfig+0x19c>)
 80010e2:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <HAL_RCC_ClockConfig+0x1a0>)
 80010e6:	6818      	ldr	r0, [r3, #0]
 80010e8:	f7ff fa40 	bl	800056c <HAL_InitTick>
  return HAL_OK;
 80010ec:	2000      	movs	r0, #0
 80010ee:	e752      	b.n	8000f96 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80010f0:	2001      	movs	r0, #1
}
 80010f2:	4770      	bx	lr
        return HAL_ERROR;
 80010f4:	2001      	movs	r0, #1
 80010f6:	e74e      	b.n	8000f96 <HAL_RCC_ClockConfig+0x2e>
 80010f8:	40022000 	.word	0x40022000
 80010fc:	40021000 	.word	0x40021000
 8001100:	08001a60 	.word	0x08001a60
 8001104:	20000000 	.word	0x20000000
 8001108:	20000008 	.word	0x20000008

0800110c <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 800110c:	4b01      	ldr	r3, [pc, #4]	; (8001114 <HAL_RCC_GetHCLKFreq+0x8>)
 800110e:	6818      	ldr	r0, [r3, #0]
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	20000000 	.word	0x20000000

08001118 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001118:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800111a:	f7ff fff7 	bl	800110c <HAL_RCC_GetHCLKFreq>
 800111e:	4b07      	ldr	r3, [pc, #28]	; (800113c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001120:	685b      	ldr	r3, [r3, #4]
 8001122:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001126:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800112a:	fa92 f2a2 	rbit	r2, r2
 800112e:	fab2 f282 	clz	r2, r2
 8001132:	40d3      	lsrs	r3, r2
 8001134:	4a02      	ldr	r2, [pc, #8]	; (8001140 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001136:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001138:	40d8      	lsrs	r0, r3
 800113a:	bd08      	pop	{r3, pc}
 800113c:	40021000 	.word	0x40021000
 8001140:	08001a70 	.word	0x08001a70

08001144 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001144:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001146:	f7ff ffe1 	bl	800110c <HAL_RCC_GetHCLKFreq>
 800114a:	4b07      	ldr	r3, [pc, #28]	; (8001168 <HAL_RCC_GetPCLK2Freq+0x24>)
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001152:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001156:	fa92 f2a2 	rbit	r2, r2
 800115a:	fab2 f282 	clz	r2, r2
 800115e:	40d3      	lsrs	r3, r2
 8001160:	4a02      	ldr	r2, [pc, #8]	; (800116c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001162:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001164:	40d8      	lsrs	r0, r3
 8001166:	bd08      	pop	{r3, pc}
 8001168:	40021000 	.word	0x40021000
 800116c:	08001a70 	.word	0x08001a70

08001170 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001172:	b083      	sub	sp, #12
 8001174:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001176:	6803      	ldr	r3, [r0, #0]
 8001178:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800117c:	d044      	beq.n	8001208 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117e:	4b64      	ldr	r3, [pc, #400]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001180:	69db      	ldr	r3, [r3, #28]
 8001182:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001186:	d179      	bne.n	800127c <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	4b61      	ldr	r3, [pc, #388]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800118a:	69da      	ldr	r2, [r3, #28]
 800118c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001190:	61da      	str	r2, [r3, #28]
 8001192:	69db      	ldr	r3, [r3, #28]
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	9301      	str	r3, [sp, #4]
 800119a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800119c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800119e:	4b5d      	ldr	r3, [pc, #372]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80011a6:	d06b      	beq.n	8001280 <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80011a8:	4b59      	ldr	r3, [pc, #356]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80011aa:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011ac:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80011b0:	d021      	beq.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
 80011b2:	6862      	ldr	r2, [r4, #4]
 80011b4:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80011b8:	429a      	cmp	r2, r3
 80011ba:	d01c      	beq.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80011bc:	4854      	ldr	r0, [pc, #336]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80011be:	6a01      	ldr	r1, [r0, #32]
 80011c0:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 80011c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c8:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80011cc:	fab2 f282 	clz	r2, r2
 80011d0:	4f51      	ldr	r7, [pc, #324]	; (8001318 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 80011d2:	443a      	add	r2, r7
 80011d4:	0092      	lsls	r2, r2, #2
 80011d6:	f04f 0c01 	mov.w	ip, #1
 80011da:	f8c2 c000 	str.w	ip, [r2]
 80011de:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80011e2:	fab3 f383 	clz	r3, r3
 80011e6:	443b      	add	r3, r7
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80011ee:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80011f0:	f011 0f01 	tst.w	r1, #1
 80011f4:	d158      	bne.n	80012a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80011f6:	4a46      	ldr	r2, [pc, #280]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80011f8:	6a13      	ldr	r3, [r2, #32]
 80011fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011fe:	6861      	ldr	r1, [r4, #4]
 8001200:	430b      	orrs	r3, r1
 8001202:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001204:	2d00      	cmp	r5, #0
 8001206:	d17a      	bne.n	80012fe <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001208:	6823      	ldr	r3, [r4, #0]
 800120a:	f013 0f01 	tst.w	r3, #1
 800120e:	d006      	beq.n	800121e <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001210:	4a3f      	ldr	r2, [pc, #252]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001212:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001214:	f023 0303 	bic.w	r3, r3, #3
 8001218:	68a1      	ldr	r1, [r4, #8]
 800121a:	430b      	orrs	r3, r1
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	f013 0f20 	tst.w	r3, #32
 8001224:	d006      	beq.n	8001234 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001226:	4a3a      	ldr	r2, [pc, #232]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001228:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800122a:	f023 0310 	bic.w	r3, r3, #16
 800122e:	68e1      	ldr	r1, [r4, #12]
 8001230:	430b      	orrs	r3, r1
 8001232:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	f013 0f80 	tst.w	r3, #128	; 0x80
 800123a:	d006      	beq.n	800124a <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800123c:	4a34      	ldr	r2, [pc, #208]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800123e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001240:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001244:	6921      	ldr	r1, [r4, #16]
 8001246:	430b      	orrs	r3, r1
 8001248:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800124a:	6823      	ldr	r3, [r4, #0]
 800124c:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001250:	d006      	beq.n	8001260 <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001254:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001256:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800125a:	6961      	ldr	r1, [r4, #20]
 800125c:	430b      	orrs	r3, r1
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001266:	d051      	beq.n	800130c <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001268:	4a29      	ldr	r2, [pc, #164]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800126a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800126c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001270:	69a1      	ldr	r1, [r4, #24]
 8001272:	430b      	orrs	r3, r1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001276:	2000      	movs	r0, #0
}
 8001278:	b003      	add	sp, #12
 800127a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 800127c:	2500      	movs	r5, #0
 800127e:	e78e      	b.n	800119e <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001280:	4a24      	ldr	r2, [pc, #144]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001282:	6813      	ldr	r3, [r2, #0]
 8001284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001288:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800128a:	f7ff f9b3 	bl	80005f4 <HAL_GetTick>
 800128e:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001290:	4b20      	ldr	r3, [pc, #128]	; (8001314 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001298:	d186      	bne.n	80011a8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129a:	f7ff f9ab 	bl	80005f4 <HAL_GetTick>
 800129e:	1b80      	subs	r0, r0, r6
 80012a0:	2864      	cmp	r0, #100	; 0x64
 80012a2:	d9f5      	bls.n	8001290 <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 80012a4:	2003      	movs	r0, #3
 80012a6:	e7e7      	b.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 80012a8:	f7ff f9a4 	bl	80005f4 <HAL_GetTick>
 80012ac:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ae:	e014      	b.n	80012da <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80012b0:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80012b2:	6a19      	ldr	r1, [r3, #32]
 80012b4:	2302      	movs	r3, #2
 80012b6:	fa93 f3a3 	rbit	r3, r3
 80012ba:	fab3 f383 	clz	r3, r3
 80012be:	f003 031f 	and.w	r3, r3, #31
 80012c2:	2201      	movs	r2, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	420b      	tst	r3, r1
 80012ca:	d194      	bne.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012cc:	f7ff f992 	bl	80005f4 <HAL_GetTick>
 80012d0:	1b80      	subs	r0, r0, r6
 80012d2:	f241 3388 	movw	r3, #5000	; 0x1388
 80012d6:	4298      	cmp	r0, r3
 80012d8:	d816      	bhi.n	8001308 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80012da:	2302      	movs	r3, #2
 80012dc:	fa93 f2a3 	rbit	r2, r3
 80012e0:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e4:	fab3 f383 	clz	r3, r3
 80012e8:	095b      	lsrs	r3, r3, #5
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d0de      	beq.n	80012b0 <HAL_RCCEx_PeriphCLKConfig+0x140>
 80012f2:	2302      	movs	r3, #2
 80012f4:	fa93 f3a3 	rbit	r3, r3
 80012f8:	4b05      	ldr	r3, [pc, #20]	; (8001310 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80012fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80012fc:	e7da      	b.n	80012b4 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012fe:	69d3      	ldr	r3, [r2, #28]
 8001300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001304:	61d3      	str	r3, [r2, #28]
 8001306:	e77f      	b.n	8001208 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8001308:	2003      	movs	r0, #3
 800130a:	e7b5      	b.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 800130c:	2000      	movs	r0, #0
 800130e:	e7b3      	b.n	8001278 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8001310:	40021000 	.word	0x40021000
 8001314:	40007000 	.word	0x40007000
 8001318:	10908100 	.word	0x10908100

0800131c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800131c:	6802      	ldr	r2, [r0, #0]
 800131e:	6813      	ldr	r3, [r2, #0]
 8001320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001324:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001326:	6802      	ldr	r2, [r0, #0]
 8001328:	6893      	ldr	r3, [r2, #8]
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001330:	2320      	movs	r3, #32
 8001332:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8001334:	2300      	movs	r3, #0
 8001336:	6603      	str	r3, [r0, #96]	; 0x60
}
 8001338:	4770      	bx	lr

0800133a <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800133a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800133c:	2b21      	cmp	r3, #33	; 0x21
 800133e:	d000      	beq.n	8001342 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8001340:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8001342:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001346:	b29b      	uxth	r3, r3
 8001348:	b16b      	cbz	r3, 8001366 <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800134a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800134c:	6803      	ldr	r3, [r0, #0]
 800134e:	7812      	ldrb	r2, [r2, #0]
 8001350:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8001352:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001354:	3301      	adds	r3, #1
 8001356:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001358:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800135c:	3b01      	subs	r3, #1
 800135e:	b29b      	uxth	r3, r3
 8001360:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8001364:	e7ec      	b.n	8001340 <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001366:	6802      	ldr	r2, [r0, #0]
 8001368:	6813      	ldr	r3, [r2, #0]
 800136a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800136e:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001370:	6802      	ldr	r2, [r0, #0]
 8001372:	6813      	ldr	r3, [r2, #0]
 8001374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001378:	6013      	str	r3, [r2, #0]
 800137a:	4770      	bx	lr

0800137c <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800137c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800137e:	2b21      	cmp	r3, #33	; 0x21
 8001380:	d000      	beq.n	8001384 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8001382:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8001384:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001388:	b29b      	uxth	r3, r3
 800138a:	b17b      	cbz	r3, 80013ac <UART_TxISR_16BIT+0x30>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800138c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800138e:	881b      	ldrh	r3, [r3, #0]
 8001390:	6802      	ldr	r2, [r0, #0]
 8001392:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001396:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8001398:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800139a:	3302      	adds	r3, #2
 800139c:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800139e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80013a2:	3b01      	subs	r3, #1
 80013a4:	b29b      	uxth	r3, r3
 80013a6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 80013aa:	e7ea      	b.n	8001382 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80013ac:	6802      	ldr	r2, [r0, #0]
 80013ae:	6813      	ldr	r3, [r2, #0]
 80013b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013b4:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80013b6:	6802      	ldr	r2, [r0, #0]
 80013b8:	6813      	ldr	r3, [r2, #0]
 80013ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4770      	bx	lr
	...

080013c4 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80013c4:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80013c6:	2b20      	cmp	r3, #32
 80013c8:	d128      	bne.n	800141c <HAL_UART_Transmit_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 80013ca:	b349      	cbz	r1, 8001420 <HAL_UART_Transmit_IT+0x5c>
 80013cc:	b352      	cbz	r2, 8001424 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 80013ce:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d028      	beq.n	8001428 <HAL_UART_Transmit_IT+0x64>
 80013d6:	2301      	movs	r3, #1
 80013d8:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 80013dc:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80013de:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80013e2:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 80013e6:	2300      	movs	r3, #0
 80013e8:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013ea:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80013ec:	2321      	movs	r3, #33	; 0x21
 80013ee:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80013f0:	6883      	ldr	r3, [r0, #8]
 80013f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80013f6:	d00b      	beq.n	8001410 <HAL_UART_Transmit_IT+0x4c>
      huart->TxISR = UART_TxISR_8BIT;
 80013f8:	4b0c      	ldr	r3, [pc, #48]	; (800142c <HAL_UART_Transmit_IT+0x68>)
 80013fa:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 80013fc:	2300      	movs	r3, #0
 80013fe:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8001402:	6801      	ldr	r1, [r0, #0]
 8001404:	680a      	ldr	r2, [r1, #0]
 8001406:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800140a:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 800140c:	4618      	mov	r0, r3
 800140e:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001410:	6903      	ldr	r3, [r0, #16]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d1f0      	bne.n	80013f8 <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_UART_Transmit_IT+0x6c>)
 8001418:	6643      	str	r3, [r0, #100]	; 0x64
 800141a:	e7ef      	b.n	80013fc <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 800141c:	2002      	movs	r0, #2
 800141e:	4770      	bx	lr
      return HAL_ERROR;
 8001420:	2001      	movs	r0, #1
 8001422:	4770      	bx	lr
 8001424:	2001      	movs	r0, #1
 8001426:	4770      	bx	lr
    __HAL_LOCK(huart);
 8001428:	2002      	movs	r0, #2
}
 800142a:	4770      	bx	lr
 800142c:	0800133b 	.word	0x0800133b
 8001430:	0800137d 	.word	0x0800137d

08001434 <HAL_UART_TxCpltCallback>:
}
 8001434:	4770      	bx	lr

08001436 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001436:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001438:	6801      	ldr	r1, [r0, #0]
 800143a:	680a      	ldr	r2, [r1, #0]
 800143c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001440:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001442:	2220      	movs	r2, #32
 8001444:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8001446:	2200      	movs	r2, #0
 8001448:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800144a:	f7ff fff3 	bl	8001434 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800144e:	bd08      	pop	{r3, pc}

08001450 <HAL_UART_ErrorCallback>:
}
 8001450:	4770      	bx	lr
	...

08001454 <HAL_UART_IRQHandler>:
{
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001458:	6801      	ldr	r1, [r0, #0]
 800145a:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800145c:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800145e:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8001460:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8001464:	401a      	ands	r2, r3
 8001466:	d10c      	bne.n	8001482 <HAL_UART_IRQHandler+0x2e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8001468:	f013 0f20 	tst.w	r3, #32
 800146c:	d009      	beq.n	8001482 <HAL_UART_IRQHandler+0x2e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800146e:	f010 0f20 	tst.w	r0, #32
 8001472:	d006      	beq.n	8001482 <HAL_UART_IRQHandler+0x2e>
      if (huart->RxISR != NULL)
 8001474:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8001476:	2b00      	cmp	r3, #0
 8001478:	f000 80a1 	beq.w	80015be <HAL_UART_IRQHandler+0x16a>
        huart->RxISR(huart);
 800147c:	4620      	mov	r0, r4
 800147e:	4798      	blx	r3
 8001480:	e09d      	b.n	80015be <HAL_UART_IRQHandler+0x16a>
  if ((errorflags != 0U)
 8001482:	2a00      	cmp	r2, #0
 8001484:	d07d      	beq.n	8001582 <HAL_UART_IRQHandler+0x12e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001486:	f015 0201 	ands.w	r2, r5, #1
 800148a:	d102      	bne.n	8001492 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800148c:	f410 7f90 	tst.w	r0, #288	; 0x120
 8001490:	d077      	beq.n	8001582 <HAL_UART_IRQHandler+0x12e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001492:	f013 0f01 	tst.w	r3, #1
 8001496:	d007      	beq.n	80014a8 <HAL_UART_IRQHandler+0x54>
 8001498:	f410 7f80 	tst.w	r0, #256	; 0x100
 800149c:	d004      	beq.n	80014a8 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800149e:	2501      	movs	r5, #1
 80014a0:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80014a2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80014a4:	4329      	orrs	r1, r5
 80014a6:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80014a8:	f013 0f02 	tst.w	r3, #2
 80014ac:	d007      	beq.n	80014be <HAL_UART_IRQHandler+0x6a>
 80014ae:	b132      	cbz	r2, 80014be <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80014b0:	6821      	ldr	r1, [r4, #0]
 80014b2:	2502      	movs	r5, #2
 80014b4:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80014b6:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80014b8:	f041 0104 	orr.w	r1, r1, #4
 80014bc:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80014be:	f013 0f04 	tst.w	r3, #4
 80014c2:	d007      	beq.n	80014d4 <HAL_UART_IRQHandler+0x80>
 80014c4:	b132      	cbz	r2, 80014d4 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80014c6:	6821      	ldr	r1, [r4, #0]
 80014c8:	2504      	movs	r5, #4
 80014ca:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80014cc:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80014ce:	f041 0102 	orr.w	r1, r1, #2
 80014d2:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80014d4:	f013 0f08 	tst.w	r3, #8
 80014d8:	d009      	beq.n	80014ee <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80014da:	f010 0f20 	tst.w	r0, #32
 80014de:	d100      	bne.n	80014e2 <HAL_UART_IRQHandler+0x8e>
 80014e0:	b12a      	cbz	r2, 80014ee <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80014e2:	6822      	ldr	r2, [r4, #0]
 80014e4:	2108      	movs	r1, #8
 80014e6:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80014e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80014ea:	430a      	orrs	r2, r1
 80014ec:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80014ee:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80014f2:	d00a      	beq.n	800150a <HAL_UART_IRQHandler+0xb6>
 80014f4:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80014f8:	d007      	beq.n	800150a <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80014fa:	6822      	ldr	r2, [r4, #0]
 80014fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001500:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8001502:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8001504:	f042 0220 	orr.w	r2, r2, #32
 8001508:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800150a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800150c:	2a00      	cmp	r2, #0
 800150e:	d056      	beq.n	80015be <HAL_UART_IRQHandler+0x16a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8001510:	f013 0f20 	tst.w	r3, #32
 8001514:	d006      	beq.n	8001524 <HAL_UART_IRQHandler+0xd0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8001516:	f010 0f20 	tst.w	r0, #32
 800151a:	d003      	beq.n	8001524 <HAL_UART_IRQHandler+0xd0>
        if (huart->RxISR != NULL)
 800151c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800151e:	b10b      	cbz	r3, 8001524 <HAL_UART_IRQHandler+0xd0>
          huart->RxISR(huart);
 8001520:	4620      	mov	r0, r4
 8001522:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8001524:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8001526:	6823      	ldr	r3, [r4, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800152e:	d102      	bne.n	8001536 <HAL_UART_IRQHandler+0xe2>
 8001530:	f012 0f28 	tst.w	r2, #40	; 0x28
 8001534:	d01f      	beq.n	8001576 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8001536:	4620      	mov	r0, r4
 8001538:	f7ff fef0 	bl	800131c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800153c:	6823      	ldr	r3, [r4, #0]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001544:	d013      	beq.n	800156e <HAL_UART_IRQHandler+0x11a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001546:	689a      	ldr	r2, [r3, #8]
 8001548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800154c:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800154e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001550:	b14b      	cbz	r3, 8001566 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001552:	4a1d      	ldr	r2, [pc, #116]	; (80015c8 <HAL_UART_IRQHandler+0x174>)
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001556:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001558:	f7ff f8bc 	bl	80006d4 <HAL_DMA_Abort_IT>
 800155c:	b378      	cbz	r0, 80015be <HAL_UART_IRQHandler+0x16a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800155e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001560:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001562:	4798      	blx	r3
 8001564:	e02b      	b.n	80015be <HAL_UART_IRQHandler+0x16a>
            HAL_UART_ErrorCallback(huart);
 8001566:	4620      	mov	r0, r4
 8001568:	f7ff ff72 	bl	8001450 <HAL_UART_ErrorCallback>
 800156c:	e027      	b.n	80015be <HAL_UART_IRQHandler+0x16a>
          HAL_UART_ErrorCallback(huart);
 800156e:	4620      	mov	r0, r4
 8001570:	f7ff ff6e 	bl	8001450 <HAL_UART_ErrorCallback>
 8001574:	e023      	b.n	80015be <HAL_UART_IRQHandler+0x16a>
        HAL_UART_ErrorCallback(huart);
 8001576:	4620      	mov	r0, r4
 8001578:	f7ff ff6a 	bl	8001450 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800157c:	2300      	movs	r3, #0
 800157e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8001580:	e01d      	b.n	80015be <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8001582:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8001586:	d002      	beq.n	800158e <HAL_UART_IRQHandler+0x13a>
 8001588:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 800158c:	d10a      	bne.n	80015a4 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800158e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001592:	d00e      	beq.n	80015b2 <HAL_UART_IRQHandler+0x15e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8001594:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001598:	d00b      	beq.n	80015b2 <HAL_UART_IRQHandler+0x15e>
    if (huart->TxISR != NULL)
 800159a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800159c:	b17b      	cbz	r3, 80015be <HAL_UART_IRQHandler+0x16a>
      huart->TxISR(huart);
 800159e:	4620      	mov	r0, r4
 80015a0:	4798      	blx	r3
 80015a2:	e00c      	b.n	80015be <HAL_UART_IRQHandler+0x16a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80015a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80015a8:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80015aa:	4620      	mov	r0, r4
 80015ac:	f000 fa1e 	bl	80019ec <HAL_UARTEx_WakeupCallback>
    return;
 80015b0:	e005      	b.n	80015be <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80015b2:	f013 0f40 	tst.w	r3, #64	; 0x40
 80015b6:	d002      	beq.n	80015be <HAL_UART_IRQHandler+0x16a>
 80015b8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80015bc:	d100      	bne.n	80015c0 <HAL_UART_IRQHandler+0x16c>
}
 80015be:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80015c0:	4620      	mov	r0, r4
 80015c2:	f7ff ff38 	bl	8001436 <UART_EndTransmit_IT>
    return;
 80015c6:	e7fa      	b.n	80015be <HAL_UART_IRQHandler+0x16a>
 80015c8:	080015cd 	.word	0x080015cd

080015cc <UART_DMAAbortOnError>:
{
 80015cc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80015ce:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80015d6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80015da:	f7ff ff39 	bl	8001450 <HAL_UART_ErrorCallback>
}
 80015de:	bd08      	pop	{r3, pc}

080015e0 <UART_SetConfig>:
{
 80015e0:	b510      	push	{r4, lr}
 80015e2:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015e4:	6883      	ldr	r3, [r0, #8]
 80015e6:	6902      	ldr	r2, [r0, #16]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	6942      	ldr	r2, [r0, #20]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	69c2      	ldr	r2, [r0, #28]
 80015f0:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80015f2:	6801      	ldr	r1, [r0, #0]
 80015f4:	6808      	ldr	r0, [r1, #0]
 80015f6:	4a6c      	ldr	r2, [pc, #432]	; (80017a8 <UART_SetConfig+0x1c8>)
 80015f8:	4002      	ands	r2, r0
 80015fa:	4313      	orrs	r3, r2
 80015fc:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015fe:	6822      	ldr	r2, [r4, #0]
 8001600:	6853      	ldr	r3, [r2, #4]
 8001602:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001606:	68e1      	ldr	r1, [r4, #12]
 8001608:	430b      	orrs	r3, r1
 800160a:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800160c:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800160e:	6a23      	ldr	r3, [r4, #32]
 8001610:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8001612:	6821      	ldr	r1, [r4, #0]
 8001614:	688b      	ldr	r3, [r1, #8]
 8001616:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800161a:	4313      	orrs	r3, r2
 800161c:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800161e:	6823      	ldr	r3, [r4, #0]
 8001620:	4a62      	ldr	r2, [pc, #392]	; (80017ac <UART_SetConfig+0x1cc>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d015      	beq.n	8001652 <UART_SetConfig+0x72>
 8001626:	4a62      	ldr	r2, [pc, #392]	; (80017b0 <UART_SetConfig+0x1d0>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d028      	beq.n	800167e <UART_SetConfig+0x9e>
 800162c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001630:	4293      	cmp	r3, r2
 8001632:	d020      	beq.n	8001676 <UART_SetConfig+0x96>
 8001634:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001636:	69e2      	ldr	r2, [r4, #28]
 8001638:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800163c:	d021      	beq.n	8001682 <UART_SetConfig+0xa2>
    switch (clocksource)
 800163e:	2b08      	cmp	r3, #8
 8001640:	f200 80ab 	bhi.w	800179a <UART_SetConfig+0x1ba>
 8001644:	e8df f003 	tbb	[pc, r3]
 8001648:	a98b816c 	.word	0xa98b816c
 800164c:	a9a9a996 	.word	0xa9a9a996
 8001650:	a0          	.byte	0xa0
 8001651:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001652:	4b58      	ldr	r3, [pc, #352]	; (80017b4 <UART_SetConfig+0x1d4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	2b03      	cmp	r3, #3
 800165c:	d809      	bhi.n	8001672 <UART_SetConfig+0x92>
 800165e:	e8df f003 	tbb	[pc, r3]
 8001662:	0402      	.short	0x0402
 8001664:	0c06      	.short	0x0c06
 8001666:	2300      	movs	r3, #0
 8001668:	e7e5      	b.n	8001636 <UART_SetConfig+0x56>
 800166a:	2304      	movs	r3, #4
 800166c:	e7e3      	b.n	8001636 <UART_SetConfig+0x56>
 800166e:	2308      	movs	r3, #8
 8001670:	e7e1      	b.n	8001636 <UART_SetConfig+0x56>
 8001672:	2310      	movs	r3, #16
 8001674:	e7df      	b.n	8001636 <UART_SetConfig+0x56>
 8001676:	2300      	movs	r3, #0
 8001678:	e7dd      	b.n	8001636 <UART_SetConfig+0x56>
 800167a:	2302      	movs	r3, #2
 800167c:	e7db      	b.n	8001636 <UART_SetConfig+0x56>
 800167e:	2300      	movs	r3, #0
 8001680:	e7d9      	b.n	8001636 <UART_SetConfig+0x56>
    switch (clocksource)
 8001682:	2b08      	cmp	r3, #8
 8001684:	d849      	bhi.n	800171a <UART_SetConfig+0x13a>
 8001686:	e8df f003 	tbb	[pc, r3]
 800168a:	1e05      	.short	0x1e05
 800168c:	48344829 	.word	0x48344829
 8001690:	4848      	.short	0x4848
 8001692:	3f          	.byte	0x3f
 8001693:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8001694:	f7ff fd40 	bl	8001118 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8001698:	6862      	ldr	r2, [r4, #4]
 800169a:	0853      	lsrs	r3, r2, #1
 800169c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80016a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80016a4:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016a6:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80016a8:	f1a3 0110 	sub.w	r1, r3, #16
 80016ac:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80016b0:	4291      	cmp	r1, r2
 80016b2:	d875      	bhi.n	80017a0 <UART_SetConfig+0x1c0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80016ba:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80016be:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80016c0:	6822      	ldr	r2, [r4, #0]
 80016c2:	60d3      	str	r3, [r2, #12]
 80016c4:	e03d      	b.n	8001742 <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetPCLK2Freq();
 80016c6:	f7ff fd3d 	bl	8001144 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80016ca:	6862      	ldr	r2, [r4, #4]
 80016cc:	0853      	lsrs	r3, r2, #1
 80016ce:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80016d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80016d6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016d8:	2000      	movs	r0, #0
        break;
 80016da:	e7e5      	b.n	80016a8 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80016dc:	6862      	ldr	r2, [r4, #4]
 80016de:	0853      	lsrs	r3, r2, #1
 80016e0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80016e4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80016e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80016ec:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80016ee:	2000      	movs	r0, #0
        break;
 80016f0:	e7da      	b.n	80016a8 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetSysClockFreq();
 80016f2:	f7ff fc01 	bl	8000ef8 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80016f6:	6862      	ldr	r2, [r4, #4]
 80016f8:	0853      	lsrs	r3, r2, #1
 80016fa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80016fe:	fbb3 f3f2 	udiv	r3, r3, r2
 8001702:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001704:	2000      	movs	r0, #0
        break;
 8001706:	e7cf      	b.n	80016a8 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001708:	6862      	ldr	r2, [r4, #4]
 800170a:	0853      	lsrs	r3, r2, #1
 800170c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001710:	fbb3 f3f2 	udiv	r3, r3, r2
 8001714:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001716:	2000      	movs	r0, #0
        break;
 8001718:	e7c6      	b.n	80016a8 <UART_SetConfig+0xc8>
        ret = HAL_ERROR;
 800171a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800171c:	2300      	movs	r3, #0
 800171e:	e7c3      	b.n	80016a8 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 8001720:	f7ff fcfa 	bl	8001118 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001724:	6862      	ldr	r2, [r4, #4]
 8001726:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800172a:	fbb3 f3f2 	udiv	r3, r3, r2
 800172e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001730:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8001732:	f1a3 0110 	sub.w	r1, r3, #16
 8001736:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800173a:	4291      	cmp	r1, r2
 800173c:	d832      	bhi.n	80017a4 <UART_SetConfig+0x1c4>
      huart->Instance->BRR = usartdiv;
 800173e:	6822      	ldr	r2, [r4, #0]
 8001740:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8001742:	2300      	movs	r3, #0
 8001744:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8001746:	6663      	str	r3, [r4, #100]	; 0x64
}
 8001748:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800174a:	f7ff fcfb 	bl	8001144 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800174e:	6862      	ldr	r2, [r4, #4]
 8001750:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8001754:	fbb3 f3f2 	udiv	r3, r3, r2
 8001758:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800175a:	2000      	movs	r0, #0
        break;
 800175c:	e7e9      	b.n	8001732 <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800175e:	6862      	ldr	r2, [r4, #4]
 8001760:	0853      	lsrs	r3, r2, #1
 8001762:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001766:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800176a:	fbb3 f3f2 	udiv	r3, r3, r2
 800176e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001770:	2000      	movs	r0, #0
        break;
 8001772:	e7de      	b.n	8001732 <UART_SetConfig+0x152>
        pclk = HAL_RCC_GetSysClockFreq();
 8001774:	f7ff fbc0 	bl	8000ef8 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8001778:	6862      	ldr	r2, [r4, #4]
 800177a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800177e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001782:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001784:	2000      	movs	r0, #0
        break;
 8001786:	e7d4      	b.n	8001732 <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001788:	6862      	ldr	r2, [r4, #4]
 800178a:	0853      	lsrs	r3, r2, #1
 800178c:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001790:	fbb3 f3f2 	udiv	r3, r3, r2
 8001794:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001796:	2000      	movs	r0, #0
        break;
 8001798:	e7cb      	b.n	8001732 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 800179a:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 800179c:	2300      	movs	r3, #0
 800179e:	e7c8      	b.n	8001732 <UART_SetConfig+0x152>
      ret = HAL_ERROR;
 80017a0:	2001      	movs	r0, #1
 80017a2:	e7ce      	b.n	8001742 <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 80017a4:	2001      	movs	r0, #1
 80017a6:	e7cc      	b.n	8001742 <UART_SetConfig+0x162>
 80017a8:	efff69f3 	.word	0xefff69f3
 80017ac:	40013800 	.word	0x40013800
 80017b0:	40004400 	.word	0x40004400
 80017b4:	40021000 	.word	0x40021000

080017b8 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80017b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017ba:	f013 0f01 	tst.w	r3, #1
 80017be:	d006      	beq.n	80017ce <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80017c0:	6802      	ldr	r2, [r0, #0]
 80017c2:	6853      	ldr	r3, [r2, #4]
 80017c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80017c8:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80017ca:	430b      	orrs	r3, r1
 80017cc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80017ce:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017d0:	f013 0f02 	tst.w	r3, #2
 80017d4:	d006      	beq.n	80017e4 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80017d6:	6802      	ldr	r2, [r0, #0]
 80017d8:	6853      	ldr	r3, [r2, #4]
 80017da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017de:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80017e0:	430b      	orrs	r3, r1
 80017e2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80017e4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017e6:	f013 0f04 	tst.w	r3, #4
 80017ea:	d006      	beq.n	80017fa <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80017ec:	6802      	ldr	r2, [r0, #0]
 80017ee:	6853      	ldr	r3, [r2, #4]
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f4:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80017f6:	430b      	orrs	r3, r1
 80017f8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80017fa:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80017fc:	f013 0f08 	tst.w	r3, #8
 8001800:	d006      	beq.n	8001810 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001802:	6802      	ldr	r2, [r0, #0]
 8001804:	6853      	ldr	r3, [r2, #4]
 8001806:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800180a:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800180c:	430b      	orrs	r3, r1
 800180e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001810:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001812:	f013 0f10 	tst.w	r3, #16
 8001816:	d006      	beq.n	8001826 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001818:	6802      	ldr	r2, [r0, #0]
 800181a:	6893      	ldr	r3, [r2, #8]
 800181c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001820:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8001822:	430b      	orrs	r3, r1
 8001824:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001826:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001828:	f013 0f20 	tst.w	r3, #32
 800182c:	d006      	beq.n	800183c <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800182e:	6802      	ldr	r2, [r0, #0]
 8001830:	6893      	ldr	r3, [r2, #8]
 8001832:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001836:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001838:	430b      	orrs	r3, r1
 800183a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800183c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800183e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8001842:	d00a      	beq.n	800185a <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001844:	6802      	ldr	r2, [r0, #0]
 8001846:	6853      	ldr	r3, [r2, #4]
 8001848:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800184c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800184e:	430b      	orrs	r3, r1
 8001850:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001852:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001854:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001858:	d00b      	beq.n	8001872 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800185a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800185c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001860:	d006      	beq.n	8001870 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001862:	6802      	ldr	r2, [r0, #0]
 8001864:	6853      	ldr	r3, [r2, #4]
 8001866:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800186a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800186c:	430b      	orrs	r3, r1
 800186e:	6053      	str	r3, [r2, #4]
}
 8001870:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001872:	6802      	ldr	r2, [r0, #0]
 8001874:	6853      	ldr	r3, [r2, #4]
 8001876:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800187a:	6c41      	ldr	r1, [r0, #68]	; 0x44
 800187c:	430b      	orrs	r3, r1
 800187e:	6053      	str	r3, [r2, #4]
 8001880:	e7eb      	b.n	800185a <UART_AdvFeatureConfig+0xa2>

08001882 <UART_WaitOnFlagUntilTimeout>:
{
 8001882:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001886:	4604      	mov	r4, r0
 8001888:	460f      	mov	r7, r1
 800188a:	4616      	mov	r6, r2
 800188c:	4698      	mov	r8, r3
 800188e:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001890:	6823      	ldr	r3, [r4, #0]
 8001892:	69db      	ldr	r3, [r3, #28]
 8001894:	ea37 0303 	bics.w	r3, r7, r3
 8001898:	bf0c      	ite	eq
 800189a:	2301      	moveq	r3, #1
 800189c:	2300      	movne	r3, #0
 800189e:	42b3      	cmp	r3, r6
 80018a0:	d13a      	bne.n	8001918 <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 80018a2:	f1b5 3fff 	cmp.w	r5, #4294967295
 80018a6:	d0f3      	beq.n	8001890 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018a8:	f7fe fea4 	bl	80005f4 <HAL_GetTick>
 80018ac:	eba0 0008 	sub.w	r0, r0, r8
 80018b0:	42a8      	cmp	r0, r5
 80018b2:	d81f      	bhi.n	80018f4 <UART_WaitOnFlagUntilTimeout+0x72>
 80018b4:	b1f5      	cbz	r5, 80018f4 <UART_WaitOnFlagUntilTimeout+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80018b6:	6823      	ldr	r3, [r4, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	f012 0f04 	tst.w	r2, #4
 80018be:	d0e7      	beq.n	8001890 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80018c0:	69da      	ldr	r2, [r3, #28]
 80018c2:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80018c6:	d0e3      	beq.n	8001890 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80018c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018cc:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018ce:	6822      	ldr	r2, [r4, #0]
 80018d0:	6813      	ldr	r3, [r2, #0]
 80018d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80018d6:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018d8:	6822      	ldr	r2, [r4, #0]
 80018da:	6893      	ldr	r3, [r2, #8]
 80018dc:	f023 0301 	bic.w	r3, r3, #1
 80018e0:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80018e2:	2320      	movs	r3, #32
 80018e4:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80018e6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80018e8:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80018ea:	2300      	movs	r3, #0
 80018ec:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80018f0:	2003      	movs	r0, #3
 80018f2:	e012      	b.n	800191a <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80018f4:	6822      	ldr	r2, [r4, #0]
 80018f6:	6813      	ldr	r3, [r2, #0]
 80018f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80018fc:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80018fe:	6822      	ldr	r2, [r4, #0]
 8001900:	6893      	ldr	r3, [r2, #8]
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8001908:	2320      	movs	r3, #32
 800190a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800190c:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800190e:	2300      	movs	r3, #0
 8001910:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8001914:	2003      	movs	r0, #3
 8001916:	e000      	b.n	800191a <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 8001918:	2000      	movs	r0, #0
}
 800191a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800191e <UART_CheckIdleState>:
{
 800191e:	b530      	push	{r4, r5, lr}
 8001920:	b083      	sub	sp, #12
 8001922:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001924:	2300      	movs	r3, #0
 8001926:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8001928:	f7fe fe64 	bl	80005f4 <HAL_GetTick>
 800192c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800192e:	6823      	ldr	r3, [r4, #0]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f013 0f08 	tst.w	r3, #8
 8001936:	d10c      	bne.n	8001952 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001938:	6823      	ldr	r3, [r4, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f013 0f04 	tst.w	r3, #4
 8001940:	d115      	bne.n	800196e <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8001942:	2320      	movs	r3, #32
 8001944:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8001946:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8001948:	2000      	movs	r0, #0
 800194a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800194e:	b003      	add	sp, #12
 8001950:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001952:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	4603      	mov	r3, r0
 800195a:	2200      	movs	r2, #0
 800195c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001960:	4620      	mov	r0, r4
 8001962:	f7ff ff8e 	bl	8001882 <UART_WaitOnFlagUntilTimeout>
 8001966:	2800      	cmp	r0, #0
 8001968:	d0e6      	beq.n	8001938 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800196a:	2003      	movs	r0, #3
 800196c:	e7ef      	b.n	800194e <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800196e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001972:	9300      	str	r3, [sp, #0]
 8001974:	462b      	mov	r3, r5
 8001976:	2200      	movs	r2, #0
 8001978:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800197c:	4620      	mov	r0, r4
 800197e:	f7ff ff80 	bl	8001882 <UART_WaitOnFlagUntilTimeout>
 8001982:	2800      	cmp	r0, #0
 8001984:	d0dd      	beq.n	8001942 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8001986:	2003      	movs	r0, #3
 8001988:	e7e1      	b.n	800194e <UART_CheckIdleState+0x30>

0800198a <HAL_UART_Init>:
  if (huart == NULL)
 800198a:	b368      	cbz	r0, 80019e8 <HAL_UART_Init+0x5e>
{
 800198c:	b510      	push	{r4, lr}
 800198e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8001990:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8001992:	b303      	cbz	r3, 80019d6 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8001994:	2324      	movs	r3, #36	; 0x24
 8001996:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8001998:	6822      	ldr	r2, [r4, #0]
 800199a:	6813      	ldr	r3, [r2, #0]
 800199c:	f023 0301 	bic.w	r3, r3, #1
 80019a0:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80019a2:	4620      	mov	r0, r4
 80019a4:	f7ff fe1c 	bl	80015e0 <UART_SetConfig>
 80019a8:	2801      	cmp	r0, #1
 80019aa:	d013      	beq.n	80019d4 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80019ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019ae:	b9bb      	cbnz	r3, 80019e0 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019b0:	6822      	ldr	r2, [r4, #0]
 80019b2:	6853      	ldr	r3, [r2, #4]
 80019b4:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80019b8:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ba:	6822      	ldr	r2, [r4, #0]
 80019bc:	6893      	ldr	r3, [r2, #8]
 80019be:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80019c2:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80019c4:	6822      	ldr	r2, [r4, #0]
 80019c6:	6813      	ldr	r3, [r2, #0]
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80019ce:	4620      	mov	r0, r4
 80019d0:	f7ff ffa5 	bl	800191e <UART_CheckIdleState>
}
 80019d4:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80019d6:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80019da:	f7fe fcf9 	bl	80003d0 <HAL_UART_MspInit>
 80019de:	e7d9      	b.n	8001994 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80019e0:	4620      	mov	r0, r4
 80019e2:	f7ff fee9 	bl	80017b8 <UART_AdvFeatureConfig>
 80019e6:	e7e3      	b.n	80019b0 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80019e8:	2001      	movs	r0, #1
}
 80019ea:	4770      	bx	lr

080019ec <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80019ec:	4770      	bx	lr
	...

080019f0 <__libc_init_array>:
 80019f0:	b570      	push	{r4, r5, r6, lr}
 80019f2:	4e0d      	ldr	r6, [pc, #52]	; (8001a28 <__libc_init_array+0x38>)
 80019f4:	4c0d      	ldr	r4, [pc, #52]	; (8001a2c <__libc_init_array+0x3c>)
 80019f6:	1ba4      	subs	r4, r4, r6
 80019f8:	10a4      	asrs	r4, r4, #2
 80019fa:	2500      	movs	r5, #0
 80019fc:	42a5      	cmp	r5, r4
 80019fe:	d109      	bne.n	8001a14 <__libc_init_array+0x24>
 8001a00:	4e0b      	ldr	r6, [pc, #44]	; (8001a30 <__libc_init_array+0x40>)
 8001a02:	4c0c      	ldr	r4, [pc, #48]	; (8001a34 <__libc_init_array+0x44>)
 8001a04:	f000 f820 	bl	8001a48 <_init>
 8001a08:	1ba4      	subs	r4, r4, r6
 8001a0a:	10a4      	asrs	r4, r4, #2
 8001a0c:	2500      	movs	r5, #0
 8001a0e:	42a5      	cmp	r5, r4
 8001a10:	d105      	bne.n	8001a1e <__libc_init_array+0x2e>
 8001a12:	bd70      	pop	{r4, r5, r6, pc}
 8001a14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a18:	4798      	blx	r3
 8001a1a:	3501      	adds	r5, #1
 8001a1c:	e7ee      	b.n	80019fc <__libc_init_array+0xc>
 8001a1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001a22:	4798      	blx	r3
 8001a24:	3501      	adds	r5, #1
 8001a26:	e7f2      	b.n	8001a0e <__libc_init_array+0x1e>
 8001a28:	08001a98 	.word	0x08001a98
 8001a2c:	08001a98 	.word	0x08001a98
 8001a30:	08001a98 	.word	0x08001a98
 8001a34:	08001a9c 	.word	0x08001a9c

08001a38 <memset>:
 8001a38:	4402      	add	r2, r0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d100      	bne.n	8001a42 <memset+0xa>
 8001a40:	4770      	bx	lr
 8001a42:	f803 1b01 	strb.w	r1, [r3], #1
 8001a46:	e7f9      	b.n	8001a3c <memset+0x4>

08001a48 <_init>:
 8001a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a4a:	bf00      	nop
 8001a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a4e:	bc08      	pop	{r3}
 8001a50:	469e      	mov	lr, r3
 8001a52:	4770      	bx	lr

08001a54 <_fini>:
 8001a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a56:	bf00      	nop
 8001a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a5a:	bc08      	pop	{r3}
 8001a5c:	469e      	mov	lr, r3
 8001a5e:	4770      	bx	lr
