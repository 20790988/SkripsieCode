
20790988_Skripsie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004724  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080048b0  080048b0  000148b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049e0  080049e0  000200f4  2**0
                  CONTENTS
  4 .ARM          00000000  080049e0  080049e0  000200f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080049e0  080049e0  000200f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049e0  080049e0  000149e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049e4  080049e4  000149e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000f4  20000000  080049e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000474  200000f4  08004adc  000200f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000568  08004adc  00020568  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d4f  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a49  00000000  00000000  00032e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a203  00000000  00000000  000358bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000e58  00000000  00000000  0003fac0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000df0  00000000  00000000  00040918  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001ded3  00000000  00000000  00041708  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000bf0f  00000000  00000000  0005f5db  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000aaa03  00000000  00000000  0006b4ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00115eed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002ac8  00000000  00000000  00115f68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000f4 	.word	0x200000f4
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004894 	.word	0x08004894

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000f8 	.word	0x200000f8
 80001c4:	08004894 	.word	0x08004894

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <days_in_year>:
        }
    }
}

uint32_t days_in_year(uint32_t year, uint32_t month, uint32_t day)
{
 8000aa0:	b4f0      	push	{r4, r5, r6, r7}
 8000aa2:	b08c      	sub	sp, #48	; 0x30
 8000aa4:	4684      	mov	ip, r0
 8000aa6:	460f      	mov	r7, r1
 8000aa8:	4616      	mov	r6, r2
    uint32_t days_in_month[] =
 8000aaa:	466c      	mov	r4, sp
 8000aac:	4d0f      	ldr	r5, [pc, #60]	; (8000aec <days_in_year+0x4c>)
 8000aae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ab4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ab6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000aba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    uint32_t day_of_year = day;
    for (uint32_t i = 0; i < month - 1; i++)
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e006      	b.n	8000ad0 <days_in_year+0x30>
    {
        day_of_year += days_in_month[i];
 8000ac2:	aa0c      	add	r2, sp, #48	; 0x30
 8000ac4:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000ac8:	f852 2c30 	ldr.w	r2, [r2, #-48]
 8000acc:	4416      	add	r6, r2
    for (uint32_t i = 0; i < month - 1; i++)
 8000ace:	3301      	adds	r3, #1
 8000ad0:	1e7a      	subs	r2, r7, #1
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	d8f5      	bhi.n	8000ac2 <days_in_year+0x22>
    }

    if (year % 4 == 0 && month > 2)
 8000ad6:	f01c 0f03 	tst.w	ip, #3
 8000ada:	d102      	bne.n	8000ae2 <days_in_year+0x42>
 8000adc:	2f02      	cmp	r7, #2
 8000ade:	d900      	bls.n	8000ae2 <days_in_year+0x42>
    {
        day_of_year++;
 8000ae0:	3601      	adds	r6, #1
    }
    return day_of_year;
}
 8000ae2:	4630      	mov	r0, r6
 8000ae4:	b00c      	add	sp, #48	; 0x30
 8000ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	080048b0 	.word	0x080048b0

08000af0 <insert_binary_into_string>:

void insert_binary_into_string(char *p_timecode, uint32_t num, uint32_t len)
{
 8000af0:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000af4:	4605      	mov	r5, r0
 8000af6:	4614      	mov	r4, r2

    if (num < 10 && num < pow(2, len))
 8000af8:	2909      	cmp	r1, #9
 8000afa:	d901      	bls.n	8000b00 <insert_binary_into_string+0x10>
    {
        for (uint32_t i = 0; i < len; i++)
 8000afc:	2300      	movs	r3, #0
 8000afe:	e025      	b.n	8000b4c <insert_binary_into_string+0x5c>
 8000b00:	460e      	mov	r6, r1
    if (num < 10 && num < pow(2, len))
 8000b02:	4608      	mov	r0, r1
 8000b04:	f7ff fca2 	bl	800044c <__aeabi_ui2d>
 8000b08:	4680      	mov	r8, r0
 8000b0a:	4689      	mov	r9, r1
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f7ff fc9d 	bl	800044c <__aeabi_ui2d>
 8000b12:	ec41 0b11 	vmov	d1, r0, r1
 8000b16:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8000b58 <insert_binary_into_string+0x68>
 8000b1a:	f002 fe63 	bl	80037e4 <pow>
 8000b1e:	ec53 2b10 	vmov	r2, r3, d0
 8000b22:	4640      	mov	r0, r8
 8000b24:	4649      	mov	r1, r9
 8000b26:	f7ff ff7d 	bl	8000a24 <__aeabi_dcmplt>
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	d0e6      	beq.n	8000afc <insert_binary_into_string+0xc>
        for (uint32_t i = 0; i < len; i++)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	e006      	b.n	8000b40 <insert_binary_into_string+0x50>
        {
            p_timecode[i] = '0' + (num >> i & 1);
 8000b32:	fa26 f302 	lsr.w	r3, r6, r2
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	3330      	adds	r3, #48	; 0x30
 8000b3c:	54ab      	strb	r3, [r5, r2]
        for (uint32_t i = 0; i < len; i++)
 8000b3e:	3201      	adds	r2, #1
 8000b40:	42a2      	cmp	r2, r4
 8000b42:	d3f6      	bcc.n	8000b32 <insert_binary_into_string+0x42>
 8000b44:	e004      	b.n	8000b50 <insert_binary_into_string+0x60>
    }
    else
    {
        for (uint32_t i = 0; i < len; i++)
        {
            p_timecode[i] = 'E';
 8000b46:	2245      	movs	r2, #69	; 0x45
 8000b48:	54ea      	strb	r2, [r5, r3]
        for (uint32_t i = 0; i < len; i++)
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	42a3      	cmp	r3, r4
 8000b4e:	d3fa      	bcc.n	8000b46 <insert_binary_into_string+0x56>
        }
    }
}
 8000b50:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8000b54:	f3af 8000 	nop.w
 8000b58:	00000000 	.word	0x00000000
 8000b5c:	40000000 	.word	0x40000000

08000b60 <concat_timecode>:
{
 8000b60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    insert_binary_into_string(&timecode[1], sec % 10, 4);
 8000b64:	4f96      	ldr	r7, [pc, #600]	; (8000dc0 <concat_timecode+0x260>)
 8000b66:	6838      	ldr	r0, [r7, #0]
 8000b68:	4d96      	ldr	r5, [pc, #600]	; (8000dc4 <concat_timecode+0x264>)
 8000b6a:	fba5 2300 	umull	r2, r3, r5, r0
 8000b6e:	08db      	lsrs	r3, r3, #3
 8000b70:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000b74:	0059      	lsls	r1, r3, #1
 8000b76:	4c94      	ldr	r4, [pc, #592]	; (8000dc8 <concat_timecode+0x268>)
 8000b78:	2204      	movs	r2, #4
 8000b7a:	1a41      	subs	r1, r0, r1
 8000b7c:	1c60      	adds	r0, r4, #1
 8000b7e:	f7ff ffb7 	bl	8000af0 <insert_binary_into_string>
    insert_binary_into_string(&timecode[6], sec / 10, 3);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	fba5 2303 	umull	r2, r3, r5, r3
 8000b88:	2203      	movs	r2, #3
 8000b8a:	fa23 f102 	lsr.w	r1, r3, r2
 8000b8e:	1da0      	adds	r0, r4, #6
 8000b90:	f7ff ffae 	bl	8000af0 <insert_binary_into_string>
    insert_binary_into_string(&timecode[10], min % 10, 4);
 8000b94:	f8df 8244 	ldr.w	r8, [pc, #580]	; 8000ddc <concat_timecode+0x27c>
 8000b98:	f8d8 0000 	ldr.w	r0, [r8]
 8000b9c:	fba5 2300 	umull	r2, r3, r5, r0
 8000ba0:	08db      	lsrs	r3, r3, #3
 8000ba2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ba6:	0059      	lsls	r1, r3, #1
 8000ba8:	2204      	movs	r2, #4
 8000baa:	1a41      	subs	r1, r0, r1
 8000bac:	f104 000a 	add.w	r0, r4, #10
 8000bb0:	f7ff ff9e 	bl	8000af0 <insert_binary_into_string>
    insert_binary_into_string(&timecode[15], min / 10, 3);
 8000bb4:	f8d8 3000 	ldr.w	r3, [r8]
 8000bb8:	fba5 2303 	umull	r2, r3, r5, r3
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	fa23 f102 	lsr.w	r1, r3, r2
 8000bc2:	f104 000f 	add.w	r0, r4, #15
 8000bc6:	f7ff ff93 	bl	8000af0 <insert_binary_into_string>
    insert_binary_into_string(&timecode[20], hour % 10, 4);
 8000bca:	f8df 9214 	ldr.w	r9, [pc, #532]	; 8000de0 <concat_timecode+0x280>
 8000bce:	f8d9 0000 	ldr.w	r0, [r9]
 8000bd2:	fba5 2300 	umull	r2, r3, r5, r0
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000bdc:	0059      	lsls	r1, r3, #1
 8000bde:	2204      	movs	r2, #4
 8000be0:	1a41      	subs	r1, r0, r1
 8000be2:	f104 0014 	add.w	r0, r4, #20
 8000be6:	f7ff ff83 	bl	8000af0 <insert_binary_into_string>
    insert_binary_into_string(&timecode[25], hour / 10, 2);
 8000bea:	f8d9 3000 	ldr.w	r3, [r9]
 8000bee:	fba5 2303 	umull	r2, r3, r5, r3
 8000bf2:	2202      	movs	r2, #2
 8000bf4:	08d9      	lsrs	r1, r3, #3
 8000bf6:	f104 0019 	add.w	r0, r4, #25
 8000bfa:	f7ff ff79 	bl	8000af0 <insert_binary_into_string>
    uint32_t day_of_year = days_in_year(year, month, day);
 8000bfe:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 8000de4 <concat_timecode+0x284>
 8000c02:	4b72      	ldr	r3, [pc, #456]	; (8000dcc <concat_timecode+0x26c>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	4b72      	ldr	r3, [pc, #456]	; (8000dd0 <concat_timecode+0x270>)
 8000c08:	6819      	ldr	r1, [r3, #0]
 8000c0a:	f8da 0000 	ldr.w	r0, [sl]
 8000c0e:	f7ff ff47 	bl	8000aa0 <days_in_year>
 8000c12:	4606      	mov	r6, r0
    insert_binary_into_string(&timecode[30], day_of_year % 10, 4);
 8000c14:	fba5 2300 	umull	r2, r3, r5, r0
 8000c18:	08db      	lsrs	r3, r3, #3
 8000c1a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c1e:	0059      	lsls	r1, r3, #1
 8000c20:	2204      	movs	r2, #4
 8000c22:	1a41      	subs	r1, r0, r1
 8000c24:	f104 001e 	add.w	r0, r4, #30
 8000c28:	f7ff ff62 	bl	8000af0 <insert_binary_into_string>
    insert_binary_into_string(&timecode[35], (day_of_year % 100) / 10, 4);
 8000c2c:	4b69      	ldr	r3, [pc, #420]	; (8000dd4 <concat_timecode+0x274>)
 8000c2e:	fba3 2b06 	umull	r2, fp, r3, r6
 8000c32:	ea4f 135b 	mov.w	r3, fp, lsr #5
 8000c36:	2264      	movs	r2, #100	; 0x64
 8000c38:	fb02 6313 	mls	r3, r2, r3, r6
 8000c3c:	fba5 0303 	umull	r0, r3, r5, r3
 8000c40:	2204      	movs	r2, #4
 8000c42:	08d9      	lsrs	r1, r3, #3
 8000c44:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8000c48:	f7ff ff52 	bl	8000af0 <insert_binary_into_string>
    insert_binary_into_string(&timecode[40], day_of_year / 100, 2);
 8000c4c:	2202      	movs	r2, #2
 8000c4e:	ea4f 115b 	mov.w	r1, fp, lsr #5
 8000c52:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8000c56:	f7ff ff4b 	bl	8000af0 <insert_binary_into_string>
    insert_binary_into_string(&timecode[50], year % 10, 4);
 8000c5a:	f8da 0000 	ldr.w	r0, [sl]
 8000c5e:	fba5 6300 	umull	r6, r3, r5, r0
 8000c62:	08db      	lsrs	r3, r3, #3
 8000c64:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000c68:	0059      	lsls	r1, r3, #1
 8000c6a:	2204      	movs	r2, #4
 8000c6c:	1a41      	subs	r1, r0, r1
 8000c6e:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8000c72:	f7ff ff3d 	bl	8000af0 <insert_binary_into_string>
    insert_binary_into_string(&timecode[55], (year % 100) / 10, 4);
 8000c76:	f8da 2000 	ldr.w	r2, [sl]
 8000c7a:	4b56      	ldr	r3, [pc, #344]	; (8000dd4 <concat_timecode+0x274>)
 8000c7c:	fba3 0302 	umull	r0, r3, r3, r2
 8000c80:	095b      	lsrs	r3, r3, #5
 8000c82:	2164      	movs	r1, #100	; 0x64
 8000c84:	fb01 2313 	mls	r3, r1, r3, r2
 8000c88:	fba5 2303 	umull	r2, r3, r5, r3
 8000c8c:	2204      	movs	r2, #4
 8000c8e:	08d9      	lsrs	r1, r3, #3
 8000c90:	f104 0037 	add.w	r0, r4, #55	; 0x37
 8000c94:	f7ff ff2c 	bl	8000af0 <insert_binary_into_string>
    uint32_t seconds_of_day = hour * 3600 + min * 60 + sec;
 8000c98:	f8d9 0000 	ldr.w	r0, [r9]
 8000c9c:	f8d8 3000 	ldr.w	r3, [r8]
 8000ca0:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000ca4:	009a      	lsls	r2, r3, #2
 8000ca6:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000caa:	fb03 2000 	mla	r0, r3, r0, r2
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	4418      	add	r0, r3
    for (uint32_t i = 0; i <= 16; i++)
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e009      	b.n	8000cca <concat_timecode+0x16a>
            timecode[80 + i + 1] = '0' + (seconds_of_day >> i & 1);
 8000cb6:	fa20 f203 	lsr.w	r2, r0, r3
 8000cba:	f002 0201 	and.w	r2, r2, #1
 8000cbe:	f103 0151 	add.w	r1, r3, #81	; 0x51
 8000cc2:	3230      	adds	r2, #48	; 0x30
 8000cc4:	4c40      	ldr	r4, [pc, #256]	; (8000dc8 <concat_timecode+0x268>)
 8000cc6:	5462      	strb	r2, [r4, r1]
    for (uint32_t i = 0; i <= 16; i++)
 8000cc8:	3301      	adds	r3, #1
 8000cca:	2b10      	cmp	r3, #16
 8000ccc:	d80b      	bhi.n	8000ce6 <concat_timecode+0x186>
        if (i < 9)
 8000cce:	2b08      	cmp	r3, #8
 8000cd0:	d8f1      	bhi.n	8000cb6 <concat_timecode+0x156>
            timecode[80 + i] = '0' + (seconds_of_day >> i & 1);
 8000cd2:	fa20 f203 	lsr.w	r2, r0, r3
 8000cd6:	f002 0201 	and.w	r2, r2, #1
 8000cda:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8000cde:	3230      	adds	r2, #48	; 0x30
 8000ce0:	4c39      	ldr	r4, [pc, #228]	; (8000dc8 <concat_timecode+0x268>)
 8000ce2:	5462      	strb	r2, [r4, r1]
 8000ce4:	e7f0      	b.n	8000cc8 <concat_timecode+0x168>
    for (int i = 0; i < TIMECODE_LENGTH; i++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e005      	b.n	8000cf6 <concat_timecode+0x196>
            timecode_pulse[i] = 310;
 8000cea:	4a3b      	ldr	r2, [pc, #236]	; (8000dd8 <concat_timecode+0x278>)
 8000cec:	f44f 719b 	mov.w	r1, #310	; 0x136
 8000cf0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < TIMECODE_LENGTH; i++)
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	2b63      	cmp	r3, #99	; 0x63
 8000cf8:	dc5f      	bgt.n	8000dba <concat_timecode+0x25a>
        switch (timecode[i])
 8000cfa:	4a33      	ldr	r2, [pc, #204]	; (8000dc8 <concat_timecode+0x268>)
 8000cfc:	5cd2      	ldrb	r2, [r2, r3]
 8000cfe:	3a30      	subs	r2, #48	; 0x30
 8000d00:	2a20      	cmp	r2, #32
 8000d02:	d855      	bhi.n	8000db0 <concat_timecode+0x250>
 8000d04:	a101      	add	r1, pc, #4	; (adr r1, 8000d0c <concat_timecode+0x1ac>)
 8000d06:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000d9b 	.word	0x08000d9b
 8000d10:	08000da5 	.word	0x08000da5
 8000d14:	08000db1 	.word	0x08000db1
 8000d18:	08000db1 	.word	0x08000db1
 8000d1c:	08000db1 	.word	0x08000db1
 8000d20:	08000db1 	.word	0x08000db1
 8000d24:	08000db1 	.word	0x08000db1
 8000d28:	08000db1 	.word	0x08000db1
 8000d2c:	08000db1 	.word	0x08000db1
 8000d30:	08000db1 	.word	0x08000db1
 8000d34:	08000db1 	.word	0x08000db1
 8000d38:	08000db1 	.word	0x08000db1
 8000d3c:	08000db1 	.word	0x08000db1
 8000d40:	08000db1 	.word	0x08000db1
 8000d44:	08000db1 	.word	0x08000db1
 8000d48:	08000db1 	.word	0x08000db1
 8000d4c:	08000db1 	.word	0x08000db1
 8000d50:	08000db1 	.word	0x08000db1
 8000d54:	08000db1 	.word	0x08000db1
 8000d58:	08000db1 	.word	0x08000db1
 8000d5c:	08000db1 	.word	0x08000db1
 8000d60:	08000db1 	.word	0x08000db1
 8000d64:	08000db1 	.word	0x08000db1
 8000d68:	08000db1 	.word	0x08000db1
 8000d6c:	08000db1 	.word	0x08000db1
 8000d70:	08000d91 	.word	0x08000d91
 8000d74:	08000db1 	.word	0x08000db1
 8000d78:	08000db1 	.word	0x08000db1
 8000d7c:	08000db1 	.word	0x08000db1
 8000d80:	08000db1 	.word	0x08000db1
 8000d84:	08000db1 	.word	0x08000db1
 8000d88:	08000db1 	.word	0x08000db1
 8000d8c:	08000ceb 	.word	0x08000ceb
            timecode_pulse[i] = 155;
 8000d90:	4a11      	ldr	r2, [pc, #68]	; (8000dd8 <concat_timecode+0x278>)
 8000d92:	219b      	movs	r1, #155	; 0x9b
 8000d94:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8000d98:	e7ac      	b.n	8000cf4 <concat_timecode+0x194>
            timecode_pulse[i] = 0x000;
 8000d9a:	4a0f      	ldr	r2, [pc, #60]	; (8000dd8 <concat_timecode+0x278>)
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8000da2:	e7a7      	b.n	8000cf4 <concat_timecode+0x194>
            timecode_pulse[i] = 620;
 8000da4:	4a0c      	ldr	r2, [pc, #48]	; (8000dd8 <concat_timecode+0x278>)
 8000da6:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8000daa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8000dae:	e7a1      	b.n	8000cf4 <concat_timecode+0x194>
            timecode_pulse[i] = 0x000;
 8000db0:	4a09      	ldr	r2, [pc, #36]	; (8000dd8 <concat_timecode+0x278>)
 8000db2:	2100      	movs	r1, #0
 8000db4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000db8:	e79c      	b.n	8000cf4 <concat_timecode+0x194>
}
 8000dba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000010 	.word	0x20000010
 8000dc4:	cccccccd 	.word	0xcccccccd
 8000dc8:	20000014 	.word	0x20000014
 8000dcc:	20000000 	.word	0x20000000
 8000dd0:	2000000c 	.word	0x2000000c
 8000dd4:	51eb851f 	.word	0x51eb851f
 8000dd8:	20000130 	.word	0x20000130
 8000ddc:	20000008 	.word	0x20000008
 8000de0:	20000004 	.word	0x20000004
 8000de4:	2000007c 	.word	0x2000007c

08000de8 <equals>:
}

//checks if two strings have the same characters up until length len
//if ignoreCase is true, capitals and lower case letters are considered equal
bool equals(char *str1, char *str2, uint32_t len, bool ignoreCase)
{
 8000de8:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t i = 0;
    bool equal = true;
    char c1, c2;

    for (i = 0; i < len; i++)
 8000dea:	2400      	movs	r4, #0
 8000dec:	e012      	b.n	8000e14 <equals+0x2c>
                break;
            }
        }
        else
        {
            c1 = str1[i];
 8000dee:	5d06      	ldrb	r6, [r0, r4]
            c2 = str2[i];
 8000df0:	5d0d      	ldrb	r5, [r1, r4]
            if (c1 >= 'a' && c1 <= 'z')
 8000df2:	f1a6 0761 	sub.w	r7, r6, #97	; 0x61
 8000df6:	b2ff      	uxtb	r7, r7
 8000df8:	2f19      	cmp	r7, #25
 8000dfa:	d801      	bhi.n	8000e00 <equals+0x18>
            {
                c1 -= 32;
 8000dfc:	3e20      	subs	r6, #32
 8000dfe:	b2f6      	uxtb	r6, r6
            }

            if (c2 >= 'a' && c2 <= 'z')
 8000e00:	f1a5 0761 	sub.w	r7, r5, #97	; 0x61
 8000e04:	b2ff      	uxtb	r7, r7
 8000e06:	2f19      	cmp	r7, #25
 8000e08:	d801      	bhi.n	8000e0e <equals+0x26>
            {
                c2 -= 32;
 8000e0a:	3d20      	subs	r5, #32
 8000e0c:	b2ed      	uxtb	r5, r5
            }

            if (c1 != c2)
 8000e0e:	42ae      	cmp	r6, r5
 8000e10:	d10d      	bne.n	8000e2e <equals+0x46>
    for (i = 0; i < len; i++)
 8000e12:	3401      	adds	r4, #1
 8000e14:	4294      	cmp	r4, r2
 8000e16:	d207      	bcs.n	8000e28 <equals+0x40>
        if (!ignoreCase)
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d1e8      	bne.n	8000dee <equals+0x6>
            if (str1[i] != str2[i])
 8000e1c:	5d06      	ldrb	r6, [r0, r4]
 8000e1e:	5d0d      	ldrb	r5, [r1, r4]
 8000e20:	42ae      	cmp	r6, r5
 8000e22:	d0f6      	beq.n	8000e12 <equals+0x2a>
                equal = false;
 8000e24:	4618      	mov	r0, r3
 8000e26:	e000      	b.n	8000e2a <equals+0x42>
    bool equal = true;
 8000e28:	2001      	movs	r0, #1
            }
        }
    }

    return equal;
}
 8000e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e2c:	4770      	bx	lr
                equal = false;
 8000e2e:	2000      	movs	r0, #0
 8000e30:	e7fb      	b.n	8000e2a <equals+0x42>

08000e32 <parse_char>:

//converts a character to its numerical equivalent for example '3' -> 3
uint32_t parse_char(char c)
{
    return (c - '0');
}
 8000e32:	3830      	subs	r0, #48	; 0x30
 8000e34:	4770      	bx	lr
	...

08000e38 <parse_nmea>:
{
 8000e38:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e3c:	4604      	mov	r4, r0
 8000e3e:	460e      	mov	r6, r1
    char **p_strings = malloc((sizeof(char*)) * 11);
 8000e40:	202c      	movs	r0, #44	; 0x2c
 8000e42:	f002 fbfd 	bl	8003640 <malloc>
 8000e46:	4605      	mov	r5, r0
    if (!equals("GPRMC", &GPSString[0], 5, false))
 8000e48:	2300      	movs	r3, #0
 8000e4a:	2205      	movs	r2, #5
 8000e4c:	4621      	mov	r1, r4
 8000e4e:	483d      	ldr	r0, [pc, #244]	; (8000f44 <parse_nmea+0x10c>)
 8000e50:	f7ff ffca 	bl	8000de8 <equals>
 8000e54:	2800      	cmp	r0, #0
 8000e56:	d06b      	beq.n	8000f30 <parse_nmea+0xf8>
    uint32_t numStrings = 0;
 8000e58:	2100      	movs	r1, #0
    for (i = 0; i < GPSStringLen; i++)
 8000e5a:	460b      	mov	r3, r1
 8000e5c:	e000      	b.n	8000e60 <parse_nmea+0x28>
 8000e5e:	3301      	adds	r3, #1
 8000e60:	42b3      	cmp	r3, r6
 8000e62:	d208      	bcs.n	8000e76 <parse_nmea+0x3e>
        if (GPSString[i] == ',')
 8000e64:	5ce2      	ldrb	r2, [r4, r3]
 8000e66:	2a2c      	cmp	r2, #44	; 0x2c
 8000e68:	d1f9      	bne.n	8000e5e <parse_nmea+0x26>
            p_strings[numStrings] = &GPSString[i + 1];
 8000e6a:	1c5a      	adds	r2, r3, #1
 8000e6c:	4422      	add	r2, r4
 8000e6e:	f845 2021 	str.w	r2, [r5, r1, lsl #2]
            numStrings++;
 8000e72:	3101      	adds	r1, #1
 8000e74:	e7f3      	b.n	8000e5e <parse_nmea+0x26>
    if (p_strings[1] - p_strings[0] != 1)
 8000e76:	686b      	ldr	r3, [r5, #4]
 8000e78:	682c      	ldr	r4, [r5, #0]
 8000e7a:	1b1b      	subs	r3, r3, r4
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d059      	beq.n	8000f34 <parse_nmea+0xfc>
        l_hour = 10 * parse_char(time[0]) + parse_char(time[1]);
 8000e80:	7820      	ldrb	r0, [r4, #0]
 8000e82:	f7ff ffd6 	bl	8000e32 <parse_char>
 8000e86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000e8a:	ea4f 0940 	mov.w	r9, r0, lsl #1
 8000e8e:	7860      	ldrb	r0, [r4, #1]
 8000e90:	f7ff ffcf 	bl	8000e32 <parse_char>
 8000e94:	4481      	add	r9, r0
        l_min = 10 * parse_char(time[2]) + parse_char(time[3]);
 8000e96:	78a0      	ldrb	r0, [r4, #2]
 8000e98:	f7ff ffcb 	bl	8000e32 <parse_char>
 8000e9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000ea0:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8000ea4:	78e0      	ldrb	r0, [r4, #3]
 8000ea6:	f7ff ffc4 	bl	8000e32 <parse_char>
 8000eaa:	4480      	add	r8, r0
        l_sec = 10 * parse_char(time[4]) + parse_char(time[5]);
 8000eac:	7920      	ldrb	r0, [r4, #4]
 8000eae:	f7ff ffc0 	bl	8000e32 <parse_char>
 8000eb2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000eb6:	0047      	lsls	r7, r0, #1
 8000eb8:	7960      	ldrb	r0, [r4, #5]
 8000eba:	f7ff ffba 	bl	8000e32 <parse_char>
 8000ebe:	4407      	add	r7, r0
    if (p_strings[9] - p_strings[8] != 1)
 8000ec0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000ec2:	6a2c      	ldr	r4, [r5, #32]
 8000ec4:	1b1b      	subs	r3, r3, r4
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d038      	beq.n	8000f3c <parse_nmea+0x104>
        l_day = 10 * parse_char(p_date[0]) + parse_char(p_date[1]);
 8000eca:	7820      	ldrb	r0, [r4, #0]
 8000ecc:	f7ff ffb1 	bl	8000e32 <parse_char>
 8000ed0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000ed4:	0046      	lsls	r6, r0, #1
 8000ed6:	7860      	ldrb	r0, [r4, #1]
 8000ed8:	f7ff ffab 	bl	8000e32 <parse_char>
 8000edc:	4406      	add	r6, r0
        l_month = 10 * parse_char(p_date[2]) + parse_char(p_date[3]);
 8000ede:	78a0      	ldrb	r0, [r4, #2]
 8000ee0:	f7ff ffa7 	bl	8000e32 <parse_char>
 8000ee4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000ee8:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8000eec:	78e0      	ldrb	r0, [r4, #3]
 8000eee:	f7ff ffa0 	bl	8000e32 <parse_char>
 8000ef2:	4482      	add	sl, r0
        l_year = 10 * parse_char(p_date[4]) + parse_char(p_date[5]);
 8000ef4:	7920      	ldrb	r0, [r4, #4]
 8000ef6:	f7ff ff9c 	bl	8000e32 <parse_char>
 8000efa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000efe:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8000f02:	7960      	ldrb	r0, [r4, #5]
 8000f04:	f7ff ff95 	bl	8000e32 <parse_char>
 8000f08:	eb0b 0400 	add.w	r4, fp, r0
    free(p_strings);
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	f002 fb9f 	bl	8003650 <free>
    hour = l_hour;
 8000f12:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <parse_nmea+0x110>)
 8000f14:	f8c3 9000 	str.w	r9, [r3]
    min = l_min;
 8000f18:	4b0c      	ldr	r3, [pc, #48]	; (8000f4c <parse_nmea+0x114>)
 8000f1a:	f8c3 8000 	str.w	r8, [r3]
    sec = l_sec;
 8000f1e:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <parse_nmea+0x118>)
 8000f20:	601f      	str	r7, [r3, #0]
    year = l_year;
 8000f22:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <parse_nmea+0x11c>)
 8000f24:	601c      	str	r4, [r3, #0]
    month = l_month;
 8000f26:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <parse_nmea+0x120>)
 8000f28:	f8c3 a000 	str.w	sl, [r3]
    day = l_day;
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <parse_nmea+0x124>)
 8000f2e:	601e      	str	r6, [r3, #0]
}
 8000f30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t l_sec = 0;
 8000f34:	2700      	movs	r7, #0
    uint32_t l_min = 0;
 8000f36:	46b8      	mov	r8, r7
    uint32_t l_hour = 0;
 8000f38:	46b9      	mov	r9, r7
 8000f3a:	e7c1      	b.n	8000ec0 <parse_nmea+0x88>
    uint32_t l_day = 0;
 8000f3c:	2600      	movs	r6, #0
    uint32_t l_month = 0;
 8000f3e:	46b2      	mov	sl, r6
    uint32_t l_year = 0;
 8000f40:	4634      	mov	r4, r6
 8000f42:	e7e3      	b.n	8000f0c <parse_nmea+0xd4>
 8000f44:	080048e0 	.word	0x080048e0
 8000f48:	20000004 	.word	0x20000004
 8000f4c:	20000008 	.word	0x20000008
 8000f50:	20000010 	.word	0x20000010
 8000f54:	2000007c 	.word	0x2000007c
 8000f58:	2000000c 	.word	0x2000000c
 8000f5c:	20000000 	.word	0x20000000

08000f60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f60:	b570      	push	{r4, r5, r6, lr}
 8000f62:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	2400      	movs	r4, #0
 8000f66:	9405      	str	r4, [sp, #20]
 8000f68:	9406      	str	r4, [sp, #24]
 8000f6a:	9407      	str	r4, [sp, #28]
 8000f6c:	9408      	str	r4, [sp, #32]
 8000f6e:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f70:	4b20      	ldr	r3, [pc, #128]	; (8000ff4 <MX_GPIO_Init+0x94>)
 8000f72:	695a      	ldr	r2, [r3, #20]
 8000f74:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	695a      	ldr	r2, [r3, #20]
 8000f7c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000f80:	9201      	str	r2, [sp, #4]
 8000f82:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f84:	695a      	ldr	r2, [r3, #20]
 8000f86:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000f8a:	615a      	str	r2, [r3, #20]
 8000f8c:	695a      	ldr	r2, [r3, #20]
 8000f8e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000f92:	9202      	str	r2, [sp, #8]
 8000f94:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f96:	695a      	ldr	r2, [r3, #20]
 8000f98:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000f9c:	615a      	str	r2, [r3, #20]
 8000f9e:	695a      	ldr	r2, [r3, #20]
 8000fa0:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000fa4:	9203      	str	r2, [sp, #12]
 8000fa6:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fa8:	695a      	ldr	r2, [r3, #20]
 8000faa:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000fae:	615a      	str	r2, [r3, #20]
 8000fb0:	695b      	ldr	r3, [r3, #20]
 8000fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fb6:	9304      	str	r3, [sp, #16]
 8000fb8:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000fba:	4d0f      	ldr	r5, [pc, #60]	; (8000ff8 <MX_GPIO_Init+0x98>)
 8000fbc:	4622      	mov	r2, r4
 8000fbe:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc2:	4628      	mov	r0, r5
 8000fc4:	f001 f818 	bl	8001ff8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000fc8:	2601      	movs	r6, #1
 8000fca:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <MX_GPIO_Init+0x9c>)
 8000fce:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd0:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd2:	a905      	add	r1, sp, #20
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f000 ff4b 	bl	8001e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000fda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fde:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe2:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe4:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe6:	a905      	add	r1, sp, #20
 8000fe8:	4628      	mov	r0, r5
 8000fea:	f000 ff41 	bl	8001e70 <HAL_GPIO_Init>

}
 8000fee:	b00a      	add	sp, #40	; 0x28
 8000ff0:	bd70      	pop	{r4, r5, r6, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40021000 	.word	0x40021000
 8000ff8:	48000400 	.word	0x48000400
 8000ffc:	10110000 	.word	0x10110000

08001000 <MX_DMA_Init>:
{
 8001000:	b500      	push	{lr}
 8001002:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <MX_DMA_Init+0x30>)
 8001006:	695a      	ldr	r2, [r3, #20]
 8001008:	f042 0201 	orr.w	r2, r2, #1
 800100c:	615a      	str	r2, [r3, #20]
 800100e:	695b      	ldr	r3, [r3, #20]
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001018:	2200      	movs	r2, #0
 800101a:	4611      	mov	r1, r2
 800101c:	200d      	movs	r0, #13
 800101e:	f000 fc47 	bl	80018b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001022:	200d      	movs	r0, #13
 8001024:	f000 fc78 	bl	8001918 <HAL_NVIC_EnableIRQ>
}
 8001028:	b003      	add	sp, #12
 800102a:	f85d fb04 	ldr.w	pc, [sp], #4
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000

08001034 <MX_NVIC_Init>:
{
 8001034:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001036:	2200      	movs	r2, #0
 8001038:	4611      	mov	r1, r2
 800103a:	2025      	movs	r0, #37	; 0x25
 800103c:	f000 fc38 	bl	80018b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001040:	2025      	movs	r0, #37	; 0x25
 8001042:	f000 fc69 	bl	8001918 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001046:	2200      	movs	r2, #0
 8001048:	4611      	mov	r1, r2
 800104a:	2026      	movs	r0, #38	; 0x26
 800104c:	f000 fc30 	bl	80018b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001050:	2026      	movs	r0, #38	; 0x26
 8001052:	f000 fc61 	bl	8001918 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001056:	2200      	movs	r2, #0
 8001058:	4611      	mov	r1, r2
 800105a:	2006      	movs	r0, #6
 800105c:	f000 fc28 	bl	80018b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001060:	2006      	movs	r0, #6
 8001062:	f000 fc59 	bl	8001918 <HAL_NVIC_EnableIRQ>
}
 8001066:	bd08      	pop	{r3, pc}

08001068 <MX_USART2_UART_Init>:
{
 8001068:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 800106a:	4c0f      	ldr	r4, [pc, #60]	; (80010a8 <MX_USART2_UART_Init+0x40>)
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_USART2_UART_Init+0x44>)
 800106e:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 8001070:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001074:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001076:	2300      	movs	r3, #0
 8001078:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800107a:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800107c:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800107e:	220c      	movs	r2, #12
 8001080:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001084:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	6223      	str	r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001088:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800108a:	4620      	mov	r0, r4
 800108c:	f002 fa7b 	bl	8003586 <HAL_UART_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_RXNE);
 8001090:	6822      	ldr	r2, [r4, #0]
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	f043 0301 	orr.w	r3, r3, #1
 8001098:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_TC);
 800109a:	6822      	ldr	r2, [r4, #0]
 800109c:	6853      	ldr	r3, [r2, #4]
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6053      	str	r3, [r2, #4]
}
 80010a4:	bd10      	pop	{r4, pc}
 80010a6:	bf00      	nop
 80010a8:	20000418 	.word	0x20000418
 80010ac:	40004400 	.word	0x40004400

080010b0 <MX_USART1_UART_Init>:
{
 80010b0:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80010b2:	4809      	ldr	r0, [pc, #36]	; (80010d8 <MX_USART1_UART_Init+0x28>)
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_USART1_UART_Init+0x2c>)
 80010b6:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80010b8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80010bc:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010be:	2300      	movs	r3, #0
 80010c0:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010c2:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010c4:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c6:	220c      	movs	r2, #12
 80010c8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010cc:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010ce:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010d0:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010d2:	f002 fa58 	bl	8003586 <HAL_UART_Init>
}
 80010d6:	bd08      	pop	{r3, pc}
 80010d8:	20000318 	.word	0x20000318
 80010dc:	40013800 	.word	0x40013800

080010e0 <MX_DAC1_Init>:
{
 80010e0:	b530      	push	{r4, r5, lr}
 80010e2:	b085      	sub	sp, #20
  DAC_ChannelConfTypeDef sConfig = {0};
 80010e4:	2400      	movs	r4, #0
 80010e6:	9401      	str	r4, [sp, #4]
 80010e8:	9402      	str	r4, [sp, #8]
 80010ea:	9403      	str	r4, [sp, #12]
  hdac1.Instance = DAC1;
 80010ec:	4d08      	ldr	r5, [pc, #32]	; (8001110 <MX_DAC1_Init+0x30>)
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <MX_DAC1_Init+0x34>)
 80010f0:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010f2:	4628      	mov	r0, r5
 80010f4:	f000 fc34 	bl	8001960 <HAL_DAC_Init>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80010f8:	2304      	movs	r3, #4
 80010fa:	9301      	str	r3, [sp, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80010fc:	2302      	movs	r3, #2
 80010fe:	9302      	str	r3, [sp, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001100:	4622      	mov	r2, r4
 8001102:	a901      	add	r1, sp, #4
 8001104:	4628      	mov	r0, r5
 8001106:	f000 fcfb 	bl	8001b00 <HAL_DAC_ConfigChannel>
}
 800110a:	b005      	add	sp, #20
 800110c:	bd30      	pop	{r4, r5, pc}
 800110e:	bf00      	nop
 8001110:	200002c0 	.word	0x200002c0
 8001114:	40007400 	.word	0x40007400

08001118 <MX_TIM2_Init>:
{
 8001118:	b530      	push	{r4, r5, lr}
 800111a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111c:	2400      	movs	r4, #0
 800111e:	9404      	str	r4, [sp, #16]
 8001120:	9405      	str	r4, [sp, #20]
 8001122:	9406      	str	r4, [sp, #24]
 8001124:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001126:	9401      	str	r4, [sp, #4]
 8001128:	9402      	str	r4, [sp, #8]
 800112a:	9403      	str	r4, [sp, #12]
  htim2.Instance = TIM2;
 800112c:	4d0e      	ldr	r5, [pc, #56]	; (8001168 <MX_TIM2_Init+0x50>)
 800112e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001132:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 90-1;
 8001134:	2359      	movs	r3, #89	; 0x59
 8001136:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001138:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 100-1;
 800113a:	2363      	movs	r3, #99	; 0x63
 800113c:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001140:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001142:	4628      	mov	r0, r5
 8001144:	f001 fe16 	bl	8002d74 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001148:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800114e:	a904      	add	r1, sp, #16
 8001150:	4628      	mov	r0, r5
 8001152:	f001 fe35 	bl	8002dc0 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001156:	2320      	movs	r3, #32
 8001158:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800115c:	a901      	add	r1, sp, #4
 800115e:	4628      	mov	r0, r5
 8001160:	f001 fe9c 	bl	8002e9c <HAL_TIMEx_MasterConfigSynchronization>
}
 8001164:	b009      	add	sp, #36	; 0x24
 8001166:	bd30      	pop	{r4, r5, pc}
 8001168:	200003d8 	.word	0x200003d8

0800116c <MX_TIM6_Init>:
{
 800116c:	b530      	push	{r4, r5, lr}
 800116e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001170:	2500      	movs	r5, #0
 8001172:	9501      	str	r5, [sp, #4]
 8001174:	9502      	str	r5, [sp, #8]
 8001176:	9503      	str	r5, [sp, #12]
  htim6.Instance = TIM6;
 8001178:	4c0a      	ldr	r4, [pc, #40]	; (80011a4 <MX_TIM6_Init+0x38>)
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <MX_TIM6_Init+0x3c>)
 800117c:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 90;
 800117e:	235a      	movs	r3, #90	; 0x5a
 8001180:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001182:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 100;
 8001184:	2364      	movs	r3, #100	; 0x64
 8001186:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001188:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800118a:	4620      	mov	r0, r4
 800118c:	f001 fdf2 	bl	8002d74 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001190:	2320      	movs	r3, #32
 8001192:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001194:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001196:	a901      	add	r1, sp, #4
 8001198:	4620      	mov	r0, r4
 800119a:	f001 fe7f 	bl	8002e9c <HAL_TIMEx_MasterConfigSynchronization>
}
 800119e:	b005      	add	sp, #20
 80011a0:	bd30      	pop	{r4, r5, pc}
 80011a2:	bf00      	nop
 80011a4:	20000398 	.word	0x20000398
 80011a8:	40001000 	.word	0x40001000

080011ac <SystemClock_Config>:
{
 80011ac:	b530      	push	{r4, r5, lr}
 80011ae:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b0:	2224      	movs	r2, #36	; 0x24
 80011b2:	2100      	movs	r1, #0
 80011b4:	a80d      	add	r0, sp, #52	; 0x34
 80011b6:	f002 fa53 	bl	8003660 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ba:	2400      	movs	r4, #0
 80011bc:	9407      	str	r4, [sp, #28]
 80011be:	9408      	str	r4, [sp, #32]
 80011c0:	9409      	str	r4, [sp, #36]	; 0x24
 80011c2:	940a      	str	r4, [sp, #40]	; 0x28
 80011c4:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011c6:	9400      	str	r4, [sp, #0]
 80011c8:	9401      	str	r4, [sp, #4]
 80011ca:	9402      	str	r4, [sp, #8]
 80011cc:	9403      	str	r4, [sp, #12]
 80011ce:	9404      	str	r4, [sp, #16]
 80011d0:	9405      	str	r4, [sp, #20]
 80011d2:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2501      	movs	r5, #1
 80011da:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e0:	a80c      	add	r0, sp, #48	; 0x30
 80011e2:	f000 ff1d 	bl	8002020 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e6:	230f      	movs	r3, #15
 80011e8:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011ea:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ec:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011ee:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011f0:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f2:	4621      	mov	r1, r4
 80011f4:	a807      	add	r0, sp, #28
 80011f6:	f001 fa6d 	bl	80026d4 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011fa:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80011fc:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011fe:	4668      	mov	r0, sp
 8001200:	f001 fb6c 	bl	80028dc <HAL_RCCEx_PeriphCLKConfig>
}
 8001204:	b017      	add	sp, #92	; 0x5c
 8001206:	bd30      	pop	{r4, r5, pc}

08001208 <main>:
{
 8001208:	b508      	push	{r3, lr}
    concat_timecode();
 800120a:	f7ff fca9 	bl	8000b60 <concat_timecode>
  HAL_Init();
 800120e:	f000 fb19 	bl	8001844 <HAL_Init>
  SystemClock_Config();
 8001212:	f7ff ffcb 	bl	80011ac <SystemClock_Config>
  MX_GPIO_Init();
 8001216:	f7ff fea3 	bl	8000f60 <MX_GPIO_Init>
  MX_DMA_Init();
 800121a:	f7ff fef1 	bl	8001000 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800121e:	f7ff ff23 	bl	8001068 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001222:	f7ff ff45 	bl	80010b0 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8001226:	f7ff ff5b 	bl	80010e0 <MX_DAC1_Init>
  MX_TIM2_Init();
 800122a:	f7ff ff75 	bl	8001118 <MX_TIM2_Init>
  MX_TIM6_Init();
 800122e:	f7ff ff9d 	bl	800116c <MX_TIM6_Init>
  MX_NVIC_Init();
 8001232:	f7ff feff 	bl	8001034 <MX_NVIC_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001236:	4a3b      	ldr	r2, [pc, #236]	; (8001324 <main+0x11c>)
 8001238:	6811      	ldr	r1, [r2, #0]
 800123a:	680b      	ldr	r3, [r1, #0]
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	600b      	str	r3, [r1, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8001242:	6812      	ldr	r2, [r2, #0]
 8001244:	6813      	ldr	r3, [r2, #0]
 8001246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800124a:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800124c:	4a36      	ldr	r2, [pc, #216]	; (8001328 <main+0x120>)
 800124e:	6811      	ldr	r1, [r2, #0]
 8001250:	680b      	ldr	r3, [r1, #0]
 8001252:	f043 0320 	orr.w	r3, r3, #32
 8001256:	600b      	str	r3, [r1, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 8001258:	6812      	ldr	r2, [r2, #0]
 800125a:	6813      	ldr	r3, [r2, #0]
 800125c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001260:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 8001262:	4832      	ldr	r0, [pc, #200]	; (800132c <main+0x124>)
 8001264:	f001 fc40 	bl	8002ae8 <HAL_TIM_Base_Start_IT>
 8001268:	e01e      	b.n	80012a8 <main+0xa0>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "pong\n", 5);
 800126a:	2205      	movs	r2, #5
 800126c:	4930      	ldr	r1, [pc, #192]	; (8001330 <main+0x128>)
 800126e:	482d      	ldr	r0, [pc, #180]	; (8001324 <main+0x11c>)
 8001270:	f001 fea6 	bl	8002fc0 <HAL_UART_Transmit_IT>
 8001274:	e024      	b.n	80012c0 <main+0xb8>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) timecode,
 8001276:	2264      	movs	r2, #100	; 0x64
 8001278:	492e      	ldr	r1, [pc, #184]	; (8001334 <main+0x12c>)
 800127a:	482a      	ldr	r0, [pc, #168]	; (8001324 <main+0x11c>)
 800127c:	f001 fea0 	bl	8002fc0 <HAL_UART_Transmit_IT>
 8001280:	e025      	b.n	80012ce <main+0xc6>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "query\n", 6);
 8001282:	2206      	movs	r2, #6
 8001284:	492c      	ldr	r1, [pc, #176]	; (8001338 <main+0x130>)
 8001286:	4827      	ldr	r0, [pc, #156]	; (8001324 <main+0x11c>)
 8001288:	f001 fe9a 	bl	8002fc0 <HAL_UART_Transmit_IT>
                HAL_UART_Transmit_IT(&huart1, (uint8_t*) "$PMTK414*33\r\n", 13);
 800128c:	220d      	movs	r2, #13
 800128e:	492b      	ldr	r1, [pc, #172]	; (800133c <main+0x134>)
 8001290:	4825      	ldr	r0, [pc, #148]	; (8001328 <main+0x120>)
 8001292:	f001 fe95 	bl	8002fc0 <HAL_UART_Transmit_IT>
 8001296:	e021      	b.n	80012dc <main+0xd4>
            PC_UART = IDLE;
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <main+0x138>)
 800129a:	2200      	movs	r2, #0
 800129c:	701a      	strb	r2, [r3, #0]
        if (GPS_UART == DONE)
 800129e:	4b29      	ldr	r3, [pc, #164]	; (8001344 <main+0x13c>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d026      	beq.n	80012f6 <main+0xee>
        if (PC_UART == DONE)
 80012a8:	4b25      	ldr	r3, [pc, #148]	; (8001340 <main+0x138>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	2b02      	cmp	r3, #2
 80012b0:	d1f5      	bne.n	800129e <main+0x96>
            if (is_same_string("ping", pc_message, 4))
 80012b2:	2204      	movs	r2, #4
 80012b4:	4924      	ldr	r1, [pc, #144]	; (8001348 <main+0x140>)
 80012b6:	4825      	ldr	r0, [pc, #148]	; (800134c <main+0x144>)
 80012b8:	f000 fa5a 	bl	8001770 <is_same_string>
 80012bc:	2800      	cmp	r0, #0
 80012be:	d1d4      	bne.n	800126a <main+0x62>
            if (is_same_string("send", pc_message, 4))
 80012c0:	2204      	movs	r2, #4
 80012c2:	4921      	ldr	r1, [pc, #132]	; (8001348 <main+0x140>)
 80012c4:	4822      	ldr	r0, [pc, #136]	; (8001350 <main+0x148>)
 80012c6:	f000 fa53 	bl	8001770 <is_same_string>
 80012ca:	2800      	cmp	r0, #0
 80012cc:	d1d3      	bne.n	8001276 <main+0x6e>
            if (is_same_string("NMEAquery", pc_message, 9))
 80012ce:	2209      	movs	r2, #9
 80012d0:	491d      	ldr	r1, [pc, #116]	; (8001348 <main+0x140>)
 80012d2:	4820      	ldr	r0, [pc, #128]	; (8001354 <main+0x14c>)
 80012d4:	f000 fa4c 	bl	8001770 <is_same_string>
 80012d8:	2800      	cmp	r0, #0
 80012da:	d1d2      	bne.n	8001282 <main+0x7a>
            if (is_same_string("NMEAset", pc_message, 7))
 80012dc:	2207      	movs	r2, #7
 80012de:	491a      	ldr	r1, [pc, #104]	; (8001348 <main+0x140>)
 80012e0:	481d      	ldr	r0, [pc, #116]	; (8001358 <main+0x150>)
 80012e2:	f000 fa45 	bl	8001770 <is_same_string>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d0d6      	beq.n	8001298 <main+0x90>
                HAL_UART_Transmit_IT(&huart1,
 80012ea:	2233      	movs	r2, #51	; 0x33
 80012ec:	491b      	ldr	r1, [pc, #108]	; (800135c <main+0x154>)
 80012ee:	480e      	ldr	r0, [pc, #56]	; (8001328 <main+0x120>)
 80012f0:	f001 fe66 	bl	8002fc0 <HAL_UART_Transmit_IT>
 80012f4:	e7d0      	b.n	8001298 <main+0x90>
            parse_nmea(gps_message,gps_message_length);
 80012f6:	4d1a      	ldr	r5, [pc, #104]	; (8001360 <main+0x158>)
 80012f8:	6829      	ldr	r1, [r5, #0]
 80012fa:	4c1a      	ldr	r4, [pc, #104]	; (8001364 <main+0x15c>)
 80012fc:	4620      	mov	r0, r4
 80012fe:	f7ff fd9b 	bl	8000e38 <parse_nmea>
            gps_message[gps_message_length] = '\n';
 8001302:	682b      	ldr	r3, [r5, #0]
 8001304:	220a      	movs	r2, #10
 8001306:	54e2      	strb	r2, [r4, r3]
            HAL_UART_Transmit_IT(&huart2, (uint8_t*) gps_message,
 8001308:	682a      	ldr	r2, [r5, #0]
 800130a:	3201      	adds	r2, #1
 800130c:	b292      	uxth	r2, r2
 800130e:	4621      	mov	r1, r4
 8001310:	4804      	ldr	r0, [pc, #16]	; (8001324 <main+0x11c>)
 8001312:	f001 fe55 	bl	8002fc0 <HAL_UART_Transmit_IT>
            concat_timecode();
 8001316:	f7ff fc23 	bl	8000b60 <concat_timecode>
            GPS_UART = IDLE;
 800131a:	4b0a      	ldr	r3, [pc, #40]	; (8001344 <main+0x13c>)
 800131c:	2200      	movs	r2, #0
 800131e:	701a      	strb	r2, [r3, #0]
 8001320:	e7c2      	b.n	80012a8 <main+0xa0>
 8001322:	bf00      	nop
 8001324:	20000418 	.word	0x20000418
 8001328:	20000318 	.word	0x20000318
 800132c:	20000398 	.word	0x20000398
 8001330:	080048f0 	.word	0x080048f0
 8001334:	20000014 	.word	0x20000014
 8001338:	0800490c 	.word	0x0800490c
 800133c:	08004914 	.word	0x08004914
 8001340:	20000115 	.word	0x20000115
 8001344:	20000114 	.word	0x20000114
 8001348:	20000498 	.word	0x20000498
 800134c:	080048e8 	.word	0x080048e8
 8001350:	080048f8 	.word	0x080048f8
 8001354:	08004900 	.word	0x08004900
 8001358:	08004924 	.word	0x08004924
 800135c:	0800492c 	.word	0x0800492c
 8001360:	20000120 	.word	0x20000120
 8001364:	200004fc 	.word	0x200004fc

08001368 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001368:	4770      	bx	lr
	...

0800136c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800136c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800136e:	4b0a      	ldr	r3, [pc, #40]	; (8001398 <HAL_MspInit+0x2c>)
 8001370:	699a      	ldr	r2, [r3, #24]
 8001372:	f042 0201 	orr.w	r2, r2, #1
 8001376:	619a      	str	r2, [r3, #24]
 8001378:	699a      	ldr	r2, [r3, #24]
 800137a:	f002 0201 	and.w	r2, r2, #1
 800137e:	9200      	str	r2, [sp, #0]
 8001380:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001382:	69da      	ldr	r2, [r3, #28]
 8001384:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001388:	61da      	str	r2, [r3, #28]
 800138a:	69db      	ldr	r3, [r3, #28]
 800138c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001394:	b002      	add	sp, #8
 8001396:	4770      	bx	lr
 8001398:	40021000 	.word	0x40021000

0800139c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800139c:	b530      	push	{r4, r5, lr}
 800139e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a0:	2300      	movs	r3, #0
 80013a2:	9303      	str	r3, [sp, #12]
 80013a4:	9304      	str	r3, [sp, #16]
 80013a6:	9305      	str	r3, [sp, #20]
 80013a8:	9306      	str	r3, [sp, #24]
 80013aa:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 80013ac:	6802      	ldr	r2, [r0, #0]
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <HAL_DAC_MspInit+0xac>)
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d001      	beq.n	80013b8 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80013b4:	b009      	add	sp, #36	; 0x24
 80013b6:	bd30      	pop	{r4, r5, pc}
 80013b8:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 80013ba:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
 80013be:	69da      	ldr	r2, [r3, #28]
 80013c0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80013c4:	61da      	str	r2, [r3, #28]
 80013c6:	69da      	ldr	r2, [r3, #28]
 80013c8:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 80013cc:	9201      	str	r2, [sp, #4]
 80013ce:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013d0:	695a      	ldr	r2, [r3, #20]
 80013d2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013d6:	615a      	str	r2, [r3, #20]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013de:	9302      	str	r3, [sp, #8]
 80013e0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013e2:	2510      	movs	r5, #16
 80013e4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ea:	a903      	add	r1, sp, #12
 80013ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f0:	f000 fd3e 	bl	8001e70 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 80013f4:	4815      	ldr	r0, [pc, #84]	; (800144c <HAL_DAC_MspInit+0xb0>)
 80013f6:	4b16      	ldr	r3, [pc, #88]	; (8001450 <HAL_DAC_MspInit+0xb4>)
 80013f8:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80013fa:	6045      	str	r5, [r0, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	6083      	str	r3, [r0, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	60c2      	str	r2, [r0, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001404:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001408:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800140a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800140e:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8001410:	6183      	str	r3, [r0, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001412:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001416:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001418:	f000 fc26 	bl	8001c68 <HAL_DMA_Init>
 800141c:	b980      	cbnz	r0, 8001440 <HAL_DAC_MspInit+0xa4>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800141e:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <HAL_DAC_MspInit+0xb8>)
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001426:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_DAC_MspInit+0xb0>)
 800142a:	60a3      	str	r3, [r4, #8]
 800142c:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800142e:	2200      	movs	r2, #0
 8001430:	4611      	mov	r1, r2
 8001432:	2036      	movs	r0, #54	; 0x36
 8001434:	f000 fa3c 	bl	80018b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001438:	2036      	movs	r0, #54	; 0x36
 800143a:	f000 fa6d 	bl	8001918 <HAL_NVIC_EnableIRQ>
}
 800143e:	e7b9      	b.n	80013b4 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 8001440:	f7ff ff92 	bl	8001368 <Error_Handler>
 8001444:	e7eb      	b.n	800141e <HAL_DAC_MspInit+0x82>
 8001446:	bf00      	nop
 8001448:	40007400 	.word	0x40007400
 800144c:	200002d4 	.word	0x200002d4
 8001450:	40020030 	.word	0x40020030
 8001454:	40010000 	.word	0x40010000

08001458 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001458:	b500      	push	{lr}
 800145a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 800145c:	6803      	ldr	r3, [r0, #0]
 800145e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001462:	d005      	beq.n	8001470 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001464:	4a16      	ldr	r2, [pc, #88]	; (80014c0 <HAL_TIM_Base_MspInit+0x68>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d016      	beq.n	8001498 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800146a:	b003      	add	sp, #12
 800146c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001470:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001474:	69da      	ldr	r2, [r3, #28]
 8001476:	f042 0201 	orr.w	r2, r2, #1
 800147a:	61da      	str	r2, [r3, #28]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	f003 0301 	and.w	r3, r3, #1
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001486:	2200      	movs	r2, #0
 8001488:	4611      	mov	r1, r2
 800148a:	201c      	movs	r0, #28
 800148c:	f000 fa10 	bl	80018b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001490:	201c      	movs	r0, #28
 8001492:	f000 fa41 	bl	8001918 <HAL_NVIC_EnableIRQ>
 8001496:	e7e8      	b.n	800146a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001498:	4b0a      	ldr	r3, [pc, #40]	; (80014c4 <HAL_TIM_Base_MspInit+0x6c>)
 800149a:	69da      	ldr	r2, [r3, #28]
 800149c:	f042 0210 	orr.w	r2, r2, #16
 80014a0:	61da      	str	r2, [r3, #28]
 80014a2:	69db      	ldr	r3, [r3, #28]
 80014a4:	f003 0310 	and.w	r3, r3, #16
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80014ac:	2200      	movs	r2, #0
 80014ae:	4611      	mov	r1, r2
 80014b0:	2036      	movs	r0, #54	; 0x36
 80014b2:	f000 f9fd 	bl	80018b0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80014b6:	2036      	movs	r0, #54	; 0x36
 80014b8:	f000 fa2e 	bl	8001918 <HAL_NVIC_EnableIRQ>
}
 80014bc:	e7d5      	b.n	800146a <HAL_TIM_Base_MspInit+0x12>
 80014be:	bf00      	nop
 80014c0:	40001000 	.word	0x40001000
 80014c4:	40021000 	.word	0x40021000

080014c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c8:	b500      	push	{lr}
 80014ca:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014cc:	2300      	movs	r3, #0
 80014ce:	9305      	str	r3, [sp, #20]
 80014d0:	9306      	str	r3, [sp, #24]
 80014d2:	9307      	str	r3, [sp, #28]
 80014d4:	9308      	str	r3, [sp, #32]
 80014d6:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 80014d8:	6803      	ldr	r3, [r0, #0]
 80014da:	4a25      	ldr	r2, [pc, #148]	; (8001570 <HAL_UART_MspInit+0xa8>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d005      	beq.n	80014ec <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80014e0:	4a24      	ldr	r2, [pc, #144]	; (8001574 <HAL_UART_MspInit+0xac>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d022      	beq.n	800152c <HAL_UART_MspInit+0x64>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014e6:	b00b      	add	sp, #44	; 0x2c
 80014e8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_UART_MspInit+0xb0>)
 80014ee:	699a      	ldr	r2, [r3, #24]
 80014f0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80014f4:	619a      	str	r2, [r3, #24]
 80014f6:	699a      	ldr	r2, [r3, #24]
 80014f8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80014fc:	9201      	str	r2, [sp, #4]
 80014fe:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001500:	695a      	ldr	r2, [r3, #20]
 8001502:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001506:	615a      	str	r2, [r3, #20]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800150e:	9302      	str	r3, [sp, #8]
 8001510:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001512:	2330      	movs	r3, #48	; 0x30
 8001514:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	2302      	movs	r3, #2
 8001518:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800151e:	2307      	movs	r3, #7
 8001520:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001522:	a905      	add	r1, sp, #20
 8001524:	4815      	ldr	r0, [pc, #84]	; (800157c <HAL_UART_MspInit+0xb4>)
 8001526:	f000 fca3 	bl	8001e70 <HAL_GPIO_Init>
 800152a:	e7dc      	b.n	80014e6 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800152c:	4b12      	ldr	r3, [pc, #72]	; (8001578 <HAL_UART_MspInit+0xb0>)
 800152e:	69da      	ldr	r2, [r3, #28]
 8001530:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001534:	61da      	str	r2, [r3, #28]
 8001536:	69da      	ldr	r2, [r3, #28]
 8001538:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800153c:	9203      	str	r2, [sp, #12]
 800153e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	9304      	str	r3, [sp, #16]
 8001550:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001552:	230c      	movs	r3, #12
 8001554:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800155a:	2303      	movs	r3, #3
 800155c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800155e:	2307      	movs	r3, #7
 8001560:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001562:	a905      	add	r1, sp, #20
 8001564:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001568:	f000 fc82 	bl	8001e70 <HAL_GPIO_Init>
}
 800156c:	e7bb      	b.n	80014e6 <HAL_UART_MspInit+0x1e>
 800156e:	bf00      	nop
 8001570:	40013800 	.word	0x40013800
 8001574:	40004400 	.word	0x40004400
 8001578:	40021000 	.word	0x40021000
 800157c:	48000800 	.word	0x48000800

08001580 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001580:	4770      	bx	lr

08001582 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001582:	e7fe      	b.n	8001582 <HardFault_Handler>

08001584 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	e7fe      	b.n	8001586 <BusFault_Handler>

08001588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001588:	e7fe      	b.n	8001588 <UsageFault_Handler>

0800158a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800158a:	4770      	bx	lr

0800158c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800158c:	4770      	bx	lr

0800158e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001590:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001592:	f000 f969 	bl	8001868 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001596:	bd08      	pop	{r3, pc}

08001598 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001598:	b510      	push	{r4, lr}
 800159a:	b082      	sub	sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800159c:	2001      	movs	r0, #1
 800159e:	f000 fd31 	bl	8002004 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80015a2:	4c09      	ldr	r4, [pc, #36]	; (80015c8 <EXTI0_IRQHandler+0x30>)
 80015a4:	2100      	movs	r1, #0
 80015a6:	4620      	mov	r0, r4
 80015a8:	f000 f9ec 	bl	8001984 <HAL_DAC_Stop_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)timecode_pulse, TIMECODE_LENGTH, DAC_ALIGN_12B_R);
 80015ac:	2100      	movs	r1, #0
 80015ae:	9100      	str	r1, [sp, #0]
 80015b0:	2364      	movs	r3, #100	; 0x64
 80015b2:	4a06      	ldr	r2, [pc, #24]	; (80015cc <EXTI0_IRQHandler+0x34>)
 80015b4:	4620      	mov	r0, r4
 80015b6:	f000 fa2b 	bl	8001a10 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 80015ba:	4805      	ldr	r0, [pc, #20]	; (80015d0 <EXTI0_IRQHandler+0x38>)
 80015bc:	f001 fa94 	bl	8002ae8 <HAL_TIM_Base_Start_IT>

  concat_timecode();
 80015c0:	f7ff face 	bl	8000b60 <concat_timecode>

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015c4:	b002      	add	sp, #8
 80015c6:	bd10      	pop	{r4, pc}
 80015c8:	200002c0 	.word	0x200002c0
 80015cc:	20000130 	.word	0x20000130
 80015d0:	20000398 	.word	0x20000398

080015d4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80015d4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80015d6:	4802      	ldr	r0, [pc, #8]	; (80015e0 <DMA1_Channel3_IRQHandler+0xc>)
 80015d8:	f000 fbef 	bl	8001dba <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80015dc:	bd08      	pop	{r3, pc}
 80015de:	bf00      	nop
 80015e0:	200002d4 	.word	0x200002d4

080015e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015e4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015e6:	4802      	ldr	r0, [pc, #8]	; (80015f0 <TIM2_IRQHandler+0xc>)
 80015e8:	f001 faaf 	bl	8002b4a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80015ec:	bd08      	pop	{r3, pc}
 80015ee:	bf00      	nop
 80015f0:	200003d8 	.word	0x200003d8

080015f4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80015f4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  int  flag = __HAL_UART_GET_FLAG(&huart1,UART_FLAG_RXNE);
 80015f6:	4808      	ldr	r0, [pc, #32]	; (8001618 <USART1_IRQHandler+0x24>)
 80015f8:	6803      	ldr	r3, [r0, #0]
 80015fa:	69dc      	ldr	r4, [r3, #28]
 80015fc:	f004 0420 	and.w	r4, r4, #32
  char  inchar;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001600:	f001 fd26 	bl	8003050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (flag == 1)
 8001604:	b904      	cbnz	r4, 8001608 <USART1_IRQHandler+0x14>
    {
      inchar = (uint8_t)huart1.Instance->RDR;
      handle_uart_interrupt_gps(inchar);
    }
  /* USER CODE END USART1_IRQn 1 */
}
 8001606:	bd10      	pop	{r4, pc}
      inchar = (uint8_t)huart1.Instance->RDR;
 8001608:	4b03      	ldr	r3, [pc, #12]	; (8001618 <USART1_IRQHandler+0x24>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
      handle_uart_interrupt_gps(inchar);
 800160e:	b2c0      	uxtb	r0, r0
 8001610:	f000 f882 	bl	8001718 <handle_uart_interrupt_gps>
}
 8001614:	e7f7      	b.n	8001606 <USART1_IRQHandler+0x12>
 8001616:	bf00      	nop
 8001618:	20000318 	.word	0x20000318

0800161c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800161c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  int  flag = __HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE);
 800161e:	4808      	ldr	r0, [pc, #32]	; (8001640 <USART2_IRQHandler+0x24>)
 8001620:	6803      	ldr	r3, [r0, #0]
 8001622:	69dc      	ldr	r4, [r3, #28]
 8001624:	f004 0420 	and.w	r4, r4, #32
  char  inchar;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001628:	f001 fd12 	bl	8003050 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if (flag == 1)
 800162c:	b904      	cbnz	r4, 8001630 <USART2_IRQHandler+0x14>
  {
    inchar = (uint8_t)huart2.Instance->RDR;
    handle_uart_interrupt_pc(inchar);
  }
  /* USER CODE END USART2_IRQn 1 */
}
 800162e:	bd10      	pop	{r4, pc}
    inchar = (uint8_t)huart2.Instance->RDR;
 8001630:	4b03      	ldr	r3, [pc, #12]	; (8001640 <USART2_IRQHandler+0x24>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    handle_uart_interrupt_pc(inchar);
 8001636:	b2c0      	uxtb	r0, r0
 8001638:	f000 f842 	bl	80016c0 <handle_uart_interrupt_pc>
}
 800163c:	e7f7      	b.n	800162e <USART2_IRQHandler+0x12>
 800163e:	bf00      	nop
 8001640:	20000418 	.word	0x20000418

08001644 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 8001644:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001646:	4803      	ldr	r0, [pc, #12]	; (8001654 <TIM6_DAC1_IRQHandler+0x10>)
 8001648:	f001 fa7f 	bl	8002b4a <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800164c:	4802      	ldr	r0, [pc, #8]	; (8001658 <TIM6_DAC1_IRQHandler+0x14>)
 800164e:	f000 faaa 	bl	8001ba6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 8001652:	bd08      	pop	{r3, pc}
 8001654:	20000398 	.word	0x20000398
 8001658:	200002c0 	.word	0x200002c0

0800165c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800165c:	b510      	push	{r4, lr}
 800165e:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001660:	4a0c      	ldr	r2, [pc, #48]	; (8001694 <_sbrk+0x38>)
 8001662:	490d      	ldr	r1, [pc, #52]	; (8001698 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001664:	480d      	ldr	r0, [pc, #52]	; (800169c <_sbrk+0x40>)
 8001666:	6800      	ldr	r0, [r0, #0]
 8001668:	b140      	cbz	r0, 800167c <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800166a:	480c      	ldr	r0, [pc, #48]	; (800169c <_sbrk+0x40>)
 800166c:	6800      	ldr	r0, [r0, #0]
 800166e:	4403      	add	r3, r0
 8001670:	1a52      	subs	r2, r2, r1
 8001672:	4293      	cmp	r3, r2
 8001674:	d806      	bhi.n	8001684 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <_sbrk+0x40>)
 8001678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 800167a:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800167c:	4807      	ldr	r0, [pc, #28]	; (800169c <_sbrk+0x40>)
 800167e:	4c08      	ldr	r4, [pc, #32]	; (80016a0 <_sbrk+0x44>)
 8001680:	6004      	str	r4, [r0, #0]
 8001682:	e7f2      	b.n	800166a <_sbrk+0xe>
    errno = ENOMEM;
 8001684:	f001 ffb2 	bl	80035ec <__errno>
 8001688:	230c      	movs	r3, #12
 800168a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800168c:	f04f 30ff 	mov.w	r0, #4294967295
 8001690:	e7f3      	b.n	800167a <_sbrk+0x1e>
 8001692:	bf00      	nop
 8001694:	20003000 	.word	0x20003000
 8001698:	00000400 	.word	0x00000400
 800169c:	20000110 	.word	0x20000110
 80016a0:	20000568 	.word	0x20000568

080016a4 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016a4:	4b05      	ldr	r3, [pc, #20]	; (80016bc <SystemInit+0x18>)
 80016a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80016aa:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80016ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80016b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80016b6:	609a      	str	r2, [r3, #8]
#endif
}
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000ed00 	.word	0xe000ed00

080016c0 <handle_uart_interrupt_pc>:

void handle_uart_interrupt_pc(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 80016c0:	2824      	cmp	r0, #36	; 0x24
 80016c2:	d007      	beq.n	80016d4 <handle_uart_interrupt_pc+0x14>
    {
        current_index = 0;
        PC_UART = RECEIVING;
    }
    else if (inchar == '*')
 80016c4:	282a      	cmp	r0, #42	; 0x2a
 80016c6:	d00c      	beq.n	80016e2 <handle_uart_interrupt_pc+0x22>
    {
        pc_message_length = current_index;
        PC_UART = DONE;
    }
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 80016c8:	4b0f      	ldr	r3, [pc, #60]	; (8001708 <handle_uart_interrupt_pc+0x48>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d00f      	beq.n	80016f2 <handle_uart_interrupt_pc+0x32>
    {
        pc_message[current_index] = inchar;
        current_index++;
    }
}
 80016d2:	4770      	bx	lr
        current_index = 0;
 80016d4:	4b0d      	ldr	r3, [pc, #52]	; (800170c <handle_uart_interrupt_pc+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
        PC_UART = RECEIVING;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <handle_uart_interrupt_pc+0x48>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	4770      	bx	lr
        pc_message_length = current_index;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <handle_uart_interrupt_pc+0x4c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <handle_uart_interrupt_pc+0x50>)
 80016e8:	601a      	str	r2, [r3, #0]
        PC_UART = DONE;
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <handle_uart_interrupt_pc+0x48>)
 80016ec:	2202      	movs	r2, #2
 80016ee:	701a      	strb	r2, [r3, #0]
 80016f0:	4770      	bx	lr
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <handle_uart_interrupt_pc+0x4c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	2b63      	cmp	r3, #99	; 0x63
 80016f8:	dceb      	bgt.n	80016d2 <handle_uart_interrupt_pc+0x12>
        pc_message[current_index] = inchar;
 80016fa:	4a06      	ldr	r2, [pc, #24]	; (8001714 <handle_uart_interrupt_pc+0x54>)
 80016fc:	54d0      	strb	r0, [r2, r3]
        current_index++;
 80016fe:	3301      	adds	r3, #1
 8001700:	4a02      	ldr	r2, [pc, #8]	; (800170c <handle_uart_interrupt_pc+0x4c>)
 8001702:	6013      	str	r3, [r2, #0]
}
 8001704:	e7e5      	b.n	80016d2 <handle_uart_interrupt_pc+0x12>
 8001706:	bf00      	nop
 8001708:	20000115 	.word	0x20000115
 800170c:	20000118 	.word	0x20000118
 8001710:	20000124 	.word	0x20000124
 8001714:	20000498 	.word	0x20000498

08001718 <handle_uart_interrupt_gps>:

void handle_uart_interrupt_gps(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 8001718:	2824      	cmp	r0, #36	; 0x24
 800171a:	d007      	beq.n	800172c <handle_uart_interrupt_gps+0x14>
    {
        current_index = 0;
       GPS_UART = RECEIVING;
    }
    else if (inchar == '*')
 800171c:	282a      	cmp	r0, #42	; 0x2a
 800171e:	d00c      	beq.n	800173a <handle_uart_interrupt_gps+0x22>
    {
        gps_message_length = current_index;
        GPS_UART = DONE;
    }
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <handle_uart_interrupt_gps+0x48>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	b2db      	uxtb	r3, r3
 8001726:	2b01      	cmp	r3, #1
 8001728:	d00f      	beq.n	800174a <handle_uart_interrupt_gps+0x32>
    {
        gps_message[current_index] = inchar;
        current_index++;
    }
}
 800172a:	4770      	bx	lr
        current_index = 0;
 800172c:	4b0d      	ldr	r3, [pc, #52]	; (8001764 <handle_uart_interrupt_gps+0x4c>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
       GPS_UART = RECEIVING;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <handle_uart_interrupt_gps+0x48>)
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
 8001738:	4770      	bx	lr
        gps_message_length = current_index;
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <handle_uart_interrupt_gps+0x4c>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <handle_uart_interrupt_gps+0x50>)
 8001740:	601a      	str	r2, [r3, #0]
        GPS_UART = DONE;
 8001742:	4b07      	ldr	r3, [pc, #28]	; (8001760 <handle_uart_interrupt_gps+0x48>)
 8001744:	2202      	movs	r2, #2
 8001746:	701a      	strb	r2, [r3, #0]
 8001748:	4770      	bx	lr
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <handle_uart_interrupt_gps+0x4c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b63      	cmp	r3, #99	; 0x63
 8001750:	dceb      	bgt.n	800172a <handle_uart_interrupt_gps+0x12>
        gps_message[current_index] = inchar;
 8001752:	4a06      	ldr	r2, [pc, #24]	; (800176c <handle_uart_interrupt_gps+0x54>)
 8001754:	54d0      	strb	r0, [r2, r3]
        current_index++;
 8001756:	3301      	adds	r3, #1
 8001758:	4a02      	ldr	r2, [pc, #8]	; (8001764 <handle_uart_interrupt_gps+0x4c>)
 800175a:	6013      	str	r3, [r2, #0]
}
 800175c:	e7e5      	b.n	800172a <handle_uart_interrupt_gps+0x12>
 800175e:	bf00      	nop
 8001760:	20000114 	.word	0x20000114
 8001764:	2000011c 	.word	0x2000011c
 8001768:	20000120 	.word	0x20000120
 800176c:	200004fc 	.word	0x200004fc

08001770 <is_same_string>:


bool is_same_string(const char str1[], const char str2[], int length)
{
    bool isSame = true;
    for (int i = 0; i < length; i++)
 8001770:	2300      	movs	r3, #0
 8001772:	4293      	cmp	r3, r2
 8001774:	da0c      	bge.n	8001790 <is_same_string+0x20>
{
 8001776:	b430      	push	{r4, r5}
    {
        if (str1[i] != str2[i])
 8001778:	5cc5      	ldrb	r5, [r0, r3]
 800177a:	5ccc      	ldrb	r4, [r1, r3]
 800177c:	42a5      	cmp	r5, r4
 800177e:	d105      	bne.n	800178c <is_same_string+0x1c>
    for (int i = 0; i < length; i++)
 8001780:	3301      	adds	r3, #1
 8001782:	4293      	cmp	r3, r2
 8001784:	dbf8      	blt.n	8001778 <is_same_string+0x8>
    bool isSame = true;
 8001786:	2001      	movs	r0, #1
            isSame = false;
            break;
        }
    }
    return isSame;
}
 8001788:	bc30      	pop	{r4, r5}
 800178a:	4770      	bx	lr
            isSame = false;
 800178c:	2000      	movs	r0, #0
 800178e:	e7fb      	b.n	8001788 <is_same_string+0x18>
    bool isSame = true;
 8001790:	2001      	movs	r0, #1
}
 8001792:	4770      	bx	lr

08001794 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8001794:	b508      	push	{r3, lr}
    //HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
    HAL_TIM_Base_Stop_IT(&htim6);
 8001796:	4802      	ldr	r0, [pc, #8]	; (80017a0 <HAL_DAC_ConvCpltCallbackCh1+0xc>)
 8001798:	f001 f9bc 	bl	8002b14 <HAL_TIM_Base_Stop_IT>
}
 800179c:	bd08      	pop	{r3, pc}
 800179e:	bf00      	nop
 80017a0:	20000398 	.word	0x20000398

080017a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017dc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80017a8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80017aa:	e003      	b.n	80017b4 <LoopCopyDataInit>

080017ac <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80017ac:	4b0c      	ldr	r3, [pc, #48]	; (80017e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80017ae:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80017b0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80017b2:	3104      	adds	r1, #4

080017b4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80017b4:	480b      	ldr	r0, [pc, #44]	; (80017e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80017b8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80017ba:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80017bc:	d3f6      	bcc.n	80017ac <CopyDataInit>
	ldr	r2, =_sbss
 80017be:	4a0b      	ldr	r2, [pc, #44]	; (80017ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80017c0:	e002      	b.n	80017c8 <LoopFillZerobss>

080017c2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80017c2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80017c4:	f842 3b04 	str.w	r3, [r2], #4

080017c8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <LoopForever+0x16>)
	cmp	r2, r3
 80017ca:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80017cc:	d3f9      	bcc.n	80017c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017ce:	f7ff ff69 	bl	80016a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017d2:	f001 ff11 	bl	80035f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017d6:	f7ff fd17 	bl	8001208 <main>

080017da <LoopForever>:

LoopForever:
    b LoopForever
 80017da:	e7fe      	b.n	80017da <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80017dc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80017e0:	080049e8 	.word	0x080049e8
	ldr	r0, =_sdata
 80017e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80017e8:	200000f4 	.word	0x200000f4
	ldr	r2, =_sbss
 80017ec:	200000f4 	.word	0x200000f4
	ldr	r3, = _ebss
 80017f0:	20000568 	.word	0x20000568

080017f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017f4:	e7fe      	b.n	80017f4 <ADC1_2_IRQHandler>
	...

080017f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017f8:	b510      	push	{r4, lr}
 80017fa:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017fc:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <HAL_InitTick+0x40>)
 80017fe:	7818      	ldrb	r0, [r3, #0]
 8001800:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001804:	fbb3 f3f0 	udiv	r3, r3, r0
 8001808:	4a0c      	ldr	r2, [pc, #48]	; (800183c <HAL_InitTick+0x44>)
 800180a:	6810      	ldr	r0, [r2, #0]
 800180c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001810:	f000 f890 	bl	8001934 <HAL_SYSTICK_Config>
 8001814:	b968      	cbnz	r0, 8001832 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001816:	2c0f      	cmp	r4, #15
 8001818:	d901      	bls.n	800181e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 800181a:	2001      	movs	r0, #1
 800181c:	e00a      	b.n	8001834 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800181e:	2200      	movs	r2, #0
 8001820:	4621      	mov	r1, r4
 8001822:	f04f 30ff 	mov.w	r0, #4294967295
 8001826:	f000 f843 	bl	80018b0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800182a:	4b05      	ldr	r3, [pc, #20]	; (8001840 <HAL_InitTick+0x48>)
 800182c:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 800182e:	2000      	movs	r0, #0
 8001830:	e000      	b.n	8001834 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001832:	2001      	movs	r0, #1
}
 8001834:	bd10      	pop	{r4, pc}
 8001836:	bf00      	nop
 8001838:	20000084 	.word	0x20000084
 800183c:	20000080 	.word	0x20000080
 8001840:	20000088 	.word	0x20000088

08001844 <HAL_Init>:
{
 8001844:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001846:	4a07      	ldr	r2, [pc, #28]	; (8001864 <HAL_Init+0x20>)
 8001848:	6813      	ldr	r3, [r2, #0]
 800184a:	f043 0310 	orr.w	r3, r3, #16
 800184e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f81b 	bl	800188c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff ffce 	bl	80017f8 <HAL_InitTick>
  HAL_MspInit();
 800185c:	f7ff fd86 	bl	800136c <HAL_MspInit>
}
 8001860:	2000      	movs	r0, #0
 8001862:	bd08      	pop	{r3, pc}
 8001864:	40022000 	.word	0x40022000

08001868 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001868:	4a03      	ldr	r2, [pc, #12]	; (8001878 <HAL_IncTick+0x10>)
 800186a:	6811      	ldr	r1, [r2, #0]
 800186c:	4b03      	ldr	r3, [pc, #12]	; (800187c <HAL_IncTick+0x14>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	440b      	add	r3, r1
 8001872:	6013      	str	r3, [r2, #0]
}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000560 	.word	0x20000560
 800187c:	20000084 	.word	0x20000084

08001880 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001880:	4b01      	ldr	r3, [pc, #4]	; (8001888 <HAL_GetTick+0x8>)
 8001882:	6818      	ldr	r0, [r3, #0]
}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	20000560 	.word	0x20000560

0800188c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4a07      	ldr	r2, [pc, #28]	; (80018ac <HAL_NVIC_SetPriorityGrouping+0x20>)
 800188e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001890:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001894:	041b      	lsls	r3, r3, #16
 8001896:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001898:	0200      	lsls	r0, r0, #8
 800189a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800189e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 80018a0:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 80018a4:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80018a8:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018aa:	4770      	bx	lr
 80018ac:	e000ed00 	.word	0xe000ed00

080018b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018b2:	4b17      	ldr	r3, [pc, #92]	; (8001910 <HAL_NVIC_SetPriority+0x60>)
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ba:	f1c3 0407 	rsb	r4, r3, #7
 80018be:	2c04      	cmp	r4, #4
 80018c0:	bf28      	it	cs
 80018c2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018c4:	1d1d      	adds	r5, r3, #4
 80018c6:	2d06      	cmp	r5, #6
 80018c8:	d918      	bls.n	80018fc <HAL_NVIC_SetPriority+0x4c>
 80018ca:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	f04f 35ff 	mov.w	r5, #4294967295
 80018d0:	fa05 f404 	lsl.w	r4, r5, r4
 80018d4:	ea21 0104 	bic.w	r1, r1, r4
 80018d8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018da:	fa05 f303 	lsl.w	r3, r5, r3
 80018de:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80018e4:	2800      	cmp	r0, #0
 80018e6:	db0b      	blt.n	8001900 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	0109      	lsls	r1, r1, #4
 80018ea:	b2c9      	uxtb	r1, r1
 80018ec:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80018f0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80018f4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80018f8:	bc30      	pop	{r4, r5}
 80018fa:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fc:	2300      	movs	r3, #0
 80018fe:	e7e5      	b.n	80018cc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001900:	f000 000f 	and.w	r0, r0, #15
 8001904:	0109      	lsls	r1, r1, #4
 8001906:	b2c9      	uxtb	r1, r1
 8001908:	4b02      	ldr	r3, [pc, #8]	; (8001914 <HAL_NVIC_SetPriority+0x64>)
 800190a:	5419      	strb	r1, [r3, r0]
 800190c:	e7f4      	b.n	80018f8 <HAL_NVIC_SetPriority+0x48>
 800190e:	bf00      	nop
 8001910:	e000ed00 	.word	0xe000ed00
 8001914:	e000ed14 	.word	0xe000ed14

08001918 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001918:	2800      	cmp	r0, #0
 800191a:	db07      	blt.n	800192c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800191c:	f000 021f 	and.w	r2, r0, #31
 8001920:	0940      	lsrs	r0, r0, #5
 8001922:	2301      	movs	r3, #1
 8001924:	4093      	lsls	r3, r2
 8001926:	4a02      	ldr	r2, [pc, #8]	; (8001930 <HAL_NVIC_EnableIRQ+0x18>)
 8001928:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	e000e100 	.word	0xe000e100

08001934 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001934:	3801      	subs	r0, #1
 8001936:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800193a:	d20a      	bcs.n	8001952 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <HAL_SYSTICK_Config+0x24>)
 800193e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_SYSTICK_Config+0x28>)
 8001942:	21f0      	movs	r1, #240	; 0xf0
 8001944:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001948:	2000      	movs	r0, #0
 800194a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001952:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000e010 	.word	0xe000e010
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8001960:	b170      	cbz	r0, 8001980 <HAL_DAC_Init+0x20>
{ 
 8001962:	b510      	push	{r4, lr}
 8001964:	4604      	mov	r4, r0
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001966:	7903      	ldrb	r3, [r0, #4]
 8001968:	b133      	cbz	r3, 8001978 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800196a:	2302      	movs	r3, #2
 800196c:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800196e:	2000      	movs	r0, #0
 8001970:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001972:	2301      	movs	r3, #1
 8001974:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8001976:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001978:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 800197a:	f7ff fd0f 	bl	800139c <HAL_DAC_MspInit>
 800197e:	e7f4      	b.n	800196a <HAL_DAC_Init+0xa>
     return HAL_ERROR;
 8001980:	2001      	movs	r0, #1
}
 8001982:	4770      	bx	lr

08001984 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001984:	b510      	push	{r4, lr}
 8001986:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001988:	6800      	ldr	r0, [r0, #0]
 800198a:	6803      	ldr	r3, [r0, #0]
 800198c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001990:	408a      	lsls	r2, r1
 8001992:	ea23 0302 	bic.w	r3, r3, r2
 8001996:	6003      	str	r3, [r0, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001998:	6820      	ldr	r0, [r4, #0]
 800199a:	6803      	ldr	r3, [r0, #0]
 800199c:	2201      	movs	r2, #1
 800199e:	408a      	lsls	r2, r1
 80019a0:	ea23 0302 	bic.w	r3, r3, r2
 80019a4:	6003      	str	r3, [r0, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80019a6:	b959      	cbnz	r1, 80019c0 <HAL_DAC_Stop_DMA+0x3c>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 80019a8:	68a0      	ldr	r0, [r4, #8]
 80019aa:	f000 f9bf 	bl	8001d2c <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80019ae:	6822      	ldr	r2, [r4, #0]
 80019b0:	6813      	ldr	r3, [r2, #0]
 80019b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80019b6:	6013      	str	r3, [r2, #0]
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80019b8:	b958      	cbnz	r0, 80019d2 <HAL_DAC_Stop_DMA+0x4e>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80019ba:	2301      	movs	r3, #1
 80019bc:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 80019be:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 80019c0:	68e0      	ldr	r0, [r4, #12]
 80019c2:	f000 f9b3 	bl	8001d2c <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80019c6:	6822      	ldr	r2, [r4, #0]
 80019c8:	6813      	ldr	r3, [r2, #0]
 80019ca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	e7f2      	b.n	80019b8 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 80019d2:	2304      	movs	r3, #4
 80019d4:	7123      	strb	r3, [r4, #4]
 80019d6:	e7f2      	b.n	80019be <HAL_DAC_Stop_DMA+0x3a>

080019d8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80019d8:	4770      	bx	lr

080019da <HAL_DAC_ErrorCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 80019da:	4770      	bx	lr

080019dc <HAL_DAC_DMAUnderrunCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80019dc:	4770      	bx	lr

080019de <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 80019de:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80019e2:	6923      	ldr	r3, [r4, #16]
 80019e4:	f043 0304 	orr.w	r3, r3, #4
 80019e8:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 80019ea:	4620      	mov	r0, r4
 80019ec:	f7ff fff5 	bl	80019da <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 80019f0:	2301      	movs	r3, #1
 80019f2:	7123      	strb	r3, [r4, #4]
}
 80019f4:	bd10      	pop	{r4, pc}

080019f6 <DAC_DMAHalfConvCpltCh1>:
{
 80019f6:	b508      	push	{r3, lr}
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 80019f8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80019fa:	f7ff ffed 	bl	80019d8 <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 80019fe:	bd08      	pop	{r3, pc}

08001a00 <DAC_DMAConvCpltCh1>:
{
 8001a00:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001a02:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001a04:	4620      	mov	r0, r4
 8001a06:	f7ff fec5 	bl	8001794 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	7123      	strb	r3, [r4, #4]
}
 8001a0e:	bd10      	pop	{r4, pc}

08001a10 <HAL_DAC_Start_DMA>:
{
 8001a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a12:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdac);
 8001a14:	7946      	ldrb	r6, [r0, #5]
 8001a16:	2e01      	cmp	r6, #1
 8001a18:	d064      	beq.n	8001ae4 <HAL_DAC_Start_DMA+0xd4>
 8001a1a:	2501      	movs	r5, #1
 8001a1c:	7145      	strb	r5, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a1e:	2502      	movs	r5, #2
 8001a20:	7105      	strb	r5, [r0, #4]
  if(Channel == DAC_CHANNEL_1)
 8001a22:	2900      	cmp	r1, #0
 8001a24:	d135      	bne.n	8001a92 <HAL_DAC_Start_DMA+0x82>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001a26:	6885      	ldr	r5, [r0, #8]
 8001a28:	4e2f      	ldr	r6, [pc, #188]	; (8001ae8 <HAL_DAC_Start_DMA+0xd8>)
 8001a2a:	62ae      	str	r6, [r5, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001a2c:	6885      	ldr	r5, [r0, #8]
 8001a2e:	4e2f      	ldr	r6, [pc, #188]	; (8001aec <HAL_DAC_Start_DMA+0xdc>)
 8001a30:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001a32:	6885      	ldr	r5, [r0, #8]
 8001a34:	4e2e      	ldr	r6, [pc, #184]	; (8001af0 <HAL_DAC_Start_DMA+0xe0>)
 8001a36:	632e      	str	r6, [r5, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8001a38:	6806      	ldr	r6, [r0, #0]
 8001a3a:	6835      	ldr	r5, [r6, #0]
 8001a3c:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8001a40:	6035      	str	r5, [r6, #0]
    switch(Alignment)
 8001a42:	2c04      	cmp	r4, #4
 8001a44:	d01f      	beq.n	8001a86 <HAL_DAC_Start_DMA+0x76>
 8001a46:	2c08      	cmp	r4, #8
 8001a48:	d020      	beq.n	8001a8c <HAL_DAC_Start_DMA+0x7c>
 8001a4a:	b10c      	cbz	r4, 8001a50 <HAL_DAC_Start_DMA+0x40>
  uint32_t tmpreg = 0U;
 8001a4c:	460e      	mov	r6, r1
 8001a4e:	e001      	b.n	8001a54 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001a50:	6806      	ldr	r6, [r0, #0]
 8001a52:	3608      	adds	r6, #8
 8001a54:	4617      	mov	r7, r2
 8001a56:	460d      	mov	r5, r1
 8001a58:	4604      	mov	r4, r0
  if(Channel == DAC_CHANNEL_1)
 8001a5a:	2900      	cmp	r1, #0
 8001a5c:	d137      	bne.n	8001ace <HAL_DAC_Start_DMA+0xbe>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001a5e:	6801      	ldr	r1, [r0, #0]
 8001a60:	680a      	ldr	r2, [r1, #0]
 8001a62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001a66:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001a68:	4632      	mov	r2, r6
 8001a6a:	4639      	mov	r1, r7
 8001a6c:	6880      	ldr	r0, [r0, #8]
 8001a6e:	f000 f923 	bl	8001cb8 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8001a72:	2000      	movs	r0, #0
 8001a74:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001a76:	6822      	ldr	r2, [r4, #0]
 8001a78:	6813      	ldr	r3, [r2, #0]
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	fa01 f505 	lsl.w	r5, r1, r5
 8001a80:	431d      	orrs	r5, r3
 8001a82:	6015      	str	r5, [r2, #0]
}
 8001a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001a86:	6806      	ldr	r6, [r0, #0]
 8001a88:	360c      	adds	r6, #12
        break;
 8001a8a:	e7e3      	b.n	8001a54 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001a8c:	6806      	ldr	r6, [r0, #0]
 8001a8e:	3610      	adds	r6, #16
        break;
 8001a90:	e7e0      	b.n	8001a54 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001a92:	68c5      	ldr	r5, [r0, #12]
 8001a94:	4e17      	ldr	r6, [pc, #92]	; (8001af4 <HAL_DAC_Start_DMA+0xe4>)
 8001a96:	62ae      	str	r6, [r5, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001a98:	68c5      	ldr	r5, [r0, #12]
 8001a9a:	4e17      	ldr	r6, [pc, #92]	; (8001af8 <HAL_DAC_Start_DMA+0xe8>)
 8001a9c:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001a9e:	68c5      	ldr	r5, [r0, #12]
 8001aa0:	4e16      	ldr	r6, [pc, #88]	; (8001afc <HAL_DAC_Start_DMA+0xec>)
 8001aa2:	632e      	str	r6, [r5, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8001aa4:	6806      	ldr	r6, [r0, #0]
 8001aa6:	6835      	ldr	r5, [r6, #0]
 8001aa8:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8001aac:	6035      	str	r5, [r6, #0]
    switch(Alignment)
 8001aae:	2c04      	cmp	r4, #4
 8001ab0:	d007      	beq.n	8001ac2 <HAL_DAC_Start_DMA+0xb2>
 8001ab2:	2c08      	cmp	r4, #8
 8001ab4:	d008      	beq.n	8001ac8 <HAL_DAC_Start_DMA+0xb8>
 8001ab6:	b10c      	cbz	r4, 8001abc <HAL_DAC_Start_DMA+0xac>
  uint32_t tmpreg = 0U;
 8001ab8:	2600      	movs	r6, #0
 8001aba:	e7cb      	b.n	8001a54 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001abc:	6806      	ldr	r6, [r0, #0]
 8001abe:	3614      	adds	r6, #20
        break;
 8001ac0:	e7c8      	b.n	8001a54 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001ac2:	6806      	ldr	r6, [r0, #0]
 8001ac4:	3618      	adds	r6, #24
        break;
 8001ac6:	e7c5      	b.n	8001a54 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001ac8:	6806      	ldr	r6, [r0, #0]
 8001aca:	361c      	adds	r6, #28
        break;
 8001acc:	e7c2      	b.n	8001a54 <HAL_DAC_Start_DMA+0x44>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001ace:	6801      	ldr	r1, [r0, #0]
 8001ad0:	680a      	ldr	r2, [r1, #0]
 8001ad2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ad6:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001ad8:	4632      	mov	r2, r6
 8001ada:	4639      	mov	r1, r7
 8001adc:	68c0      	ldr	r0, [r0, #12]
 8001ade:	f000 f8eb 	bl	8001cb8 <HAL_DMA_Start_IT>
 8001ae2:	e7c6      	b.n	8001a72 <HAL_DAC_Start_DMA+0x62>
  __HAL_LOCK(hdac);
 8001ae4:	2002      	movs	r0, #2
 8001ae6:	e7cd      	b.n	8001a84 <HAL_DAC_Start_DMA+0x74>
 8001ae8:	08001a01 	.word	0x08001a01
 8001aec:	080019f7 	.word	0x080019f7
 8001af0:	080019df 	.word	0x080019df
 8001af4:	08001b6f 	.word	0x08001b6f
 8001af8:	08001b81 	.word	0x08001b81
 8001afc:	08001b8d 	.word	0x08001b8d

08001b00 <HAL_DAC_ConfigChannel>:
{
 8001b00:	b430      	push	{r4, r5}
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001b02:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdac);
 8001b04:	7943      	ldrb	r3, [r0, #5]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d02c      	beq.n	8001b64 <HAL_DAC_ConfigChannel+0x64>
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b0e:	2302      	movs	r3, #2
 8001b10:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001b12:	6823      	ldr	r3, [r4, #0]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001b14:	4d14      	ldr	r5, [pc, #80]	; (8001b68 <HAL_DAC_ConfigChannel+0x68>)
 8001b16:	42ac      	cmp	r4, r5
 8001b18:	d019      	beq.n	8001b4e <HAL_DAC_ConfigChannel+0x4e>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001b1a:	f640 75fe 	movw	r5, #4094	; 0xffe
 8001b1e:	4095      	lsls	r5, r2
 8001b20:	ea23 0505 	bic.w	r5, r3, r5
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001b24:	680b      	ldr	r3, [r1, #0]
 8001b26:	6889      	ldr	r1, [r1, #8]
 8001b28:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8001b2e:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001b30:	6804      	ldr	r4, [r0, #0]
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	21c0      	movs	r1, #192	; 0xc0
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	ea23 0202 	bic.w	r2, r3, r2
 8001b3e:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001b40:	2301      	movs	r3, #1
 8001b42:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8001b44:	2300      	movs	r3, #0
 8001b46:	7143      	strb	r3, [r0, #5]
  return HAL_OK;
 8001b48:	4618      	mov	r0, r3
}
 8001b4a:	bc30      	pop	{r4, r5}
 8001b4c:	4770      	bx	lr
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001b4e:	2a00      	cmp	r2, #0
 8001b50:	d1e3      	bne.n	8001b1a <HAL_DAC_ConfigChannel+0x1a>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001b52:	f640 75fe 	movw	r5, #4094	; 0xffe
 8001b56:	4095      	lsls	r5, r2
 8001b58:	ea23 0505 	bic.w	r5, r3, r5
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001b5c:	680b      	ldr	r3, [r1, #0]
 8001b5e:	6849      	ldr	r1, [r1, #4]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	e7e2      	b.n	8001b2a <HAL_DAC_ConfigChannel+0x2a>
  __HAL_LOCK(hdac);
 8001b64:	2002      	movs	r0, #2
 8001b66:	e7f0      	b.n	8001b4a <HAL_DAC_ConfigChannel+0x4a>
 8001b68:	40007400 	.word	0x40007400

08001b6c <HAL_DACEx_ConvCpltCallbackCh2>:
}
 8001b6c:	4770      	bx	lr

08001b6e <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001b6e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b70:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001b72:	4620      	mov	r0, r4
 8001b74:	f7ff fffa 	bl	8001b6c <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	7123      	strb	r3, [r4, #4]
}
 8001b7c:	bd10      	pop	{r4, pc}

08001b7e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
}
 8001b7e:	4770      	bx	lr

08001b80 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001b80:	b508      	push	{r3, lr}

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001b82:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001b84:	f7ff fffb 	bl	8001b7e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8001b88:	bd08      	pop	{r3, pc}

08001b8a <HAL_DACEx_ErrorCallbackCh2>:
}
 8001b8a:	4770      	bx	lr

08001b8c <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001b8c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b8e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001b90:	6923      	ldr	r3, [r4, #16]
 8001b92:	f043 0304 	orr.w	r3, r3, #4
 8001b96:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7ff fff6 	bl	8001b8a <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	7123      	strb	r3, [r4, #4]
}
 8001ba2:	bd10      	pop	{r4, pc}

08001ba4 <HAL_DACEx_DMAUnderrunCallbackCh2>:
}
 8001ba4:	4770      	bx	lr

08001ba6 <HAL_DAC_IRQHandler>:
{
 8001ba6:	b510      	push	{r4, lr}
 8001ba8:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001baa:	6803      	ldr	r3, [r0, #0]
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001bb2:	d003      	beq.n	8001bbc <HAL_DAC_IRQHandler+0x16>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001bb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bb6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001bba:	d109      	bne.n	8001bd0 <HAL_DAC_IRQHandler+0x2a>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001bc4:	d003      	beq.n	8001bce <HAL_DAC_IRQHandler+0x28>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bc8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001bcc:	d111      	bne.n	8001bf2 <HAL_DAC_IRQHandler+0x4c>
}
 8001bce:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8001bd0:	2204      	movs	r2, #4
 8001bd2:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001bd4:	6902      	ldr	r2, [r0, #16]
 8001bd6:	f042 0201 	orr.w	r2, r2, #1
 8001bda:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001bdc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001be0:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001be2:	6802      	ldr	r2, [r0, #0]
 8001be4:	6813      	ldr	r3, [r2, #0]
 8001be6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bea:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001bec:	f7ff fef6 	bl	80019dc <HAL_DAC_DMAUnderrunCallbackCh1>
 8001bf0:	e7e4      	b.n	8001bbc <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001bf2:	2204      	movs	r2, #4
 8001bf4:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001bf6:	6922      	ldr	r2, [r4, #16]
 8001bf8:	f042 0202 	orr.w	r2, r2, #2
 8001bfc:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001bfe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c04:	6822      	ldr	r2, [r4, #0]
 8001c06:	6813      	ldr	r3, [r2, #0]
 8001c08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c0c:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001c0e:	4620      	mov	r0, r4
 8001c10:	f7ff ffc8 	bl	8001ba4 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8001c14:	e7db      	b.n	8001bce <HAL_DAC_IRQHandler+0x28>

08001c16 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c16:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001c18:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001c1a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001c1c:	2401      	movs	r4, #1
 8001c1e:	40b4      	lsls	r4, r6
 8001c20:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c22:	6804      	ldr	r4, [r0, #0]
 8001c24:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c26:	6843      	ldr	r3, [r0, #4]
 8001c28:	2b10      	cmp	r3, #16
 8001c2a:	d005      	beq.n	8001c38 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c2c:	6803      	ldr	r3, [r0, #0]
 8001c2e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c30:	6803      	ldr	r3, [r0, #0]
 8001c32:	60da      	str	r2, [r3, #12]
  }
}
 8001c34:	bc70      	pop	{r4, r5, r6}
 8001c36:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001c38:	6803      	ldr	r3, [r0, #0]
 8001c3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c3c:	6803      	ldr	r3, [r0, #0]
 8001c3e:	60d9      	str	r1, [r3, #12]
 8001c40:	e7f8      	b.n	8001c34 <DMA_SetConfig+0x1e>
	...

08001c44 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c44:	6802      	ldr	r2, [r0, #0]
 8001c46:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <DMA_CalcBaseAndBitshift+0x18>)
 8001c48:	4413      	add	r3, r2
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <DMA_CalcBaseAndBitshift+0x1c>)
 8001c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c56:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <DMA_CalcBaseAndBitshift+0x20>)
 8001c58:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8001c5a:	4770      	bx	lr
 8001c5c:	bffdfff8 	.word	0xbffdfff8
 8001c60:	cccccccd 	.word	0xcccccccd
 8001c64:	40020000 	.word	0x40020000

08001c68 <HAL_DMA_Init>:
  if(NULL == hdma)
 8001c68:	b320      	cbz	r0, 8001cb4 <HAL_DMA_Init+0x4c>
{ 
 8001c6a:	b510      	push	{r4, lr}
 8001c6c:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8001c74:	6801      	ldr	r1, [r0, #0]
 8001c76:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001c78:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8001c7c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8001c80:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c82:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8001c84:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c86:	68e0      	ldr	r0, [r4, #12]
 8001c88:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8a:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c8c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c8e:	6960      	ldr	r0, [r4, #20]
 8001c90:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c92:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c94:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c96:	69e0      	ldr	r0, [r4, #28]
 8001c98:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8001c9a:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8001c9c:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7ff ffd0 	bl	8001c44 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ca4:	2000      	movs	r0, #0
 8001ca6:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001cae:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8001cb2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001cb4:	2001      	movs	r0, #1
}  
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_DMA_Start_IT>:
{
 8001cb8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8001cba:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001cbe:	2c01      	cmp	r4, #1
 8001cc0:	d032      	beq.n	8001d28 <HAL_DMA_Start_IT+0x70>
 8001cc2:	2401      	movs	r4, #1
 8001cc4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001cc8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001ccc:	2c01      	cmp	r4, #1
 8001cce:	d004      	beq.n	8001cda <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001cd6:	2002      	movs	r0, #2
} 
 8001cd8:	bd38      	pop	{r3, r4, r5, pc}
 8001cda:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001cdc:	2002      	movs	r0, #2
 8001cde:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce2:	2000      	movs	r0, #0
 8001ce4:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001ce6:	6825      	ldr	r5, [r4, #0]
 8001ce8:	6828      	ldr	r0, [r5, #0]
 8001cea:	f020 0001 	bic.w	r0, r0, #1
 8001cee:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001cf0:	4620      	mov	r0, r4
 8001cf2:	f7ff ff90 	bl	8001c16 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8001cf6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001cf8:	b15b      	cbz	r3, 8001d12 <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001cfa:	6822      	ldr	r2, [r4, #0]
 8001cfc:	6813      	ldr	r3, [r2, #0]
 8001cfe:	f043 030e 	orr.w	r3, r3, #14
 8001d02:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001d04:	6822      	ldr	r2, [r4, #0]
 8001d06:	6813      	ldr	r3, [r2, #0]
 8001d08:	f043 0301 	orr.w	r3, r3, #1
 8001d0c:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001d0e:	2000      	movs	r0, #0
 8001d10:	e7e2      	b.n	8001cd8 <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001d12:	6822      	ldr	r2, [r4, #0]
 8001d14:	6813      	ldr	r3, [r2, #0]
 8001d16:	f043 030a 	orr.w	r3, r3, #10
 8001d1a:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001d1c:	6822      	ldr	r2, [r4, #0]
 8001d1e:	6813      	ldr	r3, [r2, #0]
 8001d20:	f023 0304 	bic.w	r3, r3, #4
 8001d24:	6013      	str	r3, [r2, #0]
 8001d26:	e7ed      	b.n	8001d04 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8001d28:	2002      	movs	r0, #2
 8001d2a:	e7d5      	b.n	8001cd8 <HAL_DMA_Start_IT+0x20>

08001d2c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d2c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001d30:	2b02      	cmp	r3, #2
 8001d32:	d006      	beq.n	8001d42 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d34:	2304      	movs	r3, #4
 8001d36:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001d3e:	2001      	movs	r0, #1
 8001d40:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d42:	6802      	ldr	r2, [r0, #0]
 8001d44:	6813      	ldr	r3, [r2, #0]
 8001d46:	f023 030e 	bic.w	r3, r3, #14
 8001d4a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d4c:	6802      	ldr	r2, [r0, #0]
 8001d4e:	6813      	ldr	r3, [r2, #0]
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001d56:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d58:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8001d62:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8001d66:	2300      	movs	r3, #0
 8001d68:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8001d6c:	4618      	mov	r0, r3
}
 8001d6e:	4770      	bx	lr

08001d70 <HAL_DMA_Abort_IT>:
{  
 8001d70:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d72:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d003      	beq.n	8001d82 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001d7e:	2001      	movs	r0, #1
}
 8001d80:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001d82:	6802      	ldr	r2, [r0, #0]
 8001d84:	6813      	ldr	r3, [r2, #0]
 8001d86:	f023 030e 	bic.w	r3, r3, #14
 8001d8a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001d8c:	6802      	ldr	r2, [r0, #0]
 8001d8e:	6813      	ldr	r3, [r2, #0]
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001d96:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001d98:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001da0:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001da2:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001da6:	2300      	movs	r3, #0
 8001da8:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001dac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001dae:	b113      	cbz	r3, 8001db6 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001db0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	2000      	movs	r0, #0
 8001db4:	e7e4      	b.n	8001d80 <HAL_DMA_Abort_IT+0x10>
 8001db6:	2000      	movs	r0, #0
 8001db8:	e7e2      	b.n	8001d80 <HAL_DMA_Abort_IT+0x10>

08001dba <HAL_DMA_IRQHandler>:
{
 8001dba:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001dbc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001dbe:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001dc0:	6804      	ldr	r4, [r0, #0]
 8001dc2:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001dc4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001dc6:	2304      	movs	r3, #4
 8001dc8:	408b      	lsls	r3, r1
 8001dca:	4213      	tst	r3, r2
 8001dcc:	d013      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x3c>
 8001dce:	f015 0f04 	tst.w	r5, #4
 8001dd2:	d010      	beq.n	8001df6 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	f013 0f20 	tst.w	r3, #32
 8001dda:	d103      	bne.n	8001de4 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001ddc:	6823      	ldr	r3, [r4, #0]
 8001dde:	f023 0304 	bic.w	r3, r3, #4
 8001de2:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8001de4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001de6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001de8:	2304      	movs	r3, #4
 8001dea:	408b      	lsls	r3, r1
 8001dec:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8001dee:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001df0:	b103      	cbz	r3, 8001df4 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 8001df2:	4798      	blx	r3
}  
 8001df4:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8001df6:	2302      	movs	r3, #2
 8001df8:	408b      	lsls	r3, r1
 8001dfa:	4213      	tst	r3, r2
 8001dfc:	d01a      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x7a>
 8001dfe:	f015 0f02 	tst.w	r5, #2
 8001e02:	d017      	beq.n	8001e34 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	f013 0f20 	tst.w	r3, #32
 8001e0a:	d106      	bne.n	8001e1a <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	f023 030a 	bic.w	r3, r3, #10
 8001e12:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8001e14:	2301      	movs	r3, #1
 8001e16:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8001e1a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001e1c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8001e1e:	2302      	movs	r3, #2
 8001e20:	408b      	lsls	r3, r1
 8001e22:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8001e24:	2300      	movs	r3, #0
 8001e26:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8001e2a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d0e1      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8001e30:	4798      	blx	r3
 8001e32:	e7df      	b.n	8001df4 <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001e34:	2308      	movs	r3, #8
 8001e36:	fa03 f101 	lsl.w	r1, r3, r1
 8001e3a:	4211      	tst	r1, r2
 8001e3c:	d0da      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x3a>
 8001e3e:	f015 0f08 	tst.w	r5, #8
 8001e42:	d0d7      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001e44:	6823      	ldr	r3, [r4, #0]
 8001e46:	f023 030e 	bic.w	r3, r3, #14
 8001e4a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001e4c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8001e4e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001e50:	2301      	movs	r3, #1
 8001e52:	fa03 f202 	lsl.w	r2, r3, r2
 8001e56:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e58:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8001e5a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8001e5e:	2300      	movs	r3, #0
 8001e60:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001e64:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0c4      	beq.n	8001df4 <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8001e6a:	4798      	blx	r3
}  
 8001e6c:	e7c2      	b.n	8001df4 <HAL_DMA_IRQHandler+0x3a>
	...

08001e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e70:	b4f0      	push	{r4, r5, r6, r7}
 8001e72:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001e74:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e76:	e036      	b.n	8001ee6 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e78:	2403      	movs	r4, #3
 8001e7a:	e000      	b.n	8001e7e <HAL_GPIO_Init+0xe>
 8001e7c:	2400      	movs	r4, #0
 8001e7e:	40b4      	lsls	r4, r6
 8001e80:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e82:	3502      	adds	r5, #2
 8001e84:	4e58      	ldr	r6, [pc, #352]	; (8001fe8 <HAL_GPIO_Init+0x178>)
 8001e86:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e8a:	4c58      	ldr	r4, [pc, #352]	; (8001fec <HAL_GPIO_Init+0x17c>)
 8001e8c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8001e8e:	43d4      	mvns	r4, r2
 8001e90:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e94:	684f      	ldr	r7, [r1, #4]
 8001e96:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 8001e9a:	d001      	beq.n	8001ea0 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 8001e9c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001ea0:	4d52      	ldr	r5, [pc, #328]	; (8001fec <HAL_GPIO_Init+0x17c>)
 8001ea2:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001ea4:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001ea6:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001eaa:	684f      	ldr	r7, [r1, #4]
 8001eac:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001eb0:	d001      	beq.n	8001eb6 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8001eb2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001eb6:	4d4d      	ldr	r5, [pc, #308]	; (8001fec <HAL_GPIO_Init+0x17c>)
 8001eb8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 8001ebc:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec0:	684f      	ldr	r7, [r1, #4]
 8001ec2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001ec6:	d001      	beq.n	8001ecc <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8001ec8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 8001ecc:	4d47      	ldr	r5, [pc, #284]	; (8001fec <HAL_GPIO_Init+0x17c>)
 8001ece:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001ed0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001ed2:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ed4:	684e      	ldr	r6, [r1, #4]
 8001ed6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 8001eda:	d001      	beq.n	8001ee0 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 8001edc:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 8001ee0:	4a42      	ldr	r2, [pc, #264]	; (8001fec <HAL_GPIO_Init+0x17c>)
 8001ee2:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 8001ee4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ee6:	680a      	ldr	r2, [r1, #0]
 8001ee8:	fa32 f403 	lsrs.w	r4, r2, r3
 8001eec:	d078      	beq.n	8001fe0 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001eee:	2401      	movs	r4, #1
 8001ef0:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 8001ef2:	4022      	ands	r2, r4
 8001ef4:	d0f6      	beq.n	8001ee4 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001ef6:	684d      	ldr	r5, [r1, #4]
 8001ef8:	2d02      	cmp	r5, #2
 8001efa:	d001      	beq.n	8001f00 <HAL_GPIO_Init+0x90>
 8001efc:	2d12      	cmp	r5, #18
 8001efe:	d110      	bne.n	8001f22 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 8001f00:	08de      	lsrs	r6, r3, #3
 8001f02:	3608      	adds	r6, #8
 8001f04:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001f08:	f003 0507 	and.w	r5, r3, #7
 8001f0c:	00af      	lsls	r7, r5, #2
 8001f0e:	250f      	movs	r5, #15
 8001f10:	40bd      	lsls	r5, r7
 8001f12:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f16:	690d      	ldr	r5, [r1, #16]
 8001f18:	40bd      	lsls	r5, r7
 8001f1a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 8001f1e:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001f22:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001f24:	005f      	lsls	r7, r3, #1
 8001f26:	2503      	movs	r5, #3
 8001f28:	40bd      	lsls	r5, r7
 8001f2a:	43ed      	mvns	r5, r5
 8001f2c:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f30:	684e      	ldr	r6, [r1, #4]
 8001f32:	f006 0603 	and.w	r6, r6, #3
 8001f36:	40be      	lsls	r6, r7
 8001f38:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 8001f3c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001f3e:	684e      	ldr	r6, [r1, #4]
 8001f40:	f106 3cff 	add.w	ip, r6, #4294967295
 8001f44:	f1bc 0f01 	cmp.w	ip, #1
 8001f48:	d903      	bls.n	8001f52 <HAL_GPIO_Init+0xe2>
 8001f4a:	2e11      	cmp	r6, #17
 8001f4c:	d001      	beq.n	8001f52 <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f4e:	2e12      	cmp	r6, #18
 8001f50:	d110      	bne.n	8001f74 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 8001f52:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001f54:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001f58:	68ce      	ldr	r6, [r1, #12]
 8001f5a:	40be      	lsls	r6, r7
 8001f5c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8001f60:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f62:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f64:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001f68:	684e      	ldr	r6, [r1, #4]
 8001f6a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 8001f6e:	409e      	lsls	r6, r3
 8001f70:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8001f72:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001f74:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001f76:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001f78:	688c      	ldr	r4, [r1, #8]
 8001f7a:	40bc      	lsls	r4, r7
 8001f7c:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 8001f7e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f80:	684c      	ldr	r4, [r1, #4]
 8001f82:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001f86:	d0ad      	beq.n	8001ee4 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f88:	4c19      	ldr	r4, [pc, #100]	; (8001ff0 <HAL_GPIO_Init+0x180>)
 8001f8a:	69a5      	ldr	r5, [r4, #24]
 8001f8c:	f045 0501 	orr.w	r5, r5, #1
 8001f90:	61a5      	str	r5, [r4, #24]
 8001f92:	69a4      	ldr	r4, [r4, #24]
 8001f94:	f004 0401 	and.w	r4, r4, #1
 8001f98:	9401      	str	r4, [sp, #4]
 8001f9a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001f9c:	089d      	lsrs	r5, r3, #2
 8001f9e:	1cae      	adds	r6, r5, #2
 8001fa0:	4c11      	ldr	r4, [pc, #68]	; (8001fe8 <HAL_GPIO_Init+0x178>)
 8001fa2:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001fa6:	f003 0403 	and.w	r4, r3, #3
 8001faa:	00a6      	lsls	r6, r4, #2
 8001fac:	240f      	movs	r4, #15
 8001fae:	40b4      	lsls	r4, r6
 8001fb0:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001fb8:	f43f af60 	beq.w	8001e7c <HAL_GPIO_Init+0xc>
 8001fbc:	4c0d      	ldr	r4, [pc, #52]	; (8001ff4 <HAL_GPIO_Init+0x184>)
 8001fbe:	42a0      	cmp	r0, r4
 8001fc0:	d00a      	beq.n	8001fd8 <HAL_GPIO_Init+0x168>
 8001fc2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fc6:	42a0      	cmp	r0, r4
 8001fc8:	d008      	beq.n	8001fdc <HAL_GPIO_Init+0x16c>
 8001fca:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001fce:	42a0      	cmp	r0, r4
 8001fd0:	f43f af52 	beq.w	8001e78 <HAL_GPIO_Init+0x8>
 8001fd4:	2405      	movs	r4, #5
 8001fd6:	e752      	b.n	8001e7e <HAL_GPIO_Init+0xe>
 8001fd8:	2401      	movs	r4, #1
 8001fda:	e750      	b.n	8001e7e <HAL_GPIO_Init+0xe>
 8001fdc:	2402      	movs	r4, #2
 8001fde:	e74e      	b.n	8001e7e <HAL_GPIO_Init+0xe>
  }
}
 8001fe0:	b002      	add	sp, #8
 8001fe2:	bcf0      	pop	{r4, r5, r6, r7}
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	40010000 	.word	0x40010000
 8001fec:	40010400 	.word	0x40010400
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	48000400 	.word	0x48000400

08001ff8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ff8:	b90a      	cbnz	r2, 8001ffe <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ffa:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001ffc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ffe:	6181      	str	r1, [r0, #24]
 8002000:	4770      	bx	lr

08002002 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002002:	4770      	bx	lr

08002004 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002004:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002006:	4b05      	ldr	r3, [pc, #20]	; (800201c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4203      	tst	r3, r0
 800200c:	d100      	bne.n	8002010 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800200e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002010:	4b02      	ldr	r3, [pc, #8]	; (800201c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002012:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002014:	f7ff fff5 	bl	8002002 <HAL_GPIO_EXTI_Callback>
}
 8002018:	e7f9      	b.n	800200e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800201a:	bf00      	nop
 800201c:	40010400 	.word	0x40010400

08002020 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002020:	2800      	cmp	r0, #0
 8002022:	f000 830d 	beq.w	8002640 <HAL_RCC_OscConfig+0x620>
{
 8002026:	b570      	push	{r4, r5, r6, lr}
 8002028:	b082      	sub	sp, #8
 800202a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202c:	6803      	ldr	r3, [r0, #0]
 800202e:	f013 0f01 	tst.w	r3, #1
 8002032:	d03b      	beq.n	80020ac <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002034:	4bb5      	ldr	r3, [pc, #724]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f003 030c 	and.w	r3, r3, #12
 800203c:	2b04      	cmp	r3, #4
 800203e:	d01e      	beq.n	800207e <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002040:	4bb2      	ldr	r3, [pc, #712]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	f003 030c 	and.w	r3, r3, #12
 8002048:	2b08      	cmp	r3, #8
 800204a:	d013      	beq.n	8002074 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800204c:	6863      	ldr	r3, [r4, #4]
 800204e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002052:	d068      	beq.n	8002126 <HAL_RCC_OscConfig+0x106>
 8002054:	2b00      	cmp	r3, #0
 8002056:	f040 8092 	bne.w	800217e <HAL_RCC_OscConfig+0x15e>
 800205a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800205e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e05d      	b.n	8002130 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002074:	4ba5      	ldr	r3, [pc, #660]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800207c:	d0e6      	beq.n	800204c <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002082:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002086:	4ba1      	ldr	r3, [pc, #644]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002088:	6819      	ldr	r1, [r3, #0]
 800208a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800208e:	fa93 f3a3 	rbit	r3, r3
 8002092:	fab3 f383 	clz	r3, r3
 8002096:	f003 031f 	and.w	r3, r3, #31
 800209a:	2201      	movs	r2, #1
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	420b      	tst	r3, r1
 80020a2:	d003      	beq.n	80020ac <HAL_RCC_OscConfig+0x8c>
 80020a4:	6863      	ldr	r3, [r4, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f000 82cc 	beq.w	8002644 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020ac:	6823      	ldr	r3, [r4, #0]
 80020ae:	f013 0f02 	tst.w	r3, #2
 80020b2:	f000 80c6 	beq.w	8002242 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020b6:	4b95      	ldr	r3, [pc, #596]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f013 0f0c 	tst.w	r3, #12
 80020be:	f000 809c 	beq.w	80021fa <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80020c2:	4b92      	ldr	r3, [pc, #584]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 030c 	and.w	r3, r3, #12
 80020ca:	2b08      	cmp	r3, #8
 80020cc:	f000 808f 	beq.w	80021ee <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020d0:	6923      	ldr	r3, [r4, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	f000 80f3 	beq.w	80022be <HAL_RCC_OscConfig+0x29e>
 80020d8:	2201      	movs	r2, #1
 80020da:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ee:	f7ff fbc7 	bl	8001880 <HAL_GetTick>
 80020f2:	4605      	mov	r5, r0
 80020f4:	2302      	movs	r3, #2
 80020f6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020fa:	4b84      	ldr	r3, [pc, #528]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 80020fc:	6819      	ldr	r1, [r3, #0]
 80020fe:	2302      	movs	r3, #2
 8002100:	fa93 f3a3 	rbit	r3, r3
 8002104:	fab3 f383 	clz	r3, r3
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	2201      	movs	r2, #1
 800210e:	fa02 f303 	lsl.w	r3, r2, r3
 8002112:	420b      	tst	r3, r1
 8002114:	f040 80c4 	bne.w	80022a0 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002118:	f7ff fbb2 	bl	8001880 <HAL_GetTick>
 800211c:	1b40      	subs	r0, r0, r5
 800211e:	2802      	cmp	r0, #2
 8002120:	d9e8      	bls.n	80020f4 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002122:	2003      	movs	r0, #3
 8002124:	e295      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002126:	4a79      	ldr	r2, [pc, #484]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002128:	6813      	ldr	r3, [r2, #0]
 800212a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800212e:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002130:	4a76      	ldr	r2, [pc, #472]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002132:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002134:	f023 030f 	bic.w	r3, r3, #15
 8002138:	68a1      	ldr	r1, [r4, #8]
 800213a:	430b      	orrs	r3, r1
 800213c:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800213e:	6863      	ldr	r3, [r4, #4]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d036      	beq.n	80021b2 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002144:	f7ff fb9c 	bl	8001880 <HAL_GetTick>
 8002148:	4605      	mov	r5, r0
 800214a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800214e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b6e      	ldr	r3, [pc, #440]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002154:	6819      	ldr	r1, [r3, #0]
 8002156:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800215a:	fa93 f3a3 	rbit	r3, r3
 800215e:	fab3 f383 	clz	r3, r3
 8002162:	f003 031f 	and.w	r3, r3, #31
 8002166:	2201      	movs	r2, #1
 8002168:	fa02 f303 	lsl.w	r3, r2, r3
 800216c:	420b      	tst	r3, r1
 800216e:	d19d      	bne.n	80020ac <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002170:	f7ff fb86 	bl	8001880 <HAL_GetTick>
 8002174:	1b40      	subs	r0, r0, r5
 8002176:	2864      	cmp	r0, #100	; 0x64
 8002178:	d9e7      	bls.n	800214a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800217a:	2003      	movs	r0, #3
 800217c:	e269      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800217e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002182:	d009      	beq.n	8002198 <HAL_RCC_OscConfig+0x178>
 8002184:	4b61      	ldr	r3, [pc, #388]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	e7cb      	b.n	8002130 <HAL_RCC_OscConfig+0x110>
 8002198:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800219c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80021a6:	601a      	str	r2, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	e7be      	b.n	8002130 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80021b2:	f7ff fb65 	bl	8001880 <HAL_GetTick>
 80021b6:	4605      	mov	r5, r0
 80021b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021bc:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c0:	4b52      	ldr	r3, [pc, #328]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021c8:	fa93 f3a3 	rbit	r3, r3
 80021cc:	fab3 f383 	clz	r3, r3
 80021d0:	f003 031f 	and.w	r3, r3, #31
 80021d4:	2201      	movs	r2, #1
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	420b      	tst	r3, r1
 80021dc:	f43f af66 	beq.w	80020ac <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021e0:	f7ff fb4e 	bl	8001880 <HAL_GetTick>
 80021e4:	1b40      	subs	r0, r0, r5
 80021e6:	2864      	cmp	r0, #100	; 0x64
 80021e8:	d9e6      	bls.n	80021b8 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80021ea:	2003      	movs	r0, #3
 80021ec:	e231      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80021ee:	4b47      	ldr	r3, [pc, #284]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80021f6:	f47f af6b 	bne.w	80020d0 <HAL_RCC_OscConfig+0xb0>
 80021fa:	2302      	movs	r3, #2
 80021fc:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002200:	4b42      	ldr	r3, [pc, #264]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002202:	6819      	ldr	r1, [r3, #0]
 8002204:	2302      	movs	r3, #2
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	fab3 f383 	clz	r3, r3
 800220e:	f003 031f 	and.w	r3, r3, #31
 8002212:	2201      	movs	r2, #1
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	420b      	tst	r3, r1
 800221a:	d004      	beq.n	8002226 <HAL_RCC_OscConfig+0x206>
 800221c:	6923      	ldr	r3, [r4, #16]
 800221e:	4293      	cmp	r3, r2
 8002220:	d001      	beq.n	8002226 <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8002222:	2001      	movs	r0, #1
 8002224:	e215      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002226:	4839      	ldr	r0, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 8002228:	6803      	ldr	r3, [r0, #0]
 800222a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800222e:	6961      	ldr	r1, [r4, #20]
 8002230:	22f8      	movs	r2, #248	; 0xf8
 8002232:	fa92 f2a2 	rbit	r2, r2
 8002236:	fab2 f282 	clz	r2, r2
 800223a:	fa01 f202 	lsl.w	r2, r1, r2
 800223e:	4313      	orrs	r3, r2
 8002240:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002242:	6823      	ldr	r3, [r4, #0]
 8002244:	f013 0f08 	tst.w	r3, #8
 8002248:	f000 808c 	beq.w	8002364 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800224c:	69a3      	ldr	r3, [r4, #24]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d060      	beq.n	8002314 <HAL_RCC_OscConfig+0x2f4>
 8002252:	2101      	movs	r1, #1
 8002254:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002258:	fab2 f282 	clz	r2, r2
 800225c:	4b2c      	ldr	r3, [pc, #176]	; (8002310 <HAL_RCC_OscConfig+0x2f0>)
 800225e:	4413      	add	r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002264:	f7ff fb0c 	bl	8001880 <HAL_GetTick>
 8002268:	4605      	mov	r5, r0
 800226a:	2302      	movs	r3, #2
 800226c:	fa93 f2a3 	rbit	r2, r3
 8002270:	fa93 f2a3 	rbit	r2, r3
 8002274:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002278:	4a24      	ldr	r2, [pc, #144]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 800227a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800227c:	fa93 f3a3 	rbit	r3, r3
 8002280:	fab3 f383 	clz	r3, r3
 8002284:	f003 031f 	and.w	r3, r3, #31
 8002288:	2201      	movs	r2, #1
 800228a:	fa02 f303 	lsl.w	r3, r2, r3
 800228e:	420b      	tst	r3, r1
 8002290:	d168      	bne.n	8002364 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002292:	f7ff faf5 	bl	8001880 <HAL_GetTick>
 8002296:	1b40      	subs	r0, r0, r5
 8002298:	2802      	cmp	r0, #2
 800229a:	d9e6      	bls.n	800226a <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 800229c:	2003      	movs	r0, #3
 800229e:	e1d8      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a0:	481a      	ldr	r0, [pc, #104]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 80022a2:	6803      	ldr	r3, [r0, #0]
 80022a4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80022a8:	6961      	ldr	r1, [r4, #20]
 80022aa:	22f8      	movs	r2, #248	; 0xf8
 80022ac:	fa92 f2a2 	rbit	r2, r2
 80022b0:	fab2 f282 	clz	r2, r2
 80022b4:	fa01 f202 	lsl.w	r2, r1, r2
 80022b8:	4313      	orrs	r3, r2
 80022ba:	6003      	str	r3, [r0, #0]
 80022bc:	e7c1      	b.n	8002242 <HAL_RCC_OscConfig+0x222>
 80022be:	2301      	movs	r3, #1
 80022c0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80022cc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	2200      	movs	r2, #0
 80022d4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80022d6:	f7ff fad3 	bl	8001880 <HAL_GetTick>
 80022da:	4605      	mov	r5, r0
 80022dc:	2302      	movs	r3, #2
 80022de:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_RCC_OscConfig+0x2ec>)
 80022e4:	6819      	ldr	r1, [r3, #0]
 80022e6:	2302      	movs	r3, #2
 80022e8:	fa93 f3a3 	rbit	r3, r3
 80022ec:	fab3 f383 	clz	r3, r3
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2201      	movs	r2, #1
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	420b      	tst	r3, r1
 80022fc:	d0a1      	beq.n	8002242 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022fe:	f7ff fabf 	bl	8001880 <HAL_GetTick>
 8002302:	1b40      	subs	r0, r0, r5
 8002304:	2802      	cmp	r0, #2
 8002306:	d9e9      	bls.n	80022dc <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 8002308:	2003      	movs	r0, #3
 800230a:	e1a2      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
 800230c:	40021000 	.word	0x40021000
 8002310:	10908120 	.word	0x10908120
 8002314:	2201      	movs	r2, #1
 8002316:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800231a:	fab2 f282 	clz	r2, r2
 800231e:	4bbc      	ldr	r3, [pc, #752]	; (8002610 <HAL_RCC_OscConfig+0x5f0>)
 8002320:	4413      	add	r3, r2
 8002322:	009b      	lsls	r3, r3, #2
 8002324:	2200      	movs	r2, #0
 8002326:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002328:	f7ff faaa 	bl	8001880 <HAL_GetTick>
 800232c:	4605      	mov	r5, r0
 800232e:	2302      	movs	r3, #2
 8002330:	fa93 f2a3 	rbit	r2, r3
 8002334:	fa93 f2a3 	rbit	r2, r3
 8002338:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800233c:	4ab5      	ldr	r2, [pc, #724]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 800233e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002340:	fa93 f3a3 	rbit	r3, r3
 8002344:	fab3 f383 	clz	r3, r3
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	2201      	movs	r2, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	420b      	tst	r3, r1
 8002354:	d006      	beq.n	8002364 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002356:	f7ff fa93 	bl	8001880 <HAL_GetTick>
 800235a:	1b40      	subs	r0, r0, r5
 800235c:	2802      	cmp	r0, #2
 800235e:	d9e6      	bls.n	800232e <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002360:	2003      	movs	r0, #3
 8002362:	e176      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002364:	6823      	ldr	r3, [r4, #0]
 8002366:	f013 0f04 	tst.w	r3, #4
 800236a:	f000 80b3 	beq.w	80024d4 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4ba9      	ldr	r3, [pc, #676]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002376:	d120      	bne.n	80023ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002378:	4ba6      	ldr	r3, [pc, #664]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002380:	61da      	str	r2, [r3, #28]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800238c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238e:	4ba2      	ldr	r3, [pc, #648]	; (8002618 <HAL_RCC_OscConfig+0x5f8>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002396:	d012      	beq.n	80023be <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	68e3      	ldr	r3, [r4, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d023      	beq.n	80023e6 <HAL_RCC_OscConfig+0x3c6>
 800239e:	bb73      	cbnz	r3, 80023fe <HAL_RCC_OscConfig+0x3de>
 80023a0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023a4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80023a8:	6a1a      	ldr	r2, [r3, #32]
 80023aa:	f022 0201 	bic.w	r2, r2, #1
 80023ae:	621a      	str	r2, [r3, #32]
 80023b0:	6a1a      	ldr	r2, [r3, #32]
 80023b2:	f022 0204 	bic.w	r2, r2, #4
 80023b6:	621a      	str	r2, [r3, #32]
 80023b8:	e01a      	b.n	80023f0 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 80023ba:	2500      	movs	r5, #0
 80023bc:	e7e7      	b.n	800238e <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023be:	4a96      	ldr	r2, [pc, #600]	; (8002618 <HAL_RCC_OscConfig+0x5f8>)
 80023c0:	6813      	ldr	r3, [r2, #0]
 80023c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023c6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80023c8:	f7ff fa5a 	bl	8001880 <HAL_GetTick>
 80023cc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ce:	4b92      	ldr	r3, [pc, #584]	; (8002618 <HAL_RCC_OscConfig+0x5f8>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80023d6:	d1df      	bne.n	8002398 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d8:	f7ff fa52 	bl	8001880 <HAL_GetTick>
 80023dc:	1b80      	subs	r0, r0, r6
 80023de:	2864      	cmp	r0, #100	; 0x64
 80023e0:	d9f5      	bls.n	80023ce <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 80023e2:	2003      	movs	r0, #3
 80023e4:	e135      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e6:	4a8b      	ldr	r2, [pc, #556]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 80023e8:	6a13      	ldr	r3, [r2, #32]
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023f0:	68e3      	ldr	r3, [r4, #12]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d041      	beq.n	800247a <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023f6:	f7ff fa43 	bl	8001880 <HAL_GetTick>
 80023fa:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023fc:	e02b      	b.n	8002456 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d009      	beq.n	8002416 <HAL_RCC_OscConfig+0x3f6>
 8002402:	4b84      	ldr	r3, [pc, #528]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 8002404:	6a1a      	ldr	r2, [r3, #32]
 8002406:	f022 0201 	bic.w	r2, r2, #1
 800240a:	621a      	str	r2, [r3, #32]
 800240c:	6a1a      	ldr	r2, [r3, #32]
 800240e:	f022 0204 	bic.w	r2, r2, #4
 8002412:	621a      	str	r2, [r3, #32]
 8002414:	e7ec      	b.n	80023f0 <HAL_RCC_OscConfig+0x3d0>
 8002416:	4b7f      	ldr	r3, [pc, #508]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 8002418:	6a1a      	ldr	r2, [r3, #32]
 800241a:	f042 0204 	orr.w	r2, r2, #4
 800241e:	621a      	str	r2, [r3, #32]
 8002420:	6a1a      	ldr	r2, [r3, #32]
 8002422:	f042 0201 	orr.w	r2, r2, #1
 8002426:	621a      	str	r2, [r3, #32]
 8002428:	e7e2      	b.n	80023f0 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242a:	4b7a      	ldr	r3, [pc, #488]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 800242c:	6a19      	ldr	r1, [r3, #32]
 800242e:	2302      	movs	r3, #2
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	fab3 f383 	clz	r3, r3
 8002438:	f003 031f 	and.w	r3, r3, #31
 800243c:	2201      	movs	r2, #1
 800243e:	fa02 f303 	lsl.w	r3, r2, r3
 8002442:	4219      	tst	r1, r3
 8002444:	d145      	bne.n	80024d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002446:	f7ff fa1b 	bl	8001880 <HAL_GetTick>
 800244a:	1b80      	subs	r0, r0, r6
 800244c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002450:	4298      	cmp	r0, r3
 8002452:	f200 80f9 	bhi.w	8002648 <HAL_RCC_OscConfig+0x628>
 8002456:	2302      	movs	r3, #2
 8002458:	fa93 f2a3 	rbit	r2, r3
 800245c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	f043 0302 	orr.w	r3, r3, #2
 800246a:	2b02      	cmp	r3, #2
 800246c:	d0dd      	beq.n	800242a <HAL_RCC_OscConfig+0x40a>
 800246e:	2302      	movs	r3, #2
 8002470:	fa93 f3a3 	rbit	r3, r3
 8002474:	4b67      	ldr	r3, [pc, #412]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 8002476:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002478:	e7d9      	b.n	800242e <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800247a:	f7ff fa01 	bl	8001880 <HAL_GetTick>
 800247e:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002480:	e015      	b.n	80024ae <HAL_RCC_OscConfig+0x48e>
 8002482:	4b64      	ldr	r3, [pc, #400]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 8002484:	6a19      	ldr	r1, [r3, #32]
 8002486:	2302      	movs	r3, #2
 8002488:	fa93 f3a3 	rbit	r3, r3
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	f003 031f 	and.w	r3, r3, #31
 8002494:	2201      	movs	r2, #1
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	4219      	tst	r1, r3
 800249c:	d019      	beq.n	80024d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7ff f9ef 	bl	8001880 <HAL_GetTick>
 80024a2:	1b80      	subs	r0, r0, r6
 80024a4:	f241 3388 	movw	r3, #5000	; 0x1388
 80024a8:	4298      	cmp	r0, r3
 80024aa:	f200 80cf 	bhi.w	800264c <HAL_RCC_OscConfig+0x62c>
 80024ae:	2302      	movs	r3, #2
 80024b0:	fa93 f2a3 	rbit	r2, r3
 80024b4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024b8:	fab3 f383 	clz	r3, r3
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	f043 0302 	orr.w	r3, r3, #2
 80024c2:	2b02      	cmp	r3, #2
 80024c4:	d0dd      	beq.n	8002482 <HAL_RCC_OscConfig+0x462>
 80024c6:	2302      	movs	r3, #2
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	4b51      	ldr	r3, [pc, #324]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 80024ce:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80024d0:	e7d9      	b.n	8002486 <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80024d2:	bbb5      	cbnz	r5, 8002542 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024d4:	69e3      	ldr	r3, [r4, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 80ba 	beq.w	8002650 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024dc:	4a4d      	ldr	r2, [pc, #308]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 80024de:	6852      	ldr	r2, [r2, #4]
 80024e0:	f002 020c 	and.w	r2, r2, #12
 80024e4:	2a08      	cmp	r2, #8
 80024e6:	f000 8099 	beq.w	800261c <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d02f      	beq.n	800254e <HAL_RCC_OscConfig+0x52e>
 80024ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f6:	fab3 f383 	clz	r3, r3
 80024fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	2200      	movs	r2, #0
 8002506:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002508:	f7ff f9ba 	bl	8001880 <HAL_GetTick>
 800250c:	4604      	mov	r4, r0
 800250e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002512:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002516:	4b3f      	ldr	r3, [pc, #252]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 8002518:	6819      	ldr	r1, [r3, #0]
 800251a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251e:	fa93 f3a3 	rbit	r3, r3
 8002522:	fab3 f383 	clz	r3, r3
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2201      	movs	r2, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	4219      	tst	r1, r3
 8002532:	d06b      	beq.n	800260c <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002534:	f7ff f9a4 	bl	8001880 <HAL_GetTick>
 8002538:	1b00      	subs	r0, r0, r4
 800253a:	2802      	cmp	r0, #2
 800253c:	d9e7      	bls.n	800250e <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 800253e:	2003      	movs	r0, #3
 8002540:	e087      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002542:	4a34      	ldr	r2, [pc, #208]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 8002544:	69d3      	ldr	r3, [r2, #28]
 8002546:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800254a:	61d3      	str	r3, [r2, #28]
 800254c:	e7c2      	b.n	80024d4 <HAL_RCC_OscConfig+0x4b4>
 800254e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002552:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800255e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002568:	f7ff f98a 	bl	8001880 <HAL_GetTick>
 800256c:	4605      	mov	r5, r0
 800256e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002572:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002576:	4b27      	ldr	r3, [pc, #156]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 8002578:	6819      	ldr	r1, [r3, #0]
 800257a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800257e:	fa93 f3a3 	rbit	r3, r3
 8002582:	fab3 f383 	clz	r3, r3
 8002586:	f003 031f 	and.w	r3, r3, #31
 800258a:	2201      	movs	r2, #1
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	4219      	tst	r1, r3
 8002592:	d006      	beq.n	80025a2 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002594:	f7ff f974 	bl	8001880 <HAL_GetTick>
 8002598:	1b40      	subs	r0, r0, r5
 800259a:	2802      	cmp	r0, #2
 800259c:	d9e7      	bls.n	800256e <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 800259e:	2003      	movs	r0, #3
 80025a0:	e057      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a2:	491c      	ldr	r1, [pc, #112]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 80025a4:	684b      	ldr	r3, [r1, #4]
 80025a6:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 80025aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025ac:	6a20      	ldr	r0, [r4, #32]
 80025ae:	4302      	orrs	r2, r0
 80025b0:	4313      	orrs	r3, r2
 80025b2:	604b      	str	r3, [r1, #4]
 80025b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025b8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	2201      	movs	r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80025ce:	f7ff f957 	bl	8001880 <HAL_GetTick>
 80025d2:	4604      	mov	r4, r0
 80025d4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025d8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025dc:	4b0d      	ldr	r3, [pc, #52]	; (8002614 <HAL_RCC_OscConfig+0x5f4>)
 80025de:	6819      	ldr	r1, [r3, #0]
 80025e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025e4:	fa93 f3a3 	rbit	r3, r3
 80025e8:	fab3 f383 	clz	r3, r3
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	2201      	movs	r2, #1
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	4219      	tst	r1, r3
 80025f8:	d106      	bne.n	8002608 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fa:	f7ff f941 	bl	8001880 <HAL_GetTick>
 80025fe:	1b00      	subs	r0, r0, r4
 8002600:	2802      	cmp	r0, #2
 8002602:	d9e7      	bls.n	80025d4 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 8002604:	2003      	movs	r0, #3
 8002606:	e024      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 8002608:	2000      	movs	r0, #0
 800260a:	e022      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
 800260c:	2000      	movs	r0, #0
 800260e:	e020      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
 8002610:	10908120 	.word	0x10908120
 8002614:	40021000 	.word	0x40021000
 8002618:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261c:	2b01      	cmp	r3, #1
 800261e:	d01a      	beq.n	8002656 <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 8002620:	4b0f      	ldr	r3, [pc, #60]	; (8002660 <HAL_RCC_OscConfig+0x640>)
 8002622:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002624:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002628:	6a22      	ldr	r2, [r4, #32]
 800262a:	4291      	cmp	r1, r2
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 800262e:	2001      	movs	r0, #1
 8002630:	e00f      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002632:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002636:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002638:	4293      	cmp	r3, r2
 800263a:	d00e      	beq.n	800265a <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 800263c:	2001      	movs	r0, #1
 800263e:	e008      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8002640:	2001      	movs	r0, #1
}
 8002642:	4770      	bx	lr
        return HAL_ERROR;
 8002644:	2001      	movs	r0, #1
 8002646:	e004      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8002648:	2003      	movs	r0, #3
 800264a:	e002      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 800264c:	2003      	movs	r0, #3
 800264e:	e000      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8002650:	2000      	movs	r0, #0
}
 8002652:	b002      	add	sp, #8
 8002654:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002656:	2001      	movs	r0, #1
 8002658:	e7fb      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 800265a:	2000      	movs	r0, #0
 800265c:	e7f9      	b.n	8002652 <HAL_RCC_OscConfig+0x632>
 800265e:	bf00      	nop
 8002660:	40021000 	.word	0x40021000

08002664 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002664:	4b16      	ldr	r3, [pc, #88]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002666:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002668:	f001 030c 	and.w	r3, r1, #12
 800266c:	2b08      	cmp	r3, #8
 800266e:	d124      	bne.n	80026ba <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002670:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8002674:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002678:	fa93 f3a3 	rbit	r3, r3
 800267c:	fab3 f383 	clz	r3, r3
 8002680:	fa22 f303 	lsr.w	r3, r2, r3
 8002684:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x60>)
 8002686:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002688:	4b0d      	ldr	r3, [pc, #52]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x5c>)
 800268a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	220f      	movs	r2, #15
 8002692:	fa92 f2a2 	rbit	r2, r2
 8002696:	fab2 f282 	clz	r2, r2
 800269a:	40d3      	lsrs	r3, r2
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x64>)
 800269e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80026a0:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 80026a4:	d103      	bne.n	80026ae <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026a6:	4b09      	ldr	r3, [pc, #36]	; (80026cc <HAL_RCC_GetSysClockFreq+0x68>)
 80026a8:	fb03 f000 	mul.w	r0, r3, r0
 80026ac:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026ae:	4b08      	ldr	r3, [pc, #32]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80026b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80026b4:	fb00 f003 	mul.w	r0, r0, r3
 80026b8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80026ba:	4805      	ldr	r0, [pc, #20]	; (80026d0 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	08004978 	.word	0x08004978
 80026c8:	08004988 	.word	0x08004988
 80026cc:	003d0900 	.word	0x003d0900
 80026d0:	007a1200 	.word	0x007a1200

080026d4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80026d4:	2800      	cmp	r0, #0
 80026d6:	f000 80c1 	beq.w	800285c <HAL_RCC_ClockConfig+0x188>
{
 80026da:	b570      	push	{r4, r5, r6, lr}
 80026dc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026de:	4b61      	ldr	r3, [pc, #388]	; (8002864 <HAL_RCC_ClockConfig+0x190>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f003 0307 	and.w	r3, r3, #7
 80026e6:	428b      	cmp	r3, r1
 80026e8:	d20c      	bcs.n	8002704 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ea:	4a5e      	ldr	r2, [pc, #376]	; (8002864 <HAL_RCC_ClockConfig+0x190>)
 80026ec:	6813      	ldr	r3, [r2, #0]
 80026ee:	f023 0307 	bic.w	r3, r3, #7
 80026f2:	430b      	orrs	r3, r1
 80026f4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026f6:	6813      	ldr	r3, [r2, #0]
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	428b      	cmp	r3, r1
 80026fe:	d001      	beq.n	8002704 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002700:	2001      	movs	r0, #1
}
 8002702:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002704:	6823      	ldr	r3, [r4, #0]
 8002706:	f013 0f02 	tst.w	r3, #2
 800270a:	d006      	beq.n	800271a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800270c:	4a56      	ldr	r2, [pc, #344]	; (8002868 <HAL_RCC_ClockConfig+0x194>)
 800270e:	6853      	ldr	r3, [r2, #4]
 8002710:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002714:	68a0      	ldr	r0, [r4, #8]
 8002716:	4303      	orrs	r3, r0
 8002718:	6053      	str	r3, [r2, #4]
 800271a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800271c:	6823      	ldr	r3, [r4, #0]
 800271e:	f013 0f01 	tst.w	r3, #1
 8002722:	d05a      	beq.n	80027da <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002724:	6863      	ldr	r3, [r4, #4]
 8002726:	2b01      	cmp	r3, #1
 8002728:	d02d      	beq.n	8002786 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800272a:	2b02      	cmp	r3, #2
 800272c:	d040      	beq.n	80027b0 <HAL_RCC_ClockConfig+0xdc>
 800272e:	2202      	movs	r2, #2
 8002730:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002734:	4a4c      	ldr	r2, [pc, #304]	; (8002868 <HAL_RCC_ClockConfig+0x194>)
 8002736:	6810      	ldr	r0, [r2, #0]
 8002738:	2202      	movs	r2, #2
 800273a:	fa92 f2a2 	rbit	r2, r2
 800273e:	fab2 f282 	clz	r2, r2
 8002742:	f002 021f 	and.w	r2, r2, #31
 8002746:	2101      	movs	r1, #1
 8002748:	fa01 f202 	lsl.w	r2, r1, r2
 800274c:	4210      	tst	r0, r2
 800274e:	f000 8087 	beq.w	8002860 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002752:	4945      	ldr	r1, [pc, #276]	; (8002868 <HAL_RCC_ClockConfig+0x194>)
 8002754:	684a      	ldr	r2, [r1, #4]
 8002756:	f022 0203 	bic.w	r2, r2, #3
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800275e:	f7ff f88f 	bl	8001880 <HAL_GetTick>
 8002762:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002764:	4b40      	ldr	r3, [pc, #256]	; (8002868 <HAL_RCC_ClockConfig+0x194>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 030c 	and.w	r3, r3, #12
 800276c:	6862      	ldr	r2, [r4, #4]
 800276e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002772:	d032      	beq.n	80027da <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002774:	f7ff f884 	bl	8001880 <HAL_GetTick>
 8002778:	1b80      	subs	r0, r0, r6
 800277a:	f241 3388 	movw	r3, #5000	; 0x1388
 800277e:	4298      	cmp	r0, r3
 8002780:	d9f0      	bls.n	8002764 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8002782:	2003      	movs	r0, #3
 8002784:	e7bd      	b.n	8002702 <HAL_RCC_ClockConfig+0x2e>
 8002786:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800278a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800278e:	4a36      	ldr	r2, [pc, #216]	; (8002868 <HAL_RCC_ClockConfig+0x194>)
 8002790:	6810      	ldr	r0, [r2, #0]
 8002792:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002796:	fa92 f2a2 	rbit	r2, r2
 800279a:	fab2 f282 	clz	r2, r2
 800279e:	f002 021f 	and.w	r2, r2, #31
 80027a2:	2101      	movs	r1, #1
 80027a4:	fa01 f202 	lsl.w	r2, r1, r2
 80027a8:	4202      	tst	r2, r0
 80027aa:	d1d2      	bne.n	8002752 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80027ac:	2001      	movs	r0, #1
 80027ae:	e7a8      	b.n	8002702 <HAL_RCC_ClockConfig+0x2e>
 80027b0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027b4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b8:	4a2b      	ldr	r2, [pc, #172]	; (8002868 <HAL_RCC_ClockConfig+0x194>)
 80027ba:	6810      	ldr	r0, [r2, #0]
 80027bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027c0:	fa92 f2a2 	rbit	r2, r2
 80027c4:	fab2 f282 	clz	r2, r2
 80027c8:	f002 021f 	and.w	r2, r2, #31
 80027cc:	2101      	movs	r1, #1
 80027ce:	fa01 f202 	lsl.w	r2, r1, r2
 80027d2:	4210      	tst	r0, r2
 80027d4:	d1bd      	bne.n	8002752 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80027d6:	2001      	movs	r0, #1
 80027d8:	e793      	b.n	8002702 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027da:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_RCC_ClockConfig+0x190>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0307 	and.w	r3, r3, #7
 80027e2:	42ab      	cmp	r3, r5
 80027e4:	d90c      	bls.n	8002800 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e6:	4a1f      	ldr	r2, [pc, #124]	; (8002864 <HAL_RCC_ClockConfig+0x190>)
 80027e8:	6813      	ldr	r3, [r2, #0]
 80027ea:	f023 0307 	bic.w	r3, r3, #7
 80027ee:	432b      	orrs	r3, r5
 80027f0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	6813      	ldr	r3, [r2, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	42ab      	cmp	r3, r5
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 80027fc:	2001      	movs	r0, #1
 80027fe:	e780      	b.n	8002702 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002800:	6823      	ldr	r3, [r4, #0]
 8002802:	f013 0f04 	tst.w	r3, #4
 8002806:	d006      	beq.n	8002816 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002808:	4a17      	ldr	r2, [pc, #92]	; (8002868 <HAL_RCC_ClockConfig+0x194>)
 800280a:	6853      	ldr	r3, [r2, #4]
 800280c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002810:	68e1      	ldr	r1, [r4, #12]
 8002812:	430b      	orrs	r3, r1
 8002814:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	f013 0f08 	tst.w	r3, #8
 800281c:	d007      	beq.n	800282e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800281e:	4a12      	ldr	r2, [pc, #72]	; (8002868 <HAL_RCC_ClockConfig+0x194>)
 8002820:	6853      	ldr	r3, [r2, #4]
 8002822:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002826:	6921      	ldr	r1, [r4, #16]
 8002828:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800282c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800282e:	f7ff ff19 	bl	8002664 <HAL_RCC_GetSysClockFreq>
 8002832:	4b0d      	ldr	r3, [pc, #52]	; (8002868 <HAL_RCC_ClockConfig+0x194>)
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800283a:	22f0      	movs	r2, #240	; 0xf0
 800283c:	fa92 f2a2 	rbit	r2, r2
 8002840:	fab2 f282 	clz	r2, r2
 8002844:	40d3      	lsrs	r3, r2
 8002846:	4a09      	ldr	r2, [pc, #36]	; (800286c <HAL_RCC_ClockConfig+0x198>)
 8002848:	5cd3      	ldrb	r3, [r2, r3]
 800284a:	40d8      	lsrs	r0, r3
 800284c:	4b08      	ldr	r3, [pc, #32]	; (8002870 <HAL_RCC_ClockConfig+0x19c>)
 800284e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002850:	4b08      	ldr	r3, [pc, #32]	; (8002874 <HAL_RCC_ClockConfig+0x1a0>)
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	f7fe ffd0 	bl	80017f8 <HAL_InitTick>
  return HAL_OK;
 8002858:	2000      	movs	r0, #0
 800285a:	e752      	b.n	8002702 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 800285c:	2001      	movs	r0, #1
}
 800285e:	4770      	bx	lr
        return HAL_ERROR;
 8002860:	2001      	movs	r0, #1
 8002862:	e74e      	b.n	8002702 <HAL_RCC_ClockConfig+0x2e>
 8002864:	40022000 	.word	0x40022000
 8002868:	40021000 	.word	0x40021000
 800286c:	08004960 	.word	0x08004960
 8002870:	20000080 	.word	0x20000080
 8002874:	20000088 	.word	0x20000088

08002878 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002878:	4b01      	ldr	r3, [pc, #4]	; (8002880 <HAL_RCC_GetHCLKFreq+0x8>)
 800287a:	6818      	ldr	r0, [r3, #0]
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000080 	.word	0x20000080

08002884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002884:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002886:	f7ff fff7 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 800288a:	4b07      	ldr	r3, [pc, #28]	; (80028a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002892:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002896:	fa92 f2a2 	rbit	r2, r2
 800289a:	fab2 f282 	clz	r2, r2
 800289e:	40d3      	lsrs	r3, r2
 80028a0:	4a02      	ldr	r2, [pc, #8]	; (80028ac <HAL_RCC_GetPCLK1Freq+0x28>)
 80028a2:	5cd3      	ldrb	r3, [r2, r3]
}    
 80028a4:	40d8      	lsrs	r0, r3
 80028a6:	bd08      	pop	{r3, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	08004970 	.word	0x08004970

080028b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028b0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80028b2:	f7ff ffe1 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80028be:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80028c2:	fa92 f2a2 	rbit	r2, r2
 80028c6:	fab2 f282 	clz	r2, r2
 80028ca:	40d3      	lsrs	r3, r2
 80028cc:	4a02      	ldr	r2, [pc, #8]	; (80028d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80028ce:	5cd3      	ldrb	r3, [r2, r3]
} 
 80028d0:	40d8      	lsrs	r0, r3
 80028d2:	bd08      	pop	{r3, pc}
 80028d4:	40021000 	.word	0x40021000
 80028d8:	08004970 	.word	0x08004970

080028dc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80028dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028de:	b083      	sub	sp, #12
 80028e0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80028e2:	6803      	ldr	r3, [r0, #0]
 80028e4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80028e8:	d044      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ea:	4b64      	ldr	r3, [pc, #400]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80028f2:	d179      	bne.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028f4:	4b61      	ldr	r3, [pc, #388]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80028f6:	69da      	ldr	r2, [r3, #28]
 80028f8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028fc:	61da      	str	r2, [r3, #28]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002904:	9301      	str	r3, [sp, #4]
 8002906:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002908:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800290a:	4b5d      	ldr	r3, [pc, #372]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002912:	d06b      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002914:	4b59      	ldr	r3, [pc, #356]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002916:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002918:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800291c:	d021      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x86>
 800291e:	6862      	ldr	r2, [r4, #4]
 8002920:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002924:	429a      	cmp	r2, r3
 8002926:	d01c      	beq.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002928:	4854      	ldr	r0, [pc, #336]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800292a:	6a01      	ldr	r1, [r0, #32]
 800292c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002934:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002938:	fab2 f282 	clz	r2, r2
 800293c:	4f51      	ldr	r7, [pc, #324]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 800293e:	443a      	add	r2, r7
 8002940:	0092      	lsls	r2, r2, #2
 8002942:	f04f 0c01 	mov.w	ip, #1
 8002946:	f8c2 c000 	str.w	ip, [r2]
 800294a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 800294e:	fab3 f383 	clz	r3, r3
 8002952:	443b      	add	r3, r7
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800295a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800295c:	f011 0f01 	tst.w	r1, #1
 8002960:	d158      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002962:	4a46      	ldr	r2, [pc, #280]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002964:	6a13      	ldr	r3, [r2, #32]
 8002966:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800296a:	6861      	ldr	r1, [r4, #4]
 800296c:	430b      	orrs	r3, r1
 800296e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002970:	2d00      	cmp	r5, #0
 8002972:	d17a      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002974:	6823      	ldr	r3, [r4, #0]
 8002976:	f013 0f01 	tst.w	r3, #1
 800297a:	d006      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800297c:	4a3f      	ldr	r2, [pc, #252]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 800297e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002980:	f023 0303 	bic.w	r3, r3, #3
 8002984:	68a1      	ldr	r1, [r4, #8]
 8002986:	430b      	orrs	r3, r1
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	f013 0f20 	tst.w	r3, #32
 8002990:	d006      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002992:	4a3a      	ldr	r2, [pc, #232]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002994:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002996:	f023 0310 	bic.w	r3, r3, #16
 800299a:	68e1      	ldr	r1, [r4, #12]
 800299c:	430b      	orrs	r3, r1
 800299e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80029a0:	6823      	ldr	r3, [r4, #0]
 80029a2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80029a6:	d006      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80029a8:	4a34      	ldr	r2, [pc, #208]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029aa:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80029ac:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 80029b0:	6921      	ldr	r1, [r4, #16]
 80029b2:	430b      	orrs	r3, r1
 80029b4:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80029b6:	6823      	ldr	r3, [r4, #0]
 80029b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 80029bc:	d006      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029be:	4a2f      	ldr	r2, [pc, #188]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80029c6:	6961      	ldr	r1, [r4, #20]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80029d2:	d051      	beq.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80029d4:	4a29      	ldr	r2, [pc, #164]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 80029d6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80029d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80029dc:	69a1      	ldr	r1, [r4, #24]
 80029de:	430b      	orrs	r3, r1
 80029e0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80029e2:	2000      	movs	r0, #0
}
 80029e4:	b003      	add	sp, #12
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 80029e8:	2500      	movs	r5, #0
 80029ea:	e78e      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ec:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029ee:	6813      	ldr	r3, [r2, #0]
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80029f6:	f7fe ff43 	bl	8001880 <HAL_GetTick>
 80029fa:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	4b20      	ldr	r3, [pc, #128]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002a04:	d186      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a06:	f7fe ff3b 	bl	8001880 <HAL_GetTick>
 8002a0a:	1b80      	subs	r0, r0, r6
 8002a0c:	2864      	cmp	r0, #100	; 0x64
 8002a0e:	d9f5      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002a10:	2003      	movs	r0, #3
 8002a12:	e7e7      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002a14:	f7fe ff34 	bl	8001880 <HAL_GetTick>
 8002a18:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1a:	e014      	b.n	8002a46 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a1e:	6a19      	ldr	r1, [r3, #32]
 8002a20:	2302      	movs	r3, #2
 8002a22:	fa93 f3a3 	rbit	r3, r3
 8002a26:	fab3 f383 	clz	r3, r3
 8002a2a:	f003 031f 	and.w	r3, r3, #31
 8002a2e:	2201      	movs	r2, #1
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	420b      	tst	r3, r1
 8002a36:	d194      	bne.n	8002962 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe ff22 	bl	8001880 <HAL_GetTick>
 8002a3c:	1b80      	subs	r0, r0, r6
 8002a3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002a42:	4298      	cmp	r0, r3
 8002a44:	d816      	bhi.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002a46:	2302      	movs	r3, #2
 8002a48:	fa93 f2a3 	rbit	r2, r3
 8002a4c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	fab3 f383 	clz	r3, r3
 8002a54:	095b      	lsrs	r3, r3, #5
 8002a56:	f043 0302 	orr.w	r3, r3, #2
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d0de      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	4b05      	ldr	r3, [pc, #20]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002a66:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002a68:	e7da      	b.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a6a:	69d3      	ldr	r3, [r2, #28]
 8002a6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a70:	61d3      	str	r3, [r2, #28]
 8002a72:	e77f      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8002a74:	2003      	movs	r0, #3
 8002a76:	e7b5      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8002a78:	2000      	movs	r0, #0
 8002a7a:	e7b3      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40007000 	.word	0x40007000
 8002a84:	10908100 	.word	0x10908100

08002a88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a88:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a8a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a8c:	6a04      	ldr	r4, [r0, #32]
 8002a8e:	f024 0401 	bic.w	r4, r4, #1
 8002a92:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a94:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a96:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a9a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a9e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002aa2:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aa4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002aa6:	6203      	str	r3, [r0, #32]
}
 8002aa8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002aae:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ab0:	6a03      	ldr	r3, [r0, #32]
 8002ab2:	f023 0310 	bic.w	r3, r3, #16
 8002ab6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002aba:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002abc:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ac0:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ac4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ac8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002acc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ace:	6203      	str	r3, [r0, #32]
}
 8002ad0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ad6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ad8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002adc:	4319      	orrs	r1, r3
 8002ade:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ae2:	6081      	str	r1, [r0, #8]
}
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae8:	6802      	ldr	r2, [r0, #0]
 8002aea:	68d3      	ldr	r3, [r2, #12]
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002af2:	6802      	ldr	r2, [r0, #0]
 8002af4:	6891      	ldr	r1, [r2, #8]
 8002af6:	4b06      	ldr	r3, [pc, #24]	; (8002b10 <HAL_TIM_Base_Start_IT+0x28>)
 8002af8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afa:	2b06      	cmp	r3, #6
 8002afc:	d006      	beq.n	8002b0c <HAL_TIM_Base_Start_IT+0x24>
 8002afe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b02:	d003      	beq.n	8002b0c <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6013      	str	r3, [r2, #0]
}
 8002b0c:	2000      	movs	r0, #0
 8002b0e:	4770      	bx	lr
 8002b10:	00010007 	.word	0x00010007

08002b14 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002b14:	6802      	ldr	r2, [r0, #0]
 8002b16:	68d3      	ldr	r3, [r2, #12]
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8002b1e:	6803      	ldr	r3, [r0, #0]
 8002b20:	6a19      	ldr	r1, [r3, #32]
 8002b22:	f241 1211 	movw	r2, #4369	; 0x1111
 8002b26:	4211      	tst	r1, r2
 8002b28:	d108      	bne.n	8002b3c <HAL_TIM_Base_Stop_IT+0x28>
 8002b2a:	6a19      	ldr	r1, [r3, #32]
 8002b2c:	f240 4244 	movw	r2, #1092	; 0x444
 8002b30:	4211      	tst	r1, r2
 8002b32:	d103      	bne.n	8002b3c <HAL_TIM_Base_Stop_IT+0x28>
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	f022 0201 	bic.w	r2, r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]
}
 8002b3c:	2000      	movs	r0, #0
 8002b3e:	4770      	bx	lr

08002b40 <HAL_TIM_PeriodElapsedCallback>:
}
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002b42:	4770      	bx	lr

08002b44 <HAL_TIM_IC_CaptureCallback>:
}
 8002b44:	4770      	bx	lr

08002b46 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002b46:	4770      	bx	lr

08002b48 <HAL_TIM_TriggerCallback>:
}
 8002b48:	4770      	bx	lr

08002b4a <HAL_TIM_IRQHandler>:
{
 8002b4a:	b510      	push	{r4, lr}
 8002b4c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b4e:	6803      	ldr	r3, [r0, #0]
 8002b50:	691a      	ldr	r2, [r3, #16]
 8002b52:	f012 0f02 	tst.w	r2, #2
 8002b56:	d011      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	f012 0f02 	tst.w	r2, #2
 8002b5e:	d00d      	beq.n	8002b7c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b60:	f06f 0202 	mvn.w	r2, #2
 8002b64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b66:	2301      	movs	r3, #1
 8002b68:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b6a:	6803      	ldr	r3, [r0, #0]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	f013 0f03 	tst.w	r3, #3
 8002b72:	d079      	beq.n	8002c68 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002b74:	f7ff ffe6 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b7c:	6823      	ldr	r3, [r4, #0]
 8002b7e:	691a      	ldr	r2, [r3, #16]
 8002b80:	f012 0f04 	tst.w	r2, #4
 8002b84:	d012      	beq.n	8002bac <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b86:	68da      	ldr	r2, [r3, #12]
 8002b88:	f012 0f04 	tst.w	r2, #4
 8002b8c:	d00e      	beq.n	8002bac <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b8e:	f06f 0204 	mvn.w	r2, #4
 8002b92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b94:	2302      	movs	r3, #2
 8002b96:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b98:	6823      	ldr	r3, [r4, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002ba0:	d068      	beq.n	8002c74 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	f7ff ffce 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	691a      	ldr	r2, [r3, #16]
 8002bb0:	f012 0f08 	tst.w	r2, #8
 8002bb4:	d012      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002bb6:	68da      	ldr	r2, [r3, #12]
 8002bb8:	f012 0f08 	tst.w	r2, #8
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002bbe:	f06f 0208 	mvn.w	r2, #8
 8002bc2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002bc4:	2304      	movs	r3, #4
 8002bc6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bc8:	6823      	ldr	r3, [r4, #0]
 8002bca:	69db      	ldr	r3, [r3, #28]
 8002bcc:	f013 0f03 	tst.w	r3, #3
 8002bd0:	d057      	beq.n	8002c82 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002bd2:	4620      	mov	r0, r4
 8002bd4:	f7ff ffb6 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bdc:	6823      	ldr	r3, [r4, #0]
 8002bde:	691a      	ldr	r2, [r3, #16]
 8002be0:	f012 0f10 	tst.w	r2, #16
 8002be4:	d012      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be6:	68da      	ldr	r2, [r3, #12]
 8002be8:	f012 0f10 	tst.w	r2, #16
 8002bec:	d00e      	beq.n	8002c0c <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bee:	f06f 0210 	mvn.w	r2, #16
 8002bf2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bf4:	2308      	movs	r3, #8
 8002bf6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bf8:	6823      	ldr	r3, [r4, #0]
 8002bfa:	69db      	ldr	r3, [r3, #28]
 8002bfc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002c00:	d046      	beq.n	8002c90 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002c02:	4620      	mov	r0, r4
 8002c04:	f7ff ff9e 	bl	8002b44 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c0c:	6823      	ldr	r3, [r4, #0]
 8002c0e:	691a      	ldr	r2, [r3, #16]
 8002c10:	f012 0f01 	tst.w	r2, #1
 8002c14:	d003      	beq.n	8002c1e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	f012 0f01 	tst.w	r2, #1
 8002c1c:	d13f      	bne.n	8002c9e <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c1e:	6823      	ldr	r3, [r4, #0]
 8002c20:	691a      	ldr	r2, [r3, #16]
 8002c22:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c26:	d003      	beq.n	8002c30 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c2e:	d13d      	bne.n	8002cac <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c30:	6823      	ldr	r3, [r4, #0]
 8002c32:	691a      	ldr	r2, [r3, #16]
 8002c34:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002c38:	d003      	beq.n	8002c42 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c3a:	68da      	ldr	r2, [r3, #12]
 8002c3c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002c40:	d13b      	bne.n	8002cba <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c42:	6823      	ldr	r3, [r4, #0]
 8002c44:	691a      	ldr	r2, [r3, #16]
 8002c46:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c4a:	d003      	beq.n	8002c54 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002c52:	d139      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c54:	6823      	ldr	r3, [r4, #0]
 8002c56:	691a      	ldr	r2, [r3, #16]
 8002c58:	f012 0f20 	tst.w	r2, #32
 8002c5c:	d003      	beq.n	8002c66 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c5e:	68da      	ldr	r2, [r3, #12]
 8002c60:	f012 0f20 	tst.w	r2, #32
 8002c64:	d137      	bne.n	8002cd6 <HAL_TIM_IRQHandler+0x18c>
}
 8002c66:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c68:	f7ff ff6b 	bl	8002b42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c6c:	4620      	mov	r0, r4
 8002c6e:	f7ff ff6a 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c72:	e781      	b.n	8002b78 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c74:	4620      	mov	r0, r4
 8002c76:	f7ff ff64 	bl	8002b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c7a:	4620      	mov	r0, r4
 8002c7c:	f7ff ff63 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c80:	e792      	b.n	8002ba8 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c82:	4620      	mov	r0, r4
 8002c84:	f7ff ff5d 	bl	8002b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c88:	4620      	mov	r0, r4
 8002c8a:	f7ff ff5c 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c8e:	e7a3      	b.n	8002bd8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c90:	4620      	mov	r0, r4
 8002c92:	f7ff ff56 	bl	8002b42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c96:	4620      	mov	r0, r4
 8002c98:	f7ff ff55 	bl	8002b46 <HAL_TIM_PWM_PulseFinishedCallback>
 8002c9c:	e7b4      	b.n	8002c08 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c9e:	f06f 0201 	mvn.w	r2, #1
 8002ca2:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002ca4:	4620      	mov	r0, r4
 8002ca6:	f7ff ff4b 	bl	8002b40 <HAL_TIM_PeriodElapsedCallback>
 8002caa:	e7b8      	b.n	8002c1e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cb0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002cb2:	4620      	mov	r0, r4
 8002cb4:	f000 f92f 	bl	8002f16 <HAL_TIMEx_BreakCallback>
 8002cb8:	e7ba      	b.n	8002c30 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002cba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002cbe:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f000 f929 	bl	8002f18 <HAL_TIMEx_Break2Callback>
 8002cc6:	e7bc      	b.n	8002c42 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ccc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002cce:	4620      	mov	r0, r4
 8002cd0:	f7ff ff3a 	bl	8002b48 <HAL_TIM_TriggerCallback>
 8002cd4:	e7be      	b.n	8002c54 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd6:	f06f 0220 	mvn.w	r2, #32
 8002cda:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002cdc:	4620      	mov	r0, r4
 8002cde:	f000 f919 	bl	8002f14 <HAL_TIMEx_CommutCallback>
}
 8002ce2:	e7c0      	b.n	8002c66 <HAL_TIM_IRQHandler+0x11c>

08002ce4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8002ce4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ce6:	4a22      	ldr	r2, [pc, #136]	; (8002d70 <TIM_Base_SetConfig+0x8c>)
 8002ce8:	4290      	cmp	r0, r2
 8002cea:	d006      	beq.n	8002cfa <TIM_Base_SetConfig+0x16>
 8002cec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002cf0:	d003      	beq.n	8002cfa <TIM_Base_SetConfig+0x16>
 8002cf2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002cf6:	4290      	cmp	r0, r2
 8002cf8:	d103      	bne.n	8002d02 <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002cfe:	684a      	ldr	r2, [r1, #4]
 8002d00:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d02:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <TIM_Base_SetConfig+0x8c>)
 8002d04:	4290      	cmp	r0, r2
 8002d06:	d012      	beq.n	8002d2e <TIM_Base_SetConfig+0x4a>
 8002d08:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002d0c:	d00f      	beq.n	8002d2e <TIM_Base_SetConfig+0x4a>
 8002d0e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002d12:	4290      	cmp	r0, r2
 8002d14:	d00b      	beq.n	8002d2e <TIM_Base_SetConfig+0x4a>
 8002d16:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8002d1a:	4290      	cmp	r0, r2
 8002d1c:	d007      	beq.n	8002d2e <TIM_Base_SetConfig+0x4a>
 8002d1e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d22:	4290      	cmp	r0, r2
 8002d24:	d003      	beq.n	8002d2e <TIM_Base_SetConfig+0x4a>
 8002d26:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002d2a:	4290      	cmp	r0, r2
 8002d2c:	d103      	bne.n	8002d36 <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002d2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002d32:	68ca      	ldr	r2, [r1, #12]
 8002d34:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d3a:	694a      	ldr	r2, [r1, #20]
 8002d3c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002d3e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d40:	688b      	ldr	r3, [r1, #8]
 8002d42:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002d44:	680b      	ldr	r3, [r1, #0]
 8002d46:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d48:	4b09      	ldr	r3, [pc, #36]	; (8002d70 <TIM_Base_SetConfig+0x8c>)
 8002d4a:	4298      	cmp	r0, r3
 8002d4c:	d00b      	beq.n	8002d66 <TIM_Base_SetConfig+0x82>
 8002d4e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002d52:	4298      	cmp	r0, r3
 8002d54:	d007      	beq.n	8002d66 <TIM_Base_SetConfig+0x82>
 8002d56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d5a:	4298      	cmp	r0, r3
 8002d5c:	d003      	beq.n	8002d66 <TIM_Base_SetConfig+0x82>
 8002d5e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002d62:	4298      	cmp	r0, r3
 8002d64:	d101      	bne.n	8002d6a <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8002d66:	690b      	ldr	r3, [r1, #16]
 8002d68:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	6143      	str	r3, [r0, #20]
}
 8002d6e:	4770      	bx	lr
 8002d70:	40012c00 	.word	0x40012c00

08002d74 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002d74:	b1a8      	cbz	r0, 8002da2 <HAL_TIM_Base_Init+0x2e>
{
 8002d76:	b510      	push	{r4, lr}
 8002d78:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002d7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002d7e:	b15b      	cbz	r3, 8002d98 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002d80:	2302      	movs	r3, #2
 8002d82:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d86:	1d21      	adds	r1, r4, #4
 8002d88:	6820      	ldr	r0, [r4, #0]
 8002d8a:	f7ff ffab 	bl	8002ce4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002d94:	2000      	movs	r0, #0
}
 8002d96:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002d98:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002d9c:	f7fe fb5c 	bl	8001458 <HAL_TIM_Base_MspInit>
 8002da0:	e7ee      	b.n	8002d80 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002da2:	2001      	movs	r0, #1
}
 8002da4:	4770      	bx	lr

08002da6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002da6:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002da8:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002daa:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002dae:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002db2:	430b      	orrs	r3, r1
 8002db4:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db6:	6083      	str	r3, [r0, #8]
}
 8002db8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002dbc:	4770      	bx	lr
	...

08002dc0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002dc0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d064      	beq.n	8002e92 <HAL_TIM_ConfigClockSource+0xd2>
{
 8002dc8:	b510      	push	{r4, lr}
 8002dca:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002dcc:	2301      	movs	r3, #1
 8002dce:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002dd8:	6802      	ldr	r2, [r0, #0]
 8002dda:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ddc:	4b2e      	ldr	r3, [pc, #184]	; (8002e98 <HAL_TIM_ConfigClockSource+0xd8>)
 8002dde:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002de0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002de2:	680b      	ldr	r3, [r1, #0]
 8002de4:	2b40      	cmp	r3, #64	; 0x40
 8002de6:	d04a      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0xbe>
 8002de8:	d913      	bls.n	8002e12 <HAL_TIM_ConfigClockSource+0x52>
 8002dea:	2b60      	cmp	r3, #96	; 0x60
 8002dec:	d03d      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0xaa>
 8002dee:	d91e      	bls.n	8002e2e <HAL_TIM_ConfigClockSource+0x6e>
 8002df0:	2b70      	cmp	r3, #112	; 0x70
 8002df2:	d028      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0x86>
 8002df4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df8:	d130      	bne.n	8002e5c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8002dfa:	68cb      	ldr	r3, [r1, #12]
 8002dfc:	684a      	ldr	r2, [r1, #4]
 8002dfe:	6889      	ldr	r1, [r1, #8]
 8002e00:	6820      	ldr	r0, [r4, #0]
 8002e02:	f7ff ffd0 	bl	8002da6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e06:	6822      	ldr	r2, [r4, #0]
 8002e08:	6893      	ldr	r3, [r2, #8]
 8002e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e0e:	6093      	str	r3, [r2, #8]
      break;
 8002e10:	e024      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8002e12:	2b10      	cmp	r3, #16
 8002e14:	d006      	beq.n	8002e24 <HAL_TIM_ConfigClockSource+0x64>
 8002e16:	d904      	bls.n	8002e22 <HAL_TIM_ConfigClockSource+0x62>
 8002e18:	2b20      	cmp	r3, #32
 8002e1a:	d003      	beq.n	8002e24 <HAL_TIM_ConfigClockSource+0x64>
 8002e1c:	2b30      	cmp	r3, #48	; 0x30
 8002e1e:	d001      	beq.n	8002e24 <HAL_TIM_ConfigClockSource+0x64>
 8002e20:	e01c      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x9c>
 8002e22:	b9db      	cbnz	r3, 8002e5c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e24:	4619      	mov	r1, r3
 8002e26:	6820      	ldr	r0, [r4, #0]
 8002e28:	f7ff fe55 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 8002e2c:	e016      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8002e2e:	2b50      	cmp	r3, #80	; 0x50
 8002e30:	d114      	bne.n	8002e5c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	68ca      	ldr	r2, [r1, #12]
 8002e34:	6849      	ldr	r1, [r1, #4]
 8002e36:	6820      	ldr	r0, [r4, #0]
 8002e38:	f7ff fe26 	bl	8002a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e3c:	2150      	movs	r1, #80	; 0x50
 8002e3e:	6820      	ldr	r0, [r4, #0]
 8002e40:	f7ff fe49 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 8002e44:	e00a      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8002e46:	68cb      	ldr	r3, [r1, #12]
 8002e48:	684a      	ldr	r2, [r1, #4]
 8002e4a:	6889      	ldr	r1, [r1, #8]
 8002e4c:	6820      	ldr	r0, [r4, #0]
 8002e4e:	f7ff ffaa 	bl	8002da6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e52:	6822      	ldr	r2, [r4, #0]
 8002e54:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e56:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002e5a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002e62:	2000      	movs	r0, #0
 8002e64:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002e68:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e6a:	68ca      	ldr	r2, [r1, #12]
 8002e6c:	6849      	ldr	r1, [r1, #4]
 8002e6e:	6820      	ldr	r0, [r4, #0]
 8002e70:	f7ff fe1d 	bl	8002aae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e74:	2160      	movs	r1, #96	; 0x60
 8002e76:	6820      	ldr	r0, [r4, #0]
 8002e78:	f7ff fe2d 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 8002e7c:	e7ee      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e7e:	68ca      	ldr	r2, [r1, #12]
 8002e80:	6849      	ldr	r1, [r1, #4]
 8002e82:	6820      	ldr	r0, [r4, #0]
 8002e84:	f7ff fe00 	bl	8002a88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e88:	2140      	movs	r1, #64	; 0x40
 8002e8a:	6820      	ldr	r0, [r4, #0]
 8002e8c:	f7ff fe23 	bl	8002ad6 <TIM_ITRx_SetConfig>
      break;
 8002e90:	e7e4      	b.n	8002e5c <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8002e92:	2002      	movs	r0, #2
}
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	fffe0088 	.word	0xfffe0088

08002e9c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d033      	beq.n	8002f0c <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8002ea4:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eac:	2302      	movs	r3, #2
 8002eae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002eb2:	6802      	ldr	r2, [r0, #0]
 8002eb4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eb6:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002eb8:	4c15      	ldr	r4, [pc, #84]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8002eba:	42a2      	cmp	r2, r4
 8002ebc:	d021      	beq.n	8002f02 <HAL_TIMEx_MasterConfigSynchronization+0x66>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ec2:	680c      	ldr	r4, [r1, #0]
 8002ec4:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ec8:	6803      	ldr	r3, [r0, #0]
 8002eca:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d00a      	beq.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ed4:	d007      	beq.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002ed6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d003      	beq.n	8002ee6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002ede:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d104      	bne.n	8002ef0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ee6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002eea:	688a      	ldr	r2, [r1, #8]
 8002eec:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002eee:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8002efc:	4618      	mov	r0, r3
}
 8002efe:	bc30      	pop	{r4, r5}
 8002f00:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002f02:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002f06:	684c      	ldr	r4, [r1, #4]
 8002f08:	4323      	orrs	r3, r4
 8002f0a:	e7d8      	b.n	8002ebe <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8002f0c:	2002      	movs	r0, #2
}
 8002f0e:	4770      	bx	lr
 8002f10:	40012c00 	.word	0x40012c00

08002f14 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f16:	4770      	bx	lr

08002f18 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002f18:	4770      	bx	lr

08002f1a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f1a:	6802      	ldr	r2, [r0, #0]
 8002f1c:	6813      	ldr	r3, [r2, #0]
 8002f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002f22:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f24:	6802      	ldr	r2, [r0, #0]
 8002f26:	6893      	ldr	r3, [r2, #8]
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002f2e:	2320      	movs	r3, #32
 8002f30:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002f32:	2300      	movs	r3, #0
 8002f34:	6603      	str	r3, [r0, #96]	; 0x60
}
 8002f36:	4770      	bx	lr

08002f38 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f38:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002f3a:	2b21      	cmp	r3, #33	; 0x21
 8002f3c:	d000      	beq.n	8002f40 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002f3e:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002f40:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	b16b      	cbz	r3, 8002f64 <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002f48:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002f4a:	6803      	ldr	r3, [r0, #0]
 8002f4c:	7812      	ldrb	r2, [r2, #0]
 8002f4e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002f50:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002f52:	3301      	adds	r3, #1
 8002f54:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002f56:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8002f62:	e7ec      	b.n	8002f3e <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002f64:	6802      	ldr	r2, [r0, #0]
 8002f66:	6813      	ldr	r3, [r2, #0]
 8002f68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f6c:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f6e:	6802      	ldr	r2, [r0, #0]
 8002f70:	6813      	ldr	r3, [r2, #0]
 8002f72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f76:	6013      	str	r3, [r2, #0]
 8002f78:	4770      	bx	lr

08002f7a <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f7a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002f7c:	2b21      	cmp	r3, #33	; 0x21
 8002f7e:	d000      	beq.n	8002f82 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002f80:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002f82:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	b17b      	cbz	r3, 8002faa <UART_TxISR_16BIT+0x30>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002f8a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002f8c:	881b      	ldrh	r3, [r3, #0]
 8002f8e:	6802      	ldr	r2, [r0, #0]
 8002f90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f94:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002f96:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002f98:	3302      	adds	r3, #2
 8002f9a:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002f9c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8002fa8:	e7ea      	b.n	8002f80 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002faa:	6802      	ldr	r2, [r0, #0]
 8002fac:	6813      	ldr	r3, [r2, #0]
 8002fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fb2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002fb4:	6802      	ldr	r2, [r0, #0]
 8002fb6:	6813      	ldr	r3, [r2, #0]
 8002fb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002fc0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002fc2:	2b20      	cmp	r3, #32
 8002fc4:	d128      	bne.n	8003018 <HAL_UART_Transmit_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 8002fc6:	b349      	cbz	r1, 800301c <HAL_UART_Transmit_IT+0x5c>
 8002fc8:	b352      	cbz	r2, 8003020 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8002fca:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d028      	beq.n	8003024 <HAL_UART_Transmit_IT+0x64>
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8002fd8:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002fda:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fde:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe6:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fe8:	2321      	movs	r3, #33	; 0x21
 8002fea:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fec:	6883      	ldr	r3, [r0, #8]
 8002fee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff2:	d00b      	beq.n	800300c <HAL_UART_Transmit_IT+0x4c>
      huart->TxISR = UART_TxISR_8BIT;
 8002ff4:	4b0c      	ldr	r3, [pc, #48]	; (8003028 <HAL_UART_Transmit_IT+0x68>)
 8002ff6:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ffe:	6801      	ldr	r1, [r0, #0]
 8003000:	680a      	ldr	r2, [r1, #0]
 8003002:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003006:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8003008:	4618      	mov	r0, r3
 800300a:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800300c:	6903      	ldr	r3, [r0, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f0      	bne.n	8002ff4 <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 8003012:	4b06      	ldr	r3, [pc, #24]	; (800302c <HAL_UART_Transmit_IT+0x6c>)
 8003014:	6643      	str	r3, [r0, #100]	; 0x64
 8003016:	e7ef      	b.n	8002ff8 <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 8003018:	2002      	movs	r0, #2
 800301a:	4770      	bx	lr
      return HAL_ERROR;
 800301c:	2001      	movs	r0, #1
 800301e:	4770      	bx	lr
 8003020:	2001      	movs	r0, #1
 8003022:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003024:	2002      	movs	r0, #2
}
 8003026:	4770      	bx	lr
 8003028:	08002f39 	.word	0x08002f39
 800302c:	08002f7b 	.word	0x08002f7b

08003030 <HAL_UART_TxCpltCallback>:
}
 8003030:	4770      	bx	lr

08003032 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003032:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003034:	6801      	ldr	r1, [r0, #0]
 8003036:	680a      	ldr	r2, [r1, #0]
 8003038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800303c:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800303e:	2220      	movs	r2, #32
 8003040:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003042:	2200      	movs	r2, #0
 8003044:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003046:	f7ff fff3 	bl	8003030 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800304a:	bd08      	pop	{r3, pc}

0800304c <HAL_UART_ErrorCallback>:
}
 800304c:	4770      	bx	lr
	...

08003050 <HAL_UART_IRQHandler>:
{
 8003050:	b538      	push	{r3, r4, r5, lr}
 8003052:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003054:	6801      	ldr	r1, [r0, #0]
 8003056:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003058:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800305a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800305c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8003060:	401a      	ands	r2, r3
 8003062:	d10c      	bne.n	800307e <HAL_UART_IRQHandler+0x2e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003064:	f013 0f20 	tst.w	r3, #32
 8003068:	d009      	beq.n	800307e <HAL_UART_IRQHandler+0x2e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800306a:	f010 0f20 	tst.w	r0, #32
 800306e:	d006      	beq.n	800307e <HAL_UART_IRQHandler+0x2e>
      if (huart->RxISR != NULL)
 8003070:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003072:	2b00      	cmp	r3, #0
 8003074:	f000 80a1 	beq.w	80031ba <HAL_UART_IRQHandler+0x16a>
        huart->RxISR(huart);
 8003078:	4620      	mov	r0, r4
 800307a:	4798      	blx	r3
 800307c:	e09d      	b.n	80031ba <HAL_UART_IRQHandler+0x16a>
  if ((errorflags != 0U)
 800307e:	2a00      	cmp	r2, #0
 8003080:	d07d      	beq.n	800317e <HAL_UART_IRQHandler+0x12e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003082:	f015 0201 	ands.w	r2, r5, #1
 8003086:	d102      	bne.n	800308e <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003088:	f410 7f90 	tst.w	r0, #288	; 0x120
 800308c:	d077      	beq.n	800317e <HAL_UART_IRQHandler+0x12e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800308e:	f013 0f01 	tst.w	r3, #1
 8003092:	d007      	beq.n	80030a4 <HAL_UART_IRQHandler+0x54>
 8003094:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003098:	d004      	beq.n	80030a4 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800309a:	2501      	movs	r5, #1
 800309c:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800309e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80030a0:	4329      	orrs	r1, r5
 80030a2:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030a4:	f013 0f02 	tst.w	r3, #2
 80030a8:	d007      	beq.n	80030ba <HAL_UART_IRQHandler+0x6a>
 80030aa:	b132      	cbz	r2, 80030ba <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030ac:	6821      	ldr	r1, [r4, #0]
 80030ae:	2502      	movs	r5, #2
 80030b0:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030b2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80030b4:	f041 0104 	orr.w	r1, r1, #4
 80030b8:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ba:	f013 0f04 	tst.w	r3, #4
 80030be:	d007      	beq.n	80030d0 <HAL_UART_IRQHandler+0x80>
 80030c0:	b132      	cbz	r2, 80030d0 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030c2:	6821      	ldr	r1, [r4, #0]
 80030c4:	2504      	movs	r5, #4
 80030c6:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030c8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80030ca:	f041 0102 	orr.w	r1, r1, #2
 80030ce:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030d0:	f013 0f08 	tst.w	r3, #8
 80030d4:	d009      	beq.n	80030ea <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030d6:	f010 0f20 	tst.w	r0, #32
 80030da:	d100      	bne.n	80030de <HAL_UART_IRQHandler+0x8e>
 80030dc:	b12a      	cbz	r2, 80030ea <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030de:	6822      	ldr	r2, [r4, #0]
 80030e0:	2108      	movs	r1, #8
 80030e2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030e4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80030e6:	430a      	orrs	r2, r1
 80030e8:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030ea:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80030ee:	d00a      	beq.n	8003106 <HAL_UART_IRQHandler+0xb6>
 80030f0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80030f4:	d007      	beq.n	8003106 <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030f6:	6822      	ldr	r2, [r4, #0]
 80030f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80030fc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030fe:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003100:	f042 0220 	orr.w	r2, r2, #32
 8003104:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003106:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003108:	2a00      	cmp	r2, #0
 800310a:	d056      	beq.n	80031ba <HAL_UART_IRQHandler+0x16a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800310c:	f013 0f20 	tst.w	r3, #32
 8003110:	d006      	beq.n	8003120 <HAL_UART_IRQHandler+0xd0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003112:	f010 0f20 	tst.w	r0, #32
 8003116:	d003      	beq.n	8003120 <HAL_UART_IRQHandler+0xd0>
        if (huart->RxISR != NULL)
 8003118:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800311a:	b10b      	cbz	r3, 8003120 <HAL_UART_IRQHandler+0xd0>
          huart->RxISR(huart);
 800311c:	4620      	mov	r0, r4
 800311e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003120:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f013 0f40 	tst.w	r3, #64	; 0x40
 800312a:	d102      	bne.n	8003132 <HAL_UART_IRQHandler+0xe2>
 800312c:	f012 0f28 	tst.w	r2, #40	; 0x28
 8003130:	d01f      	beq.n	8003172 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003132:	4620      	mov	r0, r4
 8003134:	f7ff fef1 	bl	8002f1a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	689a      	ldr	r2, [r3, #8]
 800313c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003140:	d013      	beq.n	800316a <HAL_UART_IRQHandler+0x11a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003148:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800314a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800314c:	b14b      	cbz	r3, 8003162 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800314e:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <HAL_UART_IRQHandler+0x174>)
 8003150:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003152:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003154:	f7fe fe0c 	bl	8001d70 <HAL_DMA_Abort_IT>
 8003158:	b378      	cbz	r0, 80031ba <HAL_UART_IRQHandler+0x16a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800315a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800315c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800315e:	4798      	blx	r3
 8003160:	e02b      	b.n	80031ba <HAL_UART_IRQHandler+0x16a>
            HAL_UART_ErrorCallback(huart);
 8003162:	4620      	mov	r0, r4
 8003164:	f7ff ff72 	bl	800304c <HAL_UART_ErrorCallback>
 8003168:	e027      	b.n	80031ba <HAL_UART_IRQHandler+0x16a>
          HAL_UART_ErrorCallback(huart);
 800316a:	4620      	mov	r0, r4
 800316c:	f7ff ff6e 	bl	800304c <HAL_UART_ErrorCallback>
 8003170:	e023      	b.n	80031ba <HAL_UART_IRQHandler+0x16a>
        HAL_UART_ErrorCallback(huart);
 8003172:	4620      	mov	r0, r4
 8003174:	f7ff ff6a 	bl	800304c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003178:	2300      	movs	r3, #0
 800317a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800317c:	e01d      	b.n	80031ba <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800317e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003182:	d002      	beq.n	800318a <HAL_UART_IRQHandler+0x13a>
 8003184:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8003188:	d10a      	bne.n	80031a0 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800318a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800318e:	d00e      	beq.n	80031ae <HAL_UART_IRQHandler+0x15e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003190:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003194:	d00b      	beq.n	80031ae <HAL_UART_IRQHandler+0x15e>
    if (huart->TxISR != NULL)
 8003196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003198:	b17b      	cbz	r3, 80031ba <HAL_UART_IRQHandler+0x16a>
      huart->TxISR(huart);
 800319a:	4620      	mov	r0, r4
 800319c:	4798      	blx	r3
 800319e:	e00c      	b.n	80031ba <HAL_UART_IRQHandler+0x16a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80031a0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80031a4:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80031a6:	4620      	mov	r0, r4
 80031a8:	f000 fa1e 	bl	80035e8 <HAL_UARTEx_WakeupCallback>
    return;
 80031ac:	e005      	b.n	80031ba <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80031ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80031b2:	d002      	beq.n	80031ba <HAL_UART_IRQHandler+0x16a>
 80031b4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80031b8:	d100      	bne.n	80031bc <HAL_UART_IRQHandler+0x16c>
}
 80031ba:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80031bc:	4620      	mov	r0, r4
 80031be:	f7ff ff38 	bl	8003032 <UART_EndTransmit_IT>
    return;
 80031c2:	e7fa      	b.n	80031ba <HAL_UART_IRQHandler+0x16a>
 80031c4:	080031c9 	.word	0x080031c9

080031c8 <UART_DMAAbortOnError>:
{
 80031c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80031ca:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80031d2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80031d6:	f7ff ff39 	bl	800304c <HAL_UART_ErrorCallback>
}
 80031da:	bd08      	pop	{r3, pc}

080031dc <UART_SetConfig>:
{
 80031dc:	b510      	push	{r4, lr}
 80031de:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031e0:	6883      	ldr	r3, [r0, #8]
 80031e2:	6902      	ldr	r2, [r0, #16]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	6942      	ldr	r2, [r0, #20]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	69c2      	ldr	r2, [r0, #28]
 80031ec:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031ee:	6801      	ldr	r1, [r0, #0]
 80031f0:	6808      	ldr	r0, [r1, #0]
 80031f2:	4a6c      	ldr	r2, [pc, #432]	; (80033a4 <UART_SetConfig+0x1c8>)
 80031f4:	4002      	ands	r2, r0
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031fa:	6822      	ldr	r2, [r4, #0]
 80031fc:	6853      	ldr	r3, [r2, #4]
 80031fe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003202:	68e1      	ldr	r1, [r4, #12]
 8003204:	430b      	orrs	r3, r1
 8003206:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003208:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 800320a:	6a23      	ldr	r3, [r4, #32]
 800320c:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800320e:	6821      	ldr	r1, [r4, #0]
 8003210:	688b      	ldr	r3, [r1, #8]
 8003212:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003216:	4313      	orrs	r3, r2
 8003218:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800321a:	6823      	ldr	r3, [r4, #0]
 800321c:	4a62      	ldr	r2, [pc, #392]	; (80033a8 <UART_SetConfig+0x1cc>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d015      	beq.n	800324e <UART_SetConfig+0x72>
 8003222:	4a62      	ldr	r2, [pc, #392]	; (80033ac <UART_SetConfig+0x1d0>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d028      	beq.n	800327a <UART_SetConfig+0x9e>
 8003228:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800322c:	4293      	cmp	r3, r2
 800322e:	d020      	beq.n	8003272 <UART_SetConfig+0x96>
 8003230:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003232:	69e2      	ldr	r2, [r4, #28]
 8003234:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003238:	d021      	beq.n	800327e <UART_SetConfig+0xa2>
    switch (clocksource)
 800323a:	2b08      	cmp	r3, #8
 800323c:	f200 80ab 	bhi.w	8003396 <UART_SetConfig+0x1ba>
 8003240:	e8df f003 	tbb	[pc, r3]
 8003244:	a98b816c 	.word	0xa98b816c
 8003248:	a9a9a996 	.word	0xa9a9a996
 800324c:	a0          	.byte	0xa0
 800324d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <UART_SetConfig+0x1d4>)
 8003250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	2b03      	cmp	r3, #3
 8003258:	d809      	bhi.n	800326e <UART_SetConfig+0x92>
 800325a:	e8df f003 	tbb	[pc, r3]
 800325e:	0402      	.short	0x0402
 8003260:	0c06      	.short	0x0c06
 8003262:	2300      	movs	r3, #0
 8003264:	e7e5      	b.n	8003232 <UART_SetConfig+0x56>
 8003266:	2304      	movs	r3, #4
 8003268:	e7e3      	b.n	8003232 <UART_SetConfig+0x56>
 800326a:	2308      	movs	r3, #8
 800326c:	e7e1      	b.n	8003232 <UART_SetConfig+0x56>
 800326e:	2310      	movs	r3, #16
 8003270:	e7df      	b.n	8003232 <UART_SetConfig+0x56>
 8003272:	2300      	movs	r3, #0
 8003274:	e7dd      	b.n	8003232 <UART_SetConfig+0x56>
 8003276:	2302      	movs	r3, #2
 8003278:	e7db      	b.n	8003232 <UART_SetConfig+0x56>
 800327a:	2300      	movs	r3, #0
 800327c:	e7d9      	b.n	8003232 <UART_SetConfig+0x56>
    switch (clocksource)
 800327e:	2b08      	cmp	r3, #8
 8003280:	d849      	bhi.n	8003316 <UART_SetConfig+0x13a>
 8003282:	e8df f003 	tbb	[pc, r3]
 8003286:	1e05      	.short	0x1e05
 8003288:	48344829 	.word	0x48344829
 800328c:	4848      	.short	0x4848
 800328e:	3f          	.byte	0x3f
 800328f:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003290:	f7ff faf8 	bl	8002884 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003294:	6862      	ldr	r2, [r4, #4]
 8003296:	0853      	lsrs	r3, r2, #1
 8003298:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800329c:	fbb3 f3f2 	udiv	r3, r3, r2
 80032a0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80032a2:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032a4:	f1a3 0110 	sub.w	r1, r3, #16
 80032a8:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80032ac:	4291      	cmp	r1, r2
 80032ae:	d875      	bhi.n	800339c <UART_SetConfig+0x1c0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80032b6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80032ba:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80032bc:	6822      	ldr	r2, [r4, #0]
 80032be:	60d3      	str	r3, [r2, #12]
 80032c0:	e03d      	b.n	800333e <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetPCLK2Freq();
 80032c2:	f7ff faf5 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032c6:	6862      	ldr	r2, [r4, #4]
 80032c8:	0853      	lsrs	r3, r2, #1
 80032ca:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80032ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80032d2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80032d4:	2000      	movs	r0, #0
        break;
 80032d6:	e7e5      	b.n	80032a4 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80032d8:	6862      	ldr	r2, [r4, #4]
 80032da:	0853      	lsrs	r3, r2, #1
 80032dc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80032e0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80032e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80032e8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80032ea:	2000      	movs	r0, #0
        break;
 80032ec:	e7da      	b.n	80032a4 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetSysClockFreq();
 80032ee:	f7ff f9b9 	bl	8002664 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032f2:	6862      	ldr	r2, [r4, #4]
 80032f4:	0853      	lsrs	r3, r2, #1
 80032f6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80032fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80032fe:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003300:	2000      	movs	r0, #0
        break;
 8003302:	e7cf      	b.n	80032a4 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003304:	6862      	ldr	r2, [r4, #4]
 8003306:	0853      	lsrs	r3, r2, #1
 8003308:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800330c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003310:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003312:	2000      	movs	r0, #0
        break;
 8003314:	e7c6      	b.n	80032a4 <UART_SetConfig+0xc8>
        ret = HAL_ERROR;
 8003316:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003318:	2300      	movs	r3, #0
 800331a:	e7c3      	b.n	80032a4 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800331c:	f7ff fab2 	bl	8002884 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003320:	6862      	ldr	r2, [r4, #4]
 8003322:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003326:	fbb3 f3f2 	udiv	r3, r3, r2
 800332a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800332c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800332e:	f1a3 0110 	sub.w	r1, r3, #16
 8003332:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003336:	4291      	cmp	r1, r2
 8003338:	d832      	bhi.n	80033a0 <UART_SetConfig+0x1c4>
      huart->Instance->BRR = usartdiv;
 800333a:	6822      	ldr	r2, [r4, #0]
 800333c:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800333e:	2300      	movs	r3, #0
 8003340:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003342:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003344:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8003346:	f7ff fab3 	bl	80028b0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800334a:	6862      	ldr	r2, [r4, #4]
 800334c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003350:	fbb3 f3f2 	udiv	r3, r3, r2
 8003354:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003356:	2000      	movs	r0, #0
        break;
 8003358:	e7e9      	b.n	800332e <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800335a:	6862      	ldr	r2, [r4, #4]
 800335c:	0853      	lsrs	r3, r2, #1
 800335e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003362:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003366:	fbb3 f3f2 	udiv	r3, r3, r2
 800336a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800336c:	2000      	movs	r0, #0
        break;
 800336e:	e7de      	b.n	800332e <UART_SetConfig+0x152>
        pclk = HAL_RCC_GetSysClockFreq();
 8003370:	f7ff f978 	bl	8002664 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003374:	6862      	ldr	r2, [r4, #4]
 8003376:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800337a:	fbb3 f3f2 	udiv	r3, r3, r2
 800337e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003380:	2000      	movs	r0, #0
        break;
 8003382:	e7d4      	b.n	800332e <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003384:	6862      	ldr	r2, [r4, #4]
 8003386:	0853      	lsrs	r3, r2, #1
 8003388:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800338c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003390:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003392:	2000      	movs	r0, #0
        break;
 8003394:	e7cb      	b.n	800332e <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 8003396:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003398:	2300      	movs	r3, #0
 800339a:	e7c8      	b.n	800332e <UART_SetConfig+0x152>
      ret = HAL_ERROR;
 800339c:	2001      	movs	r0, #1
 800339e:	e7ce      	b.n	800333e <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 80033a0:	2001      	movs	r0, #1
 80033a2:	e7cc      	b.n	800333e <UART_SetConfig+0x162>
 80033a4:	efff69f3 	.word	0xefff69f3
 80033a8:	40013800 	.word	0x40013800
 80033ac:	40004400 	.word	0x40004400
 80033b0:	40021000 	.word	0x40021000

080033b4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80033b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033b6:	f013 0f01 	tst.w	r3, #1
 80033ba:	d006      	beq.n	80033ca <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80033bc:	6802      	ldr	r2, [r0, #0]
 80033be:	6853      	ldr	r3, [r2, #4]
 80033c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80033c4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80033c6:	430b      	orrs	r3, r1
 80033c8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033ca:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033cc:	f013 0f02 	tst.w	r3, #2
 80033d0:	d006      	beq.n	80033e0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033d2:	6802      	ldr	r2, [r0, #0]
 80033d4:	6853      	ldr	r3, [r2, #4]
 80033d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033da:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80033dc:	430b      	orrs	r3, r1
 80033de:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033e2:	f013 0f04 	tst.w	r3, #4
 80033e6:	d006      	beq.n	80033f6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033e8:	6802      	ldr	r2, [r0, #0]
 80033ea:	6853      	ldr	r3, [r2, #4]
 80033ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80033f2:	430b      	orrs	r3, r1
 80033f4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033f6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80033f8:	f013 0f08 	tst.w	r3, #8
 80033fc:	d006      	beq.n	800340c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033fe:	6802      	ldr	r2, [r0, #0]
 8003400:	6853      	ldr	r3, [r2, #4]
 8003402:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003406:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003408:	430b      	orrs	r3, r1
 800340a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800340c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800340e:	f013 0f10 	tst.w	r3, #16
 8003412:	d006      	beq.n	8003422 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003414:	6802      	ldr	r2, [r0, #0]
 8003416:	6893      	ldr	r3, [r2, #8]
 8003418:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800341c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800341e:	430b      	orrs	r3, r1
 8003420:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003422:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003424:	f013 0f20 	tst.w	r3, #32
 8003428:	d006      	beq.n	8003438 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800342a:	6802      	ldr	r2, [r0, #0]
 800342c:	6893      	ldr	r3, [r2, #8]
 800342e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003432:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003434:	430b      	orrs	r3, r1
 8003436:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003438:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800343a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800343e:	d00a      	beq.n	8003456 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003440:	6802      	ldr	r2, [r0, #0]
 8003442:	6853      	ldr	r3, [r2, #4]
 8003444:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003448:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800344a:	430b      	orrs	r3, r1
 800344c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800344e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003450:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003454:	d00b      	beq.n	800346e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003456:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003458:	f013 0f80 	tst.w	r3, #128	; 0x80
 800345c:	d006      	beq.n	800346c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800345e:	6802      	ldr	r2, [r0, #0]
 8003460:	6853      	ldr	r3, [r2, #4]
 8003462:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003466:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003468:	430b      	orrs	r3, r1
 800346a:	6053      	str	r3, [r2, #4]
}
 800346c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800346e:	6802      	ldr	r2, [r0, #0]
 8003470:	6853      	ldr	r3, [r2, #4]
 8003472:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003476:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003478:	430b      	orrs	r3, r1
 800347a:	6053      	str	r3, [r2, #4]
 800347c:	e7eb      	b.n	8003456 <UART_AdvFeatureConfig+0xa2>

0800347e <UART_WaitOnFlagUntilTimeout>:
{
 800347e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003482:	4604      	mov	r4, r0
 8003484:	460f      	mov	r7, r1
 8003486:	4616      	mov	r6, r2
 8003488:	4698      	mov	r8, r3
 800348a:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348c:	6823      	ldr	r3, [r4, #0]
 800348e:	69db      	ldr	r3, [r3, #28]
 8003490:	ea37 0303 	bics.w	r3, r7, r3
 8003494:	bf0c      	ite	eq
 8003496:	2301      	moveq	r3, #1
 8003498:	2300      	movne	r3, #0
 800349a:	42b3      	cmp	r3, r6
 800349c:	d13a      	bne.n	8003514 <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 800349e:	f1b5 3fff 	cmp.w	r5, #4294967295
 80034a2:	d0f3      	beq.n	800348c <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a4:	f7fe f9ec 	bl	8001880 <HAL_GetTick>
 80034a8:	eba0 0008 	sub.w	r0, r0, r8
 80034ac:	42a8      	cmp	r0, r5
 80034ae:	d81f      	bhi.n	80034f0 <UART_WaitOnFlagUntilTimeout+0x72>
 80034b0:	b1f5      	cbz	r5, 80034f0 <UART_WaitOnFlagUntilTimeout+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80034b2:	6823      	ldr	r3, [r4, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	f012 0f04 	tst.w	r2, #4
 80034ba:	d0e7      	beq.n	800348c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034bc:	69da      	ldr	r2, [r3, #28]
 80034be:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80034c2:	d0e3      	beq.n	800348c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034c8:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034ca:	6822      	ldr	r2, [r4, #0]
 80034cc:	6813      	ldr	r3, [r2, #0]
 80034ce:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034d2:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d4:	6822      	ldr	r2, [r4, #0]
 80034d6:	6893      	ldr	r3, [r2, #8]
 80034d8:	f023 0301 	bic.w	r3, r3, #1
 80034dc:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80034de:	2320      	movs	r3, #32
 80034e0:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80034e2:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034e4:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80034e6:	2300      	movs	r3, #0
 80034e8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80034ec:	2003      	movs	r0, #3
 80034ee:	e012      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034f0:	6822      	ldr	r2, [r4, #0]
 80034f2:	6813      	ldr	r3, [r2, #0]
 80034f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034f8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034fa:	6822      	ldr	r2, [r4, #0]
 80034fc:	6893      	ldr	r3, [r2, #8]
 80034fe:	f023 0301 	bic.w	r3, r3, #1
 8003502:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003504:	2320      	movs	r3, #32
 8003506:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003508:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800350a:	2300      	movs	r3, #0
 800350c:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8003510:	2003      	movs	r0, #3
 8003512:	e000      	b.n	8003516 <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 8003514:	2000      	movs	r0, #0
}
 8003516:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800351a <UART_CheckIdleState>:
{
 800351a:	b530      	push	{r4, r5, lr}
 800351c:	b083      	sub	sp, #12
 800351e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003520:	2300      	movs	r3, #0
 8003522:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003524:	f7fe f9ac 	bl	8001880 <HAL_GetTick>
 8003528:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f013 0f08 	tst.w	r3, #8
 8003532:	d10c      	bne.n	800354e <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003534:	6823      	ldr	r3, [r4, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f013 0f04 	tst.w	r3, #4
 800353c:	d115      	bne.n	800356a <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800353e:	2320      	movs	r3, #32
 8003540:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003542:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003544:	2000      	movs	r0, #0
 8003546:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800354a:	b003      	add	sp, #12
 800354c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800354e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003552:	9300      	str	r3, [sp, #0]
 8003554:	4603      	mov	r3, r0
 8003556:	2200      	movs	r2, #0
 8003558:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800355c:	4620      	mov	r0, r4
 800355e:	f7ff ff8e 	bl	800347e <UART_WaitOnFlagUntilTimeout>
 8003562:	2800      	cmp	r0, #0
 8003564:	d0e6      	beq.n	8003534 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003566:	2003      	movs	r0, #3
 8003568:	e7ef      	b.n	800354a <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800356a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800356e:	9300      	str	r3, [sp, #0]
 8003570:	462b      	mov	r3, r5
 8003572:	2200      	movs	r2, #0
 8003574:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003578:	4620      	mov	r0, r4
 800357a:	f7ff ff80 	bl	800347e <UART_WaitOnFlagUntilTimeout>
 800357e:	2800      	cmp	r0, #0
 8003580:	d0dd      	beq.n	800353e <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003582:	2003      	movs	r0, #3
 8003584:	e7e1      	b.n	800354a <UART_CheckIdleState+0x30>

08003586 <HAL_UART_Init>:
  if (huart == NULL)
 8003586:	b368      	cbz	r0, 80035e4 <HAL_UART_Init+0x5e>
{
 8003588:	b510      	push	{r4, lr}
 800358a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800358c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800358e:	b303      	cbz	r3, 80035d2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003590:	2324      	movs	r3, #36	; 0x24
 8003592:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003594:	6822      	ldr	r2, [r4, #0]
 8003596:	6813      	ldr	r3, [r2, #0]
 8003598:	f023 0301 	bic.w	r3, r3, #1
 800359c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800359e:	4620      	mov	r0, r4
 80035a0:	f7ff fe1c 	bl	80031dc <UART_SetConfig>
 80035a4:	2801      	cmp	r0, #1
 80035a6:	d013      	beq.n	80035d0 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035aa:	b9bb      	cbnz	r3, 80035dc <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	6853      	ldr	r3, [r2, #4]
 80035b0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80035b4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035b6:	6822      	ldr	r2, [r4, #0]
 80035b8:	6893      	ldr	r3, [r2, #8]
 80035ba:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80035be:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80035c0:	6822      	ldr	r2, [r4, #0]
 80035c2:	6813      	ldr	r3, [r2, #0]
 80035c4:	f043 0301 	orr.w	r3, r3, #1
 80035c8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80035ca:	4620      	mov	r0, r4
 80035cc:	f7ff ffa5 	bl	800351a <UART_CheckIdleState>
}
 80035d0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80035d2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80035d6:	f7fd ff77 	bl	80014c8 <HAL_UART_MspInit>
 80035da:	e7d9      	b.n	8003590 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80035dc:	4620      	mov	r0, r4
 80035de:	f7ff fee9 	bl	80033b4 <UART_AdvFeatureConfig>
 80035e2:	e7e3      	b.n	80035ac <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80035e4:	2001      	movs	r0, #1
}
 80035e6:	4770      	bx	lr

080035e8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80035e8:	4770      	bx	lr
	...

080035ec <__errno>:
 80035ec:	4b01      	ldr	r3, [pc, #4]	; (80035f4 <__errno+0x8>)
 80035ee:	6818      	ldr	r0, [r3, #0]
 80035f0:	4770      	bx	lr
 80035f2:	bf00      	nop
 80035f4:	2000008c 	.word	0x2000008c

080035f8 <__libc_init_array>:
 80035f8:	b570      	push	{r4, r5, r6, lr}
 80035fa:	4e0d      	ldr	r6, [pc, #52]	; (8003630 <__libc_init_array+0x38>)
 80035fc:	4c0d      	ldr	r4, [pc, #52]	; (8003634 <__libc_init_array+0x3c>)
 80035fe:	1ba4      	subs	r4, r4, r6
 8003600:	10a4      	asrs	r4, r4, #2
 8003602:	2500      	movs	r5, #0
 8003604:	42a5      	cmp	r5, r4
 8003606:	d109      	bne.n	800361c <__libc_init_array+0x24>
 8003608:	4e0b      	ldr	r6, [pc, #44]	; (8003638 <__libc_init_array+0x40>)
 800360a:	4c0c      	ldr	r4, [pc, #48]	; (800363c <__libc_init_array+0x44>)
 800360c:	f001 f942 	bl	8004894 <_init>
 8003610:	1ba4      	subs	r4, r4, r6
 8003612:	10a4      	asrs	r4, r4, #2
 8003614:	2500      	movs	r5, #0
 8003616:	42a5      	cmp	r5, r4
 8003618:	d105      	bne.n	8003626 <__libc_init_array+0x2e>
 800361a:	bd70      	pop	{r4, r5, r6, pc}
 800361c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003620:	4798      	blx	r3
 8003622:	3501      	adds	r5, #1
 8003624:	e7ee      	b.n	8003604 <__libc_init_array+0xc>
 8003626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800362a:	4798      	blx	r3
 800362c:	3501      	adds	r5, #1
 800362e:	e7f2      	b.n	8003616 <__libc_init_array+0x1e>
 8003630:	080049e0 	.word	0x080049e0
 8003634:	080049e0 	.word	0x080049e0
 8003638:	080049e0 	.word	0x080049e0
 800363c:	080049e4 	.word	0x080049e4

08003640 <malloc>:
 8003640:	4b02      	ldr	r3, [pc, #8]	; (800364c <malloc+0xc>)
 8003642:	4601      	mov	r1, r0
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	f000 b861 	b.w	800370c <_malloc_r>
 800364a:	bf00      	nop
 800364c:	2000008c 	.word	0x2000008c

08003650 <free>:
 8003650:	4b02      	ldr	r3, [pc, #8]	; (800365c <free+0xc>)
 8003652:	4601      	mov	r1, r0
 8003654:	6818      	ldr	r0, [r3, #0]
 8003656:	f000 b80b 	b.w	8003670 <_free_r>
 800365a:	bf00      	nop
 800365c:	2000008c 	.word	0x2000008c

08003660 <memset>:
 8003660:	4402      	add	r2, r0
 8003662:	4603      	mov	r3, r0
 8003664:	4293      	cmp	r3, r2
 8003666:	d100      	bne.n	800366a <memset+0xa>
 8003668:	4770      	bx	lr
 800366a:	f803 1b01 	strb.w	r1, [r3], #1
 800366e:	e7f9      	b.n	8003664 <memset+0x4>

08003670 <_free_r>:
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	4605      	mov	r5, r0
 8003674:	2900      	cmp	r1, #0
 8003676:	d045      	beq.n	8003704 <_free_r+0x94>
 8003678:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800367c:	1f0c      	subs	r4, r1, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	bfb8      	it	lt
 8003682:	18e4      	addlt	r4, r4, r3
 8003684:	f000 f8ac 	bl	80037e0 <__malloc_lock>
 8003688:	4a1f      	ldr	r2, [pc, #124]	; (8003708 <_free_r+0x98>)
 800368a:	6813      	ldr	r3, [r2, #0]
 800368c:	4610      	mov	r0, r2
 800368e:	b933      	cbnz	r3, 800369e <_free_r+0x2e>
 8003690:	6063      	str	r3, [r4, #4]
 8003692:	6014      	str	r4, [r2, #0]
 8003694:	4628      	mov	r0, r5
 8003696:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800369a:	f000 b8a2 	b.w	80037e2 <__malloc_unlock>
 800369e:	42a3      	cmp	r3, r4
 80036a0:	d90c      	bls.n	80036bc <_free_r+0x4c>
 80036a2:	6821      	ldr	r1, [r4, #0]
 80036a4:	1862      	adds	r2, r4, r1
 80036a6:	4293      	cmp	r3, r2
 80036a8:	bf04      	itt	eq
 80036aa:	681a      	ldreq	r2, [r3, #0]
 80036ac:	685b      	ldreq	r3, [r3, #4]
 80036ae:	6063      	str	r3, [r4, #4]
 80036b0:	bf04      	itt	eq
 80036b2:	1852      	addeq	r2, r2, r1
 80036b4:	6022      	streq	r2, [r4, #0]
 80036b6:	6004      	str	r4, [r0, #0]
 80036b8:	e7ec      	b.n	8003694 <_free_r+0x24>
 80036ba:	4613      	mov	r3, r2
 80036bc:	685a      	ldr	r2, [r3, #4]
 80036be:	b10a      	cbz	r2, 80036c4 <_free_r+0x54>
 80036c0:	42a2      	cmp	r2, r4
 80036c2:	d9fa      	bls.n	80036ba <_free_r+0x4a>
 80036c4:	6819      	ldr	r1, [r3, #0]
 80036c6:	1858      	adds	r0, r3, r1
 80036c8:	42a0      	cmp	r0, r4
 80036ca:	d10b      	bne.n	80036e4 <_free_r+0x74>
 80036cc:	6820      	ldr	r0, [r4, #0]
 80036ce:	4401      	add	r1, r0
 80036d0:	1858      	adds	r0, r3, r1
 80036d2:	4282      	cmp	r2, r0
 80036d4:	6019      	str	r1, [r3, #0]
 80036d6:	d1dd      	bne.n	8003694 <_free_r+0x24>
 80036d8:	6810      	ldr	r0, [r2, #0]
 80036da:	6852      	ldr	r2, [r2, #4]
 80036dc:	605a      	str	r2, [r3, #4]
 80036de:	4401      	add	r1, r0
 80036e0:	6019      	str	r1, [r3, #0]
 80036e2:	e7d7      	b.n	8003694 <_free_r+0x24>
 80036e4:	d902      	bls.n	80036ec <_free_r+0x7c>
 80036e6:	230c      	movs	r3, #12
 80036e8:	602b      	str	r3, [r5, #0]
 80036ea:	e7d3      	b.n	8003694 <_free_r+0x24>
 80036ec:	6820      	ldr	r0, [r4, #0]
 80036ee:	1821      	adds	r1, r4, r0
 80036f0:	428a      	cmp	r2, r1
 80036f2:	bf04      	itt	eq
 80036f4:	6811      	ldreq	r1, [r2, #0]
 80036f6:	6852      	ldreq	r2, [r2, #4]
 80036f8:	6062      	str	r2, [r4, #4]
 80036fa:	bf04      	itt	eq
 80036fc:	1809      	addeq	r1, r1, r0
 80036fe:	6021      	streq	r1, [r4, #0]
 8003700:	605c      	str	r4, [r3, #4]
 8003702:	e7c7      	b.n	8003694 <_free_r+0x24>
 8003704:	bd38      	pop	{r3, r4, r5, pc}
 8003706:	bf00      	nop
 8003708:	20000128 	.word	0x20000128

0800370c <_malloc_r>:
 800370c:	b570      	push	{r4, r5, r6, lr}
 800370e:	1ccd      	adds	r5, r1, #3
 8003710:	f025 0503 	bic.w	r5, r5, #3
 8003714:	3508      	adds	r5, #8
 8003716:	2d0c      	cmp	r5, #12
 8003718:	bf38      	it	cc
 800371a:	250c      	movcc	r5, #12
 800371c:	2d00      	cmp	r5, #0
 800371e:	4606      	mov	r6, r0
 8003720:	db01      	blt.n	8003726 <_malloc_r+0x1a>
 8003722:	42a9      	cmp	r1, r5
 8003724:	d903      	bls.n	800372e <_malloc_r+0x22>
 8003726:	230c      	movs	r3, #12
 8003728:	6033      	str	r3, [r6, #0]
 800372a:	2000      	movs	r0, #0
 800372c:	bd70      	pop	{r4, r5, r6, pc}
 800372e:	f000 f857 	bl	80037e0 <__malloc_lock>
 8003732:	4a21      	ldr	r2, [pc, #132]	; (80037b8 <_malloc_r+0xac>)
 8003734:	6814      	ldr	r4, [r2, #0]
 8003736:	4621      	mov	r1, r4
 8003738:	b991      	cbnz	r1, 8003760 <_malloc_r+0x54>
 800373a:	4c20      	ldr	r4, [pc, #128]	; (80037bc <_malloc_r+0xb0>)
 800373c:	6823      	ldr	r3, [r4, #0]
 800373e:	b91b      	cbnz	r3, 8003748 <_malloc_r+0x3c>
 8003740:	4630      	mov	r0, r6
 8003742:	f000 f83d 	bl	80037c0 <_sbrk_r>
 8003746:	6020      	str	r0, [r4, #0]
 8003748:	4629      	mov	r1, r5
 800374a:	4630      	mov	r0, r6
 800374c:	f000 f838 	bl	80037c0 <_sbrk_r>
 8003750:	1c43      	adds	r3, r0, #1
 8003752:	d124      	bne.n	800379e <_malloc_r+0x92>
 8003754:	230c      	movs	r3, #12
 8003756:	6033      	str	r3, [r6, #0]
 8003758:	4630      	mov	r0, r6
 800375a:	f000 f842 	bl	80037e2 <__malloc_unlock>
 800375e:	e7e4      	b.n	800372a <_malloc_r+0x1e>
 8003760:	680b      	ldr	r3, [r1, #0]
 8003762:	1b5b      	subs	r3, r3, r5
 8003764:	d418      	bmi.n	8003798 <_malloc_r+0x8c>
 8003766:	2b0b      	cmp	r3, #11
 8003768:	d90f      	bls.n	800378a <_malloc_r+0x7e>
 800376a:	600b      	str	r3, [r1, #0]
 800376c:	50cd      	str	r5, [r1, r3]
 800376e:	18cc      	adds	r4, r1, r3
 8003770:	4630      	mov	r0, r6
 8003772:	f000 f836 	bl	80037e2 <__malloc_unlock>
 8003776:	f104 000b 	add.w	r0, r4, #11
 800377a:	1d23      	adds	r3, r4, #4
 800377c:	f020 0007 	bic.w	r0, r0, #7
 8003780:	1ac3      	subs	r3, r0, r3
 8003782:	d0d3      	beq.n	800372c <_malloc_r+0x20>
 8003784:	425a      	negs	r2, r3
 8003786:	50e2      	str	r2, [r4, r3]
 8003788:	e7d0      	b.n	800372c <_malloc_r+0x20>
 800378a:	428c      	cmp	r4, r1
 800378c:	684b      	ldr	r3, [r1, #4]
 800378e:	bf16      	itet	ne
 8003790:	6063      	strne	r3, [r4, #4]
 8003792:	6013      	streq	r3, [r2, #0]
 8003794:	460c      	movne	r4, r1
 8003796:	e7eb      	b.n	8003770 <_malloc_r+0x64>
 8003798:	460c      	mov	r4, r1
 800379a:	6849      	ldr	r1, [r1, #4]
 800379c:	e7cc      	b.n	8003738 <_malloc_r+0x2c>
 800379e:	1cc4      	adds	r4, r0, #3
 80037a0:	f024 0403 	bic.w	r4, r4, #3
 80037a4:	42a0      	cmp	r0, r4
 80037a6:	d005      	beq.n	80037b4 <_malloc_r+0xa8>
 80037a8:	1a21      	subs	r1, r4, r0
 80037aa:	4630      	mov	r0, r6
 80037ac:	f000 f808 	bl	80037c0 <_sbrk_r>
 80037b0:	3001      	adds	r0, #1
 80037b2:	d0cf      	beq.n	8003754 <_malloc_r+0x48>
 80037b4:	6025      	str	r5, [r4, #0]
 80037b6:	e7db      	b.n	8003770 <_malloc_r+0x64>
 80037b8:	20000128 	.word	0x20000128
 80037bc:	2000012c 	.word	0x2000012c

080037c0 <_sbrk_r>:
 80037c0:	b538      	push	{r3, r4, r5, lr}
 80037c2:	4c06      	ldr	r4, [pc, #24]	; (80037dc <_sbrk_r+0x1c>)
 80037c4:	2300      	movs	r3, #0
 80037c6:	4605      	mov	r5, r0
 80037c8:	4608      	mov	r0, r1
 80037ca:	6023      	str	r3, [r4, #0]
 80037cc:	f7fd ff46 	bl	800165c <_sbrk>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d102      	bne.n	80037da <_sbrk_r+0x1a>
 80037d4:	6823      	ldr	r3, [r4, #0]
 80037d6:	b103      	cbz	r3, 80037da <_sbrk_r+0x1a>
 80037d8:	602b      	str	r3, [r5, #0]
 80037da:	bd38      	pop	{r3, r4, r5, pc}
 80037dc:	20000564 	.word	0x20000564

080037e0 <__malloc_lock>:
 80037e0:	4770      	bx	lr

080037e2 <__malloc_unlock>:
 80037e2:	4770      	bx	lr

080037e4 <pow>:
 80037e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80037e8:	ed2d 8b04 	vpush	{d8-d9}
 80037ec:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8003ac0 <pow+0x2dc>
 80037f0:	b08d      	sub	sp, #52	; 0x34
 80037f2:	ec57 6b10 	vmov	r6, r7, d0
 80037f6:	ec55 4b11 	vmov	r4, r5, d1
 80037fa:	f000 f965 	bl	8003ac8 <__ieee754_pow>
 80037fe:	f999 3000 	ldrsb.w	r3, [r9]
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	3301      	adds	r3, #1
 8003806:	eeb0 8a40 	vmov.f32	s16, s0
 800380a:	eef0 8a60 	vmov.f32	s17, s1
 800380e:	46c8      	mov	r8, r9
 8003810:	d05f      	beq.n	80038d2 <pow+0xee>
 8003812:	4622      	mov	r2, r4
 8003814:	462b      	mov	r3, r5
 8003816:	4620      	mov	r0, r4
 8003818:	4629      	mov	r1, r5
 800381a:	f7fd f92b 	bl	8000a74 <__aeabi_dcmpun>
 800381e:	4683      	mov	fp, r0
 8003820:	2800      	cmp	r0, #0
 8003822:	d156      	bne.n	80038d2 <pow+0xee>
 8003824:	4632      	mov	r2, r6
 8003826:	463b      	mov	r3, r7
 8003828:	4630      	mov	r0, r6
 800382a:	4639      	mov	r1, r7
 800382c:	f7fd f922 	bl	8000a74 <__aeabi_dcmpun>
 8003830:	9001      	str	r0, [sp, #4]
 8003832:	b1e8      	cbz	r0, 8003870 <pow+0x8c>
 8003834:	2200      	movs	r2, #0
 8003836:	2300      	movs	r3, #0
 8003838:	4620      	mov	r0, r4
 800383a:	4629      	mov	r1, r5
 800383c:	f7fd f8e8 	bl	8000a10 <__aeabi_dcmpeq>
 8003840:	2800      	cmp	r0, #0
 8003842:	d046      	beq.n	80038d2 <pow+0xee>
 8003844:	2301      	movs	r3, #1
 8003846:	9302      	str	r3, [sp, #8]
 8003848:	4b96      	ldr	r3, [pc, #600]	; (8003aa4 <pow+0x2c0>)
 800384a:	9303      	str	r3, [sp, #12]
 800384c:	4b96      	ldr	r3, [pc, #600]	; (8003aa8 <pow+0x2c4>)
 800384e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003852:	2200      	movs	r2, #0
 8003854:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003858:	9b00      	ldr	r3, [sp, #0]
 800385a:	2b02      	cmp	r3, #2
 800385c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003860:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003864:	d033      	beq.n	80038ce <pow+0xea>
 8003866:	a802      	add	r0, sp, #8
 8003868:	f000 fefd 	bl	8004666 <matherr>
 800386c:	bb48      	cbnz	r0, 80038c2 <pow+0xde>
 800386e:	e05d      	b.n	800392c <pow+0x148>
 8003870:	f04f 0a00 	mov.w	sl, #0
 8003874:	f04f 0b00 	mov.w	fp, #0
 8003878:	4652      	mov	r2, sl
 800387a:	465b      	mov	r3, fp
 800387c:	4630      	mov	r0, r6
 800387e:	4639      	mov	r1, r7
 8003880:	f7fd f8c6 	bl	8000a10 <__aeabi_dcmpeq>
 8003884:	ec4b ab19 	vmov	d9, sl, fp
 8003888:	2800      	cmp	r0, #0
 800388a:	d054      	beq.n	8003936 <pow+0x152>
 800388c:	4652      	mov	r2, sl
 800388e:	465b      	mov	r3, fp
 8003890:	4620      	mov	r0, r4
 8003892:	4629      	mov	r1, r5
 8003894:	f7fd f8bc 	bl	8000a10 <__aeabi_dcmpeq>
 8003898:	4680      	mov	r8, r0
 800389a:	b318      	cbz	r0, 80038e4 <pow+0x100>
 800389c:	2301      	movs	r3, #1
 800389e:	9302      	str	r3, [sp, #8]
 80038a0:	4b80      	ldr	r3, [pc, #512]	; (8003aa4 <pow+0x2c0>)
 80038a2:	9303      	str	r3, [sp, #12]
 80038a4:	9b01      	ldr	r3, [sp, #4]
 80038a6:	930a      	str	r3, [sp, #40]	; 0x28
 80038a8:	9b00      	ldr	r3, [sp, #0]
 80038aa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80038ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80038b2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d0d5      	beq.n	8003866 <pow+0x82>
 80038ba:	4b7b      	ldr	r3, [pc, #492]	; (8003aa8 <pow+0x2c4>)
 80038bc:	2200      	movs	r2, #0
 80038be:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80038c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038c4:	b11b      	cbz	r3, 80038ce <pow+0xea>
 80038c6:	f7ff fe91 	bl	80035ec <__errno>
 80038ca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80038cc:	6003      	str	r3, [r0, #0]
 80038ce:	ed9d 8b08 	vldr	d8, [sp, #32]
 80038d2:	eeb0 0a48 	vmov.f32	s0, s16
 80038d6:	eef0 0a68 	vmov.f32	s1, s17
 80038da:	b00d      	add	sp, #52	; 0x34
 80038dc:	ecbd 8b04 	vpop	{d8-d9}
 80038e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038e4:	ec45 4b10 	vmov	d0, r4, r5
 80038e8:	f000 feb5 	bl	8004656 <finite>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	d0f0      	beq.n	80038d2 <pow+0xee>
 80038f0:	4652      	mov	r2, sl
 80038f2:	465b      	mov	r3, fp
 80038f4:	4620      	mov	r0, r4
 80038f6:	4629      	mov	r1, r5
 80038f8:	f7fd f894 	bl	8000a24 <__aeabi_dcmplt>
 80038fc:	2800      	cmp	r0, #0
 80038fe:	d0e8      	beq.n	80038d2 <pow+0xee>
 8003900:	2301      	movs	r3, #1
 8003902:	9302      	str	r3, [sp, #8]
 8003904:	4b67      	ldr	r3, [pc, #412]	; (8003aa4 <pow+0x2c0>)
 8003906:	9303      	str	r3, [sp, #12]
 8003908:	f999 3000 	ldrsb.w	r3, [r9]
 800390c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003910:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003914:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003918:	b913      	cbnz	r3, 8003920 <pow+0x13c>
 800391a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800391e:	e7a2      	b.n	8003866 <pow+0x82>
 8003920:	4962      	ldr	r1, [pc, #392]	; (8003aac <pow+0x2c8>)
 8003922:	2000      	movs	r0, #0
 8003924:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003928:	2b02      	cmp	r3, #2
 800392a:	d19c      	bne.n	8003866 <pow+0x82>
 800392c:	f7ff fe5e 	bl	80035ec <__errno>
 8003930:	2321      	movs	r3, #33	; 0x21
 8003932:	6003      	str	r3, [r0, #0]
 8003934:	e7c5      	b.n	80038c2 <pow+0xde>
 8003936:	eeb0 0a48 	vmov.f32	s0, s16
 800393a:	eef0 0a68 	vmov.f32	s1, s17
 800393e:	f000 fe8a 	bl	8004656 <finite>
 8003942:	9000      	str	r0, [sp, #0]
 8003944:	2800      	cmp	r0, #0
 8003946:	f040 8081 	bne.w	8003a4c <pow+0x268>
 800394a:	ec47 6b10 	vmov	d0, r6, r7
 800394e:	f000 fe82 	bl	8004656 <finite>
 8003952:	2800      	cmp	r0, #0
 8003954:	d07a      	beq.n	8003a4c <pow+0x268>
 8003956:	ec45 4b10 	vmov	d0, r4, r5
 800395a:	f000 fe7c 	bl	8004656 <finite>
 800395e:	2800      	cmp	r0, #0
 8003960:	d074      	beq.n	8003a4c <pow+0x268>
 8003962:	ec53 2b18 	vmov	r2, r3, d8
 8003966:	ee18 0a10 	vmov	r0, s16
 800396a:	4619      	mov	r1, r3
 800396c:	f7fd f882 	bl	8000a74 <__aeabi_dcmpun>
 8003970:	f999 9000 	ldrsb.w	r9, [r9]
 8003974:	4b4b      	ldr	r3, [pc, #300]	; (8003aa4 <pow+0x2c0>)
 8003976:	b1b0      	cbz	r0, 80039a6 <pow+0x1c2>
 8003978:	2201      	movs	r2, #1
 800397a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800397e:	9b00      	ldr	r3, [sp, #0]
 8003980:	930a      	str	r3, [sp, #40]	; 0x28
 8003982:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003986:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800398a:	f1b9 0f00 	cmp.w	r9, #0
 800398e:	d0c4      	beq.n	800391a <pow+0x136>
 8003990:	4652      	mov	r2, sl
 8003992:	465b      	mov	r3, fp
 8003994:	4650      	mov	r0, sl
 8003996:	4659      	mov	r1, fp
 8003998:	f7fc fefc 	bl	8000794 <__aeabi_ddiv>
 800399c:	f1b9 0f02 	cmp.w	r9, #2
 80039a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80039a4:	e7c1      	b.n	800392a <pow+0x146>
 80039a6:	2203      	movs	r2, #3
 80039a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80039ac:	900a      	str	r0, [sp, #40]	; 0x28
 80039ae:	4629      	mov	r1, r5
 80039b0:	4620      	mov	r0, r4
 80039b2:	2200      	movs	r2, #0
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <pow+0x2cc>)
 80039b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80039ba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80039be:	f7fc fdbf 	bl	8000540 <__aeabi_dmul>
 80039c2:	4604      	mov	r4, r0
 80039c4:	460d      	mov	r5, r1
 80039c6:	f1b9 0f00 	cmp.w	r9, #0
 80039ca:	d124      	bne.n	8003a16 <pow+0x232>
 80039cc:	4b39      	ldr	r3, [pc, #228]	; (8003ab4 <pow+0x2d0>)
 80039ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80039d2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80039d6:	4630      	mov	r0, r6
 80039d8:	4652      	mov	r2, sl
 80039da:	465b      	mov	r3, fp
 80039dc:	4639      	mov	r1, r7
 80039de:	f7fd f821 	bl	8000a24 <__aeabi_dcmplt>
 80039e2:	2800      	cmp	r0, #0
 80039e4:	d056      	beq.n	8003a94 <pow+0x2b0>
 80039e6:	ec45 4b10 	vmov	d0, r4, r5
 80039ea:	f000 fe49 	bl	8004680 <rint>
 80039ee:	4622      	mov	r2, r4
 80039f0:	462b      	mov	r3, r5
 80039f2:	ec51 0b10 	vmov	r0, r1, d0
 80039f6:	f7fd f80b 	bl	8000a10 <__aeabi_dcmpeq>
 80039fa:	b920      	cbnz	r0, 8003a06 <pow+0x222>
 80039fc:	4b2e      	ldr	r3, [pc, #184]	; (8003ab8 <pow+0x2d4>)
 80039fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003a02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003a06:	f998 3000 	ldrsb.w	r3, [r8]
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d142      	bne.n	8003a94 <pow+0x2b0>
 8003a0e:	f7ff fded 	bl	80035ec <__errno>
 8003a12:	2322      	movs	r3, #34	; 0x22
 8003a14:	e78d      	b.n	8003932 <pow+0x14e>
 8003a16:	4b29      	ldr	r3, [pc, #164]	; (8003abc <pow+0x2d8>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003a1e:	4630      	mov	r0, r6
 8003a20:	4652      	mov	r2, sl
 8003a22:	465b      	mov	r3, fp
 8003a24:	4639      	mov	r1, r7
 8003a26:	f7fc fffd 	bl	8000a24 <__aeabi_dcmplt>
 8003a2a:	2800      	cmp	r0, #0
 8003a2c:	d0eb      	beq.n	8003a06 <pow+0x222>
 8003a2e:	ec45 4b10 	vmov	d0, r4, r5
 8003a32:	f000 fe25 	bl	8004680 <rint>
 8003a36:	4622      	mov	r2, r4
 8003a38:	462b      	mov	r3, r5
 8003a3a:	ec51 0b10 	vmov	r0, r1, d0
 8003a3e:	f7fc ffe7 	bl	8000a10 <__aeabi_dcmpeq>
 8003a42:	2800      	cmp	r0, #0
 8003a44:	d1df      	bne.n	8003a06 <pow+0x222>
 8003a46:	2200      	movs	r2, #0
 8003a48:	4b18      	ldr	r3, [pc, #96]	; (8003aac <pow+0x2c8>)
 8003a4a:	e7da      	b.n	8003a02 <pow+0x21e>
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2300      	movs	r3, #0
 8003a50:	ec51 0b18 	vmov	r0, r1, d8
 8003a54:	f7fc ffdc 	bl	8000a10 <__aeabi_dcmpeq>
 8003a58:	2800      	cmp	r0, #0
 8003a5a:	f43f af3a 	beq.w	80038d2 <pow+0xee>
 8003a5e:	ec47 6b10 	vmov	d0, r6, r7
 8003a62:	f000 fdf8 	bl	8004656 <finite>
 8003a66:	2800      	cmp	r0, #0
 8003a68:	f43f af33 	beq.w	80038d2 <pow+0xee>
 8003a6c:	ec45 4b10 	vmov	d0, r4, r5
 8003a70:	f000 fdf1 	bl	8004656 <finite>
 8003a74:	2800      	cmp	r0, #0
 8003a76:	f43f af2c 	beq.w	80038d2 <pow+0xee>
 8003a7a:	2304      	movs	r3, #4
 8003a7c:	9302      	str	r3, [sp, #8]
 8003a7e:	4b09      	ldr	r3, [pc, #36]	; (8003aa4 <pow+0x2c0>)
 8003a80:	9303      	str	r3, [sp, #12]
 8003a82:	2300      	movs	r3, #0
 8003a84:	930a      	str	r3, [sp, #40]	; 0x28
 8003a86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003a8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003a8e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8003a92:	e7b8      	b.n	8003a06 <pow+0x222>
 8003a94:	a802      	add	r0, sp, #8
 8003a96:	f000 fde6 	bl	8004666 <matherr>
 8003a9a:	2800      	cmp	r0, #0
 8003a9c:	f47f af11 	bne.w	80038c2 <pow+0xde>
 8003aa0:	e7b5      	b.n	8003a0e <pow+0x22a>
 8003aa2:	bf00      	nop
 8003aa4:	08004998 	.word	0x08004998
 8003aa8:	3ff00000 	.word	0x3ff00000
 8003aac:	fff00000 	.word	0xfff00000
 8003ab0:	3fe00000 	.word	0x3fe00000
 8003ab4:	47efffff 	.word	0x47efffff
 8003ab8:	c7efffff 	.word	0xc7efffff
 8003abc:	7ff00000 	.word	0x7ff00000
 8003ac0:	200000f0 	.word	0x200000f0
 8003ac4:	00000000 	.word	0x00000000

08003ac8 <__ieee754_pow>:
 8003ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003acc:	b091      	sub	sp, #68	; 0x44
 8003ace:	ed8d 1b00 	vstr	d1, [sp]
 8003ad2:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003ad6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003ada:	ea58 0302 	orrs.w	r3, r8, r2
 8003ade:	ec57 6b10 	vmov	r6, r7, d0
 8003ae2:	f000 84be 	beq.w	8004462 <__ieee754_pow+0x99a>
 8003ae6:	4b7a      	ldr	r3, [pc, #488]	; (8003cd0 <__ieee754_pow+0x208>)
 8003ae8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003aec:	429c      	cmp	r4, r3
 8003aee:	463d      	mov	r5, r7
 8003af0:	ee10 aa10 	vmov	sl, s0
 8003af4:	dc09      	bgt.n	8003b0a <__ieee754_pow+0x42>
 8003af6:	d103      	bne.n	8003b00 <__ieee754_pow+0x38>
 8003af8:	b93e      	cbnz	r6, 8003b0a <__ieee754_pow+0x42>
 8003afa:	45a0      	cmp	r8, r4
 8003afc:	dc0d      	bgt.n	8003b1a <__ieee754_pow+0x52>
 8003afe:	e001      	b.n	8003b04 <__ieee754_pow+0x3c>
 8003b00:	4598      	cmp	r8, r3
 8003b02:	dc02      	bgt.n	8003b0a <__ieee754_pow+0x42>
 8003b04:	4598      	cmp	r8, r3
 8003b06:	d10e      	bne.n	8003b26 <__ieee754_pow+0x5e>
 8003b08:	b16a      	cbz	r2, 8003b26 <__ieee754_pow+0x5e>
 8003b0a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003b0e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003b12:	ea54 030a 	orrs.w	r3, r4, sl
 8003b16:	f000 84a4 	beq.w	8004462 <__ieee754_pow+0x99a>
 8003b1a:	486e      	ldr	r0, [pc, #440]	; (8003cd4 <__ieee754_pow+0x20c>)
 8003b1c:	b011      	add	sp, #68	; 0x44
 8003b1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b22:	f000 bda5 	b.w	8004670 <nan>
 8003b26:	2d00      	cmp	r5, #0
 8003b28:	da53      	bge.n	8003bd2 <__ieee754_pow+0x10a>
 8003b2a:	4b6b      	ldr	r3, [pc, #428]	; (8003cd8 <__ieee754_pow+0x210>)
 8003b2c:	4598      	cmp	r8, r3
 8003b2e:	dc4d      	bgt.n	8003bcc <__ieee754_pow+0x104>
 8003b30:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003b34:	4598      	cmp	r8, r3
 8003b36:	dd4c      	ble.n	8003bd2 <__ieee754_pow+0x10a>
 8003b38:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003b3c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003b40:	2b14      	cmp	r3, #20
 8003b42:	dd26      	ble.n	8003b92 <__ieee754_pow+0xca>
 8003b44:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003b48:	fa22 f103 	lsr.w	r1, r2, r3
 8003b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d13e      	bne.n	8003bd2 <__ieee754_pow+0x10a>
 8003b54:	f001 0101 	and.w	r1, r1, #1
 8003b58:	f1c1 0b02 	rsb	fp, r1, #2
 8003b5c:	2a00      	cmp	r2, #0
 8003b5e:	d15b      	bne.n	8003c18 <__ieee754_pow+0x150>
 8003b60:	4b5b      	ldr	r3, [pc, #364]	; (8003cd0 <__ieee754_pow+0x208>)
 8003b62:	4598      	cmp	r8, r3
 8003b64:	d124      	bne.n	8003bb0 <__ieee754_pow+0xe8>
 8003b66:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003b6a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003b6e:	ea53 030a 	orrs.w	r3, r3, sl
 8003b72:	f000 8476 	beq.w	8004462 <__ieee754_pow+0x99a>
 8003b76:	4b59      	ldr	r3, [pc, #356]	; (8003cdc <__ieee754_pow+0x214>)
 8003b78:	429c      	cmp	r4, r3
 8003b7a:	dd2d      	ble.n	8003bd8 <__ieee754_pow+0x110>
 8003b7c:	f1b9 0f00 	cmp.w	r9, #0
 8003b80:	f280 8473 	bge.w	800446a <__ieee754_pow+0x9a2>
 8003b84:	2000      	movs	r0, #0
 8003b86:	2100      	movs	r1, #0
 8003b88:	ec41 0b10 	vmov	d0, r0, r1
 8003b8c:	b011      	add	sp, #68	; 0x44
 8003b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b92:	2a00      	cmp	r2, #0
 8003b94:	d13e      	bne.n	8003c14 <__ieee754_pow+0x14c>
 8003b96:	f1c3 0314 	rsb	r3, r3, #20
 8003b9a:	fa48 f103 	asr.w	r1, r8, r3
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	4543      	cmp	r3, r8
 8003ba4:	f040 8469 	bne.w	800447a <__ieee754_pow+0x9b2>
 8003ba8:	f001 0101 	and.w	r1, r1, #1
 8003bac:	f1c1 0b02 	rsb	fp, r1, #2
 8003bb0:	4b4b      	ldr	r3, [pc, #300]	; (8003ce0 <__ieee754_pow+0x218>)
 8003bb2:	4598      	cmp	r8, r3
 8003bb4:	d118      	bne.n	8003be8 <__ieee754_pow+0x120>
 8003bb6:	f1b9 0f00 	cmp.w	r9, #0
 8003bba:	f280 845a 	bge.w	8004472 <__ieee754_pow+0x9aa>
 8003bbe:	4948      	ldr	r1, [pc, #288]	; (8003ce0 <__ieee754_pow+0x218>)
 8003bc0:	4632      	mov	r2, r6
 8003bc2:	463b      	mov	r3, r7
 8003bc4:	2000      	movs	r0, #0
 8003bc6:	f7fc fde5 	bl	8000794 <__aeabi_ddiv>
 8003bca:	e7dd      	b.n	8003b88 <__ieee754_pow+0xc0>
 8003bcc:	f04f 0b02 	mov.w	fp, #2
 8003bd0:	e7c4      	b.n	8003b5c <__ieee754_pow+0x94>
 8003bd2:	f04f 0b00 	mov.w	fp, #0
 8003bd6:	e7c1      	b.n	8003b5c <__ieee754_pow+0x94>
 8003bd8:	f1b9 0f00 	cmp.w	r9, #0
 8003bdc:	dad2      	bge.n	8003b84 <__ieee754_pow+0xbc>
 8003bde:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003be2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003be6:	e7cf      	b.n	8003b88 <__ieee754_pow+0xc0>
 8003be8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003bec:	d106      	bne.n	8003bfc <__ieee754_pow+0x134>
 8003bee:	4632      	mov	r2, r6
 8003bf0:	463b      	mov	r3, r7
 8003bf2:	4610      	mov	r0, r2
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	f7fc fca3 	bl	8000540 <__aeabi_dmul>
 8003bfa:	e7c5      	b.n	8003b88 <__ieee754_pow+0xc0>
 8003bfc:	4b39      	ldr	r3, [pc, #228]	; (8003ce4 <__ieee754_pow+0x21c>)
 8003bfe:	4599      	cmp	r9, r3
 8003c00:	d10a      	bne.n	8003c18 <__ieee754_pow+0x150>
 8003c02:	2d00      	cmp	r5, #0
 8003c04:	db08      	blt.n	8003c18 <__ieee754_pow+0x150>
 8003c06:	ec47 6b10 	vmov	d0, r6, r7
 8003c0a:	b011      	add	sp, #68	; 0x44
 8003c0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c10:	f000 bc68 	b.w	80044e4 <__ieee754_sqrt>
 8003c14:	f04f 0b00 	mov.w	fp, #0
 8003c18:	ec47 6b10 	vmov	d0, r6, r7
 8003c1c:	f000 fd12 	bl	8004644 <fabs>
 8003c20:	ec51 0b10 	vmov	r0, r1, d0
 8003c24:	f1ba 0f00 	cmp.w	sl, #0
 8003c28:	d127      	bne.n	8003c7a <__ieee754_pow+0x1b2>
 8003c2a:	b124      	cbz	r4, 8003c36 <__ieee754_pow+0x16e>
 8003c2c:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <__ieee754_pow+0x218>)
 8003c2e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003c32:	429a      	cmp	r2, r3
 8003c34:	d121      	bne.n	8003c7a <__ieee754_pow+0x1b2>
 8003c36:	f1b9 0f00 	cmp.w	r9, #0
 8003c3a:	da05      	bge.n	8003c48 <__ieee754_pow+0x180>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	460b      	mov	r3, r1
 8003c40:	2000      	movs	r0, #0
 8003c42:	4927      	ldr	r1, [pc, #156]	; (8003ce0 <__ieee754_pow+0x218>)
 8003c44:	f7fc fda6 	bl	8000794 <__aeabi_ddiv>
 8003c48:	2d00      	cmp	r5, #0
 8003c4a:	da9d      	bge.n	8003b88 <__ieee754_pow+0xc0>
 8003c4c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003c50:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003c54:	ea54 030b 	orrs.w	r3, r4, fp
 8003c58:	d108      	bne.n	8003c6c <__ieee754_pow+0x1a4>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4610      	mov	r0, r2
 8003c60:	4619      	mov	r1, r3
 8003c62:	f7fc fab5 	bl	80001d0 <__aeabi_dsub>
 8003c66:	4602      	mov	r2, r0
 8003c68:	460b      	mov	r3, r1
 8003c6a:	e7ac      	b.n	8003bc6 <__ieee754_pow+0xfe>
 8003c6c:	f1bb 0f01 	cmp.w	fp, #1
 8003c70:	d18a      	bne.n	8003b88 <__ieee754_pow+0xc0>
 8003c72:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003c76:	4619      	mov	r1, r3
 8003c78:	e786      	b.n	8003b88 <__ieee754_pow+0xc0>
 8003c7a:	0fed      	lsrs	r5, r5, #31
 8003c7c:	1e6b      	subs	r3, r5, #1
 8003c7e:	930d      	str	r3, [sp, #52]	; 0x34
 8003c80:	ea5b 0303 	orrs.w	r3, fp, r3
 8003c84:	d102      	bne.n	8003c8c <__ieee754_pow+0x1c4>
 8003c86:	4632      	mov	r2, r6
 8003c88:	463b      	mov	r3, r7
 8003c8a:	e7e8      	b.n	8003c5e <__ieee754_pow+0x196>
 8003c8c:	4b16      	ldr	r3, [pc, #88]	; (8003ce8 <__ieee754_pow+0x220>)
 8003c8e:	4598      	cmp	r8, r3
 8003c90:	f340 80fe 	ble.w	8003e90 <__ieee754_pow+0x3c8>
 8003c94:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003c98:	4598      	cmp	r8, r3
 8003c9a:	dd0a      	ble.n	8003cb2 <__ieee754_pow+0x1ea>
 8003c9c:	4b0f      	ldr	r3, [pc, #60]	; (8003cdc <__ieee754_pow+0x214>)
 8003c9e:	429c      	cmp	r4, r3
 8003ca0:	dc0d      	bgt.n	8003cbe <__ieee754_pow+0x1f6>
 8003ca2:	f1b9 0f00 	cmp.w	r9, #0
 8003ca6:	f6bf af6d 	bge.w	8003b84 <__ieee754_pow+0xbc>
 8003caa:	a307      	add	r3, pc, #28	; (adr r3, 8003cc8 <__ieee754_pow+0x200>)
 8003cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb0:	e79f      	b.n	8003bf2 <__ieee754_pow+0x12a>
 8003cb2:	4b0e      	ldr	r3, [pc, #56]	; (8003cec <__ieee754_pow+0x224>)
 8003cb4:	429c      	cmp	r4, r3
 8003cb6:	ddf4      	ble.n	8003ca2 <__ieee754_pow+0x1da>
 8003cb8:	4b09      	ldr	r3, [pc, #36]	; (8003ce0 <__ieee754_pow+0x218>)
 8003cba:	429c      	cmp	r4, r3
 8003cbc:	dd18      	ble.n	8003cf0 <__ieee754_pow+0x228>
 8003cbe:	f1b9 0f00 	cmp.w	r9, #0
 8003cc2:	dcf2      	bgt.n	8003caa <__ieee754_pow+0x1e2>
 8003cc4:	e75e      	b.n	8003b84 <__ieee754_pow+0xbc>
 8003cc6:	bf00      	nop
 8003cc8:	8800759c 	.word	0x8800759c
 8003ccc:	7e37e43c 	.word	0x7e37e43c
 8003cd0:	7ff00000 	.word	0x7ff00000
 8003cd4:	0800499b 	.word	0x0800499b
 8003cd8:	433fffff 	.word	0x433fffff
 8003cdc:	3fefffff 	.word	0x3fefffff
 8003ce0:	3ff00000 	.word	0x3ff00000
 8003ce4:	3fe00000 	.word	0x3fe00000
 8003ce8:	41e00000 	.word	0x41e00000
 8003cec:	3feffffe 	.word	0x3feffffe
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	4b63      	ldr	r3, [pc, #396]	; (8003e80 <__ieee754_pow+0x3b8>)
 8003cf4:	f7fc fa6c 	bl	80001d0 <__aeabi_dsub>
 8003cf8:	a355      	add	r3, pc, #340	; (adr r3, 8003e50 <__ieee754_pow+0x388>)
 8003cfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cfe:	4604      	mov	r4, r0
 8003d00:	460d      	mov	r5, r1
 8003d02:	f7fc fc1d 	bl	8000540 <__aeabi_dmul>
 8003d06:	a354      	add	r3, pc, #336	; (adr r3, 8003e58 <__ieee754_pow+0x390>)
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	4606      	mov	r6, r0
 8003d0e:	460f      	mov	r7, r1
 8003d10:	4620      	mov	r0, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7fc fc14 	bl	8000540 <__aeabi_dmul>
 8003d18:	2200      	movs	r2, #0
 8003d1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003d1e:	4b59      	ldr	r3, [pc, #356]	; (8003e84 <__ieee754_pow+0x3bc>)
 8003d20:	4620      	mov	r0, r4
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7fc fc0c 	bl	8000540 <__aeabi_dmul>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	a14c      	add	r1, pc, #304	; (adr r1, 8003e60 <__ieee754_pow+0x398>)
 8003d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003d32:	f7fc fa4d 	bl	80001d0 <__aeabi_dsub>
 8003d36:	4622      	mov	r2, r4
 8003d38:	462b      	mov	r3, r5
 8003d3a:	f7fc fc01 	bl	8000540 <__aeabi_dmul>
 8003d3e:	4602      	mov	r2, r0
 8003d40:	460b      	mov	r3, r1
 8003d42:	2000      	movs	r0, #0
 8003d44:	4950      	ldr	r1, [pc, #320]	; (8003e88 <__ieee754_pow+0x3c0>)
 8003d46:	f7fc fa43 	bl	80001d0 <__aeabi_dsub>
 8003d4a:	4622      	mov	r2, r4
 8003d4c:	462b      	mov	r3, r5
 8003d4e:	4680      	mov	r8, r0
 8003d50:	4689      	mov	r9, r1
 8003d52:	4620      	mov	r0, r4
 8003d54:	4629      	mov	r1, r5
 8003d56:	f7fc fbf3 	bl	8000540 <__aeabi_dmul>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4640      	mov	r0, r8
 8003d60:	4649      	mov	r1, r9
 8003d62:	f7fc fbed 	bl	8000540 <__aeabi_dmul>
 8003d66:	a340      	add	r3, pc, #256	; (adr r3, 8003e68 <__ieee754_pow+0x3a0>)
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f7fc fbe8 	bl	8000540 <__aeabi_dmul>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d78:	f7fc fa2a 	bl	80001d0 <__aeabi_dsub>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4604      	mov	r4, r0
 8003d82:	460d      	mov	r5, r1
 8003d84:	4630      	mov	r0, r6
 8003d86:	4639      	mov	r1, r7
 8003d88:	f7fc fa24 	bl	80001d4 <__adddf3>
 8003d8c:	2000      	movs	r0, #0
 8003d8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003d92:	4632      	mov	r2, r6
 8003d94:	463b      	mov	r3, r7
 8003d96:	f7fc fa1b 	bl	80001d0 <__aeabi_dsub>
 8003d9a:	4602      	mov	r2, r0
 8003d9c:	460b      	mov	r3, r1
 8003d9e:	4620      	mov	r0, r4
 8003da0:	4629      	mov	r1, r5
 8003da2:	f7fc fa15 	bl	80001d0 <__aeabi_dsub>
 8003da6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8003da8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8003dac:	4313      	orrs	r3, r2
 8003dae:	4606      	mov	r6, r0
 8003db0:	460f      	mov	r7, r1
 8003db2:	f040 81eb 	bne.w	800418c <__ieee754_pow+0x6c4>
 8003db6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8003e70 <__ieee754_pow+0x3a8>
 8003dba:	e9dd 4500 	ldrd	r4, r5, [sp]
 8003dbe:	2400      	movs	r4, #0
 8003dc0:	4622      	mov	r2, r4
 8003dc2:	462b      	mov	r3, r5
 8003dc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003dc8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8003dcc:	f7fc fa00 	bl	80001d0 <__aeabi_dsub>
 8003dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003dd4:	f7fc fbb4 	bl	8000540 <__aeabi_dmul>
 8003dd8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003ddc:	4680      	mov	r8, r0
 8003dde:	4689      	mov	r9, r1
 8003de0:	4630      	mov	r0, r6
 8003de2:	4639      	mov	r1, r7
 8003de4:	f7fc fbac 	bl	8000540 <__aeabi_dmul>
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4640      	mov	r0, r8
 8003dee:	4649      	mov	r1, r9
 8003df0:	f7fc f9f0 	bl	80001d4 <__adddf3>
 8003df4:	4622      	mov	r2, r4
 8003df6:	462b      	mov	r3, r5
 8003df8:	4680      	mov	r8, r0
 8003dfa:	4689      	mov	r9, r1
 8003dfc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003e00:	f7fc fb9e 	bl	8000540 <__aeabi_dmul>
 8003e04:	460b      	mov	r3, r1
 8003e06:	4604      	mov	r4, r0
 8003e08:	460d      	mov	r5, r1
 8003e0a:	4602      	mov	r2, r0
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	4640      	mov	r0, r8
 8003e10:	e9cd 4500 	strd	r4, r5, [sp]
 8003e14:	f7fc f9de 	bl	80001d4 <__adddf3>
 8003e18:	4b1c      	ldr	r3, [pc, #112]	; (8003e8c <__ieee754_pow+0x3c4>)
 8003e1a:	4299      	cmp	r1, r3
 8003e1c:	4606      	mov	r6, r0
 8003e1e:	460f      	mov	r7, r1
 8003e20:	468b      	mov	fp, r1
 8003e22:	f340 82f7 	ble.w	8004414 <__ieee754_pow+0x94c>
 8003e26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003e2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003e2e:	4303      	orrs	r3, r0
 8003e30:	f000 81ea 	beq.w	8004208 <__ieee754_pow+0x740>
 8003e34:	a310      	add	r3, pc, #64	; (adr r3, 8003e78 <__ieee754_pow+0x3b0>)
 8003e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e3e:	f7fc fb7f 	bl	8000540 <__aeabi_dmul>
 8003e42:	a30d      	add	r3, pc, #52	; (adr r3, 8003e78 <__ieee754_pow+0x3b0>)
 8003e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e48:	e6d5      	b.n	8003bf6 <__ieee754_pow+0x12e>
 8003e4a:	bf00      	nop
 8003e4c:	f3af 8000 	nop.w
 8003e50:	60000000 	.word	0x60000000
 8003e54:	3ff71547 	.word	0x3ff71547
 8003e58:	f85ddf44 	.word	0xf85ddf44
 8003e5c:	3e54ae0b 	.word	0x3e54ae0b
 8003e60:	55555555 	.word	0x55555555
 8003e64:	3fd55555 	.word	0x3fd55555
 8003e68:	652b82fe 	.word	0x652b82fe
 8003e6c:	3ff71547 	.word	0x3ff71547
 8003e70:	00000000 	.word	0x00000000
 8003e74:	bff00000 	.word	0xbff00000
 8003e78:	8800759c 	.word	0x8800759c
 8003e7c:	7e37e43c 	.word	0x7e37e43c
 8003e80:	3ff00000 	.word	0x3ff00000
 8003e84:	3fd00000 	.word	0x3fd00000
 8003e88:	3fe00000 	.word	0x3fe00000
 8003e8c:	408fffff 	.word	0x408fffff
 8003e90:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8003e94:	f04f 0200 	mov.w	r2, #0
 8003e98:	da05      	bge.n	8003ea6 <__ieee754_pow+0x3de>
 8003e9a:	4bd3      	ldr	r3, [pc, #844]	; (80041e8 <__ieee754_pow+0x720>)
 8003e9c:	f7fc fb50 	bl	8000540 <__aeabi_dmul>
 8003ea0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8003ea4:	460c      	mov	r4, r1
 8003ea6:	1523      	asrs	r3, r4, #20
 8003ea8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003eac:	4413      	add	r3, r2
 8003eae:	9309      	str	r3, [sp, #36]	; 0x24
 8003eb0:	4bce      	ldr	r3, [pc, #824]	; (80041ec <__ieee754_pow+0x724>)
 8003eb2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8003eb6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8003eba:	429c      	cmp	r4, r3
 8003ebc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8003ec0:	dd08      	ble.n	8003ed4 <__ieee754_pow+0x40c>
 8003ec2:	4bcb      	ldr	r3, [pc, #812]	; (80041f0 <__ieee754_pow+0x728>)
 8003ec4:	429c      	cmp	r4, r3
 8003ec6:	f340 815e 	ble.w	8004186 <__ieee754_pow+0x6be>
 8003eca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ecc:	3301      	adds	r3, #1
 8003ece:	9309      	str	r3, [sp, #36]	; 0x24
 8003ed0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8003ed4:	f04f 0a00 	mov.w	sl, #0
 8003ed8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8003edc:	930c      	str	r3, [sp, #48]	; 0x30
 8003ede:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ee0:	4bc4      	ldr	r3, [pc, #784]	; (80041f4 <__ieee754_pow+0x72c>)
 8003ee2:	4413      	add	r3, r2
 8003ee4:	ed93 7b00 	vldr	d7, [r3]
 8003ee8:	4629      	mov	r1, r5
 8003eea:	ec53 2b17 	vmov	r2, r3, d7
 8003eee:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003ef2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003ef6:	f7fc f96b 	bl	80001d0 <__aeabi_dsub>
 8003efa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8003efe:	4606      	mov	r6, r0
 8003f00:	460f      	mov	r7, r1
 8003f02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003f06:	f7fc f965 	bl	80001d4 <__adddf3>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	2000      	movs	r0, #0
 8003f10:	49b9      	ldr	r1, [pc, #740]	; (80041f8 <__ieee754_pow+0x730>)
 8003f12:	f7fc fc3f 	bl	8000794 <__aeabi_ddiv>
 8003f16:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8003f1a:	4602      	mov	r2, r0
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	4630      	mov	r0, r6
 8003f20:	4639      	mov	r1, r7
 8003f22:	f7fc fb0d 	bl	8000540 <__aeabi_dmul>
 8003f26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8003f2a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8003f2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8003f32:	2300      	movs	r3, #0
 8003f34:	9302      	str	r3, [sp, #8]
 8003f36:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8003f3a:	106d      	asrs	r5, r5, #1
 8003f3c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8003f40:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8003f44:	2200      	movs	r2, #0
 8003f46:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	4614      	mov	r4, r2
 8003f50:	461d      	mov	r5, r3
 8003f52:	f7fc faf5 	bl	8000540 <__aeabi_dmul>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4630      	mov	r0, r6
 8003f5c:	4639      	mov	r1, r7
 8003f5e:	f7fc f937 	bl	80001d0 <__aeabi_dsub>
 8003f62:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8003f66:	4606      	mov	r6, r0
 8003f68:	460f      	mov	r7, r1
 8003f6a:	4620      	mov	r0, r4
 8003f6c:	4629      	mov	r1, r5
 8003f6e:	f7fc f92f 	bl	80001d0 <__aeabi_dsub>
 8003f72:	4602      	mov	r2, r0
 8003f74:	460b      	mov	r3, r1
 8003f76:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8003f7a:	f7fc f929 	bl	80001d0 <__aeabi_dsub>
 8003f7e:	4642      	mov	r2, r8
 8003f80:	464b      	mov	r3, r9
 8003f82:	f7fc fadd 	bl	8000540 <__aeabi_dmul>
 8003f86:	4602      	mov	r2, r0
 8003f88:	460b      	mov	r3, r1
 8003f8a:	4630      	mov	r0, r6
 8003f8c:	4639      	mov	r1, r7
 8003f8e:	f7fc f91f 	bl	80001d0 <__aeabi_dsub>
 8003f92:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8003f96:	f7fc fad3 	bl	8000540 <__aeabi_dmul>
 8003f9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f9e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8003fa2:	4610      	mov	r0, r2
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	f7fc facb 	bl	8000540 <__aeabi_dmul>
 8003faa:	a37b      	add	r3, pc, #492	; (adr r3, 8004198 <__ieee754_pow+0x6d0>)
 8003fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb0:	4604      	mov	r4, r0
 8003fb2:	460d      	mov	r5, r1
 8003fb4:	f7fc fac4 	bl	8000540 <__aeabi_dmul>
 8003fb8:	a379      	add	r3, pc, #484	; (adr r3, 80041a0 <__ieee754_pow+0x6d8>)
 8003fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fbe:	f7fc f909 	bl	80001d4 <__adddf3>
 8003fc2:	4622      	mov	r2, r4
 8003fc4:	462b      	mov	r3, r5
 8003fc6:	f7fc fabb 	bl	8000540 <__aeabi_dmul>
 8003fca:	a377      	add	r3, pc, #476	; (adr r3, 80041a8 <__ieee754_pow+0x6e0>)
 8003fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd0:	f7fc f900 	bl	80001d4 <__adddf3>
 8003fd4:	4622      	mov	r2, r4
 8003fd6:	462b      	mov	r3, r5
 8003fd8:	f7fc fab2 	bl	8000540 <__aeabi_dmul>
 8003fdc:	a374      	add	r3, pc, #464	; (adr r3, 80041b0 <__ieee754_pow+0x6e8>)
 8003fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe2:	f7fc f8f7 	bl	80001d4 <__adddf3>
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	462b      	mov	r3, r5
 8003fea:	f7fc faa9 	bl	8000540 <__aeabi_dmul>
 8003fee:	a372      	add	r3, pc, #456	; (adr r3, 80041b8 <__ieee754_pow+0x6f0>)
 8003ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff4:	f7fc f8ee 	bl	80001d4 <__adddf3>
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	462b      	mov	r3, r5
 8003ffc:	f7fc faa0 	bl	8000540 <__aeabi_dmul>
 8004000:	a36f      	add	r3, pc, #444	; (adr r3, 80041c0 <__ieee754_pow+0x6f8>)
 8004002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004006:	f7fc f8e5 	bl	80001d4 <__adddf3>
 800400a:	4622      	mov	r2, r4
 800400c:	4606      	mov	r6, r0
 800400e:	460f      	mov	r7, r1
 8004010:	462b      	mov	r3, r5
 8004012:	4620      	mov	r0, r4
 8004014:	4629      	mov	r1, r5
 8004016:	f7fc fa93 	bl	8000540 <__aeabi_dmul>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4630      	mov	r0, r6
 8004020:	4639      	mov	r1, r7
 8004022:	f7fc fa8d 	bl	8000540 <__aeabi_dmul>
 8004026:	4642      	mov	r2, r8
 8004028:	4604      	mov	r4, r0
 800402a:	460d      	mov	r5, r1
 800402c:	464b      	mov	r3, r9
 800402e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004032:	f7fc f8cf 	bl	80001d4 <__adddf3>
 8004036:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800403a:	f7fc fa81 	bl	8000540 <__aeabi_dmul>
 800403e:	4622      	mov	r2, r4
 8004040:	462b      	mov	r3, r5
 8004042:	f7fc f8c7 	bl	80001d4 <__adddf3>
 8004046:	4642      	mov	r2, r8
 8004048:	4606      	mov	r6, r0
 800404a:	460f      	mov	r7, r1
 800404c:	464b      	mov	r3, r9
 800404e:	4640      	mov	r0, r8
 8004050:	4649      	mov	r1, r9
 8004052:	f7fc fa75 	bl	8000540 <__aeabi_dmul>
 8004056:	2200      	movs	r2, #0
 8004058:	4b68      	ldr	r3, [pc, #416]	; (80041fc <__ieee754_pow+0x734>)
 800405a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800405e:	f7fc f8b9 	bl	80001d4 <__adddf3>
 8004062:	4632      	mov	r2, r6
 8004064:	463b      	mov	r3, r7
 8004066:	f7fc f8b5 	bl	80001d4 <__adddf3>
 800406a:	9802      	ldr	r0, [sp, #8]
 800406c:	460d      	mov	r5, r1
 800406e:	4604      	mov	r4, r0
 8004070:	4602      	mov	r2, r0
 8004072:	460b      	mov	r3, r1
 8004074:	4640      	mov	r0, r8
 8004076:	4649      	mov	r1, r9
 8004078:	f7fc fa62 	bl	8000540 <__aeabi_dmul>
 800407c:	2200      	movs	r2, #0
 800407e:	4680      	mov	r8, r0
 8004080:	4689      	mov	r9, r1
 8004082:	4b5e      	ldr	r3, [pc, #376]	; (80041fc <__ieee754_pow+0x734>)
 8004084:	4620      	mov	r0, r4
 8004086:	4629      	mov	r1, r5
 8004088:	f7fc f8a2 	bl	80001d0 <__aeabi_dsub>
 800408c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004090:	f7fc f89e 	bl	80001d0 <__aeabi_dsub>
 8004094:	4602      	mov	r2, r0
 8004096:	460b      	mov	r3, r1
 8004098:	4630      	mov	r0, r6
 800409a:	4639      	mov	r1, r7
 800409c:	f7fc f898 	bl	80001d0 <__aeabi_dsub>
 80040a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80040a4:	f7fc fa4c 	bl	8000540 <__aeabi_dmul>
 80040a8:	4622      	mov	r2, r4
 80040aa:	4606      	mov	r6, r0
 80040ac:	460f      	mov	r7, r1
 80040ae:	462b      	mov	r3, r5
 80040b0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80040b4:	f7fc fa44 	bl	8000540 <__aeabi_dmul>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4630      	mov	r0, r6
 80040be:	4639      	mov	r1, r7
 80040c0:	f7fc f888 	bl	80001d4 <__adddf3>
 80040c4:	4606      	mov	r6, r0
 80040c6:	460f      	mov	r7, r1
 80040c8:	4602      	mov	r2, r0
 80040ca:	460b      	mov	r3, r1
 80040cc:	4640      	mov	r0, r8
 80040ce:	4649      	mov	r1, r9
 80040d0:	f7fc f880 	bl	80001d4 <__adddf3>
 80040d4:	9802      	ldr	r0, [sp, #8]
 80040d6:	a33c      	add	r3, pc, #240	; (adr r3, 80041c8 <__ieee754_pow+0x700>)
 80040d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040dc:	4604      	mov	r4, r0
 80040de:	460d      	mov	r5, r1
 80040e0:	f7fc fa2e 	bl	8000540 <__aeabi_dmul>
 80040e4:	4642      	mov	r2, r8
 80040e6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80040ea:	464b      	mov	r3, r9
 80040ec:	4620      	mov	r0, r4
 80040ee:	4629      	mov	r1, r5
 80040f0:	f7fc f86e 	bl	80001d0 <__aeabi_dsub>
 80040f4:	4602      	mov	r2, r0
 80040f6:	460b      	mov	r3, r1
 80040f8:	4630      	mov	r0, r6
 80040fa:	4639      	mov	r1, r7
 80040fc:	f7fc f868 	bl	80001d0 <__aeabi_dsub>
 8004100:	a333      	add	r3, pc, #204	; (adr r3, 80041d0 <__ieee754_pow+0x708>)
 8004102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004106:	f7fc fa1b 	bl	8000540 <__aeabi_dmul>
 800410a:	a333      	add	r3, pc, #204	; (adr r3, 80041d8 <__ieee754_pow+0x710>)
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	4606      	mov	r6, r0
 8004112:	460f      	mov	r7, r1
 8004114:	4620      	mov	r0, r4
 8004116:	4629      	mov	r1, r5
 8004118:	f7fc fa12 	bl	8000540 <__aeabi_dmul>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4630      	mov	r0, r6
 8004122:	4639      	mov	r1, r7
 8004124:	f7fc f856 	bl	80001d4 <__adddf3>
 8004128:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800412a:	4b35      	ldr	r3, [pc, #212]	; (8004200 <__ieee754_pow+0x738>)
 800412c:	4413      	add	r3, r2
 800412e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004132:	f7fc f84f 	bl	80001d4 <__adddf3>
 8004136:	4604      	mov	r4, r0
 8004138:	9809      	ldr	r0, [sp, #36]	; 0x24
 800413a:	460d      	mov	r5, r1
 800413c:	f7fc f996 	bl	800046c <__aeabi_i2d>
 8004140:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004142:	4b30      	ldr	r3, [pc, #192]	; (8004204 <__ieee754_pow+0x73c>)
 8004144:	4413      	add	r3, r2
 8004146:	e9d3 8900 	ldrd	r8, r9, [r3]
 800414a:	4606      	mov	r6, r0
 800414c:	460f      	mov	r7, r1
 800414e:	4622      	mov	r2, r4
 8004150:	462b      	mov	r3, r5
 8004152:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004156:	f7fc f83d 	bl	80001d4 <__adddf3>
 800415a:	4642      	mov	r2, r8
 800415c:	464b      	mov	r3, r9
 800415e:	f7fc f839 	bl	80001d4 <__adddf3>
 8004162:	4632      	mov	r2, r6
 8004164:	463b      	mov	r3, r7
 8004166:	f7fc f835 	bl	80001d4 <__adddf3>
 800416a:	9802      	ldr	r0, [sp, #8]
 800416c:	4632      	mov	r2, r6
 800416e:	463b      	mov	r3, r7
 8004170:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004174:	f7fc f82c 	bl	80001d0 <__aeabi_dsub>
 8004178:	4642      	mov	r2, r8
 800417a:	464b      	mov	r3, r9
 800417c:	f7fc f828 	bl	80001d0 <__aeabi_dsub>
 8004180:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004184:	e607      	b.n	8003d96 <__ieee754_pow+0x2ce>
 8004186:	f04f 0a01 	mov.w	sl, #1
 800418a:	e6a5      	b.n	8003ed8 <__ieee754_pow+0x410>
 800418c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80041e0 <__ieee754_pow+0x718>
 8004190:	e613      	b.n	8003dba <__ieee754_pow+0x2f2>
 8004192:	bf00      	nop
 8004194:	f3af 8000 	nop.w
 8004198:	4a454eef 	.word	0x4a454eef
 800419c:	3fca7e28 	.word	0x3fca7e28
 80041a0:	93c9db65 	.word	0x93c9db65
 80041a4:	3fcd864a 	.word	0x3fcd864a
 80041a8:	a91d4101 	.word	0xa91d4101
 80041ac:	3fd17460 	.word	0x3fd17460
 80041b0:	518f264d 	.word	0x518f264d
 80041b4:	3fd55555 	.word	0x3fd55555
 80041b8:	db6fabff 	.word	0xdb6fabff
 80041bc:	3fdb6db6 	.word	0x3fdb6db6
 80041c0:	33333303 	.word	0x33333303
 80041c4:	3fe33333 	.word	0x3fe33333
 80041c8:	e0000000 	.word	0xe0000000
 80041cc:	3feec709 	.word	0x3feec709
 80041d0:	dc3a03fd 	.word	0xdc3a03fd
 80041d4:	3feec709 	.word	0x3feec709
 80041d8:	145b01f5 	.word	0x145b01f5
 80041dc:	be3e2fe0 	.word	0xbe3e2fe0
 80041e0:	00000000 	.word	0x00000000
 80041e4:	3ff00000 	.word	0x3ff00000
 80041e8:	43400000 	.word	0x43400000
 80041ec:	0003988e 	.word	0x0003988e
 80041f0:	000bb679 	.word	0x000bb679
 80041f4:	080049a0 	.word	0x080049a0
 80041f8:	3ff00000 	.word	0x3ff00000
 80041fc:	40080000 	.word	0x40080000
 8004200:	080049c0 	.word	0x080049c0
 8004204:	080049b0 	.word	0x080049b0
 8004208:	a3b4      	add	r3, pc, #720	; (adr r3, 80044dc <__ieee754_pow+0xa14>)
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	4640      	mov	r0, r8
 8004210:	4649      	mov	r1, r9
 8004212:	f7fb ffdf 	bl	80001d4 <__adddf3>
 8004216:	4622      	mov	r2, r4
 8004218:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800421c:	462b      	mov	r3, r5
 800421e:	4630      	mov	r0, r6
 8004220:	4639      	mov	r1, r7
 8004222:	f7fb ffd5 	bl	80001d0 <__aeabi_dsub>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800422e:	f7fc fc17 	bl	8000a60 <__aeabi_dcmpgt>
 8004232:	2800      	cmp	r0, #0
 8004234:	f47f adfe 	bne.w	8003e34 <__ieee754_pow+0x36c>
 8004238:	4aa3      	ldr	r2, [pc, #652]	; (80044c8 <__ieee754_pow+0xa00>)
 800423a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800423e:	4293      	cmp	r3, r2
 8004240:	f340 810a 	ble.w	8004458 <__ieee754_pow+0x990>
 8004244:	151b      	asrs	r3, r3, #20
 8004246:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800424a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800424e:	fa4a f303 	asr.w	r3, sl, r3
 8004252:	445b      	add	r3, fp
 8004254:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004258:	4e9c      	ldr	r6, [pc, #624]	; (80044cc <__ieee754_pow+0xa04>)
 800425a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800425e:	4116      	asrs	r6, r2
 8004260:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004264:	2000      	movs	r0, #0
 8004266:	ea23 0106 	bic.w	r1, r3, r6
 800426a:	f1c2 0214 	rsb	r2, r2, #20
 800426e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004272:	fa4a fa02 	asr.w	sl, sl, r2
 8004276:	f1bb 0f00 	cmp.w	fp, #0
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4620      	mov	r0, r4
 8004280:	4629      	mov	r1, r5
 8004282:	bfb8      	it	lt
 8004284:	f1ca 0a00 	rsblt	sl, sl, #0
 8004288:	f7fb ffa2 	bl	80001d0 <__aeabi_dsub>
 800428c:	e9cd 0100 	strd	r0, r1, [sp]
 8004290:	4642      	mov	r2, r8
 8004292:	464b      	mov	r3, r9
 8004294:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004298:	f7fb ff9c 	bl	80001d4 <__adddf3>
 800429c:	2000      	movs	r0, #0
 800429e:	a378      	add	r3, pc, #480	; (adr r3, 8004480 <__ieee754_pow+0x9b8>)
 80042a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a4:	4604      	mov	r4, r0
 80042a6:	460d      	mov	r5, r1
 80042a8:	f7fc f94a 	bl	8000540 <__aeabi_dmul>
 80042ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80042b0:	4606      	mov	r6, r0
 80042b2:	460f      	mov	r7, r1
 80042b4:	4620      	mov	r0, r4
 80042b6:	4629      	mov	r1, r5
 80042b8:	f7fb ff8a 	bl	80001d0 <__aeabi_dsub>
 80042bc:	4602      	mov	r2, r0
 80042be:	460b      	mov	r3, r1
 80042c0:	4640      	mov	r0, r8
 80042c2:	4649      	mov	r1, r9
 80042c4:	f7fb ff84 	bl	80001d0 <__aeabi_dsub>
 80042c8:	a36f      	add	r3, pc, #444	; (adr r3, 8004488 <__ieee754_pow+0x9c0>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fc f937 	bl	8000540 <__aeabi_dmul>
 80042d2:	a36f      	add	r3, pc, #444	; (adr r3, 8004490 <__ieee754_pow+0x9c8>)
 80042d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d8:	4680      	mov	r8, r0
 80042da:	4689      	mov	r9, r1
 80042dc:	4620      	mov	r0, r4
 80042de:	4629      	mov	r1, r5
 80042e0:	f7fc f92e 	bl	8000540 <__aeabi_dmul>
 80042e4:	4602      	mov	r2, r0
 80042e6:	460b      	mov	r3, r1
 80042e8:	4640      	mov	r0, r8
 80042ea:	4649      	mov	r1, r9
 80042ec:	f7fb ff72 	bl	80001d4 <__adddf3>
 80042f0:	4604      	mov	r4, r0
 80042f2:	460d      	mov	r5, r1
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4630      	mov	r0, r6
 80042fa:	4639      	mov	r1, r7
 80042fc:	f7fb ff6a 	bl	80001d4 <__adddf3>
 8004300:	4632      	mov	r2, r6
 8004302:	463b      	mov	r3, r7
 8004304:	4680      	mov	r8, r0
 8004306:	4689      	mov	r9, r1
 8004308:	f7fb ff62 	bl	80001d0 <__aeabi_dsub>
 800430c:	4602      	mov	r2, r0
 800430e:	460b      	mov	r3, r1
 8004310:	4620      	mov	r0, r4
 8004312:	4629      	mov	r1, r5
 8004314:	f7fb ff5c 	bl	80001d0 <__aeabi_dsub>
 8004318:	4642      	mov	r2, r8
 800431a:	4606      	mov	r6, r0
 800431c:	460f      	mov	r7, r1
 800431e:	464b      	mov	r3, r9
 8004320:	4640      	mov	r0, r8
 8004322:	4649      	mov	r1, r9
 8004324:	f7fc f90c 	bl	8000540 <__aeabi_dmul>
 8004328:	a35b      	add	r3, pc, #364	; (adr r3, 8004498 <__ieee754_pow+0x9d0>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	4604      	mov	r4, r0
 8004330:	460d      	mov	r5, r1
 8004332:	f7fc f905 	bl	8000540 <__aeabi_dmul>
 8004336:	a35a      	add	r3, pc, #360	; (adr r3, 80044a0 <__ieee754_pow+0x9d8>)
 8004338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800433c:	f7fb ff48 	bl	80001d0 <__aeabi_dsub>
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	f7fc f8fc 	bl	8000540 <__aeabi_dmul>
 8004348:	a357      	add	r3, pc, #348	; (adr r3, 80044a8 <__ieee754_pow+0x9e0>)
 800434a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434e:	f7fb ff41 	bl	80001d4 <__adddf3>
 8004352:	4622      	mov	r2, r4
 8004354:	462b      	mov	r3, r5
 8004356:	f7fc f8f3 	bl	8000540 <__aeabi_dmul>
 800435a:	a355      	add	r3, pc, #340	; (adr r3, 80044b0 <__ieee754_pow+0x9e8>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fb ff36 	bl	80001d0 <__aeabi_dsub>
 8004364:	4622      	mov	r2, r4
 8004366:	462b      	mov	r3, r5
 8004368:	f7fc f8ea 	bl	8000540 <__aeabi_dmul>
 800436c:	a352      	add	r3, pc, #328	; (adr r3, 80044b8 <__ieee754_pow+0x9f0>)
 800436e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004372:	f7fb ff2f 	bl	80001d4 <__adddf3>
 8004376:	4622      	mov	r2, r4
 8004378:	462b      	mov	r3, r5
 800437a:	f7fc f8e1 	bl	8000540 <__aeabi_dmul>
 800437e:	4602      	mov	r2, r0
 8004380:	460b      	mov	r3, r1
 8004382:	4640      	mov	r0, r8
 8004384:	4649      	mov	r1, r9
 8004386:	f7fb ff23 	bl	80001d0 <__aeabi_dsub>
 800438a:	4604      	mov	r4, r0
 800438c:	460d      	mov	r5, r1
 800438e:	4602      	mov	r2, r0
 8004390:	460b      	mov	r3, r1
 8004392:	4640      	mov	r0, r8
 8004394:	4649      	mov	r1, r9
 8004396:	f7fc f8d3 	bl	8000540 <__aeabi_dmul>
 800439a:	2200      	movs	r2, #0
 800439c:	e9cd 0100 	strd	r0, r1, [sp]
 80043a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80043a4:	4620      	mov	r0, r4
 80043a6:	4629      	mov	r1, r5
 80043a8:	f7fb ff12 	bl	80001d0 <__aeabi_dsub>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80043b4:	f7fc f9ee 	bl	8000794 <__aeabi_ddiv>
 80043b8:	4632      	mov	r2, r6
 80043ba:	4604      	mov	r4, r0
 80043bc:	460d      	mov	r5, r1
 80043be:	463b      	mov	r3, r7
 80043c0:	4640      	mov	r0, r8
 80043c2:	4649      	mov	r1, r9
 80043c4:	f7fc f8bc 	bl	8000540 <__aeabi_dmul>
 80043c8:	4632      	mov	r2, r6
 80043ca:	463b      	mov	r3, r7
 80043cc:	f7fb ff02 	bl	80001d4 <__adddf3>
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4620      	mov	r0, r4
 80043d6:	4629      	mov	r1, r5
 80043d8:	f7fb fefa 	bl	80001d0 <__aeabi_dsub>
 80043dc:	4642      	mov	r2, r8
 80043de:	464b      	mov	r3, r9
 80043e0:	f7fb fef6 	bl	80001d0 <__aeabi_dsub>
 80043e4:	4602      	mov	r2, r0
 80043e6:	460b      	mov	r3, r1
 80043e8:	2000      	movs	r0, #0
 80043ea:	4939      	ldr	r1, [pc, #228]	; (80044d0 <__ieee754_pow+0xa08>)
 80043ec:	f7fb fef0 	bl	80001d0 <__aeabi_dsub>
 80043f0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80043f4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	da2f      	bge.n	800445e <__ieee754_pow+0x996>
 80043fe:	4650      	mov	r0, sl
 8004400:	ec43 2b10 	vmov	d0, r2, r3
 8004404:	f000 f9c0 	bl	8004788 <scalbn>
 8004408:	ec51 0b10 	vmov	r0, r1, d0
 800440c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004410:	f7ff bbf1 	b.w	8003bf6 <__ieee754_pow+0x12e>
 8004414:	4b2f      	ldr	r3, [pc, #188]	; (80044d4 <__ieee754_pow+0xa0c>)
 8004416:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800441a:	429e      	cmp	r6, r3
 800441c:	f77f af0c 	ble.w	8004238 <__ieee754_pow+0x770>
 8004420:	4b2d      	ldr	r3, [pc, #180]	; (80044d8 <__ieee754_pow+0xa10>)
 8004422:	440b      	add	r3, r1
 8004424:	4303      	orrs	r3, r0
 8004426:	d00b      	beq.n	8004440 <__ieee754_pow+0x978>
 8004428:	a325      	add	r3, pc, #148	; (adr r3, 80044c0 <__ieee754_pow+0x9f8>)
 800442a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004432:	f7fc f885 	bl	8000540 <__aeabi_dmul>
 8004436:	a322      	add	r3, pc, #136	; (adr r3, 80044c0 <__ieee754_pow+0x9f8>)
 8004438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443c:	f7ff bbdb 	b.w	8003bf6 <__ieee754_pow+0x12e>
 8004440:	4622      	mov	r2, r4
 8004442:	462b      	mov	r3, r5
 8004444:	f7fb fec4 	bl	80001d0 <__aeabi_dsub>
 8004448:	4642      	mov	r2, r8
 800444a:	464b      	mov	r3, r9
 800444c:	f7fc fafe 	bl	8000a4c <__aeabi_dcmpge>
 8004450:	2800      	cmp	r0, #0
 8004452:	f43f aef1 	beq.w	8004238 <__ieee754_pow+0x770>
 8004456:	e7e7      	b.n	8004428 <__ieee754_pow+0x960>
 8004458:	f04f 0a00 	mov.w	sl, #0
 800445c:	e718      	b.n	8004290 <__ieee754_pow+0x7c8>
 800445e:	4621      	mov	r1, r4
 8004460:	e7d4      	b.n	800440c <__ieee754_pow+0x944>
 8004462:	2000      	movs	r0, #0
 8004464:	491a      	ldr	r1, [pc, #104]	; (80044d0 <__ieee754_pow+0xa08>)
 8004466:	f7ff bb8f 	b.w	8003b88 <__ieee754_pow+0xc0>
 800446a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800446e:	f7ff bb8b 	b.w	8003b88 <__ieee754_pow+0xc0>
 8004472:	4630      	mov	r0, r6
 8004474:	4639      	mov	r1, r7
 8004476:	f7ff bb87 	b.w	8003b88 <__ieee754_pow+0xc0>
 800447a:	4693      	mov	fp, r2
 800447c:	f7ff bb98 	b.w	8003bb0 <__ieee754_pow+0xe8>
 8004480:	00000000 	.word	0x00000000
 8004484:	3fe62e43 	.word	0x3fe62e43
 8004488:	fefa39ef 	.word	0xfefa39ef
 800448c:	3fe62e42 	.word	0x3fe62e42
 8004490:	0ca86c39 	.word	0x0ca86c39
 8004494:	be205c61 	.word	0xbe205c61
 8004498:	72bea4d0 	.word	0x72bea4d0
 800449c:	3e663769 	.word	0x3e663769
 80044a0:	c5d26bf1 	.word	0xc5d26bf1
 80044a4:	3ebbbd41 	.word	0x3ebbbd41
 80044a8:	af25de2c 	.word	0xaf25de2c
 80044ac:	3f11566a 	.word	0x3f11566a
 80044b0:	16bebd93 	.word	0x16bebd93
 80044b4:	3f66c16c 	.word	0x3f66c16c
 80044b8:	5555553e 	.word	0x5555553e
 80044bc:	3fc55555 	.word	0x3fc55555
 80044c0:	c2f8f359 	.word	0xc2f8f359
 80044c4:	01a56e1f 	.word	0x01a56e1f
 80044c8:	3fe00000 	.word	0x3fe00000
 80044cc:	000fffff 	.word	0x000fffff
 80044d0:	3ff00000 	.word	0x3ff00000
 80044d4:	4090cbff 	.word	0x4090cbff
 80044d8:	3f6f3400 	.word	0x3f6f3400
 80044dc:	652b82fe 	.word	0x652b82fe
 80044e0:	3c971547 	.word	0x3c971547

080044e4 <__ieee754_sqrt>:
 80044e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044e8:	4955      	ldr	r1, [pc, #340]	; (8004640 <__ieee754_sqrt+0x15c>)
 80044ea:	ec55 4b10 	vmov	r4, r5, d0
 80044ee:	43a9      	bics	r1, r5
 80044f0:	462b      	mov	r3, r5
 80044f2:	462a      	mov	r2, r5
 80044f4:	d112      	bne.n	800451c <__ieee754_sqrt+0x38>
 80044f6:	ee10 2a10 	vmov	r2, s0
 80044fa:	ee10 0a10 	vmov	r0, s0
 80044fe:	4629      	mov	r1, r5
 8004500:	f7fc f81e 	bl	8000540 <__aeabi_dmul>
 8004504:	4602      	mov	r2, r0
 8004506:	460b      	mov	r3, r1
 8004508:	4620      	mov	r0, r4
 800450a:	4629      	mov	r1, r5
 800450c:	f7fb fe62 	bl	80001d4 <__adddf3>
 8004510:	4604      	mov	r4, r0
 8004512:	460d      	mov	r5, r1
 8004514:	ec45 4b10 	vmov	d0, r4, r5
 8004518:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800451c:	2d00      	cmp	r5, #0
 800451e:	ee10 0a10 	vmov	r0, s0
 8004522:	4621      	mov	r1, r4
 8004524:	dc0f      	bgt.n	8004546 <__ieee754_sqrt+0x62>
 8004526:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800452a:	4330      	orrs	r0, r6
 800452c:	d0f2      	beq.n	8004514 <__ieee754_sqrt+0x30>
 800452e:	b155      	cbz	r5, 8004546 <__ieee754_sqrt+0x62>
 8004530:	ee10 2a10 	vmov	r2, s0
 8004534:	4620      	mov	r0, r4
 8004536:	4629      	mov	r1, r5
 8004538:	f7fb fe4a 	bl	80001d0 <__aeabi_dsub>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	f7fc f928 	bl	8000794 <__aeabi_ddiv>
 8004544:	e7e4      	b.n	8004510 <__ieee754_sqrt+0x2c>
 8004546:	151b      	asrs	r3, r3, #20
 8004548:	d073      	beq.n	8004632 <__ieee754_sqrt+0x14e>
 800454a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800454e:	07dd      	lsls	r5, r3, #31
 8004550:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004554:	bf48      	it	mi
 8004556:	0fc8      	lsrmi	r0, r1, #31
 8004558:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800455c:	bf44      	itt	mi
 800455e:	0049      	lslmi	r1, r1, #1
 8004560:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004564:	2500      	movs	r5, #0
 8004566:	1058      	asrs	r0, r3, #1
 8004568:	0fcb      	lsrs	r3, r1, #31
 800456a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800456e:	0049      	lsls	r1, r1, #1
 8004570:	2316      	movs	r3, #22
 8004572:	462c      	mov	r4, r5
 8004574:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004578:	19a7      	adds	r7, r4, r6
 800457a:	4297      	cmp	r7, r2
 800457c:	bfde      	ittt	le
 800457e:	19bc      	addle	r4, r7, r6
 8004580:	1bd2      	suble	r2, r2, r7
 8004582:	19ad      	addle	r5, r5, r6
 8004584:	0fcf      	lsrs	r7, r1, #31
 8004586:	3b01      	subs	r3, #1
 8004588:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800458c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004590:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004594:	d1f0      	bne.n	8004578 <__ieee754_sqrt+0x94>
 8004596:	f04f 0c20 	mov.w	ip, #32
 800459a:	469e      	mov	lr, r3
 800459c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80045a0:	42a2      	cmp	r2, r4
 80045a2:	eb06 070e 	add.w	r7, r6, lr
 80045a6:	dc02      	bgt.n	80045ae <__ieee754_sqrt+0xca>
 80045a8:	d112      	bne.n	80045d0 <__ieee754_sqrt+0xec>
 80045aa:	428f      	cmp	r7, r1
 80045ac:	d810      	bhi.n	80045d0 <__ieee754_sqrt+0xec>
 80045ae:	2f00      	cmp	r7, #0
 80045b0:	eb07 0e06 	add.w	lr, r7, r6
 80045b4:	da42      	bge.n	800463c <__ieee754_sqrt+0x158>
 80045b6:	f1be 0f00 	cmp.w	lr, #0
 80045ba:	db3f      	blt.n	800463c <__ieee754_sqrt+0x158>
 80045bc:	f104 0801 	add.w	r8, r4, #1
 80045c0:	1b12      	subs	r2, r2, r4
 80045c2:	428f      	cmp	r7, r1
 80045c4:	bf88      	it	hi
 80045c6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80045ca:	1bc9      	subs	r1, r1, r7
 80045cc:	4433      	add	r3, r6
 80045ce:	4644      	mov	r4, r8
 80045d0:	0052      	lsls	r2, r2, #1
 80045d2:	f1bc 0c01 	subs.w	ip, ip, #1
 80045d6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80045da:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80045de:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80045e2:	d1dd      	bne.n	80045a0 <__ieee754_sqrt+0xbc>
 80045e4:	430a      	orrs	r2, r1
 80045e6:	d006      	beq.n	80045f6 <__ieee754_sqrt+0x112>
 80045e8:	1c5c      	adds	r4, r3, #1
 80045ea:	bf13      	iteet	ne
 80045ec:	3301      	addne	r3, #1
 80045ee:	3501      	addeq	r5, #1
 80045f0:	4663      	moveq	r3, ip
 80045f2:	f023 0301 	bicne.w	r3, r3, #1
 80045f6:	106a      	asrs	r2, r5, #1
 80045f8:	085b      	lsrs	r3, r3, #1
 80045fa:	07e9      	lsls	r1, r5, #31
 80045fc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004600:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004604:	bf48      	it	mi
 8004606:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800460a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800460e:	461c      	mov	r4, r3
 8004610:	e780      	b.n	8004514 <__ieee754_sqrt+0x30>
 8004612:	0aca      	lsrs	r2, r1, #11
 8004614:	3815      	subs	r0, #21
 8004616:	0549      	lsls	r1, r1, #21
 8004618:	2a00      	cmp	r2, #0
 800461a:	d0fa      	beq.n	8004612 <__ieee754_sqrt+0x12e>
 800461c:	02d6      	lsls	r6, r2, #11
 800461e:	d50a      	bpl.n	8004636 <__ieee754_sqrt+0x152>
 8004620:	f1c3 0420 	rsb	r4, r3, #32
 8004624:	fa21 f404 	lsr.w	r4, r1, r4
 8004628:	1e5d      	subs	r5, r3, #1
 800462a:	4099      	lsls	r1, r3
 800462c:	4322      	orrs	r2, r4
 800462e:	1b43      	subs	r3, r0, r5
 8004630:	e78b      	b.n	800454a <__ieee754_sqrt+0x66>
 8004632:	4618      	mov	r0, r3
 8004634:	e7f0      	b.n	8004618 <__ieee754_sqrt+0x134>
 8004636:	0052      	lsls	r2, r2, #1
 8004638:	3301      	adds	r3, #1
 800463a:	e7ef      	b.n	800461c <__ieee754_sqrt+0x138>
 800463c:	46a0      	mov	r8, r4
 800463e:	e7bf      	b.n	80045c0 <__ieee754_sqrt+0xdc>
 8004640:	7ff00000 	.word	0x7ff00000

08004644 <fabs>:
 8004644:	ec51 0b10 	vmov	r0, r1, d0
 8004648:	ee10 2a10 	vmov	r2, s0
 800464c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004650:	ec43 2b10 	vmov	d0, r2, r3
 8004654:	4770      	bx	lr

08004656 <finite>:
 8004656:	ee10 3a90 	vmov	r3, s1
 800465a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800465e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004662:	0fc0      	lsrs	r0, r0, #31
 8004664:	4770      	bx	lr

08004666 <matherr>:
 8004666:	2000      	movs	r0, #0
 8004668:	4770      	bx	lr
 800466a:	0000      	movs	r0, r0
 800466c:	0000      	movs	r0, r0
	...

08004670 <nan>:
 8004670:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004678 <nan+0x8>
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	00000000 	.word	0x00000000
 800467c:	7ff80000 	.word	0x7ff80000

08004680 <rint>:
 8004680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004682:	ec51 0b10 	vmov	r0, r1, d0
 8004686:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800468a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800468e:	2e13      	cmp	r6, #19
 8004690:	460b      	mov	r3, r1
 8004692:	ee10 4a10 	vmov	r4, s0
 8004696:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800469a:	dc56      	bgt.n	800474a <rint+0xca>
 800469c:	2e00      	cmp	r6, #0
 800469e:	da2b      	bge.n	80046f8 <rint+0x78>
 80046a0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80046a4:	4302      	orrs	r2, r0
 80046a6:	d023      	beq.n	80046f0 <rint+0x70>
 80046a8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80046ac:	4302      	orrs	r2, r0
 80046ae:	4254      	negs	r4, r2
 80046b0:	4314      	orrs	r4, r2
 80046b2:	0c4b      	lsrs	r3, r1, #17
 80046b4:	0b24      	lsrs	r4, r4, #12
 80046b6:	045b      	lsls	r3, r3, #17
 80046b8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80046bc:	ea44 0103 	orr.w	r1, r4, r3
 80046c0:	460b      	mov	r3, r1
 80046c2:	492f      	ldr	r1, [pc, #188]	; (8004780 <rint+0x100>)
 80046c4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80046c8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80046cc:	4602      	mov	r2, r0
 80046ce:	4639      	mov	r1, r7
 80046d0:	4630      	mov	r0, r6
 80046d2:	f7fb fd7f 	bl	80001d4 <__adddf3>
 80046d6:	e9cd 0100 	strd	r0, r1, [sp]
 80046da:	463b      	mov	r3, r7
 80046dc:	4632      	mov	r2, r6
 80046de:	e9dd 0100 	ldrd	r0, r1, [sp]
 80046e2:	f7fb fd75 	bl	80001d0 <__aeabi_dsub>
 80046e6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80046ea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80046ee:	4639      	mov	r1, r7
 80046f0:	ec41 0b10 	vmov	d0, r0, r1
 80046f4:	b003      	add	sp, #12
 80046f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046f8:	4a22      	ldr	r2, [pc, #136]	; (8004784 <rint+0x104>)
 80046fa:	4132      	asrs	r2, r6
 80046fc:	ea01 0702 	and.w	r7, r1, r2
 8004700:	4307      	orrs	r7, r0
 8004702:	d0f5      	beq.n	80046f0 <rint+0x70>
 8004704:	0852      	lsrs	r2, r2, #1
 8004706:	4011      	ands	r1, r2
 8004708:	430c      	orrs	r4, r1
 800470a:	d00b      	beq.n	8004724 <rint+0xa4>
 800470c:	ea23 0202 	bic.w	r2, r3, r2
 8004710:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004714:	2e13      	cmp	r6, #19
 8004716:	fa43 f306 	asr.w	r3, r3, r6
 800471a:	bf0c      	ite	eq
 800471c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8004720:	2400      	movne	r4, #0
 8004722:	4313      	orrs	r3, r2
 8004724:	4916      	ldr	r1, [pc, #88]	; (8004780 <rint+0x100>)
 8004726:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800472a:	4622      	mov	r2, r4
 800472c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004730:	4620      	mov	r0, r4
 8004732:	4629      	mov	r1, r5
 8004734:	f7fb fd4e 	bl	80001d4 <__adddf3>
 8004738:	e9cd 0100 	strd	r0, r1, [sp]
 800473c:	4622      	mov	r2, r4
 800473e:	462b      	mov	r3, r5
 8004740:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004744:	f7fb fd44 	bl	80001d0 <__aeabi_dsub>
 8004748:	e7d2      	b.n	80046f0 <rint+0x70>
 800474a:	2e33      	cmp	r6, #51	; 0x33
 800474c:	dd07      	ble.n	800475e <rint+0xde>
 800474e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004752:	d1cd      	bne.n	80046f0 <rint+0x70>
 8004754:	ee10 2a10 	vmov	r2, s0
 8004758:	f7fb fd3c 	bl	80001d4 <__adddf3>
 800475c:	e7c8      	b.n	80046f0 <rint+0x70>
 800475e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8004762:	f04f 32ff 	mov.w	r2, #4294967295
 8004766:	40f2      	lsrs	r2, r6
 8004768:	4210      	tst	r0, r2
 800476a:	d0c1      	beq.n	80046f0 <rint+0x70>
 800476c:	0852      	lsrs	r2, r2, #1
 800476e:	4210      	tst	r0, r2
 8004770:	bf1f      	itttt	ne
 8004772:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8004776:	ea20 0202 	bicne.w	r2, r0, r2
 800477a:	4134      	asrne	r4, r6
 800477c:	4314      	orrne	r4, r2
 800477e:	e7d1      	b.n	8004724 <rint+0xa4>
 8004780:	080049d0 	.word	0x080049d0
 8004784:	000fffff 	.word	0x000fffff

08004788 <scalbn>:
 8004788:	b570      	push	{r4, r5, r6, lr}
 800478a:	ec55 4b10 	vmov	r4, r5, d0
 800478e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8004792:	4606      	mov	r6, r0
 8004794:	462b      	mov	r3, r5
 8004796:	b9aa      	cbnz	r2, 80047c4 <scalbn+0x3c>
 8004798:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800479c:	4323      	orrs	r3, r4
 800479e:	d03b      	beq.n	8004818 <scalbn+0x90>
 80047a0:	4b31      	ldr	r3, [pc, #196]	; (8004868 <scalbn+0xe0>)
 80047a2:	4629      	mov	r1, r5
 80047a4:	2200      	movs	r2, #0
 80047a6:	ee10 0a10 	vmov	r0, s0
 80047aa:	f7fb fec9 	bl	8000540 <__aeabi_dmul>
 80047ae:	4b2f      	ldr	r3, [pc, #188]	; (800486c <scalbn+0xe4>)
 80047b0:	429e      	cmp	r6, r3
 80047b2:	4604      	mov	r4, r0
 80047b4:	460d      	mov	r5, r1
 80047b6:	da12      	bge.n	80047de <scalbn+0x56>
 80047b8:	a327      	add	r3, pc, #156	; (adr r3, 8004858 <scalbn+0xd0>)
 80047ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047be:	f7fb febf 	bl	8000540 <__aeabi_dmul>
 80047c2:	e009      	b.n	80047d8 <scalbn+0x50>
 80047c4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80047c8:	428a      	cmp	r2, r1
 80047ca:	d10c      	bne.n	80047e6 <scalbn+0x5e>
 80047cc:	ee10 2a10 	vmov	r2, s0
 80047d0:	4620      	mov	r0, r4
 80047d2:	4629      	mov	r1, r5
 80047d4:	f7fb fcfe 	bl	80001d4 <__adddf3>
 80047d8:	4604      	mov	r4, r0
 80047da:	460d      	mov	r5, r1
 80047dc:	e01c      	b.n	8004818 <scalbn+0x90>
 80047de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80047e2:	460b      	mov	r3, r1
 80047e4:	3a36      	subs	r2, #54	; 0x36
 80047e6:	4432      	add	r2, r6
 80047e8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80047ec:	428a      	cmp	r2, r1
 80047ee:	dd0b      	ble.n	8004808 <scalbn+0x80>
 80047f0:	ec45 4b11 	vmov	d1, r4, r5
 80047f4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004860 <scalbn+0xd8>
 80047f8:	f000 f83c 	bl	8004874 <copysign>
 80047fc:	a318      	add	r3, pc, #96	; (adr r3, 8004860 <scalbn+0xd8>)
 80047fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004802:	ec51 0b10 	vmov	r0, r1, d0
 8004806:	e7da      	b.n	80047be <scalbn+0x36>
 8004808:	2a00      	cmp	r2, #0
 800480a:	dd08      	ble.n	800481e <scalbn+0x96>
 800480c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004810:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004814:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004818:	ec45 4b10 	vmov	d0, r4, r5
 800481c:	bd70      	pop	{r4, r5, r6, pc}
 800481e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004822:	da0d      	bge.n	8004840 <scalbn+0xb8>
 8004824:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004828:	429e      	cmp	r6, r3
 800482a:	ec45 4b11 	vmov	d1, r4, r5
 800482e:	dce1      	bgt.n	80047f4 <scalbn+0x6c>
 8004830:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004858 <scalbn+0xd0>
 8004834:	f000 f81e 	bl	8004874 <copysign>
 8004838:	a307      	add	r3, pc, #28	; (adr r3, 8004858 <scalbn+0xd0>)
 800483a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800483e:	e7e0      	b.n	8004802 <scalbn+0x7a>
 8004840:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004844:	3236      	adds	r2, #54	; 0x36
 8004846:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800484a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800484e:	4620      	mov	r0, r4
 8004850:	4629      	mov	r1, r5
 8004852:	2200      	movs	r2, #0
 8004854:	4b06      	ldr	r3, [pc, #24]	; (8004870 <scalbn+0xe8>)
 8004856:	e7b2      	b.n	80047be <scalbn+0x36>
 8004858:	c2f8f359 	.word	0xc2f8f359
 800485c:	01a56e1f 	.word	0x01a56e1f
 8004860:	8800759c 	.word	0x8800759c
 8004864:	7e37e43c 	.word	0x7e37e43c
 8004868:	43500000 	.word	0x43500000
 800486c:	ffff3cb0 	.word	0xffff3cb0
 8004870:	3c900000 	.word	0x3c900000

08004874 <copysign>:
 8004874:	ec51 0b10 	vmov	r0, r1, d0
 8004878:	ee11 0a90 	vmov	r0, s3
 800487c:	ee10 2a10 	vmov	r2, s0
 8004880:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004884:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004888:	ea41 0300 	orr.w	r3, r1, r0
 800488c:	ec43 2b10 	vmov	d0, r2, r3
 8004890:	4770      	bx	lr
	...

08004894 <_init>:
 8004894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004896:	bf00      	nop
 8004898:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800489a:	bc08      	pop	{r3}
 800489c:	469e      	mov	lr, r3
 800489e:	4770      	bx	lr

080048a0 <_fini>:
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048a2:	bf00      	nop
 80048a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048a6:	bc08      	pop	{r3}
 80048a8:	469e      	mov	lr, r3
 80048aa:	4770      	bx	lr
