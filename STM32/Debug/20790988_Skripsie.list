
20790988_Skripsie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000583c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000308  080059c8  080059c8  000159c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cd0  08005cd0  000200e8  2**0
                  CONTENTS
  4 .ARM          00000000  08005cd0  08005cd0  000200e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005cd0  08005cd0  000200e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cd0  08005cd0  00015cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005cd4  08005cd4  00015cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08005cd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016d4  200000e8  08005dc0  000200e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200017bc  08005dc0  000217bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136d3  00000000  00000000  00020118  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bf3  00000000  00000000  000337eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000aa19  00000000  00000000  000363de  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000dd0  00000000  00000000  00040df8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000ed0  00000000  00000000  00041bc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001deec  00000000  00000000  00042a98  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000bff3  00000000  00000000  00060984  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000aaaa8  00000000  00000000  0006c977  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0011741f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002b38  00000000  00000000  0011749c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e8 	.word	0x200000e8
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080059ac 	.word	0x080059ac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000ec 	.word	0x200000ec
 80001c4:	080059ac 	.word	0x080059ac

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <generate_sine>:
    uint32_t bin_max = 0xFF;
    uint32_t voltage_max = 3300;
    uint32_t voltage_pp = 1000;
    uint32_t bin_pp = bin_max * voltage_pp / voltage_max;

    for (uint32_t i = 0; i < length; i++)
 8000b30:	b3a1      	cbz	r1, 8000b9c <generate_sine+0x6c>
{
 8000b32:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b36:	468b      	mov	fp, r1
 8000b38:	1e45      	subs	r5, r0, #1
 8000b3a:	4408      	add	r0, r1
 8000b3c:	f100 3aff 	add.w	sl, r0, #4294967295
    for (uint32_t i = 0; i < length; i++)
 8000b40:	2400      	movs	r4, #0
    {
        target[i] = (uint16_t) ((sin(i * 2 * M_PI / length) + 1)
 8000b42:	f20f 0964 	addw	r9, pc, #100	; 0x64
 8000b46:	e9d9 8900 	ldrd	r8, r9, [r9]
 8000b4a:	4620      	mov	r0, r4
 8000b4c:	f7ff fc7e 	bl	800044c <__aeabi_ui2d>
 8000b50:	4642      	mov	r2, r8
 8000b52:	464b      	mov	r3, r9
 8000b54:	f7ff fcf4 	bl	8000540 <__aeabi_dmul>
 8000b58:	4606      	mov	r6, r0
 8000b5a:	460f      	mov	r7, r1
 8000b5c:	4658      	mov	r0, fp
 8000b5e:	f7ff fc75 	bl	800044c <__aeabi_ui2d>
 8000b62:	4602      	mov	r2, r0
 8000b64:	460b      	mov	r3, r1
 8000b66:	4630      	mov	r0, r6
 8000b68:	4639      	mov	r1, r7
 8000b6a:	f7ff fe13 	bl	8000794 <__aeabi_ddiv>
 8000b6e:	ec41 0b10 	vmov	d0, r0, r1
 8000b72:	f002 ff41 	bl	80039f8 <sin>
 8000b76:	2200      	movs	r2, #0
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <generate_sine+0x70>)
 8000b7a:	ec51 0b10 	vmov	r0, r1, d0
 8000b7e:	f7ff fb29 	bl	80001d4 <__adddf3>
                * ((bin_pp + 1) / 2));
 8000b82:	2200      	movs	r2, #0
 8000b84:	4b07      	ldr	r3, [pc, #28]	; (8000ba4 <generate_sine+0x74>)
 8000b86:	f7ff fcdb 	bl	8000540 <__aeabi_dmul>
        target[i] = (uint16_t) ((sin(i * 2 * M_PI / length) + 1)
 8000b8a:	f7ff ffb1 	bl	8000af0 <__aeabi_d2uiz>
 8000b8e:	f805 0f01 	strb.w	r0, [r5, #1]!
 8000b92:	3402      	adds	r4, #2
    for (uint32_t i = 0; i < length; i++)
 8000b94:	4555      	cmp	r5, sl
 8000b96:	d1d8      	bne.n	8000b4a <generate_sine+0x1a>
    }
}
 8000b98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	3ff00000 	.word	0x3ff00000
 8000ba4:	40438000 	.word	0x40438000
 8000ba8:	54442d18 	.word	0x54442d18
 8000bac:	400921fb 	.word	0x400921fb

08000bb0 <days_in_year>:

uint32_t days_in_year(uint32_t year, uint32_t month, uint32_t day)
{
 8000bb0:	b4f0      	push	{r4, r5, r6, r7}
 8000bb2:	b08c      	sub	sp, #48	; 0x30
 8000bb4:	4684      	mov	ip, r0
 8000bb6:	460f      	mov	r7, r1
 8000bb8:	4616      	mov	r6, r2
    uint32_t days_in_month[] =
 8000bba:	466c      	mov	r4, sp
 8000bbc:	4d10      	ldr	r5, [pc, #64]	; (8000c00 <days_in_year+0x50>)
 8000bbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000bc6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000bca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    uint32_t day_of_year = day;
    for (uint32_t i = 0; i < month - 1; i++)
 8000bce:	2f01      	cmp	r7, #1
 8000bd0:	d013      	beq.n	8000bfa <days_in_year+0x4a>
 8000bd2:	466b      	mov	r3, sp
 8000bd4:	f1ad 0204 	sub.w	r2, sp, #4
 8000bd8:	eb02 0187 	add.w	r1, r2, r7, lsl #2
    uint32_t day_of_year = day;
 8000bdc:	4630      	mov	r0, r6
    {
        day_of_year += days_in_month[i];
 8000bde:	f853 2b04 	ldr.w	r2, [r3], #4
 8000be2:	4410      	add	r0, r2
    for (uint32_t i = 0; i < month - 1; i++)
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d1fa      	bne.n	8000bde <days_in_year+0x2e>
    }

    if (year % 4 == 0 && month > 2)
 8000be8:	f01c 0f03 	tst.w	ip, #3
 8000bec:	d102      	bne.n	8000bf4 <days_in_year+0x44>
 8000bee:	2f02      	cmp	r7, #2
    {
        day_of_year++;
 8000bf0:	bf88      	it	hi
 8000bf2:	3001      	addhi	r0, #1
    }
    return day_of_year;
}
 8000bf4:	b00c      	add	sp, #48	; 0x30
 8000bf6:	bcf0      	pop	{r4, r5, r6, r7}
 8000bf8:	4770      	bx	lr
    uint32_t day_of_year = day;
 8000bfa:	4630      	mov	r0, r6
 8000bfc:	e7f4      	b.n	8000be8 <days_in_year+0x38>
 8000bfe:	bf00      	nop
 8000c00:	080059c8 	.word	0x080059c8
 8000c04:	00000000 	.word	0x00000000

08000c08 <insert_binary_into_string>:

void insert_binary_into_string(char *p_timecode, uint32_t num, uint32_t len)
{
 8000c08:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000c0c:	4604      	mov	r4, r0
 8000c0e:	4615      	mov	r5, r2

    if (num < 10 && num < pow(2, len))
 8000c10:	2909      	cmp	r1, #9
 8000c12:	d90a      	bls.n	8000c2a <insert_binary_into_string+0x22>
            p_timecode[i] = '0' + (num >> i & 1);
        }
    }
    else
    {
        for (uint32_t i = 0; i < len; i++)
 8000c14:	b13d      	cbz	r5, 8000c26 <insert_binary_into_string+0x1e>
 8000c16:	1e63      	subs	r3, r4, #1
 8000c18:	1960      	adds	r0, r4, r5
 8000c1a:	3801      	subs	r0, #1
        {
            p_timecode[i] = 'E';
 8000c1c:	2245      	movs	r2, #69	; 0x45
 8000c1e:	f803 2f01 	strb.w	r2, [r3, #1]!
        for (uint32_t i = 0; i < len; i++)
 8000c22:	4283      	cmp	r3, r0
 8000c24:	d1fb      	bne.n	8000c1e <insert_binary_into_string+0x16>
        }
    }
}
 8000c26:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8000c2a:	460e      	mov	r6, r1
    if (num < 10 && num < pow(2, len))
 8000c2c:	4610      	mov	r0, r2
 8000c2e:	f7ff fc0d 	bl	800044c <__aeabi_ui2d>
 8000c32:	ec41 0b11 	vmov	d1, r0, r1
 8000c36:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8000c78 <insert_binary_into_string+0x70>
 8000c3a:	f002 ff25 	bl	8003a88 <pow>
 8000c3e:	ec59 8b10 	vmov	r8, r9, d0
 8000c42:	4630      	mov	r0, r6
 8000c44:	f7ff fc02 	bl	800044c <__aeabi_ui2d>
 8000c48:	4642      	mov	r2, r8
 8000c4a:	464b      	mov	r3, r9
 8000c4c:	f7ff feea 	bl	8000a24 <__aeabi_dcmplt>
 8000c50:	2800      	cmp	r0, #0
 8000c52:	d0df      	beq.n	8000c14 <insert_binary_into_string+0xc>
        for (uint32_t i = 0; i < len; i++)
 8000c54:	2d00      	cmp	r5, #0
 8000c56:	d0e6      	beq.n	8000c26 <insert_binary_into_string+0x1e>
 8000c58:	3c01      	subs	r4, #1
 8000c5a:	2200      	movs	r2, #0
            p_timecode[i] = '0' + (num >> i & 1);
 8000c5c:	fa26 f302 	lsr.w	r3, r6, r2
 8000c60:	f003 0301 	and.w	r3, r3, #1
 8000c64:	3330      	adds	r3, #48	; 0x30
 8000c66:	f804 3f01 	strb.w	r3, [r4, #1]!
        for (uint32_t i = 0; i < len; i++)
 8000c6a:	3201      	adds	r2, #1
 8000c6c:	4295      	cmp	r5, r2
 8000c6e:	d1f5      	bne.n	8000c5c <insert_binary_into_string+0x54>
 8000c70:	e7d9      	b.n	8000c26 <insert_binary_into_string+0x1e>
 8000c72:	bf00      	nop
 8000c74:	f3af 8000 	nop.w
 8000c78:	00000000 	.word	0x00000000
 8000c7c:	40000000 	.word	0x40000000

08000c80 <equals>:
{
    uint32_t i = 0;
    bool equal = true;
    char c1, c2;

    for (i = 0; i < len; i++)
 8000c80:	b322      	cbz	r2, 8000ccc <equals+0x4c>
{
 8000c82:	b4f0      	push	{r4, r5, r6, r7}
 8000c84:	4604      	mov	r4, r0
 8000c86:	1882      	adds	r2, r0, r2
 8000c88:	e015      	b.n	8000cb6 <equals+0x36>
                break;
            }
        }
        else
        {
            c1 = str1[i];
 8000c8a:	7826      	ldrb	r6, [r4, #0]
            c2 = str2[i];
 8000c8c:	780d      	ldrb	r5, [r1, #0]
            if (c1 >= 'a' && c1 <= 'z')
 8000c8e:	f1a6 0761 	sub.w	r7, r6, #97	; 0x61
 8000c92:	b2ff      	uxtb	r7, r7
 8000c94:	2f19      	cmp	r7, #25
            {
                c1 -= 32;
 8000c96:	bf9c      	itt	ls
 8000c98:	3e20      	subls	r6, #32
 8000c9a:	b2f6      	uxtbls	r6, r6
            }

            if (c2 >= 'a' && c2 <= 'z')
 8000c9c:	f1a5 0761 	sub.w	r7, r5, #97	; 0x61
 8000ca0:	b2ff      	uxtb	r7, r7
 8000ca2:	2f19      	cmp	r7, #25
            {
                c2 -= 32;
 8000ca4:	bf9c      	itt	ls
 8000ca6:	3d20      	subls	r5, #32
 8000ca8:	b2ed      	uxtbls	r5, r5
            }

            if (c1 != c2)
 8000caa:	42ae      	cmp	r6, r5
 8000cac:	d110      	bne.n	8000cd0 <equals+0x50>
 8000cae:	3401      	adds	r4, #1
 8000cb0:	3101      	adds	r1, #1
    for (i = 0; i < len; i++)
 8000cb2:	4294      	cmp	r4, r2
 8000cb4:	d007      	beq.n	8000cc6 <equals+0x46>
        if (!ignoreCase)
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d1e7      	bne.n	8000c8a <equals+0xa>
            if (str1[i] != str2[i])
 8000cba:	7825      	ldrb	r5, [r4, #0]
 8000cbc:	7808      	ldrb	r0, [r1, #0]
 8000cbe:	4285      	cmp	r5, r0
 8000cc0:	d0f5      	beq.n	8000cae <equals+0x2e>
                equal = false;
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	e000      	b.n	8000cc8 <equals+0x48>
    bool equal = true;
 8000cc6:	2001      	movs	r0, #1
            }
        }
    }

    return equal;
}
 8000cc8:	bcf0      	pop	{r4, r5, r6, r7}
 8000cca:	4770      	bx	lr
    bool equal = true;
 8000ccc:	2001      	movs	r0, #1
}
 8000cce:	4770      	bx	lr
                equal = false;
 8000cd0:	2000      	movs	r0, #0
 8000cd2:	e7f9      	b.n	8000cc8 <equals+0x48>

08000cd4 <parse_nmea>:
{
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	4604      	mov	r4, r0
 8000cda:	460e      	mov	r6, r1
    char **p_strings = malloc((sizeof(char*)) * 11);
 8000cdc:	202c      	movs	r0, #44	; 0x2c
 8000cde:	f002 fdb7 	bl	8003850 <malloc>
 8000ce2:	4605      	mov	r5, r0
    if (!equals("GPRMC", &GPSString[0], 5, false))
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	2205      	movs	r2, #5
 8000ce8:	4621      	mov	r1, r4
 8000cea:	4837      	ldr	r0, [pc, #220]	; (8000dc8 <parse_nmea+0xf4>)
 8000cec:	f7ff ffc8 	bl	8000c80 <equals>
 8000cf0:	2800      	cmp	r0, #0
 8000cf2:	d05e      	beq.n	8000db2 <parse_nmea+0xde>
    for (i = 0; i < GPSStringLen; i++)
 8000cf4:	b15e      	cbz	r6, 8000d0e <parse_nmea+0x3a>
 8000cf6:	4623      	mov	r3, r4
 8000cf8:	19a1      	adds	r1, r4, r6
    uint32_t numStrings = 0;
 8000cfa:	2000      	movs	r0, #0
        if (GPSString[i] == ',')
 8000cfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000d00:	2a2c      	cmp	r2, #44	; 0x2c
            p_strings[numStrings] = &GPSString[i + 1];
 8000d02:	bf04      	itt	eq
 8000d04:	f845 3020 	streq.w	r3, [r5, r0, lsl #2]
            numStrings++;
 8000d08:	3001      	addeq	r0, #1
    for (i = 0; i < GPSStringLen; i++)
 8000d0a:	428b      	cmp	r3, r1
 8000d0c:	d1f6      	bne.n	8000cfc <parse_nmea+0x28>
    if (p_strings[1] - p_strings[0] != 1)
 8000d0e:	682b      	ldr	r3, [r5, #0]
 8000d10:	686a      	ldr	r2, [r5, #4]
 8000d12:	1ad2      	subs	r2, r2, r3
 8000d14:	2a01      	cmp	r2, #1
 8000d16:	d04e      	beq.n	8000db6 <parse_nmea+0xe2>

//converts a character to its numerical equivalent for example '3' -> 3
uint32_t parse_char(char c)
{
    return (c - '0');
 8000d18:	f893 9000 	ldrb.w	r9, [r3]
 8000d1c:	f1a9 0930 	sub.w	r9, r9, #48	; 0x30
        l_hour = 10 * parse_char(time[0]) + parse_char(time[1]);
 8000d20:	eb09 0989 	add.w	r9, r9, r9, lsl #2
    return (c - '0');
 8000d24:	785a      	ldrb	r2, [r3, #1]
 8000d26:	3a30      	subs	r2, #48	; 0x30
        l_hour = 10 * parse_char(time[0]) + parse_char(time[1]);
 8000d28:	eb02 0949 	add.w	r9, r2, r9, lsl #1
    return (c - '0');
 8000d2c:	f893 8002 	ldrb.w	r8, [r3, #2]
 8000d30:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
        l_min = 10 * parse_char(time[2]) + parse_char(time[3]);
 8000d34:	eb08 0888 	add.w	r8, r8, r8, lsl #2
    return (c - '0');
 8000d38:	78da      	ldrb	r2, [r3, #3]
 8000d3a:	3a30      	subs	r2, #48	; 0x30
        l_min = 10 * parse_char(time[2]) + parse_char(time[3]);
 8000d3c:	eb02 0848 	add.w	r8, r2, r8, lsl #1
    return (c - '0');
 8000d40:	791e      	ldrb	r6, [r3, #4]
 8000d42:	3e30      	subs	r6, #48	; 0x30
        l_sec = 10 * parse_char(time[4]) + parse_char(time[5]);
 8000d44:	eb06 0686 	add.w	r6, r6, r6, lsl #2
    return (c - '0');
 8000d48:	795b      	ldrb	r3, [r3, #5]
 8000d4a:	3b30      	subs	r3, #48	; 0x30
        l_sec = 10 * parse_char(time[4]) + parse_char(time[5]);
 8000d4c:	eb03 0646 	add.w	r6, r3, r6, lsl #1
    if (p_strings[9] - p_strings[8] != 1)
 8000d50:	6a2b      	ldr	r3, [r5, #32]
 8000d52:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8000d54:	1ad2      	subs	r2, r2, r3
 8000d56:	2a01      	cmp	r2, #1
 8000d58:	d031      	beq.n	8000dbe <parse_nmea+0xea>
    return (c - '0');
 8000d5a:	781c      	ldrb	r4, [r3, #0]
 8000d5c:	3c30      	subs	r4, #48	; 0x30
        l_day = 10 * parse_char(p_date[0]) + parse_char(p_date[1]);
 8000d5e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    return (c - '0');
 8000d62:	785a      	ldrb	r2, [r3, #1]
 8000d64:	3a30      	subs	r2, #48	; 0x30
        l_day = 10 * parse_char(p_date[0]) + parse_char(p_date[1]);
 8000d66:	eb02 0444 	add.w	r4, r2, r4, lsl #1
    return (c - '0');
 8000d6a:	789f      	ldrb	r7, [r3, #2]
 8000d6c:	3f30      	subs	r7, #48	; 0x30
        l_month = 10 * parse_char(p_date[2]) + parse_char(p_date[3]);
 8000d6e:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    return (c - '0');
 8000d72:	78da      	ldrb	r2, [r3, #3]
 8000d74:	3a30      	subs	r2, #48	; 0x30
        l_month = 10 * parse_char(p_date[2]) + parse_char(p_date[3]);
 8000d76:	eb02 0747 	add.w	r7, r2, r7, lsl #1
    return (c - '0');
 8000d7a:	f893 a004 	ldrb.w	sl, [r3, #4]
 8000d7e:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
        l_year = 10 * parse_char(p_date[4]) + parse_char(p_date[5]);
 8000d82:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    return (c - '0');
 8000d86:	795b      	ldrb	r3, [r3, #5]
 8000d88:	3b30      	subs	r3, #48	; 0x30
        l_year = 10 * parse_char(p_date[4]) + parse_char(p_date[5]);
 8000d8a:	eb03 0a4a 	add.w	sl, r3, sl, lsl #1
    free(p_strings);
 8000d8e:	4628      	mov	r0, r5
 8000d90:	f002 fd66 	bl	8003860 <free>
    hour = l_hour;
 8000d94:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <parse_nmea+0xf8>)
 8000d96:	f8c3 9000 	str.w	r9, [r3]
    min = l_min;
 8000d9a:	4b0d      	ldr	r3, [pc, #52]	; (8000dd0 <parse_nmea+0xfc>)
 8000d9c:	f8c3 8000 	str.w	r8, [r3]
    sec = l_sec;
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <parse_nmea+0x100>)
 8000da2:	601e      	str	r6, [r3, #0]
    year = l_year;
 8000da4:	4b0c      	ldr	r3, [pc, #48]	; (8000dd8 <parse_nmea+0x104>)
 8000da6:	f8c3 a000 	str.w	sl, [r3]
    month = l_month;
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <parse_nmea+0x108>)
 8000dac:	601f      	str	r7, [r3, #0]
    day = l_day;
 8000dae:	4b0c      	ldr	r3, [pc, #48]	; (8000de0 <parse_nmea+0x10c>)
 8000db0:	601c      	str	r4, [r3, #0]
}
 8000db2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    uint32_t l_sec = 0;
 8000db6:	2600      	movs	r6, #0
    uint32_t l_min = 0;
 8000db8:	46b0      	mov	r8, r6
    uint32_t l_hour = 0;
 8000dba:	46b1      	mov	r9, r6
 8000dbc:	e7c8      	b.n	8000d50 <parse_nmea+0x7c>
    uint32_t l_day = 0;
 8000dbe:	2400      	movs	r4, #0
    uint32_t l_month = 0;
 8000dc0:	4627      	mov	r7, r4
    uint32_t l_year = 0;
 8000dc2:	46a2      	mov	sl, r4
 8000dc4:	e7e3      	b.n	8000d8e <parse_nmea+0xba>
 8000dc6:	bf00      	nop
 8000dc8:	080059f8 	.word	0x080059f8
 8000dcc:	20000104 	.word	0x20000104
 8000dd0:	20000108 	.word	0x20000108
 8000dd4:	2000010c 	.word	0x2000010c
 8000dd8:	20000070 	.word	0x20000070
 8000ddc:	20000004 	.word	0x20000004
 8000de0:	20000000 	.word	0x20000000

08000de4 <copy_pulse>:
        uint32_t num_copies)
{
    uint32_t index_copy = 0;
    uint32_t index_segment = 0;

    for (index_copy = 0; index_copy < PULSE_LENGTH / len; index_copy++)
 8000de4:	f04f 0c32 	mov.w	ip, #50	; 0x32
 8000de8:	fbbc fcf2 	udiv	ip, ip, r2
 8000dec:	f1bc 0f00 	cmp.w	ip, #0
 8000df0:	d015      	beq.n	8000e1e <copy_pulse+0x3a>
{
 8000df2:	b4f0      	push	{r4, r5, r6, r7}
    for (index_copy = 0; index_copy < PULSE_LENGTH / len; index_copy++)
 8000df4:	2500      	movs	r5, #0
                copy[index_copy * len + index_segment] =
                        original[index_segment];
            }
            else
            {
                copy[index_copy * len + index_segment] = 0x0;
 8000df6:	462f      	mov	r7, r5
 8000df8:	e00c      	b.n	8000e14 <copy_pulse+0x30>
        for (index_segment = 0; index_segment < len; index_segment++)
 8000dfa:	2400      	movs	r4, #0
            if (index_copy < num_copies)
 8000dfc:	42ab      	cmp	r3, r5
                        original[index_segment];
 8000dfe:	bf86      	itte	hi
 8000e00:	5d06      	ldrbhi	r6, [r0, r4]
                copy[index_copy * len + index_segment] =
 8000e02:	550e      	strbhi	r6, [r1, r4]
                copy[index_copy * len + index_segment] = 0x0;
 8000e04:	550f      	strbls	r7, [r1, r4]
        for (index_segment = 0; index_segment < len; index_segment++)
 8000e06:	3401      	adds	r4, #1
 8000e08:	42a2      	cmp	r2, r4
 8000e0a:	d1f7      	bne.n	8000dfc <copy_pulse+0x18>
    for (index_copy = 0; index_copy < PULSE_LENGTH / len; index_copy++)
 8000e0c:	3501      	adds	r5, #1
 8000e0e:	4411      	add	r1, r2
 8000e10:	4565      	cmp	r5, ip
 8000e12:	d002      	beq.n	8000e1a <copy_pulse+0x36>
        for (index_segment = 0; index_segment < len; index_segment++)
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	d1f0      	bne.n	8000dfa <copy_pulse+0x16>
 8000e18:	e7f8      	b.n	8000e0c <copy_pulse+0x28>
            }
        }
    }
}
 8000e1a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e1c:	4770      	bx	lr
 8000e1e:	4770      	bx	lr

08000e20 <concat_timecode>:
{
 8000e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e24:	b085      	sub	sp, #20
    insert_binary_into_string(&timecode[1], sec % 10, 4);
 8000e26:	4b8f      	ldr	r3, [pc, #572]	; (8001064 <concat_timecode+0x244>)
 8000e28:	f8d3 b000 	ldr.w	fp, [r3]
 8000e2c:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8001088 <concat_timecode+0x268>
 8000e30:	fba8 350b 	umull	r3, r5, r8, fp
 8000e34:	08ed      	lsrs	r5, r5, #3
 8000e36:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8000e3a:	4c8b      	ldr	r4, [pc, #556]	; (8001068 <concat_timecode+0x248>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	ebab 0141 	sub.w	r1, fp, r1, lsl #1
 8000e42:	1c60      	adds	r0, r4, #1
 8000e44:	f7ff fee0 	bl	8000c08 <insert_binary_into_string>
    insert_binary_into_string(&timecode[6], sec / 10, 3);
 8000e48:	2203      	movs	r2, #3
 8000e4a:	4629      	mov	r1, r5
 8000e4c:	1da0      	adds	r0, r4, #6
 8000e4e:	f7ff fedb 	bl	8000c08 <insert_binary_into_string>
    insert_binary_into_string(&timecode[10], min % 10, 4);
 8000e52:	4b86      	ldr	r3, [pc, #536]	; (800106c <concat_timecode+0x24c>)
 8000e54:	681e      	ldr	r6, [r3, #0]
 8000e56:	fba8 3506 	umull	r3, r5, r8, r6
 8000e5a:	08ed      	lsrs	r5, r5, #3
 8000e5c:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 8000e60:	2204      	movs	r2, #4
 8000e62:	eba6 0141 	sub.w	r1, r6, r1, lsl #1
 8000e66:	f104 000a 	add.w	r0, r4, #10
 8000e6a:	f7ff fecd 	bl	8000c08 <insert_binary_into_string>
    insert_binary_into_string(&timecode[15], min / 10, 3);
 8000e6e:	2203      	movs	r2, #3
 8000e70:	4629      	mov	r1, r5
 8000e72:	f104 000f 	add.w	r0, r4, #15
 8000e76:	f7ff fec7 	bl	8000c08 <insert_binary_into_string>
    insert_binary_into_string(&timecode[20], hour % 10, 4);
 8000e7a:	4b7d      	ldr	r3, [pc, #500]	; (8001070 <concat_timecode+0x250>)
 8000e7c:	681d      	ldr	r5, [r3, #0]
 8000e7e:	fba8 3705 	umull	r3, r7, r8, r5
 8000e82:	08ff      	lsrs	r7, r7, #3
 8000e84:	eb07 0187 	add.w	r1, r7, r7, lsl #2
 8000e88:	2204      	movs	r2, #4
 8000e8a:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
 8000e8e:	f104 0014 	add.w	r0, r4, #20
 8000e92:	f7ff feb9 	bl	8000c08 <insert_binary_into_string>
    insert_binary_into_string(&timecode[25], hour / 10, 2);
 8000e96:	2202      	movs	r2, #2
 8000e98:	4639      	mov	r1, r7
 8000e9a:	f104 0019 	add.w	r0, r4, #25
 8000e9e:	f7ff feb3 	bl	8000c08 <insert_binary_into_string>
    uint32_t day_of_year = days_in_year(year, month, day);
 8000ea2:	4b74      	ldr	r3, [pc, #464]	; (8001074 <concat_timecode+0x254>)
 8000ea4:	f8d3 9000 	ldr.w	r9, [r3]
 8000ea8:	4b73      	ldr	r3, [pc, #460]	; (8001078 <concat_timecode+0x258>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b73      	ldr	r3, [pc, #460]	; (800107c <concat_timecode+0x25c>)
 8000eae:	6819      	ldr	r1, [r3, #0]
 8000eb0:	4648      	mov	r0, r9
 8000eb2:	f7ff fe7d 	bl	8000bb0 <days_in_year>
 8000eb6:	4607      	mov	r7, r0
    insert_binary_into_string(&timecode[30], day_of_year % 10, 4);
 8000eb8:	fba8 3100 	umull	r3, r1, r8, r0
 8000ebc:	08c9      	lsrs	r1, r1, #3
 8000ebe:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000ec2:	2204      	movs	r2, #4
 8000ec4:	eba0 0141 	sub.w	r1, r0, r1, lsl #1
 8000ec8:	f104 001e 	add.w	r0, r4, #30
 8000ecc:	f7ff fe9c 	bl	8000c08 <insert_binary_into_string>
    insert_binary_into_string(&timecode[35], (day_of_year % 100) / 10, 4);
 8000ed0:	4b6b      	ldr	r3, [pc, #428]	; (8001080 <concat_timecode+0x260>)
 8000ed2:	fba3 2a07 	umull	r2, sl, r3, r7
 8000ed6:	ea4f 125a 	mov.w	r2, sl, lsr #5
 8000eda:	f04f 0a64 	mov.w	sl, #100	; 0x64
 8000ede:	9201      	str	r2, [sp, #4]
 8000ee0:	fb0a 7112 	mls	r1, sl, r2, r7
 8000ee4:	fba8 2101 	umull	r2, r1, r8, r1
 8000ee8:	2204      	movs	r2, #4
 8000eea:	08c9      	lsrs	r1, r1, #3
 8000eec:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8000ef0:	f7ff fe8a 	bl	8000c08 <insert_binary_into_string>
    insert_binary_into_string(&timecode[40], day_of_year / 100, 2);
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	9901      	ldr	r1, [sp, #4]
 8000ef8:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8000efc:	f7ff fe84 	bl	8000c08 <insert_binary_into_string>
    insert_binary_into_string(&timecode[50], year % 10, 4);
 8000f00:	fba8 2109 	umull	r2, r1, r8, r9
 8000f04:	08c9      	lsrs	r1, r1, #3
 8000f06:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8000f0a:	2204      	movs	r2, #4
 8000f0c:	eba9 0141 	sub.w	r1, r9, r1, lsl #1
 8000f10:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8000f14:	f7ff fe78 	bl	8000c08 <insert_binary_into_string>
    insert_binary_into_string(&timecode[55], (year % 100) / 10, 4);
 8000f18:	4b59      	ldr	r3, [pc, #356]	; (8001080 <concat_timecode+0x260>)
 8000f1a:	fba3 3109 	umull	r3, r1, r3, r9
 8000f1e:	0949      	lsrs	r1, r1, #5
 8000f20:	fb0a 9111 	mls	r1, sl, r1, r9
 8000f24:	fba8 3101 	umull	r3, r1, r8, r1
 8000f28:	2204      	movs	r2, #4
 8000f2a:	08c9      	lsrs	r1, r1, #3
 8000f2c:	f104 0037 	add.w	r0, r4, #55	; 0x37
 8000f30:	f7ff fe6a 	bl	8000c08 <insert_binary_into_string>
    uint32_t seconds_of_day = hour * 3600 + min * 60 + sec;
 8000f34:	ebc6 1606 	rsb	r6, r6, r6, lsl #4
 8000f38:	00b3      	lsls	r3, r6, #2
 8000f3a:	f44f 6261 	mov.w	r2, #3600	; 0xe10
 8000f3e:	fb02 3505 	mla	r5, r2, r5, r3
 8000f42:	44ab      	add	fp, r5
 8000f44:	3450      	adds	r4, #80	; 0x50
    for (uint32_t i = 0; i <= 16; i++)
 8000f46:	2300      	movs	r3, #0
        if (i < 9)
 8000f48:	2b08      	cmp	r3, #8
            timecode[80 + i] = '0' + (seconds_of_day >> i & 1);
 8000f4a:	fa2b f203 	lsr.w	r2, fp, r3
 8000f4e:	f002 0201 	and.w	r2, r2, #1
 8000f52:	f102 0230 	add.w	r2, r2, #48	; 0x30
 8000f56:	bf94      	ite	ls
 8000f58:	7022      	strbls	r2, [r4, #0]
            timecode[80 + i + 1] = '0' + (seconds_of_day >> i & 1);
 8000f5a:	7062      	strbhi	r2, [r4, #1]
    for (uint32_t i = 0; i <= 16; i++)
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	3401      	adds	r4, #1
 8000f60:	2b11      	cmp	r3, #17
 8000f62:	d1f1      	bne.n	8000f48 <concat_timecode+0x128>
    generate_sine(sine, SINE_LENGTH);
 8000f64:	2105      	movs	r1, #5
 8000f66:	a802      	add	r0, sp, #8
 8000f68:	f7ff fde2 	bl	8000b30 <generate_sine>
 8000f6c:	4e3e      	ldr	r6, [pc, #248]	; (8001068 <concat_timecode+0x248>)
 8000f6e:	1e75      	subs	r5, r6, #1
 8000f70:	4c44      	ldr	r4, [pc, #272]	; (8001084 <concat_timecode+0x264>)
 8000f72:	3663      	adds	r6, #99	; 0x63
            copy_pulse(sine, &timecode_pulse[position], SINE_LENGTH, 0);
 8000f74:	f04f 0800 	mov.w	r8, #0
 8000f78:	2705      	movs	r7, #5
 8000f7a:	e009      	b.n	8000f90 <concat_timecode+0x170>
            copy_pulse(sine, &timecode_pulse[position], SINE_LENGTH, 8);
 8000f7c:	2308      	movs	r3, #8
 8000f7e:	463a      	mov	r2, r7
 8000f80:	4621      	mov	r1, r4
 8000f82:	eb0d 0003 	add.w	r0, sp, r3
 8000f86:	f7ff ff2d 	bl	8000de4 <copy_pulse>
 8000f8a:	3432      	adds	r4, #50	; 0x32
    for (int i = 0; i < TIMECODE_LENGTH; i++)
 8000f8c:	42b5      	cmp	r5, r6
 8000f8e:	d065      	beq.n	800105c <concat_timecode+0x23c>
        switch (timecode[i])
 8000f90:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8000f94:	3b30      	subs	r3, #48	; 0x30
 8000f96:	2b20      	cmp	r3, #32
 8000f98:	d859      	bhi.n	800104e <concat_timecode+0x22e>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <concat_timecode+0x180>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08001033 	.word	0x08001033
 8000fa4:	08001041 	.word	0x08001041
 8000fa8:	0800104f 	.word	0x0800104f
 8000fac:	0800104f 	.word	0x0800104f
 8000fb0:	0800104f 	.word	0x0800104f
 8000fb4:	0800104f 	.word	0x0800104f
 8000fb8:	0800104f 	.word	0x0800104f
 8000fbc:	0800104f 	.word	0x0800104f
 8000fc0:	0800104f 	.word	0x0800104f
 8000fc4:	0800104f 	.word	0x0800104f
 8000fc8:	0800104f 	.word	0x0800104f
 8000fcc:	0800104f 	.word	0x0800104f
 8000fd0:	0800104f 	.word	0x0800104f
 8000fd4:	0800104f 	.word	0x0800104f
 8000fd8:	0800104f 	.word	0x0800104f
 8000fdc:	0800104f 	.word	0x0800104f
 8000fe0:	0800104f 	.word	0x0800104f
 8000fe4:	0800104f 	.word	0x0800104f
 8000fe8:	0800104f 	.word	0x0800104f
 8000fec:	0800104f 	.word	0x0800104f
 8000ff0:	0800104f 	.word	0x0800104f
 8000ff4:	0800104f 	.word	0x0800104f
 8000ff8:	0800104f 	.word	0x0800104f
 8000ffc:	0800104f 	.word	0x0800104f
 8001000:	0800104f 	.word	0x0800104f
 8001004:	08001025 	.word	0x08001025
 8001008:	0800104f 	.word	0x0800104f
 800100c:	0800104f 	.word	0x0800104f
 8001010:	0800104f 	.word	0x0800104f
 8001014:	0800104f 	.word	0x0800104f
 8001018:	0800104f 	.word	0x0800104f
 800101c:	0800104f 	.word	0x0800104f
 8001020:	08000f7d 	.word	0x08000f7d
            copy_pulse(sine, &timecode_pulse[position], SINE_LENGTH, 1);
 8001024:	2301      	movs	r3, #1
 8001026:	463a      	mov	r2, r7
 8001028:	4621      	mov	r1, r4
 800102a:	a802      	add	r0, sp, #8
 800102c:	f7ff feda 	bl	8000de4 <copy_pulse>
            break;
 8001030:	e7ab      	b.n	8000f8a <concat_timecode+0x16a>
            copy_pulse(sine, &timecode_pulse[position], SINE_LENGTH, 2);
 8001032:	2302      	movs	r3, #2
 8001034:	463a      	mov	r2, r7
 8001036:	4621      	mov	r1, r4
 8001038:	a802      	add	r0, sp, #8
 800103a:	f7ff fed3 	bl	8000de4 <copy_pulse>
            break;
 800103e:	e7a4      	b.n	8000f8a <concat_timecode+0x16a>
            copy_pulse(sine, &timecode_pulse[position], SINE_LENGTH, 5);
 8001040:	463b      	mov	r3, r7
 8001042:	463a      	mov	r2, r7
 8001044:	4621      	mov	r1, r4
 8001046:	a802      	add	r0, sp, #8
 8001048:	f7ff fecc 	bl	8000de4 <copy_pulse>
            break;
 800104c:	e79d      	b.n	8000f8a <concat_timecode+0x16a>
            copy_pulse(sine, &timecode_pulse[position], SINE_LENGTH, 0);
 800104e:	4643      	mov	r3, r8
 8001050:	463a      	mov	r2, r7
 8001052:	4621      	mov	r1, r4
 8001054:	a802      	add	r0, sp, #8
 8001056:	f7ff fec5 	bl	8000de4 <copy_pulse>
 800105a:	e796      	b.n	8000f8a <concat_timecode+0x16a>
}
 800105c:	b005      	add	sp, #20
 800105e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001062:	bf00      	nop
 8001064:	2000010c 	.word	0x2000010c
 8001068:	20000008 	.word	0x20000008
 800106c:	20000108 	.word	0x20000108
 8001070:	20000104 	.word	0x20000104
 8001074:	20000070 	.word	0x20000070
 8001078:	20000000 	.word	0x20000000
 800107c:	20000004 	.word	0x20000004
 8001080:	51eb851f 	.word	0x51eb851f
 8001084:	20000134 	.word	0x20000134
 8001088:	cccccccd 	.word	0xcccccccd

0800108c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800108c:	b530      	push	{r4, r5, lr}
 800108e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001090:	2224      	movs	r2, #36	; 0x24
 8001092:	2100      	movs	r1, #0
 8001094:	a80d      	add	r0, sp, #52	; 0x34
 8001096:	f002 fbeb 	bl	8003870 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800109a:	2400      	movs	r4, #0
 800109c:	9407      	str	r4, [sp, #28]
 800109e:	9408      	str	r4, [sp, #32]
 80010a0:	9409      	str	r4, [sp, #36]	; 0x24
 80010a2:	940a      	str	r4, [sp, #40]	; 0x28
 80010a4:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a6:	9400      	str	r4, [sp, #0]
 80010a8:	9401      	str	r4, [sp, #4]
 80010aa:	9402      	str	r4, [sp, #8]
 80010ac:	9403      	str	r4, [sp, #12]
 80010ae:	9404      	str	r4, [sp, #16]
 80010b0:	9405      	str	r4, [sp, #20]
 80010b2:	9406      	str	r4, [sp, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010b4:	2302      	movs	r3, #2
 80010b6:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010b8:	2501      	movs	r5, #1
 80010ba:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010bc:	2310      	movs	r3, #16
 80010be:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010c0:	a80c      	add	r0, sp, #48	; 0x30
 80010c2:	f001 f8c5 	bl	8002250 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010c6:	230f      	movs	r3, #15
 80010c8:	9307      	str	r3, [sp, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010ca:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010cc:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ce:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010d0:	940b      	str	r4, [sp, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80010d2:	4621      	mov	r1, r4
 80010d4:	a807      	add	r0, sp, #28
 80010d6:	f001 fbff 	bl	80028d8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80010da:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80010dc:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010de:	4668      	mov	r0, sp
 80010e0:	f001 fce8 	bl	8002ab4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80010e4:	b017      	add	sp, #92	; 0x5c
 80010e6:	bd30      	pop	{r4, r5, pc}

080010e8 <main>:
{
 80010e8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 80010ec:	b093      	sub	sp, #76	; 0x4c
    concat_timecode();
 80010ee:	f7ff fe97 	bl	8000e20 <concat_timecode>
  HAL_Init();
 80010f2:	f000 fcc5 	bl	8001a80 <HAL_Init>
  SystemClock_Config();
 80010f6:	f7ff ffc9 	bl	800108c <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	2400      	movs	r4, #0
 80010fc:	940b      	str	r4, [sp, #44]	; 0x2c
 80010fe:	940c      	str	r4, [sp, #48]	; 0x30
 8001100:	940d      	str	r4, [sp, #52]	; 0x34
 8001102:	940e      	str	r4, [sp, #56]	; 0x38
 8001104:	940f      	str	r4, [sp, #60]	; 0x3c

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001106:	4da8      	ldr	r5, [pc, #672]	; (80013a8 <main+0x2c0>)
 8001108:	696b      	ldr	r3, [r5, #20]
 800110a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800110e:	616b      	str	r3, [r5, #20]
 8001110:	696b      	ldr	r3, [r5, #20]
 8001112:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001116:	9304      	str	r3, [sp, #16]
 8001118:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800111a:	696b      	ldr	r3, [r5, #20]
 800111c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001120:	616b      	str	r3, [r5, #20]
 8001122:	696b      	ldr	r3, [r5, #20]
 8001124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001128:	9305      	str	r3, [sp, #20]
 800112a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800112c:	696b      	ldr	r3, [r5, #20]
 800112e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001132:	616b      	str	r3, [r5, #20]
 8001134:	696b      	ldr	r3, [r5, #20]
 8001136:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800113a:	9306      	str	r3, [sp, #24]
 800113c:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800113e:	696b      	ldr	r3, [r5, #20]
 8001140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001144:	616b      	str	r3, [r5, #20]
 8001146:	696b      	ldr	r3, [r5, #20]
 8001148:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800114c:	9307      	str	r3, [sp, #28]
 800114e:	9b07      	ldr	r3, [sp, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8001150:	4e96      	ldr	r6, [pc, #600]	; (80013ac <main+0x2c4>)
 8001152:	4622      	mov	r2, r4
 8001154:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001158:	4630      	mov	r0, r6
 800115a:	f001 f865 	bl	8002228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800115e:	f04f 0801 	mov.w	r8, #1
 8001162:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	4f92      	ldr	r7, [pc, #584]	; (80013b0 <main+0x2c8>)
 8001168:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116a:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800116c:	a90b      	add	r1, sp, #44	; 0x2c
 800116e:	4630      	mov	r0, r6
 8001170:	f000 ff92 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001178:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001180:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	a90b      	add	r1, sp, #44	; 0x2c
 8001184:	4630      	mov	r0, r6
 8001186:	f000 ff87 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800118a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800118e:	930b      	str	r3, [sp, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001190:	970c      	str	r7, [sp, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	940d      	str	r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001194:	a90b      	add	r1, sp, #44	; 0x2c
 8001196:	4887      	ldr	r0, [pc, #540]	; (80013b4 <main+0x2cc>)
 8001198:	f000 ff7e 	bl	8002098 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800119c:	696b      	ldr	r3, [r5, #20]
 800119e:	ea43 0308 	orr.w	r3, r3, r8
 80011a2:	616b      	str	r3, [r5, #20]
 80011a4:	696b      	ldr	r3, [r5, #20]
 80011a6:	ea03 0308 	and.w	r3, r3, r8
 80011aa:	9303      	str	r3, [sp, #12]
 80011ac:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80011ae:	4622      	mov	r2, r4
 80011b0:	4621      	mov	r1, r4
 80011b2:	200d      	movs	r0, #13
 80011b4:	f000 fc9a 	bl	8001aec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80011b8:	200d      	movs	r0, #13
 80011ba:	f000 fcc9 	bl	8001b50 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 80011be:	4d7e      	ldr	r5, [pc, #504]	; (80013b8 <main+0x2d0>)
 80011c0:	4b7e      	ldr	r3, [pc, #504]	; (80013bc <main+0x2d4>)
 80011c2:	602b      	str	r3, [r5, #0]
  huart2.Init.BaudRate = 9600;
 80011c4:	f44f 5816 	mov.w	r8, #9600	; 0x2580
 80011c8:	f8c5 8004 	str.w	r8, [r5, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011cc:	60ac      	str	r4, [r5, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011ce:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011d0:	612c      	str	r4, [r5, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011d2:	270c      	movs	r7, #12
 80011d4:	616f      	str	r7, [r5, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011d6:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d8:	61ec      	str	r4, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011da:	622c      	str	r4, [r5, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011dc:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011de:	4628      	mov	r0, r5
 80011e0:	f002 fad9 	bl	8003796 <HAL_UART_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_RXNE);
 80011e4:	682a      	ldr	r2, [r5, #0]
 80011e6:	6813      	ldr	r3, [r2, #0]
 80011e8:	f043 0301 	orr.w	r3, r3, #1
 80011ec:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_TC);
 80011ee:	682a      	ldr	r2, [r5, #0]
 80011f0:	6853      	ldr	r3, [r2, #4]
 80011f2:	f043 0301 	orr.w	r3, r3, #1
 80011f6:	6053      	str	r3, [r2, #4]
  huart1.Instance = USART1;
 80011f8:	4e71      	ldr	r6, [pc, #452]	; (80013c0 <main+0x2d8>)
 80011fa:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <main+0x2dc>)
 80011fc:	6033      	str	r3, [r6, #0]
  huart1.Init.BaudRate = 9600;
 80011fe:	f8c6 8004 	str.w	r8, [r6, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001202:	60b4      	str	r4, [r6, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001204:	60f4      	str	r4, [r6, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001206:	6134      	str	r4, [r6, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001208:	6177      	str	r7, [r6, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	61b4      	str	r4, [r6, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800120c:	61f4      	str	r4, [r6, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800120e:	6234      	str	r4, [r6, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001210:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001212:	4630      	mov	r0, r6
 8001214:	f002 fabf 	bl	8003796 <HAL_UART_Init>
  DAC_ChannelConfTypeDef sConfig = {0};
 8001218:	940b      	str	r4, [sp, #44]	; 0x2c
 800121a:	940c      	str	r4, [sp, #48]	; 0x30
 800121c:	940d      	str	r4, [sp, #52]	; 0x34
  hdac1.Instance = DAC1;
 800121e:	4f6a      	ldr	r7, [pc, #424]	; (80013c8 <main+0x2e0>)
 8001220:	4b6a      	ldr	r3, [pc, #424]	; (80013cc <main+0x2e4>)
 8001222:	603b      	str	r3, [r7, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001224:	4638      	mov	r0, r7
 8001226:	f000 fcb7 	bl	8001b98 <HAL_DAC_Init>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800122a:	f04f 0b04 	mov.w	fp, #4
 800122e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8001232:	f04f 0a02 	mov.w	sl, #2
 8001236:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800123a:	4622      	mov	r2, r4
 800123c:	a90b      	add	r1, sp, #44	; 0x2c
 800123e:	4638      	mov	r0, r7
 8001240:	f000 fd78 	bl	8001d34 <HAL_DAC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001244:	940b      	str	r4, [sp, #44]	; 0x2c
 8001246:	940c      	str	r4, [sp, #48]	; 0x30
 8001248:	940d      	str	r4, [sp, #52]	; 0x34
 800124a:	940e      	str	r4, [sp, #56]	; 0x38
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800124c:	9408      	str	r4, [sp, #32]
 800124e:	9409      	str	r4, [sp, #36]	; 0x24
 8001250:	940a      	str	r4, [sp, #40]	; 0x28
  htim2.Instance = TIM2;
 8001252:	4f5f      	ldr	r7, [pc, #380]	; (80013d0 <main+0x2e8>)
 8001254:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001258:	603b      	str	r3, [r7, #0]
  htim2.Init.Prescaler = 1999;
 800125a:	f240 73cf 	movw	r3, #1999	; 0x7cf
 800125e:	607b      	str	r3, [r7, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001260:	60bc      	str	r4, [r7, #8]
  htim2.Init.Period = 1999;
 8001262:	60fb      	str	r3, [r7, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001264:	613c      	str	r4, [r7, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001266:	61bc      	str	r4, [r7, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001268:	4638      	mov	r0, r7
 800126a:	f001 fe71 	bl	8002f50 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800126e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001272:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001274:	a90b      	add	r1, sp, #44	; 0x2c
 8001276:	4638      	mov	r0, r7
 8001278:	f001 fe90 	bl	8002f9c <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800127c:	f04f 0920 	mov.w	r9, #32
 8001280:	f8cd 9020 	str.w	r9, [sp, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001284:	940a      	str	r4, [sp, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001286:	eb0d 0109 	add.w	r1, sp, r9
 800128a:	4638      	mov	r0, r7
 800128c:	f001 ff2a 	bl	80030e4 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	940b      	str	r4, [sp, #44]	; 0x2c
 8001292:	940c      	str	r4, [sp, #48]	; 0x30
 8001294:	940d      	str	r4, [sp, #52]	; 0x34
  htim6.Instance = TIM6;
 8001296:	f8df 8160 	ldr.w	r8, [pc, #352]	; 80013f8 <main+0x310>
 800129a:	4b4e      	ldr	r3, [pc, #312]	; (80013d4 <main+0x2ec>)
 800129c:	f8c8 3000 	str.w	r3, [r8]
  htim6.Init.Prescaler = 7;
 80012a0:	2307      	movs	r3, #7
 80012a2:	f8c8 3004 	str.w	r3, [r8, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	f8c8 4008 	str.w	r4, [r8, #8]
  htim6.Init.Period = 200;
 80012aa:	23c8      	movs	r3, #200	; 0xc8
 80012ac:	f8c8 300c 	str.w	r3, [r8, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b0:	f8c8 4018 	str.w	r4, [r8, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012b4:	4640      	mov	r0, r8
 80012b6:	f001 fe4b 	bl	8002f50 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012ba:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012be:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012c0:	a90b      	add	r1, sp, #44	; 0x2c
 80012c2:	4640      	mov	r0, r8
 80012c4:	f001 ff0e 	bl	80030e4 <HAL_TIMEx_MasterConfigSynchronization>
  DAC_ChannelConfTypeDef sConfig = {0};
 80012c8:	940b      	str	r4, [sp, #44]	; 0x2c
 80012ca:	940c      	str	r4, [sp, #48]	; 0x30
 80012cc:	940d      	str	r4, [sp, #52]	; 0x34
  hdac2.Instance = DAC2;
 80012ce:	f8df 912c 	ldr.w	r9, [pc, #300]	; 80013fc <main+0x314>
 80012d2:	4b41      	ldr	r3, [pc, #260]	; (80013d8 <main+0x2f0>)
 80012d4:	f8c9 3000 	str.w	r3, [r9]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 80012d8:	4648      	mov	r0, r9
 80012da:	f000 fc5d 	bl	8001b98 <HAL_DAC_Init>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80012de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 80012e2:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80012e6:	4622      	mov	r2, r4
 80012e8:	a90b      	add	r1, sp, #44	; 0x2c
 80012ea:	4648      	mov	r0, r9
 80012ec:	f000 fd22 	bl	8001d34 <HAL_DAC_ConfigChannel>
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80012f0:	4622      	mov	r2, r4
 80012f2:	4621      	mov	r1, r4
 80012f4:	2025      	movs	r0, #37	; 0x25
 80012f6:	f000 fbf9 	bl	8001aec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80012fa:	2025      	movs	r0, #37	; 0x25
 80012fc:	f000 fc28 	bl	8001b50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001300:	4622      	mov	r2, r4
 8001302:	4621      	mov	r1, r4
 8001304:	2026      	movs	r0, #38	; 0x26
 8001306:	f000 fbf1 	bl	8001aec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 800130a:	2026      	movs	r0, #38	; 0x26
 800130c:	f000 fc20 	bl	8001b50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001310:	4622      	mov	r2, r4
 8001312:	4621      	mov	r1, r4
 8001314:	2006      	movs	r0, #6
 8001316:	f000 fbe9 	bl	8001aec <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800131a:	2006      	movs	r0, #6
 800131c:	f000 fc18 	bl	8001b50 <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 8001320:	682a      	ldr	r2, [r5, #0]
 8001322:	6813      	ldr	r3, [r2, #0]
 8001324:	f043 0320 	orr.w	r3, r3, #32
 8001328:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 800132a:	682a      	ldr	r2, [r5, #0]
 800132c:	6813      	ldr	r3, [r2, #0]
 800132e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001332:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001334:	6832      	ldr	r2, [r6, #0]
 8001336:	6813      	ldr	r3, [r2, #0]
 8001338:	f043 0320 	orr.w	r3, r3, #32
 800133c:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 800133e:	6832      	ldr	r2, [r6, #0]
 8001340:	6813      	ldr	r3, [r2, #0]
 8001342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001346:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 8001348:	4640      	mov	r0, r8
 800134a:	f001 fc87 	bl	8002c5c <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);
 800134e:	4638      	mov	r0, r7
 8001350:	f001 fc84 	bl	8002c5c <HAL_TIM_Base_Start_IT>
    generate_sine(test_sine,SINE_LENGTH);
 8001354:	2105      	movs	r1, #5
 8001356:	a810      	add	r0, sp, #64	; 0x40
 8001358:	f7ff fbea 	bl	8000b30 <generate_sine>
    HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, test_sine, SINE_LENGTH, DAC_ALIGN_8B_R);
 800135c:	2308      	movs	r3, #8
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2305      	movs	r3, #5
 8001362:	aa10      	add	r2, sp, #64	; 0x40
 8001364:	4621      	mov	r1, r4
 8001366:	4648      	mov	r0, r9
 8001368:	f000 fc6e 	bl	8001c48 <HAL_DAC_Start_DMA>
        if (PC_UART == DONE)
 800136c:	4c1b      	ldr	r4, [pc, #108]	; (80013dc <main+0x2f4>)
            if (is_same_string("ping", pc_message, 4))
 800136e:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8001400 <main+0x318>
 8001372:	4e1b      	ldr	r6, [pc, #108]	; (80013e0 <main+0x2f8>)
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "query\n", 6);
 8001374:	462f      	mov	r7, r5
        if (GPS_UART == DONE)
 8001376:	4d1b      	ldr	r5, [pc, #108]	; (80013e4 <main+0x2fc>)
 8001378:	e04a      	b.n	8001410 <main+0x328>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "pong\n", 5);
 800137a:	2205      	movs	r2, #5
 800137c:	491a      	ldr	r1, [pc, #104]	; (80013e8 <main+0x300>)
 800137e:	4638      	mov	r0, r7
 8001380:	f001 ff42 	bl	8003208 <HAL_UART_Transmit_IT>
 8001384:	e04f      	b.n	8001426 <main+0x33e>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) timecode,
 8001386:	2264      	movs	r2, #100	; 0x64
 8001388:	4918      	ldr	r1, [pc, #96]	; (80013ec <main+0x304>)
 800138a:	4638      	mov	r0, r7
 800138c:	f001 ff3c 	bl	8003208 <HAL_UART_Transmit_IT>
 8001390:	e050      	b.n	8001434 <main+0x34c>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "query\n", 6);
 8001392:	2206      	movs	r2, #6
 8001394:	4916      	ldr	r1, [pc, #88]	; (80013f0 <main+0x308>)
 8001396:	4638      	mov	r0, r7
 8001398:	f001 ff36 	bl	8003208 <HAL_UART_Transmit_IT>
                HAL_UART_Transmit_IT(&huart1, (uint8_t*) "$PMTK414*33\r\n", 13);
 800139c:	220d      	movs	r2, #13
 800139e:	4915      	ldr	r1, [pc, #84]	; (80013f4 <main+0x30c>)
 80013a0:	4807      	ldr	r0, [pc, #28]	; (80013c0 <main+0x2d8>)
 80013a2:	f001 ff31 	bl	8003208 <HAL_UART_Transmit_IT>
 80013a6:	e04c      	b.n	8001442 <main+0x35a>
 80013a8:	40021000 	.word	0x40021000
 80013ac:	48000400 	.word	0x48000400
 80013b0:	10110000 	.word	0x10110000
 80013b4:	48000800 	.word	0x48000800
 80013b8:	2000166c 	.word	0x2000166c
 80013bc:	40004400 	.word	0x40004400
 80013c0:	20001528 	.word	0x20001528
 80013c4:	40013800 	.word	0x40013800
 80013c8:	200014d0 	.word	0x200014d0
 80013cc:	40007400 	.word	0x40007400
 80013d0:	200015e8 	.word	0x200015e8
 80013d4:	40001000 	.word	0x40001000
 80013d8:	40009800 	.word	0x40009800
 80013dc:	20000119 	.word	0x20000119
 80013e0:	200016ec 	.word	0x200016ec
 80013e4:	20000118 	.word	0x20000118
 80013e8:	08005a08 	.word	0x08005a08
 80013ec:	20000008 	.word	0x20000008
 80013f0:	08005a24 	.word	0x08005a24
 80013f4:	08005a2c 	.word	0x08005a2c
 80013f8:	200015a8 	.word	0x200015a8
 80013fc:	200014bc 	.word	0x200014bc
 8001400:	08005a00 	.word	0x08005a00
            PC_UART = IDLE;
 8001404:	2300      	movs	r3, #0
 8001406:	7023      	strb	r3, [r4, #0]
        if (GPS_UART == DONE)
 8001408:	782b      	ldrb	r3, [r5, #0]
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d025      	beq.n	800145c <main+0x374>
        if (PC_UART == DONE)
 8001410:	7823      	ldrb	r3, [r4, #0]
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d1f7      	bne.n	8001408 <main+0x320>
            if (is_same_string("ping", pc_message, 4))
 8001418:	2204      	movs	r2, #4
 800141a:	4631      	mov	r1, r6
 800141c:	4640      	mov	r0, r8
 800141e:	f000 fabb 	bl	8001998 <is_same_string>
 8001422:	2800      	cmp	r0, #0
 8001424:	d1a9      	bne.n	800137a <main+0x292>
            if (is_same_string("send", pc_message, 4))
 8001426:	2204      	movs	r2, #4
 8001428:	4631      	mov	r1, r6
 800142a:	481a      	ldr	r0, [pc, #104]	; (8001494 <main+0x3ac>)
 800142c:	f000 fab4 	bl	8001998 <is_same_string>
 8001430:	2800      	cmp	r0, #0
 8001432:	d1a8      	bne.n	8001386 <main+0x29e>
            if (is_same_string("NMEAquery", pc_message, 9))
 8001434:	2209      	movs	r2, #9
 8001436:	4631      	mov	r1, r6
 8001438:	4817      	ldr	r0, [pc, #92]	; (8001498 <main+0x3b0>)
 800143a:	f000 faad 	bl	8001998 <is_same_string>
 800143e:	2800      	cmp	r0, #0
 8001440:	d1a7      	bne.n	8001392 <main+0x2aa>
            if (is_same_string("NMEAset", pc_message, 7))
 8001442:	2207      	movs	r2, #7
 8001444:	4631      	mov	r1, r6
 8001446:	4815      	ldr	r0, [pc, #84]	; (800149c <main+0x3b4>)
 8001448:	f000 faa6 	bl	8001998 <is_same_string>
 800144c:	2800      	cmp	r0, #0
 800144e:	d0d9      	beq.n	8001404 <main+0x31c>
                HAL_UART_Transmit_IT(&huart1,
 8001450:	2233      	movs	r2, #51	; 0x33
 8001452:	4913      	ldr	r1, [pc, #76]	; (80014a0 <main+0x3b8>)
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <main+0x3bc>)
 8001456:	f001 fed7 	bl	8003208 <HAL_UART_Transmit_IT>
 800145a:	e7d3      	b.n	8001404 <main+0x31c>
            parse_nmea(gps_message,gps_message_length);
 800145c:	f8df a048 	ldr.w	sl, [pc, #72]	; 80014a8 <main+0x3c0>
 8001460:	f8da 1000 	ldr.w	r1, [sl]
 8001464:	f8df 9044 	ldr.w	r9, [pc, #68]	; 80014ac <main+0x3c4>
 8001468:	4648      	mov	r0, r9
 800146a:	f7ff fc33 	bl	8000cd4 <parse_nmea>
            gps_message[gps_message_length] = '\n';
 800146e:	f8da 3000 	ldr.w	r3, [sl]
 8001472:	220a      	movs	r2, #10
 8001474:	f809 2003 	strb.w	r2, [r9, r3]
            HAL_UART_Transmit_IT(&huart2, (uint8_t*) gps_message,
 8001478:	f8da 2000 	ldr.w	r2, [sl]
 800147c:	3201      	adds	r2, #1
 800147e:	b292      	uxth	r2, r2
 8001480:	4649      	mov	r1, r9
 8001482:	4638      	mov	r0, r7
 8001484:	f001 fec0 	bl	8003208 <HAL_UART_Transmit_IT>
            concat_timecode();
 8001488:	f7ff fcca 	bl	8000e20 <concat_timecode>
            GPS_UART = IDLE;
 800148c:	2300      	movs	r3, #0
 800148e:	702b      	strb	r3, [r5, #0]
 8001490:	e7be      	b.n	8001410 <main+0x328>
 8001492:	bf00      	nop
 8001494:	08005a10 	.word	0x08005a10
 8001498:	08005a18 	.word	0x08005a18
 800149c:	08005a3c 	.word	0x08005a3c
 80014a0:	08005a44 	.word	0x08005a44
 80014a4:	20001528 	.word	0x20001528
 80014a8:	20000124 	.word	0x20000124
 80014ac:	20001750 	.word	0x20001750

080014b0 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014b0:	4770      	bx	lr
	...

080014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014b4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_MspInit+0x2c>)
 80014b8:	699a      	ldr	r2, [r3, #24]
 80014ba:	f042 0201 	orr.w	r2, r2, #1
 80014be:	619a      	str	r2, [r3, #24]
 80014c0:	699a      	ldr	r2, [r3, #24]
 80014c2:	f002 0201 	and.w	r2, r2, #1
 80014c6:	9200      	str	r2, [sp, #0]
 80014c8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ca:	69da      	ldr	r2, [r3, #28]
 80014cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014d0:	61da      	str	r2, [r3, #28]
 80014d2:	69db      	ldr	r3, [r3, #28]
 80014d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d8:	9301      	str	r3, [sp, #4]
 80014da:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014dc:	b002      	add	sp, #8
 80014de:	4770      	bx	lr
 80014e0:	40021000 	.word	0x40021000

080014e4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80014e4:	b530      	push	{r4, r5, lr}
 80014e6:	b08b      	sub	sp, #44	; 0x2c
 80014e8:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	2300      	movs	r3, #0
 80014ec:	9305      	str	r3, [sp, #20]
 80014ee:	9306      	str	r3, [sp, #24]
 80014f0:	9307      	str	r3, [sp, #28]
 80014f2:	9308      	str	r3, [sp, #32]
 80014f4:	9309      	str	r3, [sp, #36]	; 0x24
  if(hdac->Instance==DAC1)
 80014f6:	6803      	ldr	r3, [r0, #0]
 80014f8:	4a47      	ldr	r2, [pc, #284]	; (8001618 <HAL_DAC_MspInit+0x134>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d004      	beq.n	8001508 <HAL_DAC_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(hdac->Instance==DAC2)
 80014fe:	4a47      	ldr	r2, [pc, #284]	; (800161c <HAL_DAC_MspInit+0x138>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d044      	beq.n	800158e <HAL_DAC_MspInit+0xaa>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8001504:	b00b      	add	sp, #44	; 0x2c
 8001506:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001508:	4b45      	ldr	r3, [pc, #276]	; (8001620 <HAL_DAC_MspInit+0x13c>)
 800150a:	69da      	ldr	r2, [r3, #28]
 800150c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001510:	61da      	str	r2, [r3, #28]
 8001512:	69da      	ldr	r2, [r3, #28]
 8001514:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001518:	9201      	str	r2, [sp, #4]
 800151a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001522:	615a      	str	r2, [r3, #20]
 8001524:	695b      	ldr	r3, [r3, #20]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	9302      	str	r3, [sp, #8]
 800152c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800152e:	2510      	movs	r5, #16
 8001530:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001532:	2303      	movs	r3, #3
 8001534:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001536:	a905      	add	r1, sp, #20
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f000 fdac 	bl	8002098 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001540:	4838      	ldr	r0, [pc, #224]	; (8001624 <HAL_DAC_MspInit+0x140>)
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <HAL_DAC_MspInit+0x144>)
 8001544:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001546:	6045      	str	r5, [r0, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	6083      	str	r3, [r0, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800154c:	2280      	movs	r2, #128	; 0x80
 800154e:	60c2      	str	r2, [r0, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001550:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001554:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001556:	6143      	str	r3, [r0, #20]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8001558:	6183      	str	r3, [r0, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800155a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800155e:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001560:	f000 fc74 	bl	8001e4c <HAL_DMA_Init>
 8001564:	b980      	cbnz	r0, 8001588 <HAL_DAC_MspInit+0xa4>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8001566:	4a31      	ldr	r2, [pc, #196]	; (800162c <HAL_DAC_MspInit+0x148>)
 8001568:	6813      	ldr	r3, [r2, #0]
 800156a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800156e:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001570:	4b2c      	ldr	r3, [pc, #176]	; (8001624 <HAL_DAC_MspInit+0x140>)
 8001572:	60a3      	str	r3, [r4, #8]
 8001574:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8001576:	2200      	movs	r2, #0
 8001578:	4611      	mov	r1, r2
 800157a:	2036      	movs	r0, #54	; 0x36
 800157c:	f000 fab6 	bl	8001aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001580:	2036      	movs	r0, #54	; 0x36
 8001582:	f000 fae5 	bl	8001b50 <HAL_NVIC_EnableIRQ>
 8001586:	e7bd      	b.n	8001504 <HAL_DAC_MspInit+0x20>
      Error_Handler();
 8001588:	f7ff ff92 	bl	80014b0 <Error_Handler>
 800158c:	e7eb      	b.n	8001566 <HAL_DAC_MspInit+0x82>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_DAC_MspInit+0x13c>)
 8001590:	69da      	ldr	r2, [r3, #28]
 8001592:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001596:	61da      	str	r2, [r3, #28]
 8001598:	69da      	ldr	r2, [r3, #28]
 800159a:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 800159e:	9203      	str	r2, [sp, #12]
 80015a0:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a2:	695a      	ldr	r2, [r3, #20]
 80015a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015a8:	615a      	str	r2, [r3, #20]
 80015aa:	695b      	ldr	r3, [r3, #20]
 80015ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b0:	9304      	str	r3, [sp, #16]
 80015b2:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015b4:	2340      	movs	r3, #64	; 0x40
 80015b6:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015b8:	2303      	movs	r3, #3
 80015ba:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	a905      	add	r1, sp, #20
 80015be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015c2:	f000 fd69 	bl	8002098 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 80015c6:	481a      	ldr	r0, [pc, #104]	; (8001630 <HAL_DAC_MspInit+0x14c>)
 80015c8:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <HAL_DAC_MspInit+0x150>)
 80015ca:	6003      	str	r3, [r0, #0]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015cc:	2310      	movs	r3, #16
 80015ce:	6043      	str	r3, [r0, #4]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015d0:	2300      	movs	r3, #0
 80015d2:	6083      	str	r3, [r0, #8]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015d4:	2280      	movs	r2, #128	; 0x80
 80015d6:	60c2      	str	r2, [r0, #12]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015dc:	6102      	str	r2, [r0, #16]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015de:	6143      	str	r3, [r0, #20]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80015e0:	2320      	movs	r3, #32
 80015e2:	6183      	str	r3, [r0, #24]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80015e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e8:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80015ea:	f000 fc2f 	bl	8001e4c <HAL_DMA_Init>
 80015ee:	b980      	cbnz	r0, 8001612 <HAL_DAC_MspInit+0x12e>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_DAC2_CH1_DMA1_CH5);
 80015f0:	4a0e      	ldr	r2, [pc, #56]	; (800162c <HAL_DAC_MspInit+0x148>)
 80015f2:	6813      	ldr	r3, [r2, #0]
 80015f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015f8:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 80015fa:	4b0d      	ldr	r3, [pc, #52]	; (8001630 <HAL_DAC_MspInit+0x14c>)
 80015fc:	60a3      	str	r3, [r4, #8]
 80015fe:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8001600:	2200      	movs	r2, #0
 8001602:	4611      	mov	r1, r2
 8001604:	2037      	movs	r0, #55	; 0x37
 8001606:	f000 fa71 	bl	8001aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 800160a:	2037      	movs	r0, #55	; 0x37
 800160c:	f000 faa0 	bl	8001b50 <HAL_NVIC_EnableIRQ>
}
 8001610:	e778      	b.n	8001504 <HAL_DAC_MspInit+0x20>
      Error_Handler();
 8001612:	f7ff ff4d 	bl	80014b0 <Error_Handler>
 8001616:	e7eb      	b.n	80015f0 <HAL_DAC_MspInit+0x10c>
 8001618:	40007400 	.word	0x40007400
 800161c:	40009800 	.word	0x40009800
 8001620:	40021000 	.word	0x40021000
 8001624:	200014e4 	.word	0x200014e4
 8001628:	40020030 	.word	0x40020030
 800162c:	40010000 	.word	0x40010000
 8001630:	20001628 	.word	0x20001628
 8001634:	40020058 	.word	0x40020058

08001638 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001638:	b500      	push	{lr}
 800163a:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 800163c:	6803      	ldr	r3, [r0, #0]
 800163e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001642:	d005      	beq.n	8001650 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001644:	4a16      	ldr	r2, [pc, #88]	; (80016a0 <HAL_TIM_Base_MspInit+0x68>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d016      	beq.n	8001678 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800164a:	b003      	add	sp, #12
 800164c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001650:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001654:	69da      	ldr	r2, [r3, #28]
 8001656:	f042 0201 	orr.w	r2, r2, #1
 800165a:	61da      	str	r2, [r3, #28]
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 0301 	and.w	r3, r3, #1
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	4611      	mov	r1, r2
 800166a:	201c      	movs	r0, #28
 800166c:	f000 fa3e 	bl	8001aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001670:	201c      	movs	r0, #28
 8001672:	f000 fa6d 	bl	8001b50 <HAL_NVIC_EnableIRQ>
 8001676:	e7e8      	b.n	800164a <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001678:	4b0a      	ldr	r3, [pc, #40]	; (80016a4 <HAL_TIM_Base_MspInit+0x6c>)
 800167a:	69da      	ldr	r2, [r3, #28]
 800167c:	f042 0210 	orr.w	r2, r2, #16
 8001680:	61da      	str	r2, [r3, #28]
 8001682:	69db      	ldr	r3, [r3, #28]
 8001684:	f003 0310 	and.w	r3, r3, #16
 8001688:	9301      	str	r3, [sp, #4]
 800168a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800168c:	2200      	movs	r2, #0
 800168e:	4611      	mov	r1, r2
 8001690:	2036      	movs	r0, #54	; 0x36
 8001692:	f000 fa2b 	bl	8001aec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8001696:	2036      	movs	r0, #54	; 0x36
 8001698:	f000 fa5a 	bl	8001b50 <HAL_NVIC_EnableIRQ>
}
 800169c:	e7d5      	b.n	800164a <HAL_TIM_Base_MspInit+0x12>
 800169e:	bf00      	nop
 80016a0:	40001000 	.word	0x40001000
 80016a4:	40021000 	.word	0x40021000

080016a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a8:	b500      	push	{lr}
 80016aa:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	2300      	movs	r3, #0
 80016ae:	9305      	str	r3, [sp, #20]
 80016b0:	9306      	str	r3, [sp, #24]
 80016b2:	9307      	str	r3, [sp, #28]
 80016b4:	9308      	str	r3, [sp, #32]
 80016b6:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 80016b8:	6803      	ldr	r3, [r0, #0]
 80016ba:	4a25      	ldr	r2, [pc, #148]	; (8001750 <HAL_UART_MspInit+0xa8>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d005      	beq.n	80016cc <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80016c0:	4a24      	ldr	r2, [pc, #144]	; (8001754 <HAL_UART_MspInit+0xac>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d022      	beq.n	800170c <HAL_UART_MspInit+0x64>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016c6:	b00b      	add	sp, #44	; 0x2c
 80016c8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_UART_MspInit+0xb0>)
 80016ce:	699a      	ldr	r2, [r3, #24]
 80016d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016d4:	619a      	str	r2, [r3, #24]
 80016d6:	699a      	ldr	r2, [r3, #24]
 80016d8:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80016dc:	9201      	str	r2, [sp, #4]
 80016de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016e0:	695a      	ldr	r2, [r3, #20]
 80016e2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80016e6:	615a      	str	r2, [r3, #20]
 80016e8:	695b      	ldr	r3, [r3, #20]
 80016ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016ee:	9302      	str	r3, [sp, #8]
 80016f0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016f2:	2330      	movs	r3, #48	; 0x30
 80016f4:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016fe:	2307      	movs	r3, #7
 8001700:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001702:	a905      	add	r1, sp, #20
 8001704:	4815      	ldr	r0, [pc, #84]	; (800175c <HAL_UART_MspInit+0xb4>)
 8001706:	f000 fcc7 	bl	8002098 <HAL_GPIO_Init>
 800170a:	e7dc      	b.n	80016c6 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_UART_MspInit+0xb0>)
 800170e:	69da      	ldr	r2, [r3, #28]
 8001710:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001714:	61da      	str	r2, [r3, #28]
 8001716:	69da      	ldr	r2, [r3, #28]
 8001718:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800171c:	9203      	str	r2, [sp, #12]
 800171e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001720:	695a      	ldr	r2, [r3, #20]
 8001722:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001726:	615a      	str	r2, [r3, #20]
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800172e:	9304      	str	r3, [sp, #16]
 8001730:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001732:	230c      	movs	r3, #12
 8001734:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001736:	2302      	movs	r3, #2
 8001738:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173e:	2307      	movs	r3, #7
 8001740:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	a905      	add	r1, sp, #20
 8001744:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001748:	f000 fca6 	bl	8002098 <HAL_GPIO_Init>
}
 800174c:	e7bb      	b.n	80016c6 <HAL_UART_MspInit+0x1e>
 800174e:	bf00      	nop
 8001750:	40013800 	.word	0x40013800
 8001754:	40004400 	.word	0x40004400
 8001758:	40021000 	.word	0x40021000
 800175c:	48000800 	.word	0x48000800

08001760 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001760:	4770      	bx	lr

08001762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001762:	e7fe      	b.n	8001762 <HardFault_Handler>

08001764 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001764:	e7fe      	b.n	8001764 <MemManage_Handler>

08001766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001766:	e7fe      	b.n	8001766 <BusFault_Handler>

08001768 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001768:	e7fe      	b.n	8001768 <UsageFault_Handler>

0800176a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800176a:	4770      	bx	lr

0800176c <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	4770      	bx	lr

0800176e <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800176e:	4770      	bx	lr

08001770 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001770:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001772:	f000 f997 	bl	8001aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001776:	bd08      	pop	{r3, pc}

08001778 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001778:	b510      	push	{r4, lr}
 800177a:	b082      	sub	sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800177c:	2001      	movs	r0, #1
 800177e:	f000 fd59 	bl	8002234 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8001782:	4c0a      	ldr	r4, [pc, #40]	; (80017ac <EXTI0_IRQHandler+0x34>)
 8001784:	2100      	movs	r1, #0
 8001786:	4620      	mov	r0, r4
 8001788:	f000 fa18 	bl	8001bbc <HAL_DAC_Stop_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)timecode_pulse, TIMECODE_LENGTH*PULSE_LENGTH, DAC_ALIGN_8B_R);
 800178c:	2308      	movs	r3, #8
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	f241 3388 	movw	r3, #5000	; 0x1388
 8001794:	4a06      	ldr	r2, [pc, #24]	; (80017b0 <EXTI0_IRQHandler+0x38>)
 8001796:	2100      	movs	r1, #0
 8001798:	4620      	mov	r0, r4
 800179a:	f000 fa55 	bl	8001c48 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 800179e:	4805      	ldr	r0, [pc, #20]	; (80017b4 <EXTI0_IRQHandler+0x3c>)
 80017a0:	f001 fa5c 	bl	8002c5c <HAL_TIM_Base_Start_IT>

  concat_timecode();
 80017a4:	f7ff fb3c 	bl	8000e20 <concat_timecode>

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017a8:	b002      	add	sp, #8
 80017aa:	bd10      	pop	{r4, pc}
 80017ac:	200014d0 	.word	0x200014d0
 80017b0:	20000134 	.word	0x20000134
 80017b4:	200015a8 	.word	0x200015a8

080017b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80017ba:	4802      	ldr	r0, [pc, #8]	; (80017c4 <DMA1_Channel3_IRQHandler+0xc>)
 80017bc:	f000 fc11 	bl	8001fe2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017c0:	bd08      	pop	{r3, pc}
 80017c2:	bf00      	nop
 80017c4:	200014e4 	.word	0x200014e4

080017c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ca:	480d      	ldr	r0, [pc, #52]	; (8001800 <TIM2_IRQHandler+0x38>)
 80017cc:	f001 fa77 	bl	8002cbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  static uint32_t toggle = 0;
  if (toggle == 0)
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <TIM2_IRQHandler+0x3c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	b14b      	cbz	r3, 80017ea <TIM2_IRQHandler+0x22>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
      toggle = 1;
  }
  else
  {
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80017d6:	2201      	movs	r2, #1
 80017d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017dc:	480a      	ldr	r0, [pc, #40]	; (8001808 <TIM2_IRQHandler+0x40>)
 80017de:	f000 fd23 	bl	8002228 <HAL_GPIO_WritePin>
      toggle = 0;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <TIM2_IRQHandler+0x3c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	601a      	str	r2, [r3, #0]
  }
  /* USER CODE END TIM2_IRQn 1 */
}
 80017e8:	bd08      	pop	{r3, pc}
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <TIM2_IRQHandler+0x40>)
 80017f2:	f000 fd19 	bl	8002228 <HAL_GPIO_WritePin>
      toggle = 1;
 80017f6:	4b03      	ldr	r3, [pc, #12]	; (8001804 <TIM2_IRQHandler+0x3c>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e7f4      	b.n	80017e8 <TIM2_IRQHandler+0x20>
 80017fe:	bf00      	nop
 8001800:	200015e8 	.word	0x200015e8
 8001804:	20000110 	.word	0x20000110
 8001808:	48000400 	.word	0x48000400

0800180c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800180c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  int  flag = __HAL_UART_GET_FLAG(&huart1,UART_FLAG_RXNE);
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <USART1_IRQHandler+0x24>)
 8001810:	6803      	ldr	r3, [r0, #0]
 8001812:	69dc      	ldr	r4, [r3, #28]
  char  inchar;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001814:	f001 fd32 	bl	800327c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (flag == 1)
 8001818:	f014 0f20 	tst.w	r4, #32
 800181c:	d100      	bne.n	8001820 <USART1_IRQHandler+0x14>
    {
      inchar = (uint8_t)huart1.Instance->RDR;
      handle_uart_interrupt_gps(inchar);
    }
  /* USER CODE END USART1_IRQn 1 */
}
 800181e:	bd10      	pop	{r4, pc}
      inchar = (uint8_t)huart1.Instance->RDR;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <USART1_IRQHandler+0x24>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	8c98      	ldrh	r0, [r3, #36]	; 0x24
      handle_uart_interrupt_gps(inchar);
 8001826:	b2c0      	uxtb	r0, r0
 8001828:	f000 f88a 	bl	8001940 <handle_uart_interrupt_gps>
}
 800182c:	e7f7      	b.n	800181e <USART1_IRQHandler+0x12>
 800182e:	bf00      	nop
 8001830:	20001528 	.word	0x20001528

08001834 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001834:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  int  flag = __HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE);
 8001836:	4808      	ldr	r0, [pc, #32]	; (8001858 <USART2_IRQHandler+0x24>)
 8001838:	6803      	ldr	r3, [r0, #0]
 800183a:	69dc      	ldr	r4, [r3, #28]
  char  inchar;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800183c:	f001 fd1e 	bl	800327c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if (flag == 1)
 8001840:	f014 0f20 	tst.w	r4, #32
 8001844:	d100      	bne.n	8001848 <USART2_IRQHandler+0x14>
  {
    inchar = (uint8_t)huart2.Instance->RDR;
    handle_uart_interrupt_pc(inchar);
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001846:	bd10      	pop	{r4, pc}
    inchar = (uint8_t)huart2.Instance->RDR;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <USART2_IRQHandler+0x24>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    handle_uart_interrupt_pc(inchar);
 800184e:	b2c0      	uxtb	r0, r0
 8001850:	f000 f84a 	bl	80018e8 <handle_uart_interrupt_pc>
}
 8001854:	e7f7      	b.n	8001846 <USART2_IRQHandler+0x12>
 8001856:	bf00      	nop
 8001858:	2000166c 	.word	0x2000166c

0800185c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800185c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800185e:	4803      	ldr	r0, [pc, #12]	; (800186c <TIM6_DAC1_IRQHandler+0x10>)
 8001860:	f001 fa2d 	bl	8002cbe <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM6_DAC1_IRQHandler+0x14>)
 8001866:	f000 fab8 	bl	8001dda <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800186a:	bd08      	pop	{r3, pc}
 800186c:	200015a8 	.word	0x200015a8
 8001870:	200014d0 	.word	0x200014d0

08001874 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8001874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac2);
 8001876:	4802      	ldr	r0, [pc, #8]	; (8001880 <TIM7_DAC2_IRQHandler+0xc>)
 8001878:	f000 faaf 	bl	8001dda <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 800187c:	bd08      	pop	{r3, pc}
 800187e:	bf00      	nop
 8001880:	200014bc 	.word	0x200014bc

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b508      	push	{r3, lr}
 8001886:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <_sbrk+0x38>)
 800188a:	6812      	ldr	r2, [r2, #0]
 800188c:	b152      	cbz	r2, 80018a4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <_sbrk+0x38>)
 8001890:	6810      	ldr	r0, [r2, #0]
 8001892:	4403      	add	r3, r0
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <_sbrk+0x3c>)
 8001896:	490b      	ldr	r1, [pc, #44]	; (80018c4 <_sbrk+0x40>)
 8001898:	1a52      	subs	r2, r2, r1
 800189a:	4293      	cmp	r3, r2
 800189c:	d806      	bhi.n	80018ac <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800189e:	4a07      	ldr	r2, [pc, #28]	; (80018bc <_sbrk+0x38>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80018a2:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80018a4:	4a05      	ldr	r2, [pc, #20]	; (80018bc <_sbrk+0x38>)
 80018a6:	4908      	ldr	r1, [pc, #32]	; (80018c8 <_sbrk+0x44>)
 80018a8:	6011      	str	r1, [r2, #0]
 80018aa:	e7f0      	b.n	800188e <_sbrk+0xa>
    errno = ENOMEM;
 80018ac:	f001 ffa6 	bl	80037fc <__errno>
 80018b0:	230c      	movs	r3, #12
 80018b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	e7f3      	b.n	80018a2 <_sbrk+0x1e>
 80018ba:	bf00      	nop
 80018bc:	20000114 	.word	0x20000114
 80018c0:	20003000 	.word	0x20003000
 80018c4:	00000400 	.word	0x00000400
 80018c8:	200017c0 	.word	0x200017c0

080018cc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SystemInit+0x18>)
 80018ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80018d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018de:	609a      	str	r2, [r3, #8]
#endif
}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <handle_uart_interrupt_pc>:

void handle_uart_interrupt_pc(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 80018e8:	2824      	cmp	r0, #36	; 0x24
 80018ea:	d007      	beq.n	80018fc <handle_uart_interrupt_pc+0x14>
    {
        current_index = 0;
        PC_UART = RECEIVING;
    }
    else if (inchar == '*')
 80018ec:	282a      	cmp	r0, #42	; 0x2a
 80018ee:	d00c      	beq.n	800190a <handle_uart_interrupt_pc+0x22>
    {
        pc_message_length = current_index;
        PC_UART = DONE;
    }
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <handle_uart_interrupt_pc+0x48>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d00f      	beq.n	800191a <handle_uart_interrupt_pc+0x32>
    {
        pc_message[current_index] = inchar;
        current_index++;
    }
}
 80018fa:	4770      	bx	lr
        current_index = 0;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <handle_uart_interrupt_pc+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
        PC_UART = RECEIVING;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <handle_uart_interrupt_pc+0x48>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	4770      	bx	lr
        pc_message_length = current_index;
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <handle_uart_interrupt_pc+0x4c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <handle_uart_interrupt_pc+0x50>)
 8001910:	601a      	str	r2, [r3, #0]
        PC_UART = DONE;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <handle_uart_interrupt_pc+0x48>)
 8001914:	2202      	movs	r2, #2
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	4770      	bx	lr
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <handle_uart_interrupt_pc+0x4c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b63      	cmp	r3, #99	; 0x63
 8001920:	dceb      	bgt.n	80018fa <handle_uart_interrupt_pc+0x12>
        pc_message[current_index] = inchar;
 8001922:	4a06      	ldr	r2, [pc, #24]	; (800193c <handle_uart_interrupt_pc+0x54>)
 8001924:	54d0      	strb	r0, [r2, r3]
        current_index++;
 8001926:	3301      	adds	r3, #1
 8001928:	4a02      	ldr	r2, [pc, #8]	; (8001934 <handle_uart_interrupt_pc+0x4c>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	e7e5      	b.n	80018fa <handle_uart_interrupt_pc+0x12>
 800192e:	bf00      	nop
 8001930:	20000119 	.word	0x20000119
 8001934:	2000011c 	.word	0x2000011c
 8001938:	20000128 	.word	0x20000128
 800193c:	200016ec 	.word	0x200016ec

08001940 <handle_uart_interrupt_gps>:

void handle_uart_interrupt_gps(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 8001940:	2824      	cmp	r0, #36	; 0x24
 8001942:	d007      	beq.n	8001954 <handle_uart_interrupt_gps+0x14>
    {
        current_index = 0;
       GPS_UART = RECEIVING;
    }
    else if (inchar == '*')
 8001944:	282a      	cmp	r0, #42	; 0x2a
 8001946:	d00c      	beq.n	8001962 <handle_uart_interrupt_gps+0x22>
    {
        gps_message_length = current_index;
        GPS_UART = DONE;
    }
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <handle_uart_interrupt_gps+0x48>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d00f      	beq.n	8001972 <handle_uart_interrupt_gps+0x32>
    {
        gps_message[current_index] = inchar;
        current_index++;
    }
}
 8001952:	4770      	bx	lr
        current_index = 0;
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <handle_uart_interrupt_gps+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
       GPS_UART = RECEIVING;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <handle_uart_interrupt_gps+0x48>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	4770      	bx	lr
        gps_message_length = current_index;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <handle_uart_interrupt_gps+0x4c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <handle_uart_interrupt_gps+0x50>)
 8001968:	601a      	str	r2, [r3, #0]
        GPS_UART = DONE;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <handle_uart_interrupt_gps+0x48>)
 800196c:	2202      	movs	r2, #2
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	4770      	bx	lr
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <handle_uart_interrupt_gps+0x4c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b63      	cmp	r3, #99	; 0x63
 8001978:	dceb      	bgt.n	8001952 <handle_uart_interrupt_gps+0x12>
        gps_message[current_index] = inchar;
 800197a:	4a06      	ldr	r2, [pc, #24]	; (8001994 <handle_uart_interrupt_gps+0x54>)
 800197c:	54d0      	strb	r0, [r2, r3]
        current_index++;
 800197e:	3301      	adds	r3, #1
 8001980:	4a02      	ldr	r2, [pc, #8]	; (800198c <handle_uart_interrupt_gps+0x4c>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	e7e5      	b.n	8001952 <handle_uart_interrupt_gps+0x12>
 8001986:	bf00      	nop
 8001988:	20000118 	.word	0x20000118
 800198c:	20000120 	.word	0x20000120
 8001990:	20000124 	.word	0x20000124
 8001994:	20001750 	.word	0x20001750

08001998 <is_same_string>:


bool is_same_string(const char str1[], const char str2[], int length)
{
    bool isSame = true;
    for (int i = 0; i < length; i++)
 8001998:	2a00      	cmp	r2, #0
 800199a:	dd15      	ble.n	80019c8 <is_same_string+0x30>
{
 800199c:	b410      	push	{r4}
    {
        if (str1[i] != str2[i])
 800199e:	7804      	ldrb	r4, [r0, #0]
 80019a0:	780b      	ldrb	r3, [r1, #0]
 80019a2:	429c      	cmp	r4, r3
 80019a4:	d112      	bne.n	80019cc <is_same_string+0x34>
 80019a6:	4603      	mov	r3, r0
 80019a8:	3801      	subs	r0, #1
 80019aa:	4402      	add	r2, r0
    for (int i = 0; i < length; i++)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <is_same_string+0x28>
        if (str1[i] != str2[i])
 80019b0:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 80019b4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80019b8:	4284      	cmp	r4, r0
 80019ba:	d0f7      	beq.n	80019ac <is_same_string+0x14>
        {
            isSame = false;
 80019bc:	2000      	movs	r0, #0
 80019be:	e000      	b.n	80019c2 <is_same_string+0x2a>
    bool isSame = true;
 80019c0:	2001      	movs	r0, #1
            break;
        }
    }
    return isSame;
}
 80019c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80019c6:	4770      	bx	lr
    bool isSame = true;
 80019c8:	2001      	movs	r0, #1
}
 80019ca:	4770      	bx	lr
            isSame = false;
 80019cc:	2000      	movs	r0, #0
 80019ce:	e7f8      	b.n	80019c2 <is_same_string+0x2a>

080019d0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 80019d0:	b508      	push	{r3, lr}
    //HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
    HAL_TIM_Base_Stop_IT(&htim6);
 80019d2:	4802      	ldr	r0, [pc, #8]	; (80019dc <HAL_DAC_ConvCpltCallbackCh1+0xc>)
 80019d4:	f001 f958 	bl	8002c88 <HAL_TIM_Base_Stop_IT>
}
 80019d8:	bd08      	pop	{r3, pc}
 80019da:	bf00      	nop
 80019dc:	200015a8 	.word	0x200015a8

080019e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80019e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a18 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019e4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019e6:	e003      	b.n	80019f0 <LoopCopyDataInit>

080019e8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019e8:	4b0c      	ldr	r3, [pc, #48]	; (8001a1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019ea:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019ec:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019ee:	3104      	adds	r1, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019f0:	480b      	ldr	r0, [pc, #44]	; (8001a20 <LoopForever+0xa>)
	ldr	r3, =_edata
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <LoopForever+0xe>)
	adds	r2, r0, r1
 80019f4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019f6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019f8:	d3f6      	bcc.n	80019e8 <CopyDataInit>
	ldr	r2, =_sbss
 80019fa:	4a0b      	ldr	r2, [pc, #44]	; (8001a28 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019fc:	e002      	b.n	8001a04 <LoopFillZerobss>

080019fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019fe:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a00:	f842 3b04 	str.w	r3, [r2], #4

08001a04 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <LoopForever+0x16>)
	cmp	r2, r3
 8001a06:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001a08:	d3f9      	bcc.n	80019fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001a0a:	f7ff ff5f 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0e:	f001 fefb 	bl	8003808 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001a12:	f7ff fb69 	bl	80010e8 <main>

08001a16 <LoopForever>:

LoopForever:
    b LoopForever
 8001a16:	e7fe      	b.n	8001a16 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a18:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001a1c:	08005cd8 	.word	0x08005cd8
	ldr	r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001a24:	200000e8 	.word	0x200000e8
	ldr	r2, =_sbss
 8001a28:	200000e8 	.word	0x200000e8
	ldr	r3, = _ebss
 8001a2c:	200017bc 	.word	0x200017bc

08001a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC1_2_IRQHandler>
	...

08001a34 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a34:	b510      	push	{r4, lr}
 8001a36:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a38:	4b0e      	ldr	r3, [pc, #56]	; (8001a74 <HAL_InitTick+0x40>)
 8001a3a:	7818      	ldrb	r0, [r3, #0]
 8001a3c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a40:	fbb3 f3f0 	udiv	r3, r3, r0
 8001a44:	4a0c      	ldr	r2, [pc, #48]	; (8001a78 <HAL_InitTick+0x44>)
 8001a46:	6810      	ldr	r0, [r2, #0]
 8001a48:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a4c:	f000 f88e 	bl	8001b6c <HAL_SYSTICK_Config>
 8001a50:	b968      	cbnz	r0, 8001a6e <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a52:	2c0f      	cmp	r4, #15
 8001a54:	d901      	bls.n	8001a5a <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001a56:	2001      	movs	r0, #1
 8001a58:	e00a      	b.n	8001a70 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	4621      	mov	r1, r4
 8001a5e:	f04f 30ff 	mov.w	r0, #4294967295
 8001a62:	f000 f843 	bl	8001aec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_InitTick+0x48>)
 8001a68:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	e000      	b.n	8001a70 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001a6e:	2001      	movs	r0, #1
}
 8001a70:	bd10      	pop	{r4, pc}
 8001a72:	bf00      	nop
 8001a74:	20000078 	.word	0x20000078
 8001a78:	20000074 	.word	0x20000074
 8001a7c:	2000007c 	.word	0x2000007c

08001a80 <HAL_Init>:
{
 8001a80:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a82:	4a07      	ldr	r2, [pc, #28]	; (8001aa0 <HAL_Init+0x20>)
 8001a84:	6813      	ldr	r3, [r2, #0]
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f81b 	bl	8001ac8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff ffce 	bl	8001a34 <HAL_InitTick>
  HAL_MspInit();
 8001a98:	f7ff fd0c 	bl	80014b4 <HAL_MspInit>
}
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	bd08      	pop	{r3, pc}
 8001aa0:	40022000 	.word	0x40022000

08001aa4 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001aa4:	4a03      	ldr	r2, [pc, #12]	; (8001ab4 <HAL_IncTick+0x10>)
 8001aa6:	6811      	ldr	r1, [r2, #0]
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_IncTick+0x14>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	440b      	add	r3, r1
 8001aae:	6013      	str	r3, [r2, #0]
}
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200017b4 	.word	0x200017b4
 8001ab8:	20000078 	.word	0x20000078

08001abc <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001abc:	4b01      	ldr	r3, [pc, #4]	; (8001ac4 <HAL_GetTick+0x8>)
 8001abe:	6818      	ldr	r0, [r3, #0]
}
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	200017b4 	.word	0x200017b4

08001ac8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ac8:	4a07      	ldr	r2, [pc, #28]	; (8001ae8 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001aca:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001acc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad0:	041b      	lsls	r3, r3, #16
 8001ad2:	0c1b      	lsrs	r3, r3, #16
 8001ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001adc:	0200      	lsls	r0, r0, #8
 8001ade:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8001ae2:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8001ae4:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ae6:	4770      	bx	lr
 8001ae8:	e000ed00 	.word	0xe000ed00

08001aec <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aec:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_NVIC_SetPriority+0x5c>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af6:	f1c3 0407 	rsb	r4, r3, #7
 8001afa:	2c04      	cmp	r4, #4
 8001afc:	bf28      	it	cs
 8001afe:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b00:	1d1d      	adds	r5, r3, #4
 8001b02:	2d06      	cmp	r5, #6
 8001b04:	bf8c      	ite	hi
 8001b06:	3b03      	subhi	r3, #3
 8001b08:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0a:	f04f 35ff 	mov.w	r5, #4294967295
 8001b0e:	fa05 f404 	lsl.w	r4, r5, r4
 8001b12:	ea21 0104 	bic.w	r1, r1, r4
 8001b16:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b18:	fa05 f303 	lsl.w	r3, r5, r3
 8001b1c:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b20:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001b22:	2800      	cmp	r0, #0
 8001b24:	db09      	blt.n	8001b3a <HAL_NVIC_SetPriority+0x4e>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b26:	0109      	lsls	r1, r1, #4
 8001b28:	b2c9      	uxtb	r1, r1
 8001b2a:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001b2e:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001b32:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b36:	bc30      	pop	{r4, r5}
 8001b38:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3a:	f000 000f 	and.w	r0, r0, #15
 8001b3e:	0109      	lsls	r1, r1, #4
 8001b40:	b2c9      	uxtb	r1, r1
 8001b42:	4b02      	ldr	r3, [pc, #8]	; (8001b4c <HAL_NVIC_SetPriority+0x60>)
 8001b44:	5419      	strb	r1, [r3, r0]
 8001b46:	e7f6      	b.n	8001b36 <HAL_NVIC_SetPriority+0x4a>
 8001b48:	e000ed00 	.word	0xe000ed00
 8001b4c:	e000ed14 	.word	0xe000ed14

08001b50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b50:	2800      	cmp	r0, #0
 8001b52:	db08      	blt.n	8001b66 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b54:	0942      	lsrs	r2, r0, #5
 8001b56:	f000 001f 	and.w	r0, r0, #31
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	fa03 f000 	lsl.w	r0, r3, r0
 8001b60:	4b01      	ldr	r3, [pc, #4]	; (8001b68 <HAL_NVIC_EnableIRQ+0x18>)
 8001b62:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b66:	4770      	bx	lr
 8001b68:	e000e100 	.word	0xe000e100

08001b6c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b6c:	3801      	subs	r0, #1
 8001b6e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001b72:	d20a      	bcs.n	8001b8a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_SYSTICK_Config+0x24>)
 8001b76:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b78:	4a06      	ldr	r2, [pc, #24]	; (8001b94 <HAL_SYSTICK_Config+0x28>)
 8001b7a:	21f0      	movs	r1, #240	; 0xf0
 8001b7c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b80:	2000      	movs	r0, #0
 8001b82:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b84:	2207      	movs	r2, #7
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001b8a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	e000e010 	.word	0xe000e010
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8001b98:	b170      	cbz	r0, 8001bb8 <HAL_DAC_Init+0x20>
{ 
 8001b9a:	b510      	push	{r4, lr}
 8001b9c:	4604      	mov	r4, r0
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001b9e:	7903      	ldrb	r3, [r0, #4]
 8001ba0:	b133      	cbz	r3, 8001bb0 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001ba6:	2000      	movs	r0, #0
 8001ba8:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001baa:	2301      	movs	r3, #1
 8001bac:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8001bae:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001bb0:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001bb2:	f7ff fc97 	bl	80014e4 <HAL_DAC_MspInit>
 8001bb6:	e7f4      	b.n	8001ba2 <HAL_DAC_Init+0xa>
     return HAL_ERROR;
 8001bb8:	2001      	movs	r0, #1
}
 8001bba:	4770      	bx	lr

08001bbc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001bbc:	b510      	push	{r4, lr}
 8001bbe:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001bc0:	6800      	ldr	r0, [r0, #0]
 8001bc2:	6803      	ldr	r3, [r0, #0]
 8001bc4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bc8:	408a      	lsls	r2, r1
 8001bca:	ea23 0302 	bic.w	r3, r3, r2
 8001bce:	6003      	str	r3, [r0, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001bd0:	6820      	ldr	r0, [r4, #0]
 8001bd2:	6803      	ldr	r3, [r0, #0]
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	408a      	lsls	r2, r1
 8001bd8:	ea23 0302 	bic.w	r3, r3, r2
 8001bdc:	6003      	str	r3, [r0, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001bde:	b959      	cbnz	r1, 8001bf8 <HAL_DAC_Stop_DMA+0x3c>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8001be0:	68a0      	ldr	r0, [r4, #8]
 8001be2:	f000 f9b7 	bl	8001f54 <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001be6:	6822      	ldr	r2, [r4, #0]
 8001be8:	6813      	ldr	r3, [r2, #0]
 8001bea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bee:	6013      	str	r3, [r2, #0]
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8001bf0:	b958      	cbnz	r0, 8001c0a <HAL_DAC_Stop_DMA+0x4e>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 8001bf6:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8001bf8:	68e0      	ldr	r0, [r4, #12]
 8001bfa:	f000 f9ab 	bl	8001f54 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001bfe:	6822      	ldr	r2, [r4, #0]
 8001c00:	6813      	ldr	r3, [r2, #0]
 8001c02:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001c06:	6013      	str	r3, [r2, #0]
 8001c08:	e7f2      	b.n	8001bf0 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	7123      	strb	r3, [r4, #4]
 8001c0e:	e7f2      	b.n	8001bf6 <HAL_DAC_Stop_DMA+0x3a>

08001c10 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001c10:	4770      	bx	lr

08001c12 <HAL_DAC_ErrorCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8001c12:	4770      	bx	lr

08001c14 <HAL_DAC_DMAUnderrunCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8001c14:	4770      	bx	lr

08001c16 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001c16:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c18:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001c1a:	6923      	ldr	r3, [r4, #16]
 8001c1c:	f043 0304 	orr.w	r3, r3, #4
 8001c20:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001c22:	4620      	mov	r0, r4
 8001c24:	f7ff fff5 	bl	8001c12 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	7123      	strb	r3, [r4, #4]
}
 8001c2c:	bd10      	pop	{r4, pc}

08001c2e <DAC_DMAHalfConvCpltCh1>:
{
 8001c2e:	b508      	push	{r3, lr}
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001c30:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001c32:	f7ff ffed 	bl	8001c10 <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 8001c36:	bd08      	pop	{r3, pc}

08001c38 <DAC_DMAConvCpltCh1>:
{
 8001c38:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001c3a:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001c3c:	4620      	mov	r0, r4
 8001c3e:	f7ff fec7 	bl	80019d0 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8001c42:	2301      	movs	r3, #1
 8001c44:	7123      	strb	r3, [r4, #4]
}
 8001c46:	bd10      	pop	{r4, pc}

08001c48 <HAL_DAC_Start_DMA>:
{
 8001c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c4a:	9d06      	ldr	r5, [sp, #24]
  __HAL_LOCK(hdac);
 8001c4c:	7944      	ldrb	r4, [r0, #5]
 8001c4e:	2c01      	cmp	r4, #1
 8001c50:	d062      	beq.n	8001d18 <HAL_DAC_Start_DMA+0xd0>
 8001c52:	4617      	mov	r7, r2
 8001c54:	460e      	mov	r6, r1
 8001c56:	4604      	mov	r4, r0
 8001c58:	2201      	movs	r2, #1
 8001c5a:	7142      	strb	r2, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001c5c:	2202      	movs	r2, #2
 8001c5e:	7102      	strb	r2, [r0, #4]
  if(Channel == DAC_CHANNEL_1)
 8001c60:	2900      	cmp	r1, #0
 8001c62:	d131      	bne.n	8001cc8 <HAL_DAC_Start_DMA+0x80>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001c64:	6882      	ldr	r2, [r0, #8]
 8001c66:	492d      	ldr	r1, [pc, #180]	; (8001d1c <HAL_DAC_Start_DMA+0xd4>)
 8001c68:	6291      	str	r1, [r2, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001c6a:	6882      	ldr	r2, [r0, #8]
 8001c6c:	492c      	ldr	r1, [pc, #176]	; (8001d20 <HAL_DAC_Start_DMA+0xd8>)
 8001c6e:	62d1      	str	r1, [r2, #44]	; 0x2c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001c70:	6882      	ldr	r2, [r0, #8]
 8001c72:	492c      	ldr	r1, [pc, #176]	; (8001d24 <HAL_DAC_Start_DMA+0xdc>)
 8001c74:	6311      	str	r1, [r2, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8001c76:	6801      	ldr	r1, [r0, #0]
 8001c78:	680a      	ldr	r2, [r1, #0]
 8001c7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c7e:	600a      	str	r2, [r1, #0]
    switch(Alignment)
 8001c80:	2d04      	cmp	r5, #4
 8001c82:	d01b      	beq.n	8001cbc <HAL_DAC_Start_DMA+0x74>
 8001c84:	2d08      	cmp	r5, #8
 8001c86:	d01c      	beq.n	8001cc2 <HAL_DAC_Start_DMA+0x7a>
 8001c88:	b1ad      	cbz	r5, 8001cb6 <HAL_DAC_Start_DMA+0x6e>
  if(Channel == DAC_CHANNEL_1)
 8001c8a:	2e00      	cmp	r6, #0
 8001c8c:	d142      	bne.n	8001d14 <HAL_DAC_Start_DMA+0xcc>
 8001c8e:	4632      	mov	r2, r6
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001c90:	6820      	ldr	r0, [r4, #0]
 8001c92:	6801      	ldr	r1, [r0, #0]
 8001c94:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8001c98:	6001      	str	r1, [r0, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001c9a:	4639      	mov	r1, r7
 8001c9c:	68a0      	ldr	r0, [r4, #8]
 8001c9e:	f000 f90f 	bl	8001ec0 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8001ca2:	2000      	movs	r0, #0
 8001ca4:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001ca6:	6822      	ldr	r2, [r4, #0]
 8001ca8:	6814      	ldr	r4, [r2, #0]
 8001caa:	2301      	movs	r3, #1
 8001cac:	fa03 f106 	lsl.w	r1, r3, r6
 8001cb0:	4321      	orrs	r1, r4
 8001cb2:	6011      	str	r1, [r2, #0]
}
 8001cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001cb6:	6802      	ldr	r2, [r0, #0]
 8001cb8:	3208      	adds	r2, #8
        break;
 8001cba:	e7e9      	b.n	8001c90 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001cbc:	6802      	ldr	r2, [r0, #0]
 8001cbe:	320c      	adds	r2, #12
        break;
 8001cc0:	e7e6      	b.n	8001c90 <HAL_DAC_Start_DMA+0x48>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001cc2:	6802      	ldr	r2, [r0, #0]
 8001cc4:	3210      	adds	r2, #16
        break;
 8001cc6:	e7e3      	b.n	8001c90 <HAL_DAC_Start_DMA+0x48>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001cc8:	68c2      	ldr	r2, [r0, #12]
 8001cca:	4917      	ldr	r1, [pc, #92]	; (8001d28 <HAL_DAC_Start_DMA+0xe0>)
 8001ccc:	6291      	str	r1, [r2, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001cce:	68c2      	ldr	r2, [r0, #12]
 8001cd0:	4916      	ldr	r1, [pc, #88]	; (8001d2c <HAL_DAC_Start_DMA+0xe4>)
 8001cd2:	62d1      	str	r1, [r2, #44]	; 0x2c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001cd4:	68c2      	ldr	r2, [r0, #12]
 8001cd6:	4916      	ldr	r1, [pc, #88]	; (8001d30 <HAL_DAC_Start_DMA+0xe8>)
 8001cd8:	6311      	str	r1, [r2, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8001cda:	6801      	ldr	r1, [r0, #0]
 8001cdc:	680a      	ldr	r2, [r1, #0]
 8001cde:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001ce2:	600a      	str	r2, [r1, #0]
    switch(Alignment)
 8001ce4:	2d04      	cmp	r5, #4
 8001ce6:	d00f      	beq.n	8001d08 <HAL_DAC_Start_DMA+0xc0>
 8001ce8:	2d08      	cmp	r5, #8
 8001cea:	d010      	beq.n	8001d0e <HAL_DAC_Start_DMA+0xc6>
 8001cec:	2d00      	cmp	r5, #0
 8001cee:	d1cc      	bne.n	8001c8a <HAL_DAC_Start_DMA+0x42>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001cf0:	6802      	ldr	r2, [r0, #0]
 8001cf2:	3214      	adds	r2, #20
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001cf4:	6820      	ldr	r0, [r4, #0]
 8001cf6:	6801      	ldr	r1, [r0, #0]
 8001cf8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8001cfc:	6001      	str	r1, [r0, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001cfe:	4639      	mov	r1, r7
 8001d00:	68e0      	ldr	r0, [r4, #12]
 8001d02:	f000 f8dd 	bl	8001ec0 <HAL_DMA_Start_IT>
 8001d06:	e7cc      	b.n	8001ca2 <HAL_DAC_Start_DMA+0x5a>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001d08:	6802      	ldr	r2, [r0, #0]
 8001d0a:	3218      	adds	r2, #24
        break;
 8001d0c:	e7f2      	b.n	8001cf4 <HAL_DAC_Start_DMA+0xac>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001d0e:	6802      	ldr	r2, [r0, #0]
 8001d10:	321c      	adds	r2, #28
        break;
 8001d12:	e7ef      	b.n	8001cf4 <HAL_DAC_Start_DMA+0xac>
 8001d14:	2200      	movs	r2, #0
 8001d16:	e7ed      	b.n	8001cf4 <HAL_DAC_Start_DMA+0xac>
  __HAL_LOCK(hdac);
 8001d18:	2002      	movs	r0, #2
 8001d1a:	e7cb      	b.n	8001cb4 <HAL_DAC_Start_DMA+0x6c>
 8001d1c:	08001c39 	.word	0x08001c39
 8001d20:	08001c2f 	.word	0x08001c2f
 8001d24:	08001c17 	.word	0x08001c17
 8001d28:	08001da3 	.word	0x08001da3
 8001d2c:	08001db5 	.word	0x08001db5
 8001d30:	08001dc1 	.word	0x08001dc1

08001d34 <HAL_DAC_ConfigChannel>:
  __HAL_LOCK(hdac);
 8001d34:	7943      	ldrb	r3, [r0, #5]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d02d      	beq.n	8001d96 <HAL_DAC_ConfigChannel+0x62>
{
 8001d3a:	b430      	push	{r4, r5}
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001d3c:	6805      	ldr	r5, [r0, #0]
  __HAL_LOCK(hdac);
 8001d3e:	2301      	movs	r3, #1
 8001d40:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d42:	2302      	movs	r3, #2
 8001d44:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001d46:	682b      	ldr	r3, [r5, #0]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001d48:	4c14      	ldr	r4, [pc, #80]	; (8001d9c <HAL_DAC_ConfigChannel+0x68>)
 8001d4a:	42a5      	cmp	r5, r4
 8001d4c:	d019      	beq.n	8001d82 <HAL_DAC_ConfigChannel+0x4e>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001d4e:	f640 74fe 	movw	r4, #4094	; 0xffe
 8001d52:	4094      	lsls	r4, r2
 8001d54:	ea23 0404 	bic.w	r4, r3, r4
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001d58:	680b      	ldr	r3, [r1, #0]
 8001d5a:	6889      	ldr	r1, [r1, #8]
 8001d5c:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 8001d5e:	4093      	lsls	r3, r2
 8001d60:	4323      	orrs	r3, r4
  hdac->Instance->CR = tmpreg1;
 8001d62:	602b      	str	r3, [r5, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001d64:	6804      	ldr	r4, [r0, #0]
 8001d66:	6823      	ldr	r3, [r4, #0]
 8001d68:	21c0      	movs	r1, #192	; 0xc0
 8001d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6e:	ea23 0202 	bic.w	r2, r3, r2
 8001d72:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001d74:	2301      	movs	r3, #1
 8001d76:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8001d78:	2300      	movs	r3, #0
 8001d7a:	7143      	strb	r3, [r0, #5]
  return HAL_OK;
 8001d7c:	4618      	mov	r0, r3
}
 8001d7e:	bc30      	pop	{r4, r5}
 8001d80:	4770      	bx	lr
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001d82:	2a00      	cmp	r2, #0
 8001d84:	d1e3      	bne.n	8001d4e <HAL_DAC_ConfigChannel+0x1a>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001d86:	f423 647f 	bic.w	r4, r3, #4080	; 0xff0
 8001d8a:	f024 040e 	bic.w	r4, r4, #14
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001d8e:	680b      	ldr	r3, [r1, #0]
 8001d90:	6849      	ldr	r1, [r1, #4]
 8001d92:	430b      	orrs	r3, r1
 8001d94:	e7e3      	b.n	8001d5e <HAL_DAC_ConfigChannel+0x2a>
  __HAL_LOCK(hdac);
 8001d96:	2002      	movs	r0, #2
}
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	40007400 	.word	0x40007400

08001da0 <HAL_DACEx_ConvCpltCallbackCh2>:
}
 8001da0:	4770      	bx	lr

08001da2 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001da2:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001da4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001da6:	4620      	mov	r0, r4
 8001da8:	f7ff fffa 	bl	8001da0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8001dac:	2301      	movs	r3, #1
 8001dae:	7123      	strb	r3, [r4, #4]
}
 8001db0:	bd10      	pop	{r4, pc}

08001db2 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
}
 8001db2:	4770      	bx	lr

08001db4 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001db4:	b508      	push	{r3, lr}

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001db6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001db8:	f7ff fffb 	bl	8001db2 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8001dbc:	bd08      	pop	{r3, pc}

08001dbe <HAL_DACEx_ErrorCallbackCh2>:
}
 8001dbe:	4770      	bx	lr

08001dc0 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001dc0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dc2:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001dc4:	6923      	ldr	r3, [r4, #16]
 8001dc6:	f043 0304 	orr.w	r3, r3, #4
 8001dca:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001dcc:	4620      	mov	r0, r4
 8001dce:	f7ff fff6 	bl	8001dbe <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	7123      	strb	r3, [r4, #4]
}
 8001dd6:	bd10      	pop	{r4, pc}

08001dd8 <HAL_DACEx_DMAUnderrunCallbackCh2>:
}
 8001dd8:	4770      	bx	lr

08001dda <HAL_DAC_IRQHandler>:
{
 8001dda:	b510      	push	{r4, lr}
 8001ddc:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001dde:	6803      	ldr	r3, [r0, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001de6:	d003      	beq.n	8001df0 <HAL_DAC_IRQHandler+0x16>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dea:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001dee:	d109      	bne.n	8001e04 <HAL_DAC_IRQHandler+0x2a>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001df8:	d003      	beq.n	8001e02 <HAL_DAC_IRQHandler+0x28>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfc:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001e00:	d111      	bne.n	8001e26 <HAL_DAC_IRQHandler+0x4c>
}
 8001e02:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e04:	2204      	movs	r2, #4
 8001e06:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001e08:	6902      	ldr	r2, [r0, #16]
 8001e0a:	f042 0201 	orr.w	r2, r2, #1
 8001e0e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001e10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e14:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001e16:	6802      	ldr	r2, [r0, #0]
 8001e18:	6813      	ldr	r3, [r2, #0]
 8001e1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001e1e:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001e20:	f7ff fef8 	bl	8001c14 <HAL_DAC_DMAUnderrunCallbackCh1>
 8001e24:	e7e4      	b.n	8001df0 <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001e26:	2204      	movs	r2, #4
 8001e28:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001e2a:	6922      	ldr	r2, [r4, #16]
 8001e2c:	f042 0202 	orr.w	r2, r2, #2
 8001e30:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001e32:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001e36:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001e38:	6822      	ldr	r2, [r4, #0]
 8001e3a:	6813      	ldr	r3, [r2, #0]
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ffc8 	bl	8001dd8 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8001e48:	e7db      	b.n	8001e02 <HAL_DAC_IRQHandler+0x28>
	...

08001e4c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
  uint32_t tmp = 0U;
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001e4c:	2800      	cmp	r0, #0
 8001e4e:	d02e      	beq.n	8001eae <HAL_DMA_Init+0x62>
{ 
 8001e50:	b410      	push	{r4}
 8001e52:	4603      	mov	r3, r0
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e54:	2202      	movs	r2, #2
 8001e56:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e5a:	6800      	ldr	r0, [r0, #0]
 8001e5c:	6801      	ldr	r1, [r0, #0]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e5e:	f421 517f 	bic.w	r1, r1, #16320	; 0x3fc0
 8001e62:	f021 0130 	bic.w	r1, r1, #48	; 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	689c      	ldr	r4, [r3, #8]
 8001e6a:	4322      	orrs	r2, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	68dc      	ldr	r4, [r3, #12]
 8001e6e:	4322      	orrs	r2, r4
 8001e70:	691c      	ldr	r4, [r3, #16]
 8001e72:	4322      	orrs	r2, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e74:	695c      	ldr	r4, [r3, #20]
 8001e76:	4322      	orrs	r2, r4
 8001e78:	699c      	ldr	r4, [r3, #24]
 8001e7a:	4322      	orrs	r2, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7c:	69dc      	ldr	r4, [r3, #28]
 8001e7e:	4322      	orrs	r2, r4
  tmp |=  hdma->Init.Direction        |
 8001e80:	430a      	orrs	r2, r1

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001e82:	6002      	str	r2, [r0, #0]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001e84:	6819      	ldr	r1, [r3, #0]
 8001e86:	4a0b      	ldr	r2, [pc, #44]	; (8001eb4 <HAL_DMA_Init+0x68>)
 8001e88:	440a      	add	r2, r1
 8001e8a:	490b      	ldr	r1, [pc, #44]	; (8001eb8 <HAL_DMA_Init+0x6c>)
 8001e8c:	fba1 1202 	umull	r1, r2, r1, r2
 8001e90:	0912      	lsrs	r2, r2, #4
 8001e92:	0092      	lsls	r2, r2, #2
 8001e94:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e96:	4a09      	ldr	r2, [pc, #36]	; (8001ebc <HAL_DMA_Init+0x70>)
 8001e98:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	6398      	str	r0, [r3, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8001ea4:	f883 0020 	strb.w	r0, [r3, #32]
}  
 8001ea8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001eac:	4770      	bx	lr
    return HAL_ERROR;
 8001eae:	2001      	movs	r0, #1
}  
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	bffdfff8 	.word	0xbffdfff8
 8001eb8:	cccccccd 	.word	0xcccccccd
 8001ebc:	40020000 	.word	0x40020000

08001ec0 <HAL_DMA_Start_IT>:
{
 8001ec0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8001ec2:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001ec6:	2c01      	cmp	r4, #1
 8001ec8:	d042      	beq.n	8001f50 <HAL_DMA_Start_IT+0x90>
 8001eca:	2401      	movs	r4, #1
 8001ecc:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8001ed0:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001ed4:	2c01      	cmp	r4, #1
 8001ed6:	d005      	beq.n	8001ee4 <HAL_DMA_Start_IT+0x24>
    __HAL_UNLOCK(hdma); 
 8001ed8:	2300      	movs	r3, #0
 8001eda:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8001ede:	2002      	movs	r0, #2
} 
 8001ee0:	bc70      	pop	{r4, r5, r6}
 8001ee2:	4770      	bx	lr
  	hdma->State = HAL_DMA_STATE_BUSY;
 8001ee4:	2402      	movs	r4, #2
 8001ee6:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eea:	2400      	movs	r4, #0
 8001eec:	6384      	str	r4, [r0, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001eee:	6805      	ldr	r5, [r0, #0]
 8001ef0:	682c      	ldr	r4, [r5, #0]
 8001ef2:	f024 0401 	bic.w	r4, r4, #1
 8001ef6:	602c      	str	r4, [r5, #0]
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001ef8:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8001efa:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8001efc:	2401      	movs	r4, #1
 8001efe:	40b4      	lsls	r4, r6
 8001f00:	606c      	str	r4, [r5, #4]
  hdma->Instance->CNDTR = DataLength;
 8001f02:	6804      	ldr	r4, [r0, #0]
 8001f04:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f06:	6843      	ldr	r3, [r0, #4]
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d011      	beq.n	8001f30 <HAL_DMA_Start_IT+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001f0c:	6803      	ldr	r3, [r0, #0]
 8001f0e:	6099      	str	r1, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f10:	6803      	ldr	r3, [r0, #0]
 8001f12:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001f14:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8001f16:	b183      	cbz	r3, 8001f3a <HAL_DMA_Start_IT+0x7a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f18:	6802      	ldr	r2, [r0, #0]
 8001f1a:	6813      	ldr	r3, [r2, #0]
 8001f1c:	f043 030e 	orr.w	r3, r3, #14
 8001f20:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8001f22:	6802      	ldr	r2, [r0, #0]
 8001f24:	6813      	ldr	r3, [r2, #0]
 8001f26:	f043 0301 	orr.w	r3, r3, #1
 8001f2a:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7d7      	b.n	8001ee0 <HAL_DMA_Start_IT+0x20>
    hdma->Instance->CPAR = DstAddress;
 8001f30:	6803      	ldr	r3, [r0, #0]
 8001f32:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001f34:	6803      	ldr	r3, [r0, #0]
 8001f36:	60d9      	str	r1, [r3, #12]
 8001f38:	e7ec      	b.n	8001f14 <HAL_DMA_Start_IT+0x54>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8001f3a:	6802      	ldr	r2, [r0, #0]
 8001f3c:	6813      	ldr	r3, [r2, #0]
 8001f3e:	f043 030a 	orr.w	r3, r3, #10
 8001f42:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8001f44:	6802      	ldr	r2, [r0, #0]
 8001f46:	6813      	ldr	r3, [r2, #0]
 8001f48:	f023 0304 	bic.w	r3, r3, #4
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e7e8      	b.n	8001f22 <HAL_DMA_Start_IT+0x62>
  __HAL_LOCK(hdma);
 8001f50:	2002      	movs	r0, #2
 8001f52:	e7c5      	b.n	8001ee0 <HAL_DMA_Start_IT+0x20>

08001f54 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f54:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d006      	beq.n	8001f6a <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f5c:	2304      	movs	r3, #4
 8001f5e:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8001f60:	2300      	movs	r3, #0
 8001f62:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8001f66:	2001      	movs	r0, #1
 8001f68:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f6a:	6802      	ldr	r2, [r0, #0]
 8001f6c:	6813      	ldr	r3, [r2, #0]
 8001f6e:	f023 030e 	bic.w	r3, r3, #14
 8001f72:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f74:	6802      	ldr	r2, [r0, #0]
 8001f76:	6813      	ldr	r3, [r2, #0]
 8001f78:	f023 0301 	bic.w	r3, r3, #1
 8001f7c:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001f7e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001f80:	2201      	movs	r2, #1
 8001f82:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8001f8a:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8001f8e:	2300      	movs	r3, #0
 8001f90:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8001f94:	4618      	mov	r0, r3
}
 8001f96:	4770      	bx	lr

08001f98 <HAL_DMA_Abort_IT>:
{  
 8001f98:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f9a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d003      	beq.n	8001faa <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa2:	2304      	movs	r3, #4
 8001fa4:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001fa6:	2001      	movs	r0, #1
}
 8001fa8:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001faa:	6802      	ldr	r2, [r0, #0]
 8001fac:	6813      	ldr	r3, [r2, #0]
 8001fae:	f023 030e 	bic.w	r3, r3, #14
 8001fb2:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001fb4:	6802      	ldr	r2, [r0, #0]
 8001fb6:	6813      	ldr	r3, [r2, #0]
 8001fb8:	f023 0301 	bic.w	r3, r3, #1
 8001fbc:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001fbe:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001fca:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001fd4:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001fd6:	b113      	cbz	r3, 8001fde <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001fd8:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001fda:	2000      	movs	r0, #0
 8001fdc:	e7e4      	b.n	8001fa8 <HAL_DMA_Abort_IT+0x10>
 8001fde:	2000      	movs	r0, #0
 8001fe0:	e7e2      	b.n	8001fa8 <HAL_DMA_Abort_IT+0x10>

08001fe2 <HAL_DMA_IRQHandler>:
{
 8001fe2:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fe4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001fe6:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001fe8:	6804      	ldr	r4, [r0, #0]
 8001fea:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001fec:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001fee:	2304      	movs	r3, #4
 8001ff0:	408b      	lsls	r3, r1
 8001ff2:	4213      	tst	r3, r2
 8001ff4:	d013      	beq.n	800201e <HAL_DMA_IRQHandler+0x3c>
 8001ff6:	f015 0f04 	tst.w	r5, #4
 8001ffa:	d010      	beq.n	800201e <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	f013 0f20 	tst.w	r3, #32
 8002002:	d103      	bne.n	800200c <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8002004:	6823      	ldr	r3, [r4, #0]
 8002006:	f023 0304 	bic.w	r3, r3, #4
 800200a:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800200c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800200e:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002010:	2304      	movs	r3, #4
 8002012:	408b      	lsls	r3, r1
 8002014:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 8002016:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8002018:	b103      	cbz	r3, 800201c <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 800201a:	4798      	blx	r3
}  
 800201c:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800201e:	2302      	movs	r3, #2
 8002020:	408b      	lsls	r3, r1
 8002022:	4213      	tst	r3, r2
 8002024:	d01a      	beq.n	800205c <HAL_DMA_IRQHandler+0x7a>
 8002026:	f015 0f02 	tst.w	r5, #2
 800202a:	d017      	beq.n	800205c <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	f013 0f20 	tst.w	r3, #32
 8002032:	d106      	bne.n	8002042 <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002034:	6823      	ldr	r3, [r4, #0]
 8002036:	f023 030a 	bic.w	r3, r3, #10
 800203a:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 800203c:	2301      	movs	r3, #1
 800203e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002042:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002044:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002046:	2302      	movs	r3, #2
 8002048:	408b      	lsls	r3, r1
 800204a:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 800204c:	2300      	movs	r3, #0
 800204e:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 8002052:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002054:	2b00      	cmp	r3, #0
 8002056:	d0e1      	beq.n	800201c <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8002058:	4798      	blx	r3
 800205a:	e7df      	b.n	800201c <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800205c:	2308      	movs	r3, #8
 800205e:	fa03 f101 	lsl.w	r1, r3, r1
 8002062:	4211      	tst	r1, r2
 8002064:	d0da      	beq.n	800201c <HAL_DMA_IRQHandler+0x3a>
 8002066:	f015 0f08 	tst.w	r5, #8
 800206a:	d0d7      	beq.n	800201c <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	f023 030e 	bic.w	r3, r3, #14
 8002072:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002074:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002076:	2301      	movs	r3, #1
 8002078:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800207a:	fa03 f202 	lsl.w	r2, r3, r2
 800207e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002080:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 8002082:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 8002086:	2300      	movs	r3, #0
 8002088:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 800208c:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800208e:	2b00      	cmp	r3, #0
 8002090:	d0c4      	beq.n	800201c <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 8002092:	4798      	blx	r3
}  
 8002094:	e7c2      	b.n	800201c <HAL_DMA_IRQHandler+0x3a>
	...

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800209c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800209e:	680c      	ldr	r4, [r1, #0]
 80020a0:	2c00      	cmp	r4, #0
 80020a2:	f000 80b7 	beq.w	8002214 <HAL_GPIO_Init+0x17c>
  uint32_t position = 0x00u;
 80020a6:	2600      	movs	r6, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80020a8:	f04f 0c01 	mov.w	ip, #1
        GPIOx->AFR[position >> 3u] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80020ac:	f04f 0a03 	mov.w	sl, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020b0:	f8df e170 	ldr.w	lr, [pc, #368]	; 8002224 <HAL_GPIO_Init+0x18c>

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80020b4:	f04f 090f 	mov.w	r9, #15
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020b8:	4f58      	ldr	r7, [pc, #352]	; (800221c <HAL_GPIO_Init+0x184>)
 80020ba:	e040      	b.n	800213e <HAL_GPIO_Init+0xa6>
        temp = GPIOx->AFR[position >> 3u];
 80020bc:	08f2      	lsrs	r2, r6, #3
 80020be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80020c2:	6a14      	ldr	r4, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80020c4:	f006 0307 	and.w	r3, r6, #7
 80020c8:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 80020cc:	fa09 f30b 	lsl.w	r3, r9, fp
 80020d0:	ea24 0403 	bic.w	r4, r4, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80020d4:	690b      	ldr	r3, [r1, #16]
 80020d6:	fa03 f30b 	lsl.w	r3, r3, fp
 80020da:	4323      	orrs	r3, r4
        GPIOx->AFR[position >> 3u] = temp;
 80020dc:	6213      	str	r3, [r2, #32]
 80020de:	e038      	b.n	8002152 <HAL_GPIO_Init+0xba>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80020e0:	2200      	movs	r2, #0
 80020e2:	40a2      	lsls	r2, r4
 80020e4:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 80020e6:	609a      	str	r2, [r3, #8]
        temp = EXTI->IMR;
 80020e8:	683b      	ldr	r3, [r7, #0]
        temp &= ~(iocurrent);
 80020ea:	ea6f 0408 	mvn.w	r4, r8
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ee:	684a      	ldr	r2, [r1, #4]
 80020f0:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp &= ~(iocurrent);
 80020f4:	bf0c      	ite	eq
 80020f6:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 80020f8:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->IMR = temp;
 80020fc:	603b      	str	r3, [r7, #0]

        temp = EXTI->EMR;
 80020fe:	687a      	ldr	r2, [r7, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002100:	684b      	ldr	r3, [r1, #4]
 8002102:	f413 3f00 	tst.w	r3, #131072	; 0x20000
        temp &= ~(iocurrent);
 8002106:	bf0c      	ite	eq
 8002108:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 800210a:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->EMR = temp;
 800210e:	607a      	str	r2, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002110:	68ba      	ldr	r2, [r7, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002112:	684b      	ldr	r3, [r1, #4]
 8002114:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8002118:	bf0c      	ite	eq
 800211a:	4022      	andeq	r2, r4
        {
          temp |= iocurrent;
 800211c:	ea48 0202 	orrne.w	r2, r8, r2
        }
        EXTI->RTSR = temp;
 8002120:	60ba      	str	r2, [r7, #8]

        temp = EXTI->FTSR;
 8002122:	68fb      	ldr	r3, [r7, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002124:	684a      	ldr	r2, [r1, #4]
 8002126:	f412 1f00 	tst.w	r2, #2097152	; 0x200000
        temp &= ~(iocurrent);
 800212a:	bf0c      	ite	eq
 800212c:	4023      	andeq	r3, r4
        {
          temp |= iocurrent;
 800212e:	ea48 0303 	orrne.w	r3, r8, r3
        }
        EXTI->FTSR = temp;
 8002132:	60fb      	str	r3, [r7, #12]
      }
    }

    position++;
 8002134:	3601      	adds	r6, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002136:	680c      	ldr	r4, [r1, #0]
 8002138:	fa34 f306 	lsrs.w	r3, r4, r6
 800213c:	d06a      	beq.n	8002214 <HAL_GPIO_Init+0x17c>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800213e:	fa0c f506 	lsl.w	r5, ip, r6
    if (iocurrent != 0x00u)
 8002142:	ea15 0804 	ands.w	r8, r5, r4
 8002146:	d0f5      	beq.n	8002134 <HAL_GPIO_Init+0x9c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002148:	684b      	ldr	r3, [r1, #4]
 800214a:	f023 0310 	bic.w	r3, r3, #16
 800214e:	2b02      	cmp	r3, #2
 8002150:	d0b4      	beq.n	80020bc <HAL_GPIO_Init+0x24>
      temp = GPIOx->MODER;
 8002152:	6803      	ldr	r3, [r0, #0]
 8002154:	0074      	lsls	r4, r6, #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002156:	fa0a f204 	lsl.w	r2, sl, r4
 800215a:	43d2      	mvns	r2, r2
 800215c:	ea02 0b03 	and.w	fp, r2, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002160:	684b      	ldr	r3, [r1, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	40a3      	lsls	r3, r4
 8002168:	ea43 030b 	orr.w	r3, r3, fp
      GPIOx->MODER = temp;
 800216c:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800216e:	684b      	ldr	r3, [r1, #4]
 8002170:	f023 0310 	bic.w	r3, r3, #16
 8002174:	3b01      	subs	r3, #1
 8002176:	2b01      	cmp	r3, #1
 8002178:	d811      	bhi.n	800219e <HAL_GPIO_Init+0x106>
        temp = GPIOx->OSPEEDR;
 800217a:	6883      	ldr	r3, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800217c:	ea02 0b03 	and.w	fp, r2, r3
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002180:	68cb      	ldr	r3, [r1, #12]
 8002182:	40a3      	lsls	r3, r4
 8002184:	ea43 030b 	orr.w	r3, r3, fp
        GPIOx->OSPEEDR = temp;
 8002188:	6083      	str	r3, [r0, #8]
        temp = GPIOx->OTYPER;
 800218a:	6843      	ldr	r3, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800218c:	ea23 0b05 	bic.w	fp, r3, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002190:	684b      	ldr	r3, [r1, #4]
 8002192:	f3c3 1500 	ubfx	r5, r3, #4, #1
 8002196:	40b5      	lsls	r5, r6
 8002198:	ea45 050b 	orr.w	r5, r5, fp
        GPIOx->OTYPER = temp;
 800219c:	6045      	str	r5, [r0, #4]
      temp = GPIOx->PUPDR;
 800219e:	68c3      	ldr	r3, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80021a0:	401a      	ands	r2, r3
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021a2:	688b      	ldr	r3, [r1, #8]
 80021a4:	fa03 f404 	lsl.w	r4, r3, r4
 80021a8:	4314      	orrs	r4, r2
      GPIOx->PUPDR = temp;
 80021aa:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021ac:	684b      	ldr	r3, [r1, #4]
 80021ae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80021b2:	d0bf      	beq.n	8002134 <HAL_GPIO_Init+0x9c>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021b4:	f8de 3018 	ldr.w	r3, [lr, #24]
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	f8ce 3018 	str.w	r3, [lr, #24]
 80021c0:	f8de 3018 	ldr.w	r3, [lr, #24]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	9301      	str	r3, [sp, #4]
 80021ca:	9b01      	ldr	r3, [sp, #4]
 80021cc:	f026 0303 	bic.w	r3, r6, #3
 80021d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021d4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
        temp = SYSCFG->EXTICR[position >> 2u];
 80021d8:	689d      	ldr	r5, [r3, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80021da:	f006 0203 	and.w	r2, r6, #3
 80021de:	0094      	lsls	r4, r2, #2
 80021e0:	fa09 f204 	lsl.w	r2, r9, r4
 80021e4:	ea25 0502 	bic.w	r5, r5, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80021e8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80021ec:	f43f af78 	beq.w	80020e0 <HAL_GPIO_Init+0x48>
 80021f0:	4a0b      	ldr	r2, [pc, #44]	; (8002220 <HAL_GPIO_Init+0x188>)
 80021f2:	4290      	cmp	r0, r2
 80021f4:	d00a      	beq.n	800220c <HAL_GPIO_Init+0x174>
 80021f6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80021fa:	4290      	cmp	r0, r2
 80021fc:	d008      	beq.n	8002210 <HAL_GPIO_Init+0x178>
 80021fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002202:	4290      	cmp	r0, r2
 8002204:	bf0c      	ite	eq
 8002206:	2203      	moveq	r2, #3
 8002208:	2205      	movne	r2, #5
 800220a:	e76a      	b.n	80020e2 <HAL_GPIO_Init+0x4a>
 800220c:	4662      	mov	r2, ip
 800220e:	e768      	b.n	80020e2 <HAL_GPIO_Init+0x4a>
 8002210:	2202      	movs	r2, #2
 8002212:	e766      	b.n	80020e2 <HAL_GPIO_Init+0x4a>
  }
}
 8002214:	b003      	add	sp, #12
 8002216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800221a:	bf00      	nop
 800221c:	40010400 	.word	0x40010400
 8002220:	48000400 	.word	0x48000400
 8002224:	40021000 	.word	0x40021000

08002228 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002228:	b90a      	cbnz	r2, 800222e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800222a:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 800222c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800222e:	6181      	str	r1, [r0, #24]
 8002230:	4770      	bx	lr

08002232 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002232:	4770      	bx	lr

08002234 <HAL_GPIO_EXTI_IRQHandler>:
{
 8002234:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	4203      	tst	r3, r0
 800223c:	d100      	bne.n	8002240 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 800223e:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002240:	4b02      	ldr	r3, [pc, #8]	; (800224c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002242:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002244:	f7ff fff5 	bl	8002232 <HAL_GPIO_EXTI_Callback>
}
 8002248:	e7f9      	b.n	800223e <HAL_GPIO_EXTI_IRQHandler+0xa>
 800224a:	bf00      	nop
 800224c:	40010400 	.word	0x40010400

08002250 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002250:	2800      	cmp	r0, #0
 8002252:	f000 82ff 	beq.w	8002854 <HAL_RCC_OscConfig+0x604>
{
 8002256:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800225a:	b083      	sub	sp, #12
 800225c:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800225e:	6803      	ldr	r3, [r0, #0]
 8002260:	f013 0f01 	tst.w	r3, #1
 8002264:	d03b      	beq.n	80022de <HAL_RCC_OscConfig+0x8e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002266:	4bb4      	ldr	r3, [pc, #720]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b04      	cmp	r3, #4
 8002270:	d01e      	beq.n	80022b0 <HAL_RCC_OscConfig+0x60>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002272:	4bb1      	ldr	r3, [pc, #708]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d013      	beq.n	80022a6 <HAL_RCC_OscConfig+0x56>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227e:	6863      	ldr	r3, [r4, #4]
 8002280:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002284:	d068      	beq.n	8002358 <HAL_RCC_OscConfig+0x108>
 8002286:	2b00      	cmp	r3, #0
 8002288:	f040 8091 	bne.w	80023ae <HAL_RCC_OscConfig+0x15e>
 800228c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002290:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	e05d      	b.n	8002362 <HAL_RCC_OscConfig+0x112>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022a6:	4ba4      	ldr	r3, [pc, #656]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80022ae:	d0e6      	beq.n	800227e <HAL_RCC_OscConfig+0x2e>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022b4:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022b8:	4b9f      	ldr	r3, [pc, #636]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 80022ba:	6819      	ldr	r1, [r3, #0]
 80022bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80022c0:	fa93 f3a3 	rbit	r3, r3
 80022c4:	fab3 f383 	clz	r3, r3
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2201      	movs	r2, #1
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	420b      	tst	r3, r1
 80022d4:	d003      	beq.n	80022de <HAL_RCC_OscConfig+0x8e>
 80022d6:	6863      	ldr	r3, [r4, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 82bd 	beq.w	8002858 <HAL_RCC_OscConfig+0x608>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022de:	6823      	ldr	r3, [r4, #0]
 80022e0:	f013 0f02 	tst.w	r3, #2
 80022e4:	f000 80c3 	beq.w	800246e <HAL_RCC_OscConfig+0x21e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022e8:	4b93      	ldr	r3, [pc, #588]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f013 0f0c 	tst.w	r3, #12
 80022f0:	f000 809a 	beq.w	8002428 <HAL_RCC_OscConfig+0x1d8>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022f4:	4b90      	ldr	r3, [pc, #576]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f003 030c 	and.w	r3, r3, #12
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	f000 808d 	beq.w	800241c <HAL_RCC_OscConfig+0x1cc>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002302:	6923      	ldr	r3, [r4, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 80f0 	beq.w	80024ea <HAL_RCC_OscConfig+0x29a>
 800230a:	2201      	movs	r2, #1
 800230c:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002320:	f7ff fbcc 	bl	8001abc <HAL_GetTick>
 8002324:	4680      	mov	r8, r0
 8002326:	2502      	movs	r5, #2
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002328:	4f83      	ldr	r7, [pc, #524]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 800232a:	2601      	movs	r6, #1
 800232c:	fa95 f3a5 	rbit	r3, r5
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	fa95 f3a5 	rbit	r3, r5
 8002336:	fab3 f383 	clz	r3, r3
 800233a:	f003 031f 	and.w	r3, r3, #31
 800233e:	fa06 f303 	lsl.w	r3, r6, r3
 8002342:	4213      	tst	r3, r2
 8002344:	f040 80c3 	bne.w	80024ce <HAL_RCC_OscConfig+0x27e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002348:	f7ff fbb8 	bl	8001abc <HAL_GetTick>
 800234c:	eba0 0008 	sub.w	r0, r0, r8
 8002350:	2802      	cmp	r0, #2
 8002352:	d9eb      	bls.n	800232c <HAL_RCC_OscConfig+0xdc>
          {
            return HAL_TIMEOUT;
 8002354:	2003      	movs	r0, #3
 8002356:	e286      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002358:	4a77      	ldr	r2, [pc, #476]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 800235a:	6813      	ldr	r3, [r2, #0]
 800235c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002360:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002362:	4a75      	ldr	r2, [pc, #468]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 8002364:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002366:	f023 030f 	bic.w	r3, r3, #15
 800236a:	68a1      	ldr	r1, [r4, #8]
 800236c:	430b      	orrs	r3, r1
 800236e:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002370:	6863      	ldr	r3, [r4, #4]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d035      	beq.n	80023e2 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002376:	f7ff fba1 	bl	8001abc <HAL_GetTick>
 800237a:	4680      	mov	r8, r0
 800237c:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002380:	4f6d      	ldr	r7, [pc, #436]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 8002382:	2601      	movs	r6, #1
 8002384:	fa95 f3a5 	rbit	r3, r5
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	fa95 f3a5 	rbit	r3, r5
 800238e:	fab3 f383 	clz	r3, r3
 8002392:	f003 031f 	and.w	r3, r3, #31
 8002396:	fa06 f303 	lsl.w	r3, r6, r3
 800239a:	4213      	tst	r3, r2
 800239c:	d19f      	bne.n	80022de <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800239e:	f7ff fb8d 	bl	8001abc <HAL_GetTick>
 80023a2:	eba0 0008 	sub.w	r0, r0, r8
 80023a6:	2864      	cmp	r0, #100	; 0x64
 80023a8:	d9ec      	bls.n	8002384 <HAL_RCC_OscConfig+0x134>
            return HAL_TIMEOUT;
 80023aa:	2003      	movs	r0, #3
 80023ac:	e25b      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023b2:	d009      	beq.n	80023c8 <HAL_RCC_OscConfig+0x178>
 80023b4:	4b60      	ldr	r3, [pc, #384]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	e7cc      	b.n	8002362 <HAL_RCC_OscConfig+0x112>
 80023c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80023cc:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80023de:	601a      	str	r2, [r3, #0]
 80023e0:	e7bf      	b.n	8002362 <HAL_RCC_OscConfig+0x112>
        tickstart = HAL_GetTick();
 80023e2:	f7ff fb6b 	bl	8001abc <HAL_GetTick>
 80023e6:	4680      	mov	r8, r0
 80023e8:	f44f 3500 	mov.w	r5, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ec:	4f52      	ldr	r7, [pc, #328]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 80023ee:	2601      	movs	r6, #1
 80023f0:	fa95 f3a5 	rbit	r3, r5
 80023f4:	683a      	ldr	r2, [r7, #0]
 80023f6:	fa95 f3a5 	rbit	r3, r5
 80023fa:	fab3 f383 	clz	r3, r3
 80023fe:	f003 031f 	and.w	r3, r3, #31
 8002402:	fa06 f303 	lsl.w	r3, r6, r3
 8002406:	4213      	tst	r3, r2
 8002408:	f43f af69 	beq.w	80022de <HAL_RCC_OscConfig+0x8e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800240c:	f7ff fb56 	bl	8001abc <HAL_GetTick>
 8002410:	eba0 0008 	sub.w	r0, r0, r8
 8002414:	2864      	cmp	r0, #100	; 0x64
 8002416:	d9eb      	bls.n	80023f0 <HAL_RCC_OscConfig+0x1a0>
            return HAL_TIMEOUT;
 8002418:	2003      	movs	r0, #3
 800241a:	e224      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002424:	f47f af6d 	bne.w	8002302 <HAL_RCC_OscConfig+0xb2>
 8002428:	2302      	movs	r3, #2
 800242a:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800242e:	4b42      	ldr	r3, [pc, #264]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 8002430:	6819      	ldr	r1, [r3, #0]
 8002432:	2302      	movs	r3, #2
 8002434:	fa93 f3a3 	rbit	r3, r3
 8002438:	fab3 f383 	clz	r3, r3
 800243c:	f003 031f 	and.w	r3, r3, #31
 8002440:	2201      	movs	r2, #1
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	420b      	tst	r3, r1
 8002448:	d004      	beq.n	8002454 <HAL_RCC_OscConfig+0x204>
 800244a:	6923      	ldr	r3, [r4, #16]
 800244c:	4293      	cmp	r3, r2
 800244e:	d001      	beq.n	8002454 <HAL_RCC_OscConfig+0x204>
        return HAL_ERROR;
 8002450:	2001      	movs	r0, #1
 8002452:	e208      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002454:	4838      	ldr	r0, [pc, #224]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 8002456:	6801      	ldr	r1, [r0, #0]
 8002458:	23f8      	movs	r3, #248	; 0xf8
 800245a:	fa93 f3a3 	rbit	r3, r3
 800245e:	fab3 f283 	clz	r2, r3
 8002462:	6963      	ldr	r3, [r4, #20]
 8002464:	4093      	lsls	r3, r2
 8002466:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800246a:	4313      	orrs	r3, r2
 800246c:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	f013 0f08 	tst.w	r3, #8
 8002474:	f000 808d 	beq.w	8002592 <HAL_RCC_OscConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002478:	69a3      	ldr	r3, [r4, #24]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d060      	beq.n	8002540 <HAL_RCC_OscConfig+0x2f0>
 800247e:	2101      	movs	r1, #1
 8002480:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002484:	fab2 f282 	clz	r2, r2
 8002488:	4b2c      	ldr	r3, [pc, #176]	; (800253c <HAL_RCC_OscConfig+0x2ec>)
 800248a:	4413      	add	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002490:	f7ff fb14 	bl	8001abc <HAL_GetTick>
 8002494:	4680      	mov	r8, r0
 8002496:	2502      	movs	r5, #2
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002498:	4f27      	ldr	r7, [pc, #156]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 800249a:	2601      	movs	r6, #1
 800249c:	fa95 f3a5 	rbit	r3, r5
 80024a0:	fa95 f3a5 	rbit	r3, r5
 80024a4:	fa95 f3a5 	rbit	r3, r5
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	fa95 f3a5 	rbit	r3, r5
 80024ae:	fab3 f383 	clz	r3, r3
 80024b2:	f003 031f 	and.w	r3, r3, #31
 80024b6:	fa06 f303 	lsl.w	r3, r6, r3
 80024ba:	4213      	tst	r3, r2
 80024bc:	d169      	bne.n	8002592 <HAL_RCC_OscConfig+0x342>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024be:	f7ff fafd 	bl	8001abc <HAL_GetTick>
 80024c2:	eba0 0008 	sub.w	r0, r0, r8
 80024c6:	2802      	cmp	r0, #2
 80024c8:	d9e8      	bls.n	800249c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024ca:	2003      	movs	r0, #3
 80024cc:	e1cb      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ce:	481a      	ldr	r0, [pc, #104]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 80024d0:	6801      	ldr	r1, [r0, #0]
 80024d2:	23f8      	movs	r3, #248	; 0xf8
 80024d4:	fa93 f3a3 	rbit	r3, r3
 80024d8:	fab3 f283 	clz	r2, r3
 80024dc:	6963      	ldr	r3, [r4, #20]
 80024de:	4093      	lsls	r3, r2
 80024e0:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 80024e4:	4313      	orrs	r3, r2
 80024e6:	6003      	str	r3, [r0, #0]
 80024e8:	e7c1      	b.n	800246e <HAL_RCC_OscConfig+0x21e>
 80024ea:	2301      	movs	r3, #1
 80024ec:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80024f0:	fab3 f383 	clz	r3, r3
 80024f4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024f8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	2200      	movs	r2, #0
 8002500:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002502:	f7ff fadb 	bl	8001abc <HAL_GetTick>
 8002506:	4680      	mov	r8, r0
 8002508:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800250a:	4f0b      	ldr	r7, [pc, #44]	; (8002538 <HAL_RCC_OscConfig+0x2e8>)
 800250c:	2601      	movs	r6, #1
 800250e:	fa95 f3a5 	rbit	r3, r5
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	fa95 f3a5 	rbit	r3, r5
 8002518:	fab3 f383 	clz	r3, r3
 800251c:	f003 031f 	and.w	r3, r3, #31
 8002520:	fa06 f303 	lsl.w	r3, r6, r3
 8002524:	4213      	tst	r3, r2
 8002526:	d0a2      	beq.n	800246e <HAL_RCC_OscConfig+0x21e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002528:	f7ff fac8 	bl	8001abc <HAL_GetTick>
 800252c:	eba0 0008 	sub.w	r0, r0, r8
 8002530:	2802      	cmp	r0, #2
 8002532:	d9ec      	bls.n	800250e <HAL_RCC_OscConfig+0x2be>
            return HAL_TIMEOUT;
 8002534:	2003      	movs	r0, #3
 8002536:	e196      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
 8002538:	40021000 	.word	0x40021000
 800253c:	10908120 	.word	0x10908120
 8002540:	2201      	movs	r2, #1
 8002542:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002546:	fab2 f282 	clz	r2, r2
 800254a:	4bbf      	ldr	r3, [pc, #764]	; (8002848 <HAL_RCC_OscConfig+0x5f8>)
 800254c:	4413      	add	r3, r2
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002554:	f7ff fab2 	bl	8001abc <HAL_GetTick>
 8002558:	4680      	mov	r8, r0
 800255a:	2502      	movs	r5, #2
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800255c:	4fbb      	ldr	r7, [pc, #748]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 800255e:	2601      	movs	r6, #1
 8002560:	fa95 f3a5 	rbit	r3, r5
 8002564:	fa95 f3a5 	rbit	r3, r5
 8002568:	fa95 f3a5 	rbit	r3, r5
 800256c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256e:	fa95 f3a5 	rbit	r3, r5
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	f003 031f 	and.w	r3, r3, #31
 800257a:	fa06 f303 	lsl.w	r3, r6, r3
 800257e:	4213      	tst	r3, r2
 8002580:	d007      	beq.n	8002592 <HAL_RCC_OscConfig+0x342>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002582:	f7ff fa9b 	bl	8001abc <HAL_GetTick>
 8002586:	eba0 0008 	sub.w	r0, r0, r8
 800258a:	2802      	cmp	r0, #2
 800258c:	d9e8      	bls.n	8002560 <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 800258e:	2003      	movs	r0, #3
 8002590:	e169      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	f013 0f04 	tst.w	r3, #4
 8002598:	f000 80aa 	beq.w	80026f0 <HAL_RCC_OscConfig+0x4a0>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259c:	4bab      	ldr	r3, [pc, #684]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80025a4:	d122      	bne.n	80025ec <HAL_RCC_OscConfig+0x39c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025a6:	4ba9      	ldr	r3, [pc, #676]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80025ae:	61da      	str	r2, [r3, #28]
 80025b0:	69db      	ldr	r3, [r3, #28]
 80025b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025b6:	9301      	str	r3, [sp, #4]
 80025b8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80025ba:	f04f 0901 	mov.w	r9, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025be:	4ba4      	ldr	r3, [pc, #656]	; (8002850 <HAL_RCC_OscConfig+0x600>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80025c6:	d014      	beq.n	80025f2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c8:	68e3      	ldr	r3, [r4, #12]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d025      	beq.n	800261a <HAL_RCC_OscConfig+0x3ca>
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d132      	bne.n	8002638 <HAL_RCC_OscConfig+0x3e8>
 80025d2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80025d6:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80025da:	6a1a      	ldr	r2, [r3, #32]
 80025dc:	f022 0201 	bic.w	r2, r2, #1
 80025e0:	621a      	str	r2, [r3, #32]
 80025e2:	6a1a      	ldr	r2, [r3, #32]
 80025e4:	f022 0204 	bic.w	r2, r2, #4
 80025e8:	621a      	str	r2, [r3, #32]
 80025ea:	e01b      	b.n	8002624 <HAL_RCC_OscConfig+0x3d4>
    FlagStatus       pwrclkchanged = RESET;
 80025ec:	f04f 0900 	mov.w	r9, #0
 80025f0:	e7e5      	b.n	80025be <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025f2:	4a97      	ldr	r2, [pc, #604]	; (8002850 <HAL_RCC_OscConfig+0x600>)
 80025f4:	6813      	ldr	r3, [r2, #0]
 80025f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025fa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80025fc:	f7ff fa5e 	bl	8001abc <HAL_GetTick>
 8002600:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002602:	4d93      	ldr	r5, [pc, #588]	; (8002850 <HAL_RCC_OscConfig+0x600>)
 8002604:	682b      	ldr	r3, [r5, #0]
 8002606:	f413 7f80 	tst.w	r3, #256	; 0x100
 800260a:	d1dd      	bne.n	80025c8 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800260c:	f7ff fa56 	bl	8001abc <HAL_GetTick>
 8002610:	1b80      	subs	r0, r0, r6
 8002612:	2864      	cmp	r0, #100	; 0x64
 8002614:	d9f6      	bls.n	8002604 <HAL_RCC_OscConfig+0x3b4>
          return HAL_TIMEOUT;
 8002616:	2003      	movs	r0, #3
 8002618:	e125      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800261a:	4a8c      	ldr	r2, [pc, #560]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 800261c:	6a13      	ldr	r3, [r2, #32]
 800261e:	f043 0301 	orr.w	r3, r3, #1
 8002622:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002624:	68e3      	ldr	r3, [r4, #12]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d03a      	beq.n	80026a0 <HAL_RCC_OscConfig+0x450>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800262a:	f7ff fa47 	bl	8001abc <HAL_GetTick>
 800262e:	4680      	mov	r8, r0
 8002630:	2502      	movs	r5, #2
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002632:	4f86      	ldr	r7, [pc, #536]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 8002634:	2601      	movs	r6, #1
 8002636:	e029      	b.n	800268c <HAL_RCC_OscConfig+0x43c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002638:	2b05      	cmp	r3, #5
 800263a:	d009      	beq.n	8002650 <HAL_RCC_OscConfig+0x400>
 800263c:	4b83      	ldr	r3, [pc, #524]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 800263e:	6a1a      	ldr	r2, [r3, #32]
 8002640:	f022 0201 	bic.w	r2, r2, #1
 8002644:	621a      	str	r2, [r3, #32]
 8002646:	6a1a      	ldr	r2, [r3, #32]
 8002648:	f022 0204 	bic.w	r2, r2, #4
 800264c:	621a      	str	r2, [r3, #32]
 800264e:	e7e9      	b.n	8002624 <HAL_RCC_OscConfig+0x3d4>
 8002650:	4b7e      	ldr	r3, [pc, #504]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 8002652:	6a1a      	ldr	r2, [r3, #32]
 8002654:	f042 0204 	orr.w	r2, r2, #4
 8002658:	621a      	str	r2, [r3, #32]
 800265a:	6a1a      	ldr	r2, [r3, #32]
 800265c:	f042 0201 	orr.w	r2, r2, #1
 8002660:	621a      	str	r2, [r3, #32]
 8002662:	e7df      	b.n	8002624 <HAL_RCC_OscConfig+0x3d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002664:	6a3a      	ldr	r2, [r7, #32]
 8002666:	fa95 f3a5 	rbit	r3, r5
 800266a:	fab3 f383 	clz	r3, r3
 800266e:	f003 031f 	and.w	r3, r3, #31
 8002672:	fa06 f303 	lsl.w	r3, r6, r3
 8002676:	4213      	tst	r3, r2
 8002678:	d137      	bne.n	80026ea <HAL_RCC_OscConfig+0x49a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800267a:	f7ff fa1f 	bl	8001abc <HAL_GetTick>
 800267e:	eba0 0008 	sub.w	r0, r0, r8
 8002682:	f241 3388 	movw	r3, #5000	; 0x1388
 8002686:	4298      	cmp	r0, r3
 8002688:	f200 80e8 	bhi.w	800285c <HAL_RCC_OscConfig+0x60c>
 800268c:	fa95 f3a5 	rbit	r3, r5
 8002690:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002694:	2b00      	cmp	r3, #0
 8002696:	d1e5      	bne.n	8002664 <HAL_RCC_OscConfig+0x414>
 8002698:	fa95 f3a5 	rbit	r3, r5
 800269c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800269e:	e7e2      	b.n	8002666 <HAL_RCC_OscConfig+0x416>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026a0:	f7ff fa0c 	bl	8001abc <HAL_GetTick>
 80026a4:	4680      	mov	r8, r0
 80026a6:	2502      	movs	r5, #2
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026a8:	4f68      	ldr	r7, [pc, #416]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 80026aa:	2601      	movs	r6, #1
 80026ac:	e013      	b.n	80026d6 <HAL_RCC_OscConfig+0x486>
 80026ae:	6a3a      	ldr	r2, [r7, #32]
 80026b0:	fa95 f3a5 	rbit	r3, r5
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	f003 031f 	and.w	r3, r3, #31
 80026bc:	fa06 f303 	lsl.w	r3, r6, r3
 80026c0:	4213      	tst	r3, r2
 80026c2:	d012      	beq.n	80026ea <HAL_RCC_OscConfig+0x49a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7ff f9fa 	bl	8001abc <HAL_GetTick>
 80026c8:	eba0 0008 	sub.w	r0, r0, r8
 80026cc:	f241 3388 	movw	r3, #5000	; 0x1388
 80026d0:	4298      	cmp	r0, r3
 80026d2:	f200 80c5 	bhi.w	8002860 <HAL_RCC_OscConfig+0x610>
 80026d6:	fa95 f3a5 	rbit	r3, r5
 80026da:	fa95 f3a5 	rbit	r3, r5
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d1e5      	bne.n	80026ae <HAL_RCC_OscConfig+0x45e>
 80026e2:	fa95 f3a5 	rbit	r3, r5
 80026e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026e8:	e7e2      	b.n	80026b0 <HAL_RCC_OscConfig+0x460>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80026ea:	f1b9 0f00 	cmp.w	r9, #0
 80026ee:	d134      	bne.n	800275a <HAL_RCC_OscConfig+0x50a>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f0:	69e3      	ldr	r3, [r4, #28]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	f000 80b6 	beq.w	8002864 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026f8:	4a54      	ldr	r2, [pc, #336]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 80026fa:	6852      	ldr	r2, [r2, #4]
 80026fc:	f002 020c 	and.w	r2, r2, #12
 8002700:	2a08      	cmp	r2, #8
 8002702:	f000 808e 	beq.w	8002822 <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002706:	2b02      	cmp	r3, #2
 8002708:	d02d      	beq.n	8002766 <HAL_RCC_OscConfig+0x516>
 800270a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800270e:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800271a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7ff f9ca 	bl	8001abc <HAL_GetTick>
 8002728:	4607      	mov	r7, r0
 800272a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272e:	4e47      	ldr	r6, [pc, #284]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 8002730:	2501      	movs	r5, #1
 8002732:	fa94 f3a4 	rbit	r3, r4
 8002736:	6832      	ldr	r2, [r6, #0]
 8002738:	fa94 f3a4 	rbit	r3, r4
 800273c:	fab3 f383 	clz	r3, r3
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa05 f303 	lsl.w	r3, r5, r3
 8002748:	4213      	tst	r3, r2
 800274a:	d068      	beq.n	800281e <HAL_RCC_OscConfig+0x5ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800274c:	f7ff f9b6 	bl	8001abc <HAL_GetTick>
 8002750:	1bc0      	subs	r0, r0, r7
 8002752:	2802      	cmp	r0, #2
 8002754:	d9ed      	bls.n	8002732 <HAL_RCC_OscConfig+0x4e2>
          {
            return HAL_TIMEOUT;
 8002756:	2003      	movs	r0, #3
 8002758:	e085      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
      __HAL_RCC_PWR_CLK_DISABLE();
 800275a:	4a3c      	ldr	r2, [pc, #240]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 800275c:	69d3      	ldr	r3, [r2, #28]
 800275e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002762:	61d3      	str	r3, [r2, #28]
 8002764:	e7c4      	b.n	80026f0 <HAL_RCC_OscConfig+0x4a0>
 8002766:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800276a:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800276e:	fab3 f383 	clz	r3, r3
 8002772:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002776:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002780:	f7ff f99c 	bl	8001abc <HAL_GetTick>
 8002784:	4680      	mov	r8, r0
 8002786:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800278a:	4f30      	ldr	r7, [pc, #192]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 800278c:	2601      	movs	r6, #1
 800278e:	fa95 f3a5 	rbit	r3, r5
 8002792:	683a      	ldr	r2, [r7, #0]
 8002794:	fa95 f3a5 	rbit	r3, r5
 8002798:	fab3 f383 	clz	r3, r3
 800279c:	f003 031f 	and.w	r3, r3, #31
 80027a0:	fa06 f303 	lsl.w	r3, r6, r3
 80027a4:	4213      	tst	r3, r2
 80027a6:	d007      	beq.n	80027b8 <HAL_RCC_OscConfig+0x568>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a8:	f7ff f988 	bl	8001abc <HAL_GetTick>
 80027ac:	eba0 0008 	sub.w	r0, r0, r8
 80027b0:	2802      	cmp	r0, #2
 80027b2:	d9ec      	bls.n	800278e <HAL_RCC_OscConfig+0x53e>
            return HAL_TIMEOUT;
 80027b4:	2003      	movs	r0, #3
 80027b6:	e056      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027b8:	4924      	ldr	r1, [pc, #144]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 80027ba:	684a      	ldr	r2, [r1, #4]
 80027bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027be:	6a20      	ldr	r0, [r4, #32]
 80027c0:	4303      	orrs	r3, r0
 80027c2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80027c6:	4313      	orrs	r3, r2
 80027c8:	604b      	str	r3, [r1, #4]
 80027ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ce:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80027d2:	fab3 f383 	clz	r3, r3
 80027d6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027da:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	2201      	movs	r2, #1
 80027e2:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027e4:	f7ff f96a 	bl	8001abc <HAL_GetTick>
 80027e8:	4607      	mov	r7, r0
 80027ea:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027ee:	4e17      	ldr	r6, [pc, #92]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 80027f0:	2501      	movs	r5, #1
 80027f2:	fa94 f3a4 	rbit	r3, r4
 80027f6:	6832      	ldr	r2, [r6, #0]
 80027f8:	fa94 f3a4 	rbit	r3, r4
 80027fc:	fab3 f383 	clz	r3, r3
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	fa05 f303 	lsl.w	r3, r5, r3
 8002808:	4213      	tst	r3, r2
 800280a:	d106      	bne.n	800281a <HAL_RCC_OscConfig+0x5ca>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280c:	f7ff f956 	bl	8001abc <HAL_GetTick>
 8002810:	1bc0      	subs	r0, r0, r7
 8002812:	2802      	cmp	r0, #2
 8002814:	d9ed      	bls.n	80027f2 <HAL_RCC_OscConfig+0x5a2>
            return HAL_TIMEOUT;
 8002816:	2003      	movs	r0, #3
 8002818:	e025      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 800281a:	2000      	movs	r0, #0
 800281c:	e023      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
 800281e:	2000      	movs	r0, #0
 8002820:	e021      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002822:	2b01      	cmp	r3, #1
 8002824:	d022      	beq.n	800286c <HAL_RCC_OscConfig+0x61c>
        pll_config = RCC->CFGR;
 8002826:	4b09      	ldr	r3, [pc, #36]	; (800284c <HAL_RCC_OscConfig+0x5fc>)
 8002828:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800282a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 800282e:	6a22      	ldr	r2, [r4, #32]
 8002830:	4291      	cmp	r1, r2
 8002832:	d001      	beq.n	8002838 <HAL_RCC_OscConfig+0x5e8>
          return HAL_ERROR;
 8002834:	2001      	movs	r0, #1
 8002836:	e016      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002838:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800283c:	6a60      	ldr	r0, [r4, #36]	; 0x24
    return HAL_ERROR;
 800283e:	1a18      	subs	r0, r3, r0
 8002840:	bf18      	it	ne
 8002842:	2001      	movne	r0, #1
 8002844:	e00f      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
 8002846:	bf00      	nop
 8002848:	10908120 	.word	0x10908120
 800284c:	40021000 	.word	0x40021000
 8002850:	40007000 	.word	0x40007000
 8002854:	2001      	movs	r0, #1
}
 8002856:	4770      	bx	lr
        return HAL_ERROR;
 8002858:	2001      	movs	r0, #1
 800285a:	e004      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
          return HAL_TIMEOUT;
 800285c:	2003      	movs	r0, #3
 800285e:	e002      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
          return HAL_TIMEOUT;
 8002860:	2003      	movs	r0, #3
 8002862:	e000      	b.n	8002866 <HAL_RCC_OscConfig+0x616>
  return HAL_OK;
 8002864:	2000      	movs	r0, #0
}
 8002866:	b003      	add	sp, #12
 8002868:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return HAL_ERROR;
 800286c:	2001      	movs	r0, #1
 800286e:	e7fa      	b.n	8002866 <HAL_RCC_OscConfig+0x616>

08002870 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002870:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x54>)
 8002872:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002874:	f001 030c 	and.w	r3, r1, #12
 8002878:	2b08      	cmp	r3, #8
 800287a:	d121      	bne.n	80028c0 <HAL_RCC_GetSysClockFreq+0x50>
 800287c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002880:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002884:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8002888:	fab3 f383 	clz	r3, r3
 800288c:	fa22 f303 	lsr.w	r3, r2, r3
 8002890:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <HAL_RCC_GetSysClockFreq+0x58>)
 8002892:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002894:	4b0b      	ldr	r3, [pc, #44]	; (80028c4 <HAL_RCC_GetSysClockFreq+0x54>)
 8002896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002898:	220f      	movs	r2, #15
 800289a:	fa92 f2a2 	rbit	r2, r2
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	fab2 f282 	clz	r2, r2
 80028a6:	40d3      	lsrs	r3, r2
 80028a8:	4a08      	ldr	r2, [pc, #32]	; (80028cc <HAL_RCC_GetSysClockFreq+0x5c>)
 80028aa:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80028ac:	f411 3f80 	tst.w	r1, #65536	; 0x10000
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80028b0:	bf1a      	itte	ne
 80028b2:	4b07      	ldrne	r3, [pc, #28]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x60>)
 80028b4:	fbb3 f3f2 	udivne	r3, r3, r2
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80028b8:	4b06      	ldreq	r3, [pc, #24]	; (80028d4 <HAL_RCC_GetSysClockFreq+0x64>)
 80028ba:	fb03 f000 	mul.w	r0, r3, r0
 80028be:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80028c0:	4803      	ldr	r0, [pc, #12]	; (80028d0 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80028c2:	4770      	bx	lr
 80028c4:	40021000 	.word	0x40021000
 80028c8:	08005a90 	.word	0x08005a90
 80028cc:	08005aa0 	.word	0x08005aa0
 80028d0:	007a1200 	.word	0x007a1200
 80028d4:	003d0900 	.word	0x003d0900

080028d8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80028d8:	2800      	cmp	r0, #0
 80028da:	f000 80c4 	beq.w	8002a66 <HAL_RCC_ClockConfig+0x18e>
{
 80028de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028e2:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028e4:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <HAL_RCC_ClockConfig+0x198>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	428b      	cmp	r3, r1
 80028ee:	d20d      	bcs.n	800290c <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f0:	4a5f      	ldr	r2, [pc, #380]	; (8002a70 <HAL_RCC_ClockConfig+0x198>)
 80028f2:	6813      	ldr	r3, [r2, #0]
 80028f4:	f023 0307 	bic.w	r3, r3, #7
 80028f8:	430b      	orrs	r3, r1
 80028fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028fc:	6813      	ldr	r3, [r2, #0]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	428b      	cmp	r3, r1
 8002904:	d002      	beq.n	800290c <HAL_RCC_ClockConfig+0x34>
      return HAL_ERROR;
 8002906:	2001      	movs	r0, #1
}
 8002908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800290c:	6823      	ldr	r3, [r4, #0]
 800290e:	f013 0f02 	tst.w	r3, #2
 8002912:	d006      	beq.n	8002922 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002914:	4a57      	ldr	r2, [pc, #348]	; (8002a74 <HAL_RCC_ClockConfig+0x19c>)
 8002916:	6853      	ldr	r3, [r2, #4]
 8002918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800291c:	68a0      	ldr	r0, [r4, #8]
 800291e:	4303      	orrs	r3, r0
 8002920:	6053      	str	r3, [r2, #4]
 8002922:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002924:	6823      	ldr	r3, [r4, #0]
 8002926:	f013 0f01 	tst.w	r3, #1
 800292a:	d05b      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292c:	6862      	ldr	r2, [r4, #4]
 800292e:	2a01      	cmp	r2, #1
 8002930:	d02e      	beq.n	8002990 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002932:	2a02      	cmp	r2, #2
 8002934:	d041      	beq.n	80029ba <HAL_RCC_ClockConfig+0xe2>
 8002936:	2302      	movs	r3, #2
 8002938:	fa93 f3a3 	rbit	r3, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800293c:	4b4d      	ldr	r3, [pc, #308]	; (8002a74 <HAL_RCC_ClockConfig+0x19c>)
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	2302      	movs	r3, #2
 8002942:	fa93 f3a3 	rbit	r3, r3
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	f003 031f 	and.w	r3, r3, #31
 800294e:	2101      	movs	r1, #1
 8002950:	fa01 f303 	lsl.w	r3, r1, r3
 8002954:	4203      	tst	r3, r0
 8002956:	f000 8088 	beq.w	8002a6a <HAL_RCC_ClockConfig+0x192>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800295a:	4946      	ldr	r1, [pc, #280]	; (8002a74 <HAL_RCC_ClockConfig+0x19c>)
 800295c:	684b      	ldr	r3, [r1, #4]
 800295e:	f023 0303 	bic.w	r3, r3, #3
 8002962:	4313      	orrs	r3, r2
 8002964:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002966:	f7ff f8a9 	bl	8001abc <HAL_GetTick>
 800296a:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800296c:	4e41      	ldr	r6, [pc, #260]	; (8002a74 <HAL_RCC_ClockConfig+0x19c>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800296e:	f241 3788 	movw	r7, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002972:	6873      	ldr	r3, [r6, #4]
 8002974:	f003 030c 	and.w	r3, r3, #12
 8002978:	6862      	ldr	r2, [r4, #4]
 800297a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800297e:	d031      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002980:	f7ff f89c 	bl	8001abc <HAL_GetTick>
 8002984:	eba0 0008 	sub.w	r0, r0, r8
 8002988:	42b8      	cmp	r0, r7
 800298a:	d9f2      	bls.n	8002972 <HAL_RCC_ClockConfig+0x9a>
        return HAL_TIMEOUT;
 800298c:	2003      	movs	r0, #3
 800298e:	e7bb      	b.n	8002908 <HAL_RCC_ClockConfig+0x30>
 8002990:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002994:	fa93 f3a3 	rbit	r3, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002998:	4b36      	ldr	r3, [pc, #216]	; (8002a74 <HAL_RCC_ClockConfig+0x19c>)
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	fab3 f383 	clz	r3, r3
 80029a8:	f003 031f 	and.w	r3, r3, #31
 80029ac:	2101      	movs	r1, #1
 80029ae:	fa01 f303 	lsl.w	r3, r1, r3
 80029b2:	4203      	tst	r3, r0
 80029b4:	d1d1      	bne.n	800295a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80029b6:	2001      	movs	r0, #1
 80029b8:	e7a6      	b.n	8002908 <HAL_RCC_ClockConfig+0x30>
 80029ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029be:	fa93 f3a3 	rbit	r3, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c2:	4b2c      	ldr	r3, [pc, #176]	; (8002a74 <HAL_RCC_ClockConfig+0x19c>)
 80029c4:	6818      	ldr	r0, [r3, #0]
 80029c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029ca:	fa93 f3a3 	rbit	r3, r3
 80029ce:	fab3 f383 	clz	r3, r3
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2101      	movs	r1, #1
 80029d8:	fa01 f303 	lsl.w	r3, r1, r3
 80029dc:	4203      	tst	r3, r0
 80029de:	d1bc      	bne.n	800295a <HAL_RCC_ClockConfig+0x82>
        return HAL_ERROR;
 80029e0:	2001      	movs	r0, #1
 80029e2:	e791      	b.n	8002908 <HAL_RCC_ClockConfig+0x30>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_RCC_ClockConfig+0x198>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	42ab      	cmp	r3, r5
 80029ee:	d90c      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x132>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f0:	4a1f      	ldr	r2, [pc, #124]	; (8002a70 <HAL_RCC_ClockConfig+0x198>)
 80029f2:	6813      	ldr	r3, [r2, #0]
 80029f4:	f023 0307 	bic.w	r3, r3, #7
 80029f8:	432b      	orrs	r3, r5
 80029fa:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fc:	6813      	ldr	r3, [r2, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	42ab      	cmp	r3, r5
 8002a04:	d001      	beq.n	8002a0a <HAL_RCC_ClockConfig+0x132>
      return HAL_ERROR;
 8002a06:	2001      	movs	r0, #1
 8002a08:	e77e      	b.n	8002908 <HAL_RCC_ClockConfig+0x30>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0a:	6823      	ldr	r3, [r4, #0]
 8002a0c:	f013 0f04 	tst.w	r3, #4
 8002a10:	d006      	beq.n	8002a20 <HAL_RCC_ClockConfig+0x148>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a12:	4a18      	ldr	r2, [pc, #96]	; (8002a74 <HAL_RCC_ClockConfig+0x19c>)
 8002a14:	6853      	ldr	r3, [r2, #4]
 8002a16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a1a:	68e1      	ldr	r1, [r4, #12]
 8002a1c:	430b      	orrs	r3, r1
 8002a1e:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	f013 0f08 	tst.w	r3, #8
 8002a26:	d007      	beq.n	8002a38 <HAL_RCC_ClockConfig+0x160>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a28:	4a12      	ldr	r2, [pc, #72]	; (8002a74 <HAL_RCC_ClockConfig+0x19c>)
 8002a2a:	6853      	ldr	r3, [r2, #4]
 8002a2c:	6921      	ldr	r1, [r4, #16]
 8002a2e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002a32:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002a36:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002a38:	f7ff ff1a 	bl	8002870 <HAL_RCC_GetSysClockFreq>
 8002a3c:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <HAL_RCC_ClockConfig+0x19c>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	22f0      	movs	r2, #240	; 0xf0
 8002a42:	fa92 f2a2 	rbit	r2, r2
 8002a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4a:	fab2 f282 	clz	r2, r2
 8002a4e:	40d3      	lsrs	r3, r2
 8002a50:	4a09      	ldr	r2, [pc, #36]	; (8002a78 <HAL_RCC_ClockConfig+0x1a0>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	40d8      	lsrs	r0, r3
 8002a56:	4b09      	ldr	r3, [pc, #36]	; (8002a7c <HAL_RCC_ClockConfig+0x1a4>)
 8002a58:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_RCC_ClockConfig+0x1a8>)
 8002a5c:	6818      	ldr	r0, [r3, #0]
 8002a5e:	f7fe ffe9 	bl	8001a34 <HAL_InitTick>
  return HAL_OK;
 8002a62:	2000      	movs	r0, #0
 8002a64:	e750      	b.n	8002908 <HAL_RCC_ClockConfig+0x30>
    return HAL_ERROR;
 8002a66:	2001      	movs	r0, #1
}
 8002a68:	4770      	bx	lr
        return HAL_ERROR;
 8002a6a:	2001      	movs	r0, #1
 8002a6c:	e74c      	b.n	8002908 <HAL_RCC_ClockConfig+0x30>
 8002a6e:	bf00      	nop
 8002a70:	40022000 	.word	0x40022000
 8002a74:	40021000 	.word	0x40021000
 8002a78:	08005a78 	.word	0x08005a78
 8002a7c:	20000074 	.word	0x20000074
 8002a80:	2000007c 	.word	0x2000007c

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002a84:	4b08      	ldr	r3, [pc, #32]	; (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002a8c:	fa92 f2a2 	rbit	r2, r2
 8002a90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002a94:	fab2 f282 	clz	r2, r2
 8002a98:	40d3      	lsrs	r3, r2
 8002a9a:	4a04      	ldr	r2, [pc, #16]	; (8002aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a9c:	5cd3      	ldrb	r3, [r2, r3]
 8002a9e:	4a04      	ldr	r2, [pc, #16]	; (8002ab0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8002aa0:	6810      	ldr	r0, [r2, #0]
}    
 8002aa2:	40d8      	lsrs	r0, r3
 8002aa4:	4770      	bx	lr
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	08005a88 	.word	0x08005a88
 8002ab0:	20000074 	.word	0x20000074

08002ab4 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002abc:	6803      	ldr	r3, [r0, #0]
 8002abe:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002ac2:	d044      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ac4:	4b62      	ldr	r3, [pc, #392]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002acc:	d17a      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ace:	4b60      	ldr	r3, [pc, #384]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002ad0:	69da      	ldr	r2, [r3, #28]
 8002ad2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002ad6:	61da      	str	r2, [r3, #28]
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ade:	9301      	str	r3, [sp, #4]
 8002ae0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002ae2:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae4:	4b5b      	ldr	r3, [pc, #364]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002aec:	d06c      	beq.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x114>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002aee:	4b58      	ldr	r3, [pc, #352]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002af0:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002af2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002af6:	d021      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x88>
 8002af8:	6862      	ldr	r2, [r4, #4]
 8002afa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002afe:	429a      	cmp	r2, r3
 8002b00:	d01c      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b02:	4853      	ldr	r0, [pc, #332]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002b04:	6a01      	ldr	r1, [r0, #32]
 8002b06:	f421 7540 	bic.w	r5, r1, #768	; 0x300
 8002b0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b0e:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b12:	fab2 f282 	clz	r2, r2
 8002b16:	4f50      	ldr	r7, [pc, #320]	; (8002c58 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002b18:	443a      	add	r2, r7
 8002b1a:	0092      	lsls	r2, r2, #2
 8002b1c:	f04f 0c01 	mov.w	ip, #1
 8002b20:	f8c2 c000 	str.w	ip, [r2]
 8002b24:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b28:	fab3 f383 	clz	r3, r3
 8002b2c:	443b      	add	r3, r7
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002b34:	6205      	str	r5, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002b36:	f011 0f01 	tst.w	r1, #1
 8002b3a:	d159      	bne.n	8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002b3c:	4a44      	ldr	r2, [pc, #272]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002b3e:	6a13      	ldr	r3, [r2, #32]
 8002b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b44:	6861      	ldr	r1, [r4, #4]
 8002b46:	430b      	orrs	r3, r1
 8002b48:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b4a:	2e00      	cmp	r6, #0
 8002b4c:	d177      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x18a>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b4e:	6823      	ldr	r3, [r4, #0]
 8002b50:	f013 0f01 	tst.w	r3, #1
 8002b54:	d006      	beq.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b56:	4a3e      	ldr	r2, [pc, #248]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002b58:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b5a:	f023 0303 	bic.w	r3, r3, #3
 8002b5e:	68a1      	ldr	r1, [r4, #8]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b64:	6823      	ldr	r3, [r4, #0]
 8002b66:	f013 0f20 	tst.w	r3, #32
 8002b6a:	d006      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b6c:	4a38      	ldr	r2, [pc, #224]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002b6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b70:	f023 0310 	bic.w	r3, r3, #16
 8002b74:	68e1      	ldr	r1, [r4, #12]
 8002b76:	430b      	orrs	r3, r1
 8002b78:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002b7a:	6823      	ldr	r3, [r4, #0]
 8002b7c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002b80:	d006      	beq.n	8002b90 <HAL_RCCEx_PeriphCLKConfig+0xdc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002b82:	4a33      	ldr	r2, [pc, #204]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002b84:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002b86:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002b8a:	6921      	ldr	r1, [r4, #16]
 8002b8c:	430b      	orrs	r3, r1
 8002b8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002b90:	6823      	ldr	r3, [r4, #0]
 8002b92:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002b96:	d006      	beq.n	8002ba6 <HAL_RCCEx_PeriphCLKConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002b98:	4a2d      	ldr	r2, [pc, #180]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002b9a:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ba0:	6961      	ldr	r1, [r4, #20]
 8002ba2:	430b      	orrs	r3, r1
 8002ba4:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002ba6:	6823      	ldr	r3, [r4, #0]
 8002ba8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002bac:	d04e      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002bae:	4a28      	ldr	r2, [pc, #160]	; (8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002bb0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002bb6:	69a1      	ldr	r1, [r4, #24]
 8002bb8:	430b      	orrs	r3, r1
 8002bba:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002bbc:	2000      	movs	r0, #0
}
 8002bbe:	b003      	add	sp, #12
 8002bc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002bc4:	2600      	movs	r6, #0
 8002bc6:	e78d      	b.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002bc8:	4a22      	ldr	r2, [pc, #136]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002bca:	6813      	ldr	r3, [r2, #0]
 8002bcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bd0:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002bd2:	f7fe ff73 	bl	8001abc <HAL_GetTick>
 8002bd6:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bd8:	4d1e      	ldr	r5, [pc, #120]	; (8002c54 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002bda:	682b      	ldr	r3, [r5, #0]
 8002bdc:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002be0:	d185      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002be2:	f7fe ff6b 	bl	8001abc <HAL_GetTick>
 8002be6:	1bc0      	subs	r0, r0, r7
 8002be8:	2864      	cmp	r0, #100	; 0x64
 8002bea:	d9f6      	bls.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x126>
          return HAL_TIMEOUT;
 8002bec:	2003      	movs	r0, #3
 8002bee:	e7e6      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x10a>
        tickstart = HAL_GetTick();
 8002bf0:	f7fe ff64 	bl	8001abc <HAL_GetTick>
 8002bf4:	4681      	mov	r9, r0
 8002bf6:	2502      	movs	r5, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bf8:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8002c50 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8002bfc:	2701      	movs	r7, #1
 8002bfe:	e013      	b.n	8002c28 <HAL_RCCEx_PeriphCLKConfig+0x174>
 8002c00:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8002c04:	fa95 f3a5 	rbit	r3, r5
 8002c08:	fab3 f383 	clz	r3, r3
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	fa07 f303 	lsl.w	r3, r7, r3
 8002c14:	4213      	tst	r3, r2
 8002c16:	d191      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x88>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7fe ff50 	bl	8001abc <HAL_GetTick>
 8002c1c:	eba0 0009 	sub.w	r0, r0, r9
 8002c20:	f241 3388 	movw	r3, #5000	; 0x1388
 8002c24:	4298      	cmp	r0, r3
 8002c26:	d80f      	bhi.n	8002c48 <HAL_RCCEx_PeriphCLKConfig+0x194>
 8002c28:	fa95 f3a5 	rbit	r3, r5
 8002c2c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d1e5      	bne.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002c34:	fa95 f3a5 	rbit	r3, r5
 8002c38:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8002c3c:	e7e2      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x150>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c3e:	69d3      	ldr	r3, [r2, #28]
 8002c40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c44:	61d3      	str	r3, [r2, #28]
 8002c46:	e782      	b.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x9a>
            return HAL_TIMEOUT;
 8002c48:	2003      	movs	r0, #3
 8002c4a:	e7b8      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x10a>
  return HAL_OK;
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	e7b6      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40007000 	.word	0x40007000
 8002c58:	10908100 	.word	0x10908100

08002c5c <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c5c:	6802      	ldr	r2, [r0, #0]
 8002c5e:	68d3      	ldr	r3, [r2, #12]
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	60d3      	str	r3, [r2, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c66:	6802      	ldr	r2, [r0, #0]
 8002c68:	6891      	ldr	r1, [r2, #8]
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_TIM_Base_Start_IT+0x28>)
 8002c6c:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d006      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x24>
 8002c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c76:	d003      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0x24>
  {
    __HAL_TIM_ENABLE(htim);
 8002c78:	6813      	ldr	r3, [r2, #0]
 8002c7a:	f043 0301 	orr.w	r3, r3, #1
 8002c7e:	6013      	str	r3, [r2, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8002c80:	2000      	movs	r0, #0
 8002c82:	4770      	bx	lr
 8002c84:	00010007 	.word	0x00010007

08002c88 <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c88:	6802      	ldr	r2, [r0, #0]
 8002c8a:	68d3      	ldr	r3, [r2, #12]
 8002c8c:	f023 0301 	bic.w	r3, r3, #1
 8002c90:	60d3      	str	r3, [r2, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c92:	6803      	ldr	r3, [r0, #0]
 8002c94:	6a19      	ldr	r1, [r3, #32]
 8002c96:	f241 1211 	movw	r2, #4369	; 0x1111
 8002c9a:	4211      	tst	r1, r2
 8002c9c:	d108      	bne.n	8002cb0 <HAL_TIM_Base_Stop_IT+0x28>
 8002c9e:	6a19      	ldr	r1, [r3, #32]
 8002ca0:	f240 4244 	movw	r2, #1092	; 0x444
 8002ca4:	4211      	tst	r1, r2
 8002ca6:	d103      	bne.n	8002cb0 <HAL_TIM_Base_Stop_IT+0x28>
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f022 0201 	bic.w	r2, r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8002cb0:	2000      	movs	r0, #0
 8002cb2:	4770      	bx	lr

08002cb4 <HAL_TIM_PeriodElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_TIM_OC_DelayElapsedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cb6:	4770      	bx	lr

08002cb8 <HAL_TIM_IC_CaptureCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002cb8:	4770      	bx	lr

08002cba <HAL_TIM_PWM_PulseFinishedCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cba:	4770      	bx	lr

08002cbc <HAL_TIM_TriggerCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002cbc:	4770      	bx	lr

08002cbe <HAL_TIM_IRQHandler>:
{
 8002cbe:	b510      	push	{r4, lr}
 8002cc0:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cc2:	6803      	ldr	r3, [r0, #0]
 8002cc4:	691a      	ldr	r2, [r3, #16]
 8002cc6:	f012 0f02 	tst.w	r2, #2
 8002cca:	d011      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ccc:	68da      	ldr	r2, [r3, #12]
 8002cce:	f012 0f02 	tst.w	r2, #2
 8002cd2:	d00d      	beq.n	8002cf0 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cd4:	f06f 0202 	mvn.w	r2, #2
 8002cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cde:	6803      	ldr	r3, [r0, #0]
 8002ce0:	699b      	ldr	r3, [r3, #24]
 8002ce2:	f013 0f03 	tst.w	r3, #3
 8002ce6:	d079      	beq.n	8002ddc <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002ce8:	f7ff ffe6 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cec:	2300      	movs	r3, #0
 8002cee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	f012 0f04 	tst.w	r2, #4
 8002cf8:	d012      	beq.n	8002d20 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cfa:	68da      	ldr	r2, [r3, #12]
 8002cfc:	f012 0f04 	tst.w	r2, #4
 8002d00:	d00e      	beq.n	8002d20 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d02:	f06f 0204 	mvn.w	r2, #4
 8002d06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d08:	2302      	movs	r3, #2
 8002d0a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d0c:	6823      	ldr	r3, [r4, #0]
 8002d0e:	699b      	ldr	r3, [r3, #24]
 8002d10:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002d14:	d068      	beq.n	8002de8 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d16:	4620      	mov	r0, r4
 8002d18:	f7ff ffce 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d20:	6823      	ldr	r3, [r4, #0]
 8002d22:	691a      	ldr	r2, [r3, #16]
 8002d24:	f012 0f08 	tst.w	r2, #8
 8002d28:	d012      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	f012 0f08 	tst.w	r2, #8
 8002d30:	d00e      	beq.n	8002d50 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d32:	f06f 0208 	mvn.w	r2, #8
 8002d36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d38:	2304      	movs	r3, #4
 8002d3a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d3c:	6823      	ldr	r3, [r4, #0]
 8002d3e:	69db      	ldr	r3, [r3, #28]
 8002d40:	f013 0f03 	tst.w	r3, #3
 8002d44:	d057      	beq.n	8002df6 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d46:	4620      	mov	r0, r4
 8002d48:	f7ff ffb6 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d50:	6823      	ldr	r3, [r4, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	f012 0f10 	tst.w	r2, #16
 8002d58:	d012      	beq.n	8002d80 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d5a:	68da      	ldr	r2, [r3, #12]
 8002d5c:	f012 0f10 	tst.w	r2, #16
 8002d60:	d00e      	beq.n	8002d80 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d62:	f06f 0210 	mvn.w	r2, #16
 8002d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d68:	2308      	movs	r3, #8
 8002d6a:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d6c:	6823      	ldr	r3, [r4, #0]
 8002d6e:	69db      	ldr	r3, [r3, #28]
 8002d70:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002d74:	d046      	beq.n	8002e04 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002d76:	4620      	mov	r0, r4
 8002d78:	f7ff ff9e 	bl	8002cb8 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d80:	6823      	ldr	r3, [r4, #0]
 8002d82:	691a      	ldr	r2, [r3, #16]
 8002d84:	f012 0f01 	tst.w	r2, #1
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d8a:	68da      	ldr	r2, [r3, #12]
 8002d8c:	f012 0f01 	tst.w	r2, #1
 8002d90:	d13f      	bne.n	8002e12 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d92:	6823      	ldr	r3, [r4, #0]
 8002d94:	691a      	ldr	r2, [r3, #16]
 8002d96:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002d9a:	d003      	beq.n	8002da4 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d9c:	68da      	ldr	r2, [r3, #12]
 8002d9e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002da2:	d13d      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	691a      	ldr	r2, [r3, #16]
 8002da8:	f412 7f80 	tst.w	r2, #256	; 0x100
 8002dac:	d003      	beq.n	8002db6 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dae:	68da      	ldr	r2, [r3, #12]
 8002db0:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002db4:	d13b      	bne.n	8002e2e <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002db6:	6823      	ldr	r3, [r4, #0]
 8002db8:	691a      	ldr	r2, [r3, #16]
 8002dba:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002dbe:	d003      	beq.n	8002dc8 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dc0:	68da      	ldr	r2, [r3, #12]
 8002dc2:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002dc6:	d139      	bne.n	8002e3c <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002dc8:	6823      	ldr	r3, [r4, #0]
 8002dca:	691a      	ldr	r2, [r3, #16]
 8002dcc:	f012 0f20 	tst.w	r2, #32
 8002dd0:	d003      	beq.n	8002dda <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002dd2:	68da      	ldr	r2, [r3, #12]
 8002dd4:	f012 0f20 	tst.w	r2, #32
 8002dd8:	d137      	bne.n	8002e4a <HAL_TIM_IRQHandler+0x18c>
}
 8002dda:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ddc:	f7ff ff6b 	bl	8002cb6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002de0:	4620      	mov	r0, r4
 8002de2:	f7ff ff6a 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
 8002de6:	e781      	b.n	8002cec <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de8:	4620      	mov	r0, r4
 8002dea:	f7ff ff64 	bl	8002cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dee:	4620      	mov	r0, r4
 8002df0:	f7ff ff63 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
 8002df4:	e792      	b.n	8002d1c <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df6:	4620      	mov	r0, r4
 8002df8:	f7ff ff5d 	bl	8002cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dfc:	4620      	mov	r0, r4
 8002dfe:	f7ff ff5c 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
 8002e02:	e7a3      	b.n	8002d4c <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e04:	4620      	mov	r0, r4
 8002e06:	f7ff ff56 	bl	8002cb6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e0a:	4620      	mov	r0, r4
 8002e0c:	f7ff ff55 	bl	8002cba <HAL_TIM_PWM_PulseFinishedCallback>
 8002e10:	e7b4      	b.n	8002d7c <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e12:	f06f 0201 	mvn.w	r2, #1
 8002e16:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e18:	4620      	mov	r0, r4
 8002e1a:	f7ff ff4b 	bl	8002cb4 <HAL_TIM_PeriodElapsedCallback>
 8002e1e:	e7b8      	b.n	8002d92 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e24:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8002e26:	4620      	mov	r0, r4
 8002e28:	f000 f999 	bl	800315e <HAL_TIMEx_BreakCallback>
 8002e2c:	e7ba      	b.n	8002da4 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e2e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e32:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8002e34:	4620      	mov	r0, r4
 8002e36:	f000 f993 	bl	8003160 <HAL_TIMEx_Break2Callback>
 8002e3a:	e7bc      	b.n	8002db6 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e3c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e40:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002e42:	4620      	mov	r0, r4
 8002e44:	f7ff ff3a 	bl	8002cbc <HAL_TIM_TriggerCallback>
 8002e48:	e7be      	b.n	8002dc8 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e4a:	f06f 0220 	mvn.w	r2, #32
 8002e4e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8002e50:	4620      	mov	r0, r4
 8002e52:	f000 f983 	bl	800315c <HAL_TIMEx_CommutCallback>
}
 8002e56:	e7c0      	b.n	8002dda <HAL_TIM_IRQHandler+0x11c>

08002e58 <TIM_Base_SetConfig>:
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002e58:	6803      	ldr	r3, [r0, #0]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e5a:	4a3c      	ldr	r2, [pc, #240]	; (8002f4c <TIM_Base_SetConfig+0xf4>)
 8002e5c:	4290      	cmp	r0, r2
 8002e5e:	d021      	beq.n	8002ea4 <TIM_Base_SetConfig+0x4c>
 8002e60:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002e64:	d03f      	beq.n	8002ee6 <TIM_Base_SetConfig+0x8e>
 8002e66:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002e6a:	4290      	cmp	r0, r2
 8002e6c:	d015      	beq.n	8002e9a <TIM_Base_SetConfig+0x42>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e6e:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8002e72:	4290      	cmp	r0, r2
 8002e74:	d03c      	beq.n	8002ef0 <TIM_Base_SetConfig+0x98>
 8002e76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e7a:	4290      	cmp	r0, r2
 8002e7c:	d04a      	beq.n	8002f14 <TIM_Base_SetConfig+0xbc>
 8002e7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e82:	4290      	cmp	r0, r2
 8002e84:	d054      	beq.n	8002f30 <TIM_Base_SetConfig+0xd8>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e8a:	694a      	ldr	r2, [r1, #20]
 8002e8c:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002e8e:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e90:	688b      	ldr	r3, [r1, #8]
 8002e92:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e94:	680b      	ldr	r3, [r1, #0]
 8002e96:	6283      	str	r3, [r0, #40]	; 0x28
 8002e98:	e039      	b.n	8002f0e <TIM_Base_SetConfig+0xb6>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002e9e:	684a      	ldr	r2, [r1, #4]
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	e003      	b.n	8002eac <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ea4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002ea8:	684a      	ldr	r2, [r1, #4]
 8002eaa:	4313      	orrs	r3, r2
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002eb0:	68ca      	ldr	r2, [r1, #12]
 8002eb2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002eb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002eb8:	694a      	ldr	r2, [r1, #20]
 8002eba:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002ebc:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ebe:	688b      	ldr	r3, [r1, #8]
 8002ec0:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002ec2:	680b      	ldr	r3, [r1, #0]
 8002ec4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ec6:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <TIM_Base_SetConfig+0xf4>)
 8002ec8:	4298      	cmp	r0, r3
 8002eca:	d01e      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002ecc:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002ed0:	4298      	cmp	r0, r3
 8002ed2:	d01a      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002ed4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ed8:	4298      	cmp	r0, r3
 8002eda:	d016      	beq.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002edc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee0:	4298      	cmp	r0, r3
 8002ee2:	d114      	bne.n	8002f0e <TIM_Base_SetConfig+0xb6>
 8002ee4:	e011      	b.n	8002f0a <TIM_Base_SetConfig+0xb2>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002eea:	684a      	ldr	r2, [r1, #4]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	e7dd      	b.n	8002eac <TIM_Base_SetConfig+0x54>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef4:	68ca      	ldr	r2, [r1, #12]
 8002ef6:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ef8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002efc:	694a      	ldr	r2, [r1, #20]
 8002efe:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f00:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f02:	688b      	ldr	r3, [r1, #8]
 8002f04:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f06:	680b      	ldr	r3, [r1, #0]
 8002f08:	6283      	str	r3, [r0, #40]	; 0x28
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f0a:	690b      	ldr	r3, [r1, #16]
 8002f0c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	6143      	str	r3, [r0, #20]
}
 8002f12:	4770      	bx	lr
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f18:	68ca      	ldr	r2, [r1, #12]
 8002f1a:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f20:	694a      	ldr	r2, [r1, #20]
 8002f22:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f24:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f26:	688b      	ldr	r3, [r1, #8]
 8002f28:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f2a:	680b      	ldr	r3, [r1, #0]
 8002f2c:	6283      	str	r3, [r0, #40]	; 0x28
 8002f2e:	e7ec      	b.n	8002f0a <TIM_Base_SetConfig+0xb2>
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f34:	68ca      	ldr	r2, [r1, #12]
 8002f36:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f3c:	694a      	ldr	r2, [r1, #20]
 8002f3e:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8002f40:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f42:	688b      	ldr	r3, [r1, #8]
 8002f44:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002f46:	680b      	ldr	r3, [r1, #0]
 8002f48:	6283      	str	r3, [r0, #40]	; 0x28
 8002f4a:	e7de      	b.n	8002f0a <TIM_Base_SetConfig+0xb2>
 8002f4c:	40012c00 	.word	0x40012c00

08002f50 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002f50:	b1a8      	cbz	r0, 8002f7e <HAL_TIM_Base_Init+0x2e>
{
 8002f52:	b510      	push	{r4, lr}
 8002f54:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f56:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002f5a:	b15b      	cbz	r3, 8002f74 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f62:	1d21      	adds	r1, r4, #4
 8002f64:	6820      	ldr	r0, [r4, #0]
 8002f66:	f7ff ff77 	bl	8002e58 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002f70:	2000      	movs	r0, #0
}
 8002f72:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002f74:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8002f78:	f7fe fb5e 	bl	8001638 <HAL_TIM_Base_MspInit>
 8002f7c:	e7ee      	b.n	8002f5c <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002f7e:	2001      	movs	r0, #1
}
 8002f80:	4770      	bx	lr

08002f82 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f82:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f84:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f86:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f8a:	430a      	orrs	r2, r1
 8002f8c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002f90:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f92:	6083      	str	r3, [r0, #8]
}
 8002f94:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002f98:	4770      	bx	lr
	...

08002f9c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002f9c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f000 809b 	beq.w	80030dc <HAL_TIM_ConfigClockSource+0x140>
{
 8002fa6:	b570      	push	{r4, r5, r6, lr}
 8002fa8:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8002faa:	2301      	movs	r3, #1
 8002fac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002fb0:	2302      	movs	r3, #2
 8002fb2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002fb6:	6802      	ldr	r2, [r0, #0]
 8002fb8:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fba:	4b49      	ldr	r3, [pc, #292]	; (80030e0 <HAL_TIM_ConfigClockSource+0x144>)
 8002fbc:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8002fbe:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8002fc0:	680b      	ldr	r3, [r1, #0]
 8002fc2:	2b40      	cmp	r3, #64	; 0x40
 8002fc4:	d070      	beq.n	80030a8 <HAL_TIM_ConfigClockSource+0x10c>
 8002fc6:	d913      	bls.n	8002ff0 <HAL_TIM_ConfigClockSource+0x54>
 8002fc8:	2b60      	cmp	r3, #96	; 0x60
 8002fca:	d052      	beq.n	8003072 <HAL_TIM_ConfigClockSource+0xd6>
 8002fcc:	d923      	bls.n	8003016 <HAL_TIM_ConfigClockSource+0x7a>
 8002fce:	2b70      	cmp	r3, #112	; 0x70
 8002fd0:	d03d      	beq.n	800304e <HAL_TIM_ConfigClockSource+0xb2>
 8002fd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fd6:	d145      	bne.n	8003064 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 8002fd8:	68cb      	ldr	r3, [r1, #12]
 8002fda:	684a      	ldr	r2, [r1, #4]
 8002fdc:	6889      	ldr	r1, [r1, #8]
 8002fde:	6820      	ldr	r0, [r4, #0]
 8002fe0:	f7ff ffcf 	bl	8002f82 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002fe4:	6822      	ldr	r2, [r4, #0]
 8002fe6:	6893      	ldr	r3, [r2, #8]
 8002fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fec:	6093      	str	r3, [r2, #8]
      break;
 8002fee:	e039      	b.n	8003064 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8002ff0:	2b10      	cmp	r3, #16
 8002ff2:	d007      	beq.n	8003004 <HAL_TIM_ConfigClockSource+0x68>
 8002ff4:	d904      	bls.n	8003000 <HAL_TIM_ConfigClockSource+0x64>
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	d004      	beq.n	8003004 <HAL_TIM_ConfigClockSource+0x68>
 8002ffa:	2b30      	cmp	r3, #48	; 0x30
 8002ffc:	d002      	beq.n	8003004 <HAL_TIM_ConfigClockSource+0x68>
 8002ffe:	e031      	b.n	8003064 <HAL_TIM_ConfigClockSource+0xc8>
 8003000:	2b00      	cmp	r3, #0
 8003002:	d12f      	bne.n	8003064 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003004:	6821      	ldr	r1, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003006:	688a      	ldr	r2, [r1, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003008:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800300c:	f043 0307 	orr.w	r3, r3, #7
 8003010:	4313      	orrs	r3, r2
  TIMx->SMCR = tmpsmcr;
 8003012:	608b      	str	r3, [r1, #8]
 8003014:	e026      	b.n	8003064 <HAL_TIM_ConfigClockSource+0xc8>
  switch (sClockSourceConfig->ClockSource)
 8003016:	2b50      	cmp	r3, #80	; 0x50
 8003018:	d124      	bne.n	8003064 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800301a:	6823      	ldr	r3, [r4, #0]
 800301c:	6848      	ldr	r0, [r1, #4]
 800301e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8003020:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003022:	6a1d      	ldr	r5, [r3, #32]
 8003024:	f025 0501 	bic.w	r5, r5, #1
 8003028:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800302a:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800302c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003030:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003034:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8003038:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 800303a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800303c:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800303e:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 8003040:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003042:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003046:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800304a:	6093      	str	r3, [r2, #8]
 800304c:	e00a      	b.n	8003064 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_ETR_SetConfig(htim->Instance,
 800304e:	68cb      	ldr	r3, [r1, #12]
 8003050:	684a      	ldr	r2, [r1, #4]
 8003052:	6889      	ldr	r1, [r1, #8]
 8003054:	6820      	ldr	r0, [r4, #0]
 8003056:	f7ff ff94 	bl	8002f82 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800305a:	6822      	ldr	r2, [r4, #0]
 800305c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800305e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8003062:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8003064:	2301      	movs	r3, #1
 8003066:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800306a:	2000      	movs	r0, #0
 800306c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003070:	bd70      	pop	{r4, r5, r6, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003072:	6823      	ldr	r3, [r4, #0]
 8003074:	684d      	ldr	r5, [r1, #4]
 8003076:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003078:	6a18      	ldr	r0, [r3, #32]
 800307a:	f020 0010 	bic.w	r0, r0, #16
 800307e:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003080:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 8003082:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003084:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003088:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800308c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8003090:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8003094:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8003096:	621a      	str	r2, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003098:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 800309a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800309c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030a0:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 80030a4:	6093      	str	r3, [r2, #8]
 80030a6:	e7dd      	b.n	8003064 <HAL_TIM_ConfigClockSource+0xc8>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a8:	6823      	ldr	r3, [r4, #0]
 80030aa:	6848      	ldr	r0, [r1, #4]
 80030ac:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80030ae:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030b0:	6a1d      	ldr	r5, [r3, #32]
 80030b2:	f025 0501 	bic.w	r5, r5, #1
 80030b6:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b8:	699a      	ldr	r2, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030ba:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80030be:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80030c2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80030c6:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80030c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030ca:	6219      	str	r1, [r3, #32]
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030cc:	6822      	ldr	r2, [r4, #0]
  tmpsmcr = TIMx->SMCR;
 80030ce:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80030d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030d4:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 80030d8:	6093      	str	r3, [r2, #8]
 80030da:	e7c3      	b.n	8003064 <HAL_TIM_ConfigClockSource+0xc8>
  __HAL_LOCK(htim);
 80030dc:	2002      	movs	r0, #2
}
 80030de:	4770      	bx	lr
 80030e0:	fffe0088 	.word	0xfffe0088

080030e4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030e4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d033      	beq.n	8003154 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 80030ec:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 80030ee:	2301      	movs	r3, #1
 80030f0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f4:	2302      	movs	r3, #2
 80030f6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030fa:	6802      	ldr	r2, [r0, #0]
 80030fc:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030fe:	6894      	ldr	r4, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003100:	4d15      	ldr	r5, [pc, #84]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8003102:	42aa      	cmp	r2, r5
 8003104:	d021      	beq.n	800314a <HAL_TIMEx_MasterConfigSynchronization+0x66>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800310a:	680d      	ldr	r5, [r1, #0]
 800310c:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800310e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003110:	6803      	ldr	r3, [r0, #0]
 8003112:	4a11      	ldr	r2, [pc, #68]	; (8003158 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d00a      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8003118:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311c:	d007      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800311e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003122:	4293      	cmp	r3, r2
 8003124:	d003      	beq.n	800312e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8003126:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800312a:	4293      	cmp	r3, r2
 800312c:	d104      	bne.n	8003138 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800312e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003132:	688a      	ldr	r2, [r1, #8]
 8003134:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003136:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003138:	2301      	movs	r3, #1
 800313a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800313e:	2300      	movs	r3, #0
 8003140:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 8003144:	4618      	mov	r0, r3
}
 8003146:	bc30      	pop	{r4, r5}
 8003148:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 800314a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800314e:	684d      	ldr	r5, [r1, #4]
 8003150:	432b      	orrs	r3, r5
 8003152:	e7d8      	b.n	8003106 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 8003154:	2002      	movs	r0, #2
}
 8003156:	4770      	bx	lr
 8003158:	40012c00 	.word	0x40012c00

0800315c <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800315c:	4770      	bx	lr

0800315e <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800315e:	4770      	bx	lr

08003160 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003160:	4770      	bx	lr

08003162 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003162:	6802      	ldr	r2, [r0, #0]
 8003164:	6813      	ldr	r3, [r2, #0]
 8003166:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800316a:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800316c:	6802      	ldr	r2, [r0, #0]
 800316e:	6893      	ldr	r3, [r2, #8]
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003176:	2320      	movs	r3, #32
 8003178:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	6603      	str	r3, [r0, #96]	; 0x60
}
 800317e:	4770      	bx	lr

08003180 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003180:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8003182:	2b21      	cmp	r3, #33	; 0x21
 8003184:	d000      	beq.n	8003188 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003186:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8003188:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800318c:	b29b      	uxth	r3, r3
 800318e:	b16b      	cbz	r3, 80031ac <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003190:	6803      	ldr	r3, [r0, #0]
 8003192:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8003194:	7812      	ldrb	r2, [r2, #0]
 8003196:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003198:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800319a:	3301      	adds	r3, #1
 800319c:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800319e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80031a2:	3b01      	subs	r3, #1
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 80031aa:	e7ec      	b.n	8003186 <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80031ac:	6802      	ldr	r2, [r0, #0]
 80031ae:	6813      	ldr	r3, [r2, #0]
 80031b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031b4:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031b6:	6802      	ldr	r2, [r0, #0]
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4770      	bx	lr

080031c2 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031c2:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80031c4:	2b21      	cmp	r3, #33	; 0x21
 80031c6:	d000      	beq.n	80031ca <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80031c8:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 80031ca:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	b17b      	cbz	r3, 80031f2 <UART_TxISR_16BIT+0x30>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80031d2:	6802      	ldr	r2, [r0, #0]
 80031d4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80031d6:	881b      	ldrh	r3, [r3, #0]
 80031d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031dc:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80031de:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80031e0:	3302      	adds	r3, #2
 80031e2:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80031e4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80031e8:	3b01      	subs	r3, #1
 80031ea:	b29b      	uxth	r3, r3
 80031ec:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 80031f0:	e7ea      	b.n	80031c8 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80031f2:	6802      	ldr	r2, [r0, #0]
 80031f4:	6813      	ldr	r3, [r2, #0]
 80031f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fa:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80031fc:	6802      	ldr	r2, [r0, #0]
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003204:	6013      	str	r3, [r2, #0]
 8003206:	4770      	bx	lr

08003208 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8003208:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800320a:	2b20      	cmp	r3, #32
 800320c:	d128      	bne.n	8003260 <HAL_UART_Transmit_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 800320e:	b349      	cbz	r1, 8003264 <HAL_UART_Transmit_IT+0x5c>
 8003210:	b352      	cbz	r2, 8003268 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8003212:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003216:	2b01      	cmp	r3, #1
 8003218:	d028      	beq.n	800326c <HAL_UART_Transmit_IT+0x64>
 800321a:	2301      	movs	r3, #1
 800321c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8003220:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003222:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 8003226:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 800322a:	2300      	movs	r3, #0
 800322c:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800322e:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003230:	2321      	movs	r3, #33	; 0x21
 8003232:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003234:	6883      	ldr	r3, [r0, #8]
 8003236:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323a:	d00b      	beq.n	8003254 <HAL_UART_Transmit_IT+0x4c>
      huart->TxISR = UART_TxISR_8BIT;
 800323c:	4b0c      	ldr	r3, [pc, #48]	; (8003270 <HAL_UART_Transmit_IT+0x68>)
 800323e:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 8003240:	2300      	movs	r3, #0
 8003242:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003246:	6801      	ldr	r1, [r0, #0]
 8003248:	680a      	ldr	r2, [r1, #0]
 800324a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800324e:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 8003250:	4618      	mov	r0, r3
 8003252:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003254:	6903      	ldr	r3, [r0, #16]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 800325a:	4b06      	ldr	r3, [pc, #24]	; (8003274 <HAL_UART_Transmit_IT+0x6c>)
 800325c:	6643      	str	r3, [r0, #100]	; 0x64
 800325e:	e7ef      	b.n	8003240 <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 8003260:	2002      	movs	r0, #2
 8003262:	4770      	bx	lr
      return HAL_ERROR;
 8003264:	2001      	movs	r0, #1
 8003266:	4770      	bx	lr
 8003268:	2001      	movs	r0, #1
 800326a:	4770      	bx	lr
    __HAL_LOCK(huart);
 800326c:	2002      	movs	r0, #2
}
 800326e:	4770      	bx	lr
 8003270:	08003181 	.word	0x08003181
 8003274:	080031c3 	.word	0x080031c3

08003278 <HAL_UART_TxCpltCallback>:
}
 8003278:	4770      	bx	lr

0800327a <HAL_UART_ErrorCallback>:
}
 800327a:	4770      	bx	lr

0800327c <HAL_UART_IRQHandler>:
{
 800327c:	b538      	push	{r3, r4, r5, lr}
 800327e:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003280:	6802      	ldr	r2, [r0, #0]
 8003282:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003284:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003286:	6890      	ldr	r0, [r2, #8]
  if (errorflags == 0U)
 8003288:	f640 050f 	movw	r5, #2063	; 0x80f
 800328c:	422b      	tst	r3, r5
 800328e:	d10e      	bne.n	80032ae <HAL_UART_IRQHandler+0x32>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003290:	f013 0f20 	tst.w	r3, #32
 8003294:	f000 808e 	beq.w	80033b4 <HAL_UART_IRQHandler+0x138>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003298:	f011 0f20 	tst.w	r1, #32
 800329c:	f000 808a 	beq.w	80033b4 <HAL_UART_IRQHandler+0x138>
      if (huart->RxISR != NULL)
 80032a0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 80a4 	beq.w	80033f0 <HAL_UART_IRQHandler+0x174>
        huart->RxISR(huart);
 80032a8:	4620      	mov	r0, r4
 80032aa:	4798      	blx	r3
 80032ac:	e0a0      	b.n	80033f0 <HAL_UART_IRQHandler+0x174>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032ae:	f010 0501 	ands.w	r5, r0, #1
 80032b2:	d102      	bne.n	80032ba <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 80032b4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80032b8:	d07c      	beq.n	80033b4 <HAL_UART_IRQHandler+0x138>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032ba:	f013 0f01 	tst.w	r3, #1
 80032be:	d007      	beq.n	80032d0 <HAL_UART_IRQHandler+0x54>
 80032c0:	f411 7f80 	tst.w	r1, #256	; 0x100
 80032c4:	d004      	beq.n	80032d0 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80032c6:	2001      	movs	r0, #1
 80032c8:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80032ca:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80032cc:	4302      	orrs	r2, r0
 80032ce:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032d0:	f013 0f02 	tst.w	r3, #2
 80032d4:	d05a      	beq.n	800338c <HAL_UART_IRQHandler+0x110>
 80032d6:	b185      	cbz	r5, 80032fa <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032d8:	6822      	ldr	r2, [r4, #0]
 80032da:	2002      	movs	r0, #2
 80032dc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032de:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80032e0:	f042 0204 	orr.w	r2, r2, #4
 80032e4:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032e6:	f013 0f04 	tst.w	r3, #4
 80032ea:	d006      	beq.n	80032fa <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032ec:	6822      	ldr	r2, [r4, #0]
 80032ee:	2004      	movs	r0, #4
 80032f0:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032f2:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80032f4:	f042 0202 	orr.w	r2, r2, #2
 80032f8:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032fa:	f013 0f08 	tst.w	r3, #8
 80032fe:	d009      	beq.n	8003314 <HAL_UART_IRQHandler+0x98>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003300:	f011 0f20 	tst.w	r1, #32
 8003304:	d100      	bne.n	8003308 <HAL_UART_IRQHandler+0x8c>
 8003306:	b12d      	cbz	r5, 8003314 <HAL_UART_IRQHandler+0x98>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003308:	6822      	ldr	r2, [r4, #0]
 800330a:	2008      	movs	r0, #8
 800330c:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800330e:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003310:	4302      	orrs	r2, r0
 8003312:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003314:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8003318:	d00a      	beq.n	8003330 <HAL_UART_IRQHandler+0xb4>
 800331a:	f011 6f80 	tst.w	r1, #67108864	; 0x4000000
 800331e:	d007      	beq.n	8003330 <HAL_UART_IRQHandler+0xb4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003320:	6822      	ldr	r2, [r4, #0]
 8003322:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003326:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003328:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800332a:	f042 0220 	orr.w	r2, r2, #32
 800332e:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003330:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 8003332:	2a00      	cmp	r2, #0
 8003334:	d05c      	beq.n	80033f0 <HAL_UART_IRQHandler+0x174>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003336:	f013 0f20 	tst.w	r3, #32
 800333a:	d006      	beq.n	800334a <HAL_UART_IRQHandler+0xce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800333c:	f011 0f20 	tst.w	r1, #32
 8003340:	d003      	beq.n	800334a <HAL_UART_IRQHandler+0xce>
        if (huart->RxISR != NULL)
 8003342:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003344:	b10b      	cbz	r3, 800334a <HAL_UART_IRQHandler+0xce>
          huart->RxISR(huart);
 8003346:	4620      	mov	r0, r4
 8003348:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 800334a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800334c:	6823      	ldr	r3, [r4, #0]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	f013 0f40 	tst.w	r3, #64	; 0x40
 8003354:	d102      	bne.n	800335c <HAL_UART_IRQHandler+0xe0>
 8003356:	f012 0f28 	tst.w	r2, #40	; 0x28
 800335a:	d025      	beq.n	80033a8 <HAL_UART_IRQHandler+0x12c>
        UART_EndRxTransfer(huart);
 800335c:	4620      	mov	r0, r4
 800335e:	f7ff ff00 	bl	8003162 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	689a      	ldr	r2, [r3, #8]
 8003366:	f012 0f40 	tst.w	r2, #64	; 0x40
 800336a:	d019      	beq.n	80033a0 <HAL_UART_IRQHandler+0x124>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800336c:	689a      	ldr	r2, [r3, #8]
 800336e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003372:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8003374:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8003376:	b17b      	cbz	r3, 8003398 <HAL_UART_IRQHandler+0x11c>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003378:	4a24      	ldr	r2, [pc, #144]	; (800340c <HAL_UART_IRQHandler+0x190>)
 800337a:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800337c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800337e:	f7fe fe0b 	bl	8001f98 <HAL_DMA_Abort_IT>
 8003382:	b3a8      	cbz	r0, 80033f0 <HAL_UART_IRQHandler+0x174>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003384:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003386:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8003388:	4798      	blx	r3
 800338a:	e031      	b.n	80033f0 <HAL_UART_IRQHandler+0x174>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800338c:	f013 0f04 	tst.w	r3, #4
 8003390:	d0b3      	beq.n	80032fa <HAL_UART_IRQHandler+0x7e>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d1aa      	bne.n	80032ec <HAL_UART_IRQHandler+0x70>
 8003396:	e7b0      	b.n	80032fa <HAL_UART_IRQHandler+0x7e>
            HAL_UART_ErrorCallback(huart);
 8003398:	4620      	mov	r0, r4
 800339a:	f7ff ff6e 	bl	800327a <HAL_UART_ErrorCallback>
 800339e:	e027      	b.n	80033f0 <HAL_UART_IRQHandler+0x174>
          HAL_UART_ErrorCallback(huart);
 80033a0:	4620      	mov	r0, r4
 80033a2:	f7ff ff6a 	bl	800327a <HAL_UART_ErrorCallback>
 80033a6:	e023      	b.n	80033f0 <HAL_UART_IRQHandler+0x174>
        HAL_UART_ErrorCallback(huart);
 80033a8:	4620      	mov	r0, r4
 80033aa:	f7ff ff66 	bl	800327a <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ae:	2300      	movs	r3, #0
 80033b0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80033b2:	e01d      	b.n	80033f0 <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80033b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80033b8:	d002      	beq.n	80033c0 <HAL_UART_IRQHandler+0x144>
 80033ba:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 80033be:	d10a      	bne.n	80033d6 <HAL_UART_IRQHandler+0x15a>
  if (((isrflags & USART_ISR_TXE) != 0U)
 80033c0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80033c4:	d00e      	beq.n	80033e4 <HAL_UART_IRQHandler+0x168>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80033c6:	f011 0f80 	tst.w	r1, #128	; 0x80
 80033ca:	d00b      	beq.n	80033e4 <HAL_UART_IRQHandler+0x168>
    if (huart->TxISR != NULL)
 80033cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80033ce:	b17b      	cbz	r3, 80033f0 <HAL_UART_IRQHandler+0x174>
      huart->TxISR(huart);
 80033d0:	4620      	mov	r0, r4
 80033d2:	4798      	blx	r3
 80033d4:	e00c      	b.n	80033f0 <HAL_UART_IRQHandler+0x174>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80033d6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80033da:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80033dc:	4620      	mov	r0, r4
 80033de:	f000 fa0b 	bl	80037f8 <HAL_UARTEx_WakeupCallback>
    return;
 80033e2:	e005      	b.n	80033f0 <HAL_UART_IRQHandler+0x174>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80033e4:	f013 0f40 	tst.w	r3, #64	; 0x40
 80033e8:	d002      	beq.n	80033f0 <HAL_UART_IRQHandler+0x174>
 80033ea:	f011 0f40 	tst.w	r1, #64	; 0x40
 80033ee:	d100      	bne.n	80033f2 <HAL_UART_IRQHandler+0x176>
}
 80033f0:	bd38      	pop	{r3, r4, r5, pc}
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033f2:	6813      	ldr	r3, [r2, #0]
 80033f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f8:	6013      	str	r3, [r2, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80033fa:	2320      	movs	r3, #32
 80033fc:	6763      	str	r3, [r4, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	6663      	str	r3, [r4, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003402:	4620      	mov	r0, r4
 8003404:	f7ff ff38 	bl	8003278 <HAL_UART_TxCpltCallback>
 8003408:	e7f2      	b.n	80033f0 <HAL_UART_IRQHandler+0x174>
 800340a:	bf00      	nop
 800340c:	08003411 	.word	0x08003411

08003410 <UART_DMAAbortOnError>:
{
 8003410:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003412:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800341a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800341e:	f7ff ff2c 	bl	800327a <HAL_UART_ErrorCallback>
}
 8003422:	bd08      	pop	{r3, pc}

08003424 <UART_SetConfig>:
{
 8003424:	b510      	push	{r4, lr}
 8003426:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003428:	6801      	ldr	r1, [r0, #0]
 800342a:	6808      	ldr	r0, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800342c:	68a3      	ldr	r3, [r4, #8]
 800342e:	6922      	ldr	r2, [r4, #16]
 8003430:	4313      	orrs	r3, r2
 8003432:	6962      	ldr	r2, [r4, #20]
 8003434:	4313      	orrs	r3, r2
 8003436:	69e2      	ldr	r2, [r4, #28]
 8003438:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800343a:	4a5e      	ldr	r2, [pc, #376]	; (80035b4 <UART_SetConfig+0x190>)
 800343c:	4002      	ands	r2, r0
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003442:	6822      	ldr	r2, [r4, #0]
 8003444:	6853      	ldr	r3, [r2, #4]
 8003446:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800344a:	68e1      	ldr	r1, [r4, #12]
 800344c:	430b      	orrs	r3, r1
 800344e:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003450:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003452:	6821      	ldr	r1, [r4, #0]
 8003454:	688a      	ldr	r2, [r1, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8003456:	6a20      	ldr	r0, [r4, #32]
 8003458:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800345a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800345e:	4313      	orrs	r3, r2
 8003460:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003462:	6823      	ldr	r3, [r4, #0]
 8003464:	4a54      	ldr	r2, [pc, #336]	; (80035b8 <UART_SetConfig+0x194>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d00d      	beq.n	8003486 <UART_SetConfig+0x62>
 800346a:	4a54      	ldr	r2, [pc, #336]	; (80035bc <UART_SetConfig+0x198>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d07d      	beq.n	800356c <UART_SetConfig+0x148>
 8003470:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003474:	4293      	cmp	r3, r2
 8003476:	d079      	beq.n	800356c <UART_SetConfig+0x148>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003478:	69e3      	ldr	r3, [r4, #28]
 800347a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800347e:	d036      	beq.n	80034ee <UART_SetConfig+0xca>
        ret = HAL_ERROR;
 8003480:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003482:	2300      	movs	r3, #0
 8003484:	e07f      	b.n	8003586 <UART_SetConfig+0x162>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003486:	4b4e      	ldr	r3, [pc, #312]	; (80035c0 <UART_SetConfig+0x19c>)
 8003488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800348a:	f003 0303 	and.w	r3, r3, #3
 800348e:	2b03      	cmp	r3, #3
 8003490:	d866      	bhi.n	8003560 <UART_SetConfig+0x13c>
 8003492:	e8df f003 	tbb	[pc, r3]
 8003496:	5702      	.short	0x5702
 8003498:	482e      	.short	0x482e
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800349a:	69e3      	ldr	r3, [r4, #28]
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	d168      	bne.n	8003574 <UART_SetConfig+0x150>
        pclk = HAL_RCC_GetPCLK1Freq();
 80034a2:	f7ff faef 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034a6:	6862      	ldr	r2, [r4, #4]
 80034a8:	0853      	lsrs	r3, r2, #1
 80034aa:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80034ae:	fbb3 f3f2 	udiv	r3, r3, r2
 80034b2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034b4:	2000      	movs	r0, #0
        break;
 80034b6:	e028      	b.n	800350a <UART_SetConfig+0xe6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80034b8:	6862      	ldr	r2, [r4, #4]
 80034ba:	0853      	lsrs	r3, r2, #1
 80034bc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80034c0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80034c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80034c8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034ca:	2000      	movs	r0, #0
        break;
 80034cc:	e01d      	b.n	800350a <UART_SetConfig+0xe6>
        ret = HAL_ERROR;
 80034ce:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e01a      	b.n	800350a <UART_SetConfig+0xe6>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80034d4:	6862      	ldr	r2, [r4, #4]
 80034d6:	0853      	lsrs	r3, r2, #1
 80034d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80034dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80034e0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80034e2:	2000      	movs	r0, #0
        break;
 80034e4:	e04f      	b.n	8003586 <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 80034e6:	2001      	movs	r0, #1
 80034e8:	e055      	b.n	8003596 <UART_SetConfig+0x172>
      ret = HAL_ERROR;
 80034ea:	2001      	movs	r0, #1
 80034ec:	e053      	b.n	8003596 <UART_SetConfig+0x172>
      ret = HAL_ERROR;
 80034ee:	2001      	movs	r0, #1
 80034f0:	e051      	b.n	8003596 <UART_SetConfig+0x172>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034f2:	69e3      	ldr	r3, [r4, #28]
 80034f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f8:	d1ec      	bne.n	80034d4 <UART_SetConfig+0xb0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80034fa:	6862      	ldr	r2, [r4, #4]
 80034fc:	0853      	lsrs	r3, r2, #1
 80034fe:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8003502:	fbb3 f3f2 	udiv	r3, r3, r2
 8003506:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003508:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800350a:	f1a3 0110 	sub.w	r1, r3, #16
 800350e:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003512:	4291      	cmp	r1, r2
 8003514:	d8e7      	bhi.n	80034e6 <UART_SetConfig+0xc2>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003516:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 800351a:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800351c:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8003520:	4313      	orrs	r3, r2
 8003522:	60cb      	str	r3, [r1, #12]
 8003524:	e037      	b.n	8003596 <UART_SetConfig+0x172>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003526:	69e3      	ldr	r3, [r4, #28]
 8003528:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800352c:	d0c4      	beq.n	80034b8 <UART_SetConfig+0x94>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800352e:	6862      	ldr	r2, [r4, #4]
 8003530:	0853      	lsrs	r3, r2, #1
 8003532:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003536:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800353a:	fbb3 f3f2 	udiv	r3, r3, r2
 800353e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003540:	2000      	movs	r0, #0
        break;
 8003542:	e020      	b.n	8003586 <UART_SetConfig+0x162>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003544:	69e3      	ldr	r3, [r4, #28]
 8003546:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800354a:	d028      	beq.n	800359e <UART_SetConfig+0x17a>
        pclk = HAL_RCC_GetSysClockFreq();
 800354c:	f7ff f990 	bl	8002870 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003550:	6862      	ldr	r2, [r4, #4]
 8003552:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003556:	fbb3 f3f2 	udiv	r3, r3, r2
 800355a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800355c:	2000      	movs	r0, #0
        break;
 800355e:	e012      	b.n	8003586 <UART_SetConfig+0x162>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003560:	69e3      	ldr	r3, [r4, #28]
 8003562:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003566:	d0b2      	beq.n	80034ce <UART_SetConfig+0xaa>
      ret = HAL_ERROR;
 8003568:	2001      	movs	r0, #1
 800356a:	e014      	b.n	8003596 <UART_SetConfig+0x172>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800356c:	69e3      	ldr	r3, [r4, #28]
 800356e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003572:	d096      	beq.n	80034a2 <UART_SetConfig+0x7e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003574:	f7ff fa86 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003578:	6862      	ldr	r2, [r4, #4]
 800357a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800357e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003582:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003584:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003586:	f1a3 0110 	sub.w	r1, r3, #16
 800358a:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800358e:	4291      	cmp	r1, r2
 8003590:	d8ab      	bhi.n	80034ea <UART_SetConfig+0xc6>
      huart->Instance->BRR = usartdiv;
 8003592:	6822      	ldr	r2, [r4, #0]
 8003594:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8003596:	2300      	movs	r3, #0
 8003598:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800359a:	6663      	str	r3, [r4, #100]	; 0x64
}
 800359c:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 800359e:	f7ff f967 	bl	8002870 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80035a2:	6862      	ldr	r2, [r4, #4]
 80035a4:	0853      	lsrs	r3, r2, #1
 80035a6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80035aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ae:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80035b0:	2000      	movs	r0, #0
        break;
 80035b2:	e7aa      	b.n	800350a <UART_SetConfig+0xe6>
 80035b4:	efff69f3 	.word	0xefff69f3
 80035b8:	40013800 	.word	0x40013800
 80035bc:	40004400 	.word	0x40004400
 80035c0:	40021000 	.word	0x40021000

080035c4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035c4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035c6:	f013 0f01 	tst.w	r3, #1
 80035ca:	d006      	beq.n	80035da <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035cc:	6802      	ldr	r2, [r0, #0]
 80035ce:	6853      	ldr	r3, [r2, #4]
 80035d0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035d4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80035d6:	430b      	orrs	r3, r1
 80035d8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035da:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035dc:	f013 0f02 	tst.w	r3, #2
 80035e0:	d006      	beq.n	80035f0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035e2:	6802      	ldr	r2, [r0, #0]
 80035e4:	6853      	ldr	r3, [r2, #4]
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035f0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80035f2:	f013 0f04 	tst.w	r3, #4
 80035f6:	d006      	beq.n	8003606 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035f8:	6802      	ldr	r2, [r0, #0]
 80035fa:	6853      	ldr	r3, [r2, #4]
 80035fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003600:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8003602:	430b      	orrs	r3, r1
 8003604:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003606:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003608:	f013 0f08 	tst.w	r3, #8
 800360c:	d006      	beq.n	800361c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800360e:	6802      	ldr	r2, [r0, #0]
 8003610:	6853      	ldr	r3, [r2, #4]
 8003612:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003616:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003618:	430b      	orrs	r3, r1
 800361a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800361c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800361e:	f013 0f10 	tst.w	r3, #16
 8003622:	d006      	beq.n	8003632 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003624:	6802      	ldr	r2, [r0, #0]
 8003626:	6893      	ldr	r3, [r2, #8]
 8003628:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800362c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800362e:	430b      	orrs	r3, r1
 8003630:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003632:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003634:	f013 0f20 	tst.w	r3, #32
 8003638:	d006      	beq.n	8003648 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800363a:	6802      	ldr	r2, [r0, #0]
 800363c:	6893      	ldr	r3, [r2, #8]
 800363e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003642:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003644:	430b      	orrs	r3, r1
 8003646:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003648:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800364a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800364e:	d00a      	beq.n	8003666 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003650:	6802      	ldr	r2, [r0, #0]
 8003652:	6853      	ldr	r3, [r2, #4]
 8003654:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003658:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800365a:	430b      	orrs	r3, r1
 800365c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800365e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003660:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003664:	d00b      	beq.n	800367e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003666:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003668:	f013 0f80 	tst.w	r3, #128	; 0x80
 800366c:	d006      	beq.n	800367c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800366e:	6802      	ldr	r2, [r0, #0]
 8003670:	6853      	ldr	r3, [r2, #4]
 8003672:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003676:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003678:	430b      	orrs	r3, r1
 800367a:	6053      	str	r3, [r2, #4]
}
 800367c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800367e:	6802      	ldr	r2, [r0, #0]
 8003680:	6853      	ldr	r3, [r2, #4]
 8003682:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003686:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003688:	430b      	orrs	r3, r1
 800368a:	6053      	str	r3, [r2, #4]
 800368c:	e7eb      	b.n	8003666 <UART_AdvFeatureConfig+0xa2>

0800368e <UART_WaitOnFlagUntilTimeout>:
{
 800368e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003692:	4607      	mov	r7, r0
 8003694:	460e      	mov	r6, r1
 8003696:	4615      	mov	r5, r2
 8003698:	4698      	mov	r8, r3
 800369a:	9c06      	ldr	r4, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369c:	683a      	ldr	r2, [r7, #0]
 800369e:	69d3      	ldr	r3, [r2, #28]
 80036a0:	ea36 0303 	bics.w	r3, r6, r3
 80036a4:	bf0c      	ite	eq
 80036a6:	2301      	moveq	r3, #1
 80036a8:	2300      	movne	r3, #0
 80036aa:	42ab      	cmp	r3, r5
 80036ac:	d13a      	bne.n	8003724 <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	f1b4 3fff 	cmp.w	r4, #4294967295
 80036b2:	d0f4      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b4:	f7fe fa02 	bl	8001abc <HAL_GetTick>
 80036b8:	eba0 0008 	sub.w	r0, r0, r8
 80036bc:	42a0      	cmp	r0, r4
 80036be:	d81f      	bhi.n	8003700 <UART_WaitOnFlagUntilTimeout+0x72>
 80036c0:	b1f4      	cbz	r4, 8003700 <UART_WaitOnFlagUntilTimeout+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	f012 0f04 	tst.w	r2, #4
 80036ca:	d0e7      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036cc:	69da      	ldr	r2, [r3, #28]
 80036ce:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80036d2:	d0e3      	beq.n	800369c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036d8:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036da:	683a      	ldr	r2, [r7, #0]
 80036dc:	6813      	ldr	r3, [r2, #0]
 80036de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036e2:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036e4:	683a      	ldr	r2, [r7, #0]
 80036e6:	6893      	ldr	r3, [r2, #8]
 80036e8:	f023 0301 	bic.w	r3, r3, #1
 80036ec:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80036ee:	2320      	movs	r3, #32
 80036f0:	677b      	str	r3, [r7, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80036f2:	67bb      	str	r3, [r7, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f4:	67fb      	str	r3, [r7, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80036f6:	2300      	movs	r3, #0
 80036f8:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
          return HAL_TIMEOUT;
 80036fc:	2003      	movs	r0, #3
 80036fe:	e012      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003700:	683a      	ldr	r2, [r7, #0]
 8003702:	6813      	ldr	r3, [r2, #0]
 8003704:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003708:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800370a:	683a      	ldr	r2, [r7, #0]
 800370c:	6893      	ldr	r3, [r2, #8]
 800370e:	f023 0301 	bic.w	r3, r3, #1
 8003712:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003714:	2320      	movs	r3, #32
 8003716:	677b      	str	r3, [r7, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003718:	67bb      	str	r3, [r7, #120]	; 0x78
        __HAL_UNLOCK(huart);
 800371a:	2300      	movs	r3, #0
 800371c:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
        return HAL_TIMEOUT;
 8003720:	2003      	movs	r0, #3
 8003722:	e000      	b.n	8003726 <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 8003724:	2000      	movs	r0, #0
}
 8003726:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800372a <UART_CheckIdleState>:
{
 800372a:	b530      	push	{r4, r5, lr}
 800372c:	b083      	sub	sp, #12
 800372e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	2300      	movs	r3, #0
 8003732:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003734:	f7fe f9c2 	bl	8001abc <HAL_GetTick>
 8003738:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800373a:	6823      	ldr	r3, [r4, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f013 0f08 	tst.w	r3, #8
 8003742:	d10c      	bne.n	800375e <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f013 0f04 	tst.w	r3, #4
 800374c:	d115      	bne.n	800377a <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800374e:	2320      	movs	r3, #32
 8003750:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003752:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003754:	2000      	movs	r0, #0
 8003756:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800375a:	b003      	add	sp, #12
 800375c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800375e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	4603      	mov	r3, r0
 8003766:	2200      	movs	r2, #0
 8003768:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800376c:	4620      	mov	r0, r4
 800376e:	f7ff ff8e 	bl	800368e <UART_WaitOnFlagUntilTimeout>
 8003772:	2800      	cmp	r0, #0
 8003774:	d0e6      	beq.n	8003744 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003776:	2003      	movs	r0, #3
 8003778:	e7ef      	b.n	800375a <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800377a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800377e:	9300      	str	r3, [sp, #0]
 8003780:	462b      	mov	r3, r5
 8003782:	2200      	movs	r2, #0
 8003784:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003788:	4620      	mov	r0, r4
 800378a:	f7ff ff80 	bl	800368e <UART_WaitOnFlagUntilTimeout>
 800378e:	2800      	cmp	r0, #0
 8003790:	d0dd      	beq.n	800374e <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003792:	2003      	movs	r0, #3
 8003794:	e7e1      	b.n	800375a <UART_CheckIdleState+0x30>

08003796 <HAL_UART_Init>:
  if (huart == NULL)
 8003796:	b368      	cbz	r0, 80037f4 <HAL_UART_Init+0x5e>
{
 8003798:	b510      	push	{r4, lr}
 800379a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800379c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800379e:	b303      	cbz	r3, 80037e2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 80037a0:	2324      	movs	r3, #36	; 0x24
 80037a2:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 80037a4:	6822      	ldr	r2, [r4, #0]
 80037a6:	6813      	ldr	r3, [r2, #0]
 80037a8:	f023 0301 	bic.w	r3, r3, #1
 80037ac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ae:	4620      	mov	r0, r4
 80037b0:	f7ff fe38 	bl	8003424 <UART_SetConfig>
 80037b4:	2801      	cmp	r0, #1
 80037b6:	d013      	beq.n	80037e0 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80037ba:	b9bb      	cbnz	r3, 80037ec <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037bc:	6822      	ldr	r2, [r4, #0]
 80037be:	6853      	ldr	r3, [r2, #4]
 80037c0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80037c4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037c6:	6822      	ldr	r2, [r4, #0]
 80037c8:	6893      	ldr	r3, [r2, #8]
 80037ca:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80037ce:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80037d0:	6822      	ldr	r2, [r4, #0]
 80037d2:	6813      	ldr	r3, [r2, #0]
 80037d4:	f043 0301 	orr.w	r3, r3, #1
 80037d8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80037da:	4620      	mov	r0, r4
 80037dc:	f7ff ffa5 	bl	800372a <UART_CheckIdleState>
}
 80037e0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80037e2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80037e6:	f7fd ff5f 	bl	80016a8 <HAL_UART_MspInit>
 80037ea:	e7d9      	b.n	80037a0 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80037ec:	4620      	mov	r0, r4
 80037ee:	f7ff fee9 	bl	80035c4 <UART_AdvFeatureConfig>
 80037f2:	e7e3      	b.n	80037bc <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80037f4:	2001      	movs	r0, #1
}
 80037f6:	4770      	bx	lr

080037f8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80037f8:	4770      	bx	lr
	...

080037fc <__errno>:
 80037fc:	4b01      	ldr	r3, [pc, #4]	; (8003804 <__errno+0x8>)
 80037fe:	6818      	ldr	r0, [r3, #0]
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000080 	.word	0x20000080

08003808 <__libc_init_array>:
 8003808:	b570      	push	{r4, r5, r6, lr}
 800380a:	4e0d      	ldr	r6, [pc, #52]	; (8003840 <__libc_init_array+0x38>)
 800380c:	4c0d      	ldr	r4, [pc, #52]	; (8003844 <__libc_init_array+0x3c>)
 800380e:	1ba4      	subs	r4, r4, r6
 8003810:	10a4      	asrs	r4, r4, #2
 8003812:	2500      	movs	r5, #0
 8003814:	42a5      	cmp	r5, r4
 8003816:	d109      	bne.n	800382c <__libc_init_array+0x24>
 8003818:	4e0b      	ldr	r6, [pc, #44]	; (8003848 <__libc_init_array+0x40>)
 800381a:	4c0c      	ldr	r4, [pc, #48]	; (800384c <__libc_init_array+0x44>)
 800381c:	f002 f8c6 	bl	80059ac <_init>
 8003820:	1ba4      	subs	r4, r4, r6
 8003822:	10a4      	asrs	r4, r4, #2
 8003824:	2500      	movs	r5, #0
 8003826:	42a5      	cmp	r5, r4
 8003828:	d105      	bne.n	8003836 <__libc_init_array+0x2e>
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003830:	4798      	blx	r3
 8003832:	3501      	adds	r5, #1
 8003834:	e7ee      	b.n	8003814 <__libc_init_array+0xc>
 8003836:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800383a:	4798      	blx	r3
 800383c:	3501      	adds	r5, #1
 800383e:	e7f2      	b.n	8003826 <__libc_init_array+0x1e>
 8003840:	08005cd0 	.word	0x08005cd0
 8003844:	08005cd0 	.word	0x08005cd0
 8003848:	08005cd0 	.word	0x08005cd0
 800384c:	08005cd4 	.word	0x08005cd4

08003850 <malloc>:
 8003850:	4b02      	ldr	r3, [pc, #8]	; (800385c <malloc+0xc>)
 8003852:	4601      	mov	r1, r0
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	f000 b861 	b.w	800391c <_malloc_r>
 800385a:	bf00      	nop
 800385c:	20000080 	.word	0x20000080

08003860 <free>:
 8003860:	4b02      	ldr	r3, [pc, #8]	; (800386c <free+0xc>)
 8003862:	4601      	mov	r1, r0
 8003864:	6818      	ldr	r0, [r3, #0]
 8003866:	f000 b80b 	b.w	8003880 <_free_r>
 800386a:	bf00      	nop
 800386c:	20000080 	.word	0x20000080

08003870 <memset>:
 8003870:	4402      	add	r2, r0
 8003872:	4603      	mov	r3, r0
 8003874:	4293      	cmp	r3, r2
 8003876:	d100      	bne.n	800387a <memset+0xa>
 8003878:	4770      	bx	lr
 800387a:	f803 1b01 	strb.w	r1, [r3], #1
 800387e:	e7f9      	b.n	8003874 <memset+0x4>

08003880 <_free_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4605      	mov	r5, r0
 8003884:	2900      	cmp	r1, #0
 8003886:	d045      	beq.n	8003914 <_free_r+0x94>
 8003888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800388c:	1f0c      	subs	r4, r1, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	bfb8      	it	lt
 8003892:	18e4      	addlt	r4, r4, r3
 8003894:	f000 f8ac 	bl	80039f0 <__malloc_lock>
 8003898:	4a1f      	ldr	r2, [pc, #124]	; (8003918 <_free_r+0x98>)
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	4610      	mov	r0, r2
 800389e:	b933      	cbnz	r3, 80038ae <_free_r+0x2e>
 80038a0:	6063      	str	r3, [r4, #4]
 80038a2:	6014      	str	r4, [r2, #0]
 80038a4:	4628      	mov	r0, r5
 80038a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038aa:	f000 b8a2 	b.w	80039f2 <__malloc_unlock>
 80038ae:	42a3      	cmp	r3, r4
 80038b0:	d90c      	bls.n	80038cc <_free_r+0x4c>
 80038b2:	6821      	ldr	r1, [r4, #0]
 80038b4:	1862      	adds	r2, r4, r1
 80038b6:	4293      	cmp	r3, r2
 80038b8:	bf04      	itt	eq
 80038ba:	681a      	ldreq	r2, [r3, #0]
 80038bc:	685b      	ldreq	r3, [r3, #4]
 80038be:	6063      	str	r3, [r4, #4]
 80038c0:	bf04      	itt	eq
 80038c2:	1852      	addeq	r2, r2, r1
 80038c4:	6022      	streq	r2, [r4, #0]
 80038c6:	6004      	str	r4, [r0, #0]
 80038c8:	e7ec      	b.n	80038a4 <_free_r+0x24>
 80038ca:	4613      	mov	r3, r2
 80038cc:	685a      	ldr	r2, [r3, #4]
 80038ce:	b10a      	cbz	r2, 80038d4 <_free_r+0x54>
 80038d0:	42a2      	cmp	r2, r4
 80038d2:	d9fa      	bls.n	80038ca <_free_r+0x4a>
 80038d4:	6819      	ldr	r1, [r3, #0]
 80038d6:	1858      	adds	r0, r3, r1
 80038d8:	42a0      	cmp	r0, r4
 80038da:	d10b      	bne.n	80038f4 <_free_r+0x74>
 80038dc:	6820      	ldr	r0, [r4, #0]
 80038de:	4401      	add	r1, r0
 80038e0:	1858      	adds	r0, r3, r1
 80038e2:	4282      	cmp	r2, r0
 80038e4:	6019      	str	r1, [r3, #0]
 80038e6:	d1dd      	bne.n	80038a4 <_free_r+0x24>
 80038e8:	6810      	ldr	r0, [r2, #0]
 80038ea:	6852      	ldr	r2, [r2, #4]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	4401      	add	r1, r0
 80038f0:	6019      	str	r1, [r3, #0]
 80038f2:	e7d7      	b.n	80038a4 <_free_r+0x24>
 80038f4:	d902      	bls.n	80038fc <_free_r+0x7c>
 80038f6:	230c      	movs	r3, #12
 80038f8:	602b      	str	r3, [r5, #0]
 80038fa:	e7d3      	b.n	80038a4 <_free_r+0x24>
 80038fc:	6820      	ldr	r0, [r4, #0]
 80038fe:	1821      	adds	r1, r4, r0
 8003900:	428a      	cmp	r2, r1
 8003902:	bf04      	itt	eq
 8003904:	6811      	ldreq	r1, [r2, #0]
 8003906:	6852      	ldreq	r2, [r2, #4]
 8003908:	6062      	str	r2, [r4, #4]
 800390a:	bf04      	itt	eq
 800390c:	1809      	addeq	r1, r1, r0
 800390e:	6021      	streq	r1, [r4, #0]
 8003910:	605c      	str	r4, [r3, #4]
 8003912:	e7c7      	b.n	80038a4 <_free_r+0x24>
 8003914:	bd38      	pop	{r3, r4, r5, pc}
 8003916:	bf00      	nop
 8003918:	2000012c 	.word	0x2000012c

0800391c <_malloc_r>:
 800391c:	b570      	push	{r4, r5, r6, lr}
 800391e:	1ccd      	adds	r5, r1, #3
 8003920:	f025 0503 	bic.w	r5, r5, #3
 8003924:	3508      	adds	r5, #8
 8003926:	2d0c      	cmp	r5, #12
 8003928:	bf38      	it	cc
 800392a:	250c      	movcc	r5, #12
 800392c:	2d00      	cmp	r5, #0
 800392e:	4606      	mov	r6, r0
 8003930:	db01      	blt.n	8003936 <_malloc_r+0x1a>
 8003932:	42a9      	cmp	r1, r5
 8003934:	d903      	bls.n	800393e <_malloc_r+0x22>
 8003936:	230c      	movs	r3, #12
 8003938:	6033      	str	r3, [r6, #0]
 800393a:	2000      	movs	r0, #0
 800393c:	bd70      	pop	{r4, r5, r6, pc}
 800393e:	f000 f857 	bl	80039f0 <__malloc_lock>
 8003942:	4a21      	ldr	r2, [pc, #132]	; (80039c8 <_malloc_r+0xac>)
 8003944:	6814      	ldr	r4, [r2, #0]
 8003946:	4621      	mov	r1, r4
 8003948:	b991      	cbnz	r1, 8003970 <_malloc_r+0x54>
 800394a:	4c20      	ldr	r4, [pc, #128]	; (80039cc <_malloc_r+0xb0>)
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	b91b      	cbnz	r3, 8003958 <_malloc_r+0x3c>
 8003950:	4630      	mov	r0, r6
 8003952:	f000 f83d 	bl	80039d0 <_sbrk_r>
 8003956:	6020      	str	r0, [r4, #0]
 8003958:	4629      	mov	r1, r5
 800395a:	4630      	mov	r0, r6
 800395c:	f000 f838 	bl	80039d0 <_sbrk_r>
 8003960:	1c43      	adds	r3, r0, #1
 8003962:	d124      	bne.n	80039ae <_malloc_r+0x92>
 8003964:	230c      	movs	r3, #12
 8003966:	6033      	str	r3, [r6, #0]
 8003968:	4630      	mov	r0, r6
 800396a:	f000 f842 	bl	80039f2 <__malloc_unlock>
 800396e:	e7e4      	b.n	800393a <_malloc_r+0x1e>
 8003970:	680b      	ldr	r3, [r1, #0]
 8003972:	1b5b      	subs	r3, r3, r5
 8003974:	d418      	bmi.n	80039a8 <_malloc_r+0x8c>
 8003976:	2b0b      	cmp	r3, #11
 8003978:	d90f      	bls.n	800399a <_malloc_r+0x7e>
 800397a:	600b      	str	r3, [r1, #0]
 800397c:	50cd      	str	r5, [r1, r3]
 800397e:	18cc      	adds	r4, r1, r3
 8003980:	4630      	mov	r0, r6
 8003982:	f000 f836 	bl	80039f2 <__malloc_unlock>
 8003986:	f104 000b 	add.w	r0, r4, #11
 800398a:	1d23      	adds	r3, r4, #4
 800398c:	f020 0007 	bic.w	r0, r0, #7
 8003990:	1ac3      	subs	r3, r0, r3
 8003992:	d0d3      	beq.n	800393c <_malloc_r+0x20>
 8003994:	425a      	negs	r2, r3
 8003996:	50e2      	str	r2, [r4, r3]
 8003998:	e7d0      	b.n	800393c <_malloc_r+0x20>
 800399a:	428c      	cmp	r4, r1
 800399c:	684b      	ldr	r3, [r1, #4]
 800399e:	bf16      	itet	ne
 80039a0:	6063      	strne	r3, [r4, #4]
 80039a2:	6013      	streq	r3, [r2, #0]
 80039a4:	460c      	movne	r4, r1
 80039a6:	e7eb      	b.n	8003980 <_malloc_r+0x64>
 80039a8:	460c      	mov	r4, r1
 80039aa:	6849      	ldr	r1, [r1, #4]
 80039ac:	e7cc      	b.n	8003948 <_malloc_r+0x2c>
 80039ae:	1cc4      	adds	r4, r0, #3
 80039b0:	f024 0403 	bic.w	r4, r4, #3
 80039b4:	42a0      	cmp	r0, r4
 80039b6:	d005      	beq.n	80039c4 <_malloc_r+0xa8>
 80039b8:	1a21      	subs	r1, r4, r0
 80039ba:	4630      	mov	r0, r6
 80039bc:	f000 f808 	bl	80039d0 <_sbrk_r>
 80039c0:	3001      	adds	r0, #1
 80039c2:	d0cf      	beq.n	8003964 <_malloc_r+0x48>
 80039c4:	6025      	str	r5, [r4, #0]
 80039c6:	e7db      	b.n	8003980 <_malloc_r+0x64>
 80039c8:	2000012c 	.word	0x2000012c
 80039cc:	20000130 	.word	0x20000130

080039d0 <_sbrk_r>:
 80039d0:	b538      	push	{r3, r4, r5, lr}
 80039d2:	4c06      	ldr	r4, [pc, #24]	; (80039ec <_sbrk_r+0x1c>)
 80039d4:	2300      	movs	r3, #0
 80039d6:	4605      	mov	r5, r0
 80039d8:	4608      	mov	r0, r1
 80039da:	6023      	str	r3, [r4, #0]
 80039dc:	f7fd ff52 	bl	8001884 <_sbrk>
 80039e0:	1c43      	adds	r3, r0, #1
 80039e2:	d102      	bne.n	80039ea <_sbrk_r+0x1a>
 80039e4:	6823      	ldr	r3, [r4, #0]
 80039e6:	b103      	cbz	r3, 80039ea <_sbrk_r+0x1a>
 80039e8:	602b      	str	r3, [r5, #0]
 80039ea:	bd38      	pop	{r3, r4, r5, pc}
 80039ec:	200017b8 	.word	0x200017b8

080039f0 <__malloc_lock>:
 80039f0:	4770      	bx	lr

080039f2 <__malloc_unlock>:
 80039f2:	4770      	bx	lr
 80039f4:	0000      	movs	r0, r0
	...

080039f8 <sin>:
 80039f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80039fa:	ec51 0b10 	vmov	r0, r1, d0
 80039fe:	4a20      	ldr	r2, [pc, #128]	; (8003a80 <sin+0x88>)
 8003a00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a04:	4293      	cmp	r3, r2
 8003a06:	dc07      	bgt.n	8003a18 <sin+0x20>
 8003a08:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003a78 <sin+0x80>
 8003a0c:	2000      	movs	r0, #0
 8003a0e:	f001 fd67 	bl	80054e0 <__kernel_sin>
 8003a12:	ec51 0b10 	vmov	r0, r1, d0
 8003a16:	e007      	b.n	8003a28 <sin+0x30>
 8003a18:	4a1a      	ldr	r2, [pc, #104]	; (8003a84 <sin+0x8c>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	dd09      	ble.n	8003a32 <sin+0x3a>
 8003a1e:	ee10 2a10 	vmov	r2, s0
 8003a22:	460b      	mov	r3, r1
 8003a24:	f7fc fbd4 	bl	80001d0 <__aeabi_dsub>
 8003a28:	ec41 0b10 	vmov	d0, r0, r1
 8003a2c:	b005      	add	sp, #20
 8003a2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a32:	4668      	mov	r0, sp
 8003a34:	f000 fea8 	bl	8004788 <__ieee754_rem_pio2>
 8003a38:	f000 0003 	and.w	r0, r0, #3
 8003a3c:	2801      	cmp	r0, #1
 8003a3e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003a42:	ed9d 0b00 	vldr	d0, [sp]
 8003a46:	d004      	beq.n	8003a52 <sin+0x5a>
 8003a48:	2802      	cmp	r0, #2
 8003a4a:	d005      	beq.n	8003a58 <sin+0x60>
 8003a4c:	b970      	cbnz	r0, 8003a6c <sin+0x74>
 8003a4e:	2001      	movs	r0, #1
 8003a50:	e7dd      	b.n	8003a0e <sin+0x16>
 8003a52:	f001 f93d 	bl	8004cd0 <__kernel_cos>
 8003a56:	e7dc      	b.n	8003a12 <sin+0x1a>
 8003a58:	2001      	movs	r0, #1
 8003a5a:	f001 fd41 	bl	80054e0 <__kernel_sin>
 8003a5e:	ec53 2b10 	vmov	r2, r3, d0
 8003a62:	ee10 0a10 	vmov	r0, s0
 8003a66:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003a6a:	e7dd      	b.n	8003a28 <sin+0x30>
 8003a6c:	f001 f930 	bl	8004cd0 <__kernel_cos>
 8003a70:	e7f5      	b.n	8003a5e <sin+0x66>
 8003a72:	bf00      	nop
 8003a74:	f3af 8000 	nop.w
	...
 8003a80:	3fe921fb 	.word	0x3fe921fb
 8003a84:	7fefffff 	.word	0x7fefffff

08003a88 <pow>:
 8003a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a8c:	ed2d 8b04 	vpush	{d8-d9}
 8003a90:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8003d64 <pow+0x2dc>
 8003a94:	b08d      	sub	sp, #52	; 0x34
 8003a96:	ec57 6b10 	vmov	r6, r7, d0
 8003a9a:	ec55 4b11 	vmov	r4, r5, d1
 8003a9e:	f000 f963 	bl	8003d68 <__ieee754_pow>
 8003aa2:	f999 3000 	ldrsb.w	r3, [r9]
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	eeb0 8a40 	vmov.f32	s16, s0
 8003aae:	eef0 8a60 	vmov.f32	s17, s1
 8003ab2:	46c8      	mov	r8, r9
 8003ab4:	d05f      	beq.n	8003b76 <pow+0xee>
 8003ab6:	4622      	mov	r2, r4
 8003ab8:	462b      	mov	r3, r5
 8003aba:	4620      	mov	r0, r4
 8003abc:	4629      	mov	r1, r5
 8003abe:	f7fc ffd9 	bl	8000a74 <__aeabi_dcmpun>
 8003ac2:	4683      	mov	fp, r0
 8003ac4:	2800      	cmp	r0, #0
 8003ac6:	d156      	bne.n	8003b76 <pow+0xee>
 8003ac8:	4632      	mov	r2, r6
 8003aca:	463b      	mov	r3, r7
 8003acc:	4630      	mov	r0, r6
 8003ace:	4639      	mov	r1, r7
 8003ad0:	f7fc ffd0 	bl	8000a74 <__aeabi_dcmpun>
 8003ad4:	9001      	str	r0, [sp, #4]
 8003ad6:	b1e8      	cbz	r0, 8003b14 <pow+0x8c>
 8003ad8:	2200      	movs	r2, #0
 8003ada:	2300      	movs	r3, #0
 8003adc:	4620      	mov	r0, r4
 8003ade:	4629      	mov	r1, r5
 8003ae0:	f7fc ff96 	bl	8000a10 <__aeabi_dcmpeq>
 8003ae4:	2800      	cmp	r0, #0
 8003ae6:	d046      	beq.n	8003b76 <pow+0xee>
 8003ae8:	2301      	movs	r3, #1
 8003aea:	9302      	str	r3, [sp, #8]
 8003aec:	4b96      	ldr	r3, [pc, #600]	; (8003d48 <pow+0x2c0>)
 8003aee:	9303      	str	r3, [sp, #12]
 8003af0:	4b96      	ldr	r3, [pc, #600]	; (8003d4c <pow+0x2c4>)
 8003af2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003af6:	2200      	movs	r2, #0
 8003af8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003afc:	9b00      	ldr	r3, [sp, #0]
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003b04:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003b08:	d033      	beq.n	8003b72 <pow+0xea>
 8003b0a:	a802      	add	r0, sp, #8
 8003b0c:	f001 fe38 	bl	8005780 <matherr>
 8003b10:	bb48      	cbnz	r0, 8003b66 <pow+0xde>
 8003b12:	e05d      	b.n	8003bd0 <pow+0x148>
 8003b14:	f04f 0a00 	mov.w	sl, #0
 8003b18:	f04f 0b00 	mov.w	fp, #0
 8003b1c:	4652      	mov	r2, sl
 8003b1e:	465b      	mov	r3, fp
 8003b20:	4630      	mov	r0, r6
 8003b22:	4639      	mov	r1, r7
 8003b24:	f7fc ff74 	bl	8000a10 <__aeabi_dcmpeq>
 8003b28:	ec4b ab19 	vmov	d9, sl, fp
 8003b2c:	2800      	cmp	r0, #0
 8003b2e:	d054      	beq.n	8003bda <pow+0x152>
 8003b30:	4652      	mov	r2, sl
 8003b32:	465b      	mov	r3, fp
 8003b34:	4620      	mov	r0, r4
 8003b36:	4629      	mov	r1, r5
 8003b38:	f7fc ff6a 	bl	8000a10 <__aeabi_dcmpeq>
 8003b3c:	4680      	mov	r8, r0
 8003b3e:	b318      	cbz	r0, 8003b88 <pow+0x100>
 8003b40:	2301      	movs	r3, #1
 8003b42:	9302      	str	r3, [sp, #8]
 8003b44:	4b80      	ldr	r3, [pc, #512]	; (8003d48 <pow+0x2c0>)
 8003b46:	9303      	str	r3, [sp, #12]
 8003b48:	9b01      	ldr	r3, [sp, #4]
 8003b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8003b4c:	9b00      	ldr	r3, [sp, #0]
 8003b4e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003b52:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003b56:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d0d5      	beq.n	8003b0a <pow+0x82>
 8003b5e:	4b7b      	ldr	r3, [pc, #492]	; (8003d4c <pow+0x2c4>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003b66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b68:	b11b      	cbz	r3, 8003b72 <pow+0xea>
 8003b6a:	f7ff fe47 	bl	80037fc <__errno>
 8003b6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003b70:	6003      	str	r3, [r0, #0]
 8003b72:	ed9d 8b08 	vldr	d8, [sp, #32]
 8003b76:	eeb0 0a48 	vmov.f32	s0, s16
 8003b7a:	eef0 0a68 	vmov.f32	s1, s17
 8003b7e:	b00d      	add	sp, #52	; 0x34
 8003b80:	ecbd 8b04 	vpop	{d8-d9}
 8003b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b88:	ec45 4b10 	vmov	d0, r4, r5
 8003b8c:	f001 fd6b 	bl	8005666 <finite>
 8003b90:	2800      	cmp	r0, #0
 8003b92:	d0f0      	beq.n	8003b76 <pow+0xee>
 8003b94:	4652      	mov	r2, sl
 8003b96:	465b      	mov	r3, fp
 8003b98:	4620      	mov	r0, r4
 8003b9a:	4629      	mov	r1, r5
 8003b9c:	f7fc ff42 	bl	8000a24 <__aeabi_dcmplt>
 8003ba0:	2800      	cmp	r0, #0
 8003ba2:	d0e8      	beq.n	8003b76 <pow+0xee>
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	9302      	str	r3, [sp, #8]
 8003ba8:	4b67      	ldr	r3, [pc, #412]	; (8003d48 <pow+0x2c0>)
 8003baa:	9303      	str	r3, [sp, #12]
 8003bac:	f999 3000 	ldrsb.w	r3, [r9]
 8003bb0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003bb4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003bb8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003bbc:	b913      	cbnz	r3, 8003bc4 <pow+0x13c>
 8003bbe:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003bc2:	e7a2      	b.n	8003b0a <pow+0x82>
 8003bc4:	4962      	ldr	r1, [pc, #392]	; (8003d50 <pow+0x2c8>)
 8003bc6:	2000      	movs	r0, #0
 8003bc8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d19c      	bne.n	8003b0a <pow+0x82>
 8003bd0:	f7ff fe14 	bl	80037fc <__errno>
 8003bd4:	2321      	movs	r3, #33	; 0x21
 8003bd6:	6003      	str	r3, [r0, #0]
 8003bd8:	e7c5      	b.n	8003b66 <pow+0xde>
 8003bda:	eeb0 0a48 	vmov.f32	s0, s16
 8003bde:	eef0 0a68 	vmov.f32	s1, s17
 8003be2:	f001 fd40 	bl	8005666 <finite>
 8003be6:	9000      	str	r0, [sp, #0]
 8003be8:	2800      	cmp	r0, #0
 8003bea:	f040 8081 	bne.w	8003cf0 <pow+0x268>
 8003bee:	ec47 6b10 	vmov	d0, r6, r7
 8003bf2:	f001 fd38 	bl	8005666 <finite>
 8003bf6:	2800      	cmp	r0, #0
 8003bf8:	d07a      	beq.n	8003cf0 <pow+0x268>
 8003bfa:	ec45 4b10 	vmov	d0, r4, r5
 8003bfe:	f001 fd32 	bl	8005666 <finite>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d074      	beq.n	8003cf0 <pow+0x268>
 8003c06:	ec53 2b18 	vmov	r2, r3, d8
 8003c0a:	ee18 0a10 	vmov	r0, s16
 8003c0e:	4619      	mov	r1, r3
 8003c10:	f7fc ff30 	bl	8000a74 <__aeabi_dcmpun>
 8003c14:	f999 9000 	ldrsb.w	r9, [r9]
 8003c18:	4b4b      	ldr	r3, [pc, #300]	; (8003d48 <pow+0x2c0>)
 8003c1a:	b1b0      	cbz	r0, 8003c4a <pow+0x1c2>
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c22:	9b00      	ldr	r3, [sp, #0]
 8003c24:	930a      	str	r3, [sp, #40]	; 0x28
 8003c26:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003c2a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003c2e:	f1b9 0f00 	cmp.w	r9, #0
 8003c32:	d0c4      	beq.n	8003bbe <pow+0x136>
 8003c34:	4652      	mov	r2, sl
 8003c36:	465b      	mov	r3, fp
 8003c38:	4650      	mov	r0, sl
 8003c3a:	4659      	mov	r1, fp
 8003c3c:	f7fc fdaa 	bl	8000794 <__aeabi_ddiv>
 8003c40:	f1b9 0f02 	cmp.w	r9, #2
 8003c44:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003c48:	e7c1      	b.n	8003bce <pow+0x146>
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003c50:	900a      	str	r0, [sp, #40]	; 0x28
 8003c52:	4629      	mov	r1, r5
 8003c54:	4620      	mov	r0, r4
 8003c56:	2200      	movs	r2, #0
 8003c58:	4b3e      	ldr	r3, [pc, #248]	; (8003d54 <pow+0x2cc>)
 8003c5a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003c5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003c62:	f7fc fc6d 	bl	8000540 <__aeabi_dmul>
 8003c66:	4604      	mov	r4, r0
 8003c68:	460d      	mov	r5, r1
 8003c6a:	f1b9 0f00 	cmp.w	r9, #0
 8003c6e:	d124      	bne.n	8003cba <pow+0x232>
 8003c70:	4b39      	ldr	r3, [pc, #228]	; (8003d58 <pow+0x2d0>)
 8003c72:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003c76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003c7a:	4630      	mov	r0, r6
 8003c7c:	4652      	mov	r2, sl
 8003c7e:	465b      	mov	r3, fp
 8003c80:	4639      	mov	r1, r7
 8003c82:	f7fc fecf 	bl	8000a24 <__aeabi_dcmplt>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d056      	beq.n	8003d38 <pow+0x2b0>
 8003c8a:	ec45 4b10 	vmov	d0, r4, r5
 8003c8e:	f001 fd83 	bl	8005798 <rint>
 8003c92:	4622      	mov	r2, r4
 8003c94:	462b      	mov	r3, r5
 8003c96:	ec51 0b10 	vmov	r0, r1, d0
 8003c9a:	f7fc feb9 	bl	8000a10 <__aeabi_dcmpeq>
 8003c9e:	b920      	cbnz	r0, 8003caa <pow+0x222>
 8003ca0:	4b2e      	ldr	r3, [pc, #184]	; (8003d5c <pow+0x2d4>)
 8003ca2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003ca6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003caa:	f998 3000 	ldrsb.w	r3, [r8]
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d142      	bne.n	8003d38 <pow+0x2b0>
 8003cb2:	f7ff fda3 	bl	80037fc <__errno>
 8003cb6:	2322      	movs	r3, #34	; 0x22
 8003cb8:	e78d      	b.n	8003bd6 <pow+0x14e>
 8003cba:	4b29      	ldr	r3, [pc, #164]	; (8003d60 <pow+0x2d8>)
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003cc2:	4630      	mov	r0, r6
 8003cc4:	4652      	mov	r2, sl
 8003cc6:	465b      	mov	r3, fp
 8003cc8:	4639      	mov	r1, r7
 8003cca:	f7fc feab 	bl	8000a24 <__aeabi_dcmplt>
 8003cce:	2800      	cmp	r0, #0
 8003cd0:	d0eb      	beq.n	8003caa <pow+0x222>
 8003cd2:	ec45 4b10 	vmov	d0, r4, r5
 8003cd6:	f001 fd5f 	bl	8005798 <rint>
 8003cda:	4622      	mov	r2, r4
 8003cdc:	462b      	mov	r3, r5
 8003cde:	ec51 0b10 	vmov	r0, r1, d0
 8003ce2:	f7fc fe95 	bl	8000a10 <__aeabi_dcmpeq>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d1df      	bne.n	8003caa <pow+0x222>
 8003cea:	2200      	movs	r2, #0
 8003cec:	4b18      	ldr	r3, [pc, #96]	; (8003d50 <pow+0x2c8>)
 8003cee:	e7da      	b.n	8003ca6 <pow+0x21e>
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	ec51 0b18 	vmov	r0, r1, d8
 8003cf8:	f7fc fe8a 	bl	8000a10 <__aeabi_dcmpeq>
 8003cfc:	2800      	cmp	r0, #0
 8003cfe:	f43f af3a 	beq.w	8003b76 <pow+0xee>
 8003d02:	ec47 6b10 	vmov	d0, r6, r7
 8003d06:	f001 fcae 	bl	8005666 <finite>
 8003d0a:	2800      	cmp	r0, #0
 8003d0c:	f43f af33 	beq.w	8003b76 <pow+0xee>
 8003d10:	ec45 4b10 	vmov	d0, r4, r5
 8003d14:	f001 fca7 	bl	8005666 <finite>
 8003d18:	2800      	cmp	r0, #0
 8003d1a:	f43f af2c 	beq.w	8003b76 <pow+0xee>
 8003d1e:	2304      	movs	r3, #4
 8003d20:	9302      	str	r3, [sp, #8]
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <pow+0x2c0>)
 8003d24:	9303      	str	r3, [sp, #12]
 8003d26:	2300      	movs	r3, #0
 8003d28:	930a      	str	r3, [sp, #40]	; 0x28
 8003d2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003d2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003d32:	ed8d 9b08 	vstr	d9, [sp, #32]
 8003d36:	e7b8      	b.n	8003caa <pow+0x222>
 8003d38:	a802      	add	r0, sp, #8
 8003d3a:	f001 fd21 	bl	8005780 <matherr>
 8003d3e:	2800      	cmp	r0, #0
 8003d40:	f47f af11 	bne.w	8003b66 <pow+0xde>
 8003d44:	e7b5      	b.n	8003cb2 <pow+0x22a>
 8003d46:	bf00      	nop
 8003d48:	08005ab0 	.word	0x08005ab0
 8003d4c:	3ff00000 	.word	0x3ff00000
 8003d50:	fff00000 	.word	0xfff00000
 8003d54:	3fe00000 	.word	0x3fe00000
 8003d58:	47efffff 	.word	0x47efffff
 8003d5c:	c7efffff 	.word	0xc7efffff
 8003d60:	7ff00000 	.word	0x7ff00000
 8003d64:	200000e4 	.word	0x200000e4

08003d68 <__ieee754_pow>:
 8003d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d6c:	b091      	sub	sp, #68	; 0x44
 8003d6e:	ed8d 1b00 	vstr	d1, [sp]
 8003d72:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003d76:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003d7a:	ea58 0302 	orrs.w	r3, r8, r2
 8003d7e:	ec57 6b10 	vmov	r6, r7, d0
 8003d82:	f000 84be 	beq.w	8004702 <__ieee754_pow+0x99a>
 8003d86:	4b7a      	ldr	r3, [pc, #488]	; (8003f70 <__ieee754_pow+0x208>)
 8003d88:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003d8c:	429c      	cmp	r4, r3
 8003d8e:	463d      	mov	r5, r7
 8003d90:	ee10 aa10 	vmov	sl, s0
 8003d94:	dc09      	bgt.n	8003daa <__ieee754_pow+0x42>
 8003d96:	d103      	bne.n	8003da0 <__ieee754_pow+0x38>
 8003d98:	b93e      	cbnz	r6, 8003daa <__ieee754_pow+0x42>
 8003d9a:	45a0      	cmp	r8, r4
 8003d9c:	dc0d      	bgt.n	8003dba <__ieee754_pow+0x52>
 8003d9e:	e001      	b.n	8003da4 <__ieee754_pow+0x3c>
 8003da0:	4598      	cmp	r8, r3
 8003da2:	dc02      	bgt.n	8003daa <__ieee754_pow+0x42>
 8003da4:	4598      	cmp	r8, r3
 8003da6:	d10e      	bne.n	8003dc6 <__ieee754_pow+0x5e>
 8003da8:	b16a      	cbz	r2, 8003dc6 <__ieee754_pow+0x5e>
 8003daa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003dae:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003db2:	ea54 030a 	orrs.w	r3, r4, sl
 8003db6:	f000 84a4 	beq.w	8004702 <__ieee754_pow+0x99a>
 8003dba:	486e      	ldr	r0, [pc, #440]	; (8003f74 <__ieee754_pow+0x20c>)
 8003dbc:	b011      	add	sp, #68	; 0x44
 8003dbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dc2:	f001 bce1 	b.w	8005788 <nan>
 8003dc6:	2d00      	cmp	r5, #0
 8003dc8:	da53      	bge.n	8003e72 <__ieee754_pow+0x10a>
 8003dca:	4b6b      	ldr	r3, [pc, #428]	; (8003f78 <__ieee754_pow+0x210>)
 8003dcc:	4598      	cmp	r8, r3
 8003dce:	dc4d      	bgt.n	8003e6c <__ieee754_pow+0x104>
 8003dd0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003dd4:	4598      	cmp	r8, r3
 8003dd6:	dd4c      	ble.n	8003e72 <__ieee754_pow+0x10a>
 8003dd8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003ddc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003de0:	2b14      	cmp	r3, #20
 8003de2:	dd26      	ble.n	8003e32 <__ieee754_pow+0xca>
 8003de4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003de8:	fa22 f103 	lsr.w	r1, r2, r3
 8003dec:	fa01 f303 	lsl.w	r3, r1, r3
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d13e      	bne.n	8003e72 <__ieee754_pow+0x10a>
 8003df4:	f001 0101 	and.w	r1, r1, #1
 8003df8:	f1c1 0b02 	rsb	fp, r1, #2
 8003dfc:	2a00      	cmp	r2, #0
 8003dfe:	d15b      	bne.n	8003eb8 <__ieee754_pow+0x150>
 8003e00:	4b5b      	ldr	r3, [pc, #364]	; (8003f70 <__ieee754_pow+0x208>)
 8003e02:	4598      	cmp	r8, r3
 8003e04:	d124      	bne.n	8003e50 <__ieee754_pow+0xe8>
 8003e06:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003e0a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003e0e:	ea53 030a 	orrs.w	r3, r3, sl
 8003e12:	f000 8476 	beq.w	8004702 <__ieee754_pow+0x99a>
 8003e16:	4b59      	ldr	r3, [pc, #356]	; (8003f7c <__ieee754_pow+0x214>)
 8003e18:	429c      	cmp	r4, r3
 8003e1a:	dd2d      	ble.n	8003e78 <__ieee754_pow+0x110>
 8003e1c:	f1b9 0f00 	cmp.w	r9, #0
 8003e20:	f280 8473 	bge.w	800470a <__ieee754_pow+0x9a2>
 8003e24:	2000      	movs	r0, #0
 8003e26:	2100      	movs	r1, #0
 8003e28:	ec41 0b10 	vmov	d0, r0, r1
 8003e2c:	b011      	add	sp, #68	; 0x44
 8003e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e32:	2a00      	cmp	r2, #0
 8003e34:	d13e      	bne.n	8003eb4 <__ieee754_pow+0x14c>
 8003e36:	f1c3 0314 	rsb	r3, r3, #20
 8003e3a:	fa48 f103 	asr.w	r1, r8, r3
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	4543      	cmp	r3, r8
 8003e44:	f040 8469 	bne.w	800471a <__ieee754_pow+0x9b2>
 8003e48:	f001 0101 	and.w	r1, r1, #1
 8003e4c:	f1c1 0b02 	rsb	fp, r1, #2
 8003e50:	4b4b      	ldr	r3, [pc, #300]	; (8003f80 <__ieee754_pow+0x218>)
 8003e52:	4598      	cmp	r8, r3
 8003e54:	d118      	bne.n	8003e88 <__ieee754_pow+0x120>
 8003e56:	f1b9 0f00 	cmp.w	r9, #0
 8003e5a:	f280 845a 	bge.w	8004712 <__ieee754_pow+0x9aa>
 8003e5e:	4948      	ldr	r1, [pc, #288]	; (8003f80 <__ieee754_pow+0x218>)
 8003e60:	4632      	mov	r2, r6
 8003e62:	463b      	mov	r3, r7
 8003e64:	2000      	movs	r0, #0
 8003e66:	f7fc fc95 	bl	8000794 <__aeabi_ddiv>
 8003e6a:	e7dd      	b.n	8003e28 <__ieee754_pow+0xc0>
 8003e6c:	f04f 0b02 	mov.w	fp, #2
 8003e70:	e7c4      	b.n	8003dfc <__ieee754_pow+0x94>
 8003e72:	f04f 0b00 	mov.w	fp, #0
 8003e76:	e7c1      	b.n	8003dfc <__ieee754_pow+0x94>
 8003e78:	f1b9 0f00 	cmp.w	r9, #0
 8003e7c:	dad2      	bge.n	8003e24 <__ieee754_pow+0xbc>
 8003e7e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8003e82:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003e86:	e7cf      	b.n	8003e28 <__ieee754_pow+0xc0>
 8003e88:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8003e8c:	d106      	bne.n	8003e9c <__ieee754_pow+0x134>
 8003e8e:	4632      	mov	r2, r6
 8003e90:	463b      	mov	r3, r7
 8003e92:	4610      	mov	r0, r2
 8003e94:	4619      	mov	r1, r3
 8003e96:	f7fc fb53 	bl	8000540 <__aeabi_dmul>
 8003e9a:	e7c5      	b.n	8003e28 <__ieee754_pow+0xc0>
 8003e9c:	4b39      	ldr	r3, [pc, #228]	; (8003f84 <__ieee754_pow+0x21c>)
 8003e9e:	4599      	cmp	r9, r3
 8003ea0:	d10a      	bne.n	8003eb8 <__ieee754_pow+0x150>
 8003ea2:	2d00      	cmp	r5, #0
 8003ea4:	db08      	blt.n	8003eb8 <__ieee754_pow+0x150>
 8003ea6:	ec47 6b10 	vmov	d0, r6, r7
 8003eaa:	b011      	add	sp, #68	; 0x44
 8003eac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eb0:	f000 be5c 	b.w	8004b6c <__ieee754_sqrt>
 8003eb4:	f04f 0b00 	mov.w	fp, #0
 8003eb8:	ec47 6b10 	vmov	d0, r6, r7
 8003ebc:	f001 fbca 	bl	8005654 <fabs>
 8003ec0:	ec51 0b10 	vmov	r0, r1, d0
 8003ec4:	f1ba 0f00 	cmp.w	sl, #0
 8003ec8:	d127      	bne.n	8003f1a <__ieee754_pow+0x1b2>
 8003eca:	b124      	cbz	r4, 8003ed6 <__ieee754_pow+0x16e>
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	; (8003f80 <__ieee754_pow+0x218>)
 8003ece:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d121      	bne.n	8003f1a <__ieee754_pow+0x1b2>
 8003ed6:	f1b9 0f00 	cmp.w	r9, #0
 8003eda:	da05      	bge.n	8003ee8 <__ieee754_pow+0x180>
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	2000      	movs	r0, #0
 8003ee2:	4927      	ldr	r1, [pc, #156]	; (8003f80 <__ieee754_pow+0x218>)
 8003ee4:	f7fc fc56 	bl	8000794 <__aeabi_ddiv>
 8003ee8:	2d00      	cmp	r5, #0
 8003eea:	da9d      	bge.n	8003e28 <__ieee754_pow+0xc0>
 8003eec:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003ef0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003ef4:	ea54 030b 	orrs.w	r3, r4, fp
 8003ef8:	d108      	bne.n	8003f0c <__ieee754_pow+0x1a4>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7fc f965 	bl	80001d0 <__aeabi_dsub>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	e7ac      	b.n	8003e66 <__ieee754_pow+0xfe>
 8003f0c:	f1bb 0f01 	cmp.w	fp, #1
 8003f10:	d18a      	bne.n	8003e28 <__ieee754_pow+0xc0>
 8003f12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003f16:	4619      	mov	r1, r3
 8003f18:	e786      	b.n	8003e28 <__ieee754_pow+0xc0>
 8003f1a:	0fed      	lsrs	r5, r5, #31
 8003f1c:	1e6b      	subs	r3, r5, #1
 8003f1e:	930d      	str	r3, [sp, #52]	; 0x34
 8003f20:	ea5b 0303 	orrs.w	r3, fp, r3
 8003f24:	d102      	bne.n	8003f2c <__ieee754_pow+0x1c4>
 8003f26:	4632      	mov	r2, r6
 8003f28:	463b      	mov	r3, r7
 8003f2a:	e7e8      	b.n	8003efe <__ieee754_pow+0x196>
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <__ieee754_pow+0x220>)
 8003f2e:	4598      	cmp	r8, r3
 8003f30:	f340 80fe 	ble.w	8004130 <__ieee754_pow+0x3c8>
 8003f34:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8003f38:	4598      	cmp	r8, r3
 8003f3a:	dd0a      	ble.n	8003f52 <__ieee754_pow+0x1ea>
 8003f3c:	4b0f      	ldr	r3, [pc, #60]	; (8003f7c <__ieee754_pow+0x214>)
 8003f3e:	429c      	cmp	r4, r3
 8003f40:	dc0d      	bgt.n	8003f5e <__ieee754_pow+0x1f6>
 8003f42:	f1b9 0f00 	cmp.w	r9, #0
 8003f46:	f6bf af6d 	bge.w	8003e24 <__ieee754_pow+0xbc>
 8003f4a:	a307      	add	r3, pc, #28	; (adr r3, 8003f68 <__ieee754_pow+0x200>)
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	e79f      	b.n	8003e92 <__ieee754_pow+0x12a>
 8003f52:	4b0e      	ldr	r3, [pc, #56]	; (8003f8c <__ieee754_pow+0x224>)
 8003f54:	429c      	cmp	r4, r3
 8003f56:	ddf4      	ble.n	8003f42 <__ieee754_pow+0x1da>
 8003f58:	4b09      	ldr	r3, [pc, #36]	; (8003f80 <__ieee754_pow+0x218>)
 8003f5a:	429c      	cmp	r4, r3
 8003f5c:	dd18      	ble.n	8003f90 <__ieee754_pow+0x228>
 8003f5e:	f1b9 0f00 	cmp.w	r9, #0
 8003f62:	dcf2      	bgt.n	8003f4a <__ieee754_pow+0x1e2>
 8003f64:	e75e      	b.n	8003e24 <__ieee754_pow+0xbc>
 8003f66:	bf00      	nop
 8003f68:	8800759c 	.word	0x8800759c
 8003f6c:	7e37e43c 	.word	0x7e37e43c
 8003f70:	7ff00000 	.word	0x7ff00000
 8003f74:	08005ab3 	.word	0x08005ab3
 8003f78:	433fffff 	.word	0x433fffff
 8003f7c:	3fefffff 	.word	0x3fefffff
 8003f80:	3ff00000 	.word	0x3ff00000
 8003f84:	3fe00000 	.word	0x3fe00000
 8003f88:	41e00000 	.word	0x41e00000
 8003f8c:	3feffffe 	.word	0x3feffffe
 8003f90:	2200      	movs	r2, #0
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <__ieee754_pow+0x3b8>)
 8003f94:	f7fc f91c 	bl	80001d0 <__aeabi_dsub>
 8003f98:	a355      	add	r3, pc, #340	; (adr r3, 80040f0 <__ieee754_pow+0x388>)
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	4604      	mov	r4, r0
 8003fa0:	460d      	mov	r5, r1
 8003fa2:	f7fc facd 	bl	8000540 <__aeabi_dmul>
 8003fa6:	a354      	add	r3, pc, #336	; (adr r3, 80040f8 <__ieee754_pow+0x390>)
 8003fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fac:	4606      	mov	r6, r0
 8003fae:	460f      	mov	r7, r1
 8003fb0:	4620      	mov	r0, r4
 8003fb2:	4629      	mov	r1, r5
 8003fb4:	f7fc fac4 	bl	8000540 <__aeabi_dmul>
 8003fb8:	2200      	movs	r2, #0
 8003fba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003fbe:	4b59      	ldr	r3, [pc, #356]	; (8004124 <__ieee754_pow+0x3bc>)
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	f7fc fabc 	bl	8000540 <__aeabi_dmul>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	a14c      	add	r1, pc, #304	; (adr r1, 8004100 <__ieee754_pow+0x398>)
 8003fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003fd2:	f7fc f8fd 	bl	80001d0 <__aeabi_dsub>
 8003fd6:	4622      	mov	r2, r4
 8003fd8:	462b      	mov	r3, r5
 8003fda:	f7fc fab1 	bl	8000540 <__aeabi_dmul>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	4950      	ldr	r1, [pc, #320]	; (8004128 <__ieee754_pow+0x3c0>)
 8003fe6:	f7fc f8f3 	bl	80001d0 <__aeabi_dsub>
 8003fea:	4622      	mov	r2, r4
 8003fec:	462b      	mov	r3, r5
 8003fee:	4680      	mov	r8, r0
 8003ff0:	4689      	mov	r9, r1
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	f7fc faa3 	bl	8000540 <__aeabi_dmul>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4640      	mov	r0, r8
 8004000:	4649      	mov	r1, r9
 8004002:	f7fc fa9d 	bl	8000540 <__aeabi_dmul>
 8004006:	a340      	add	r3, pc, #256	; (adr r3, 8004108 <__ieee754_pow+0x3a0>)
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	f7fc fa98 	bl	8000540 <__aeabi_dmul>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004018:	f7fc f8da 	bl	80001d0 <__aeabi_dsub>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4604      	mov	r4, r0
 8004022:	460d      	mov	r5, r1
 8004024:	4630      	mov	r0, r6
 8004026:	4639      	mov	r1, r7
 8004028:	f7fc f8d4 	bl	80001d4 <__adddf3>
 800402c:	2000      	movs	r0, #0
 800402e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004032:	4632      	mov	r2, r6
 8004034:	463b      	mov	r3, r7
 8004036:	f7fc f8cb 	bl	80001d0 <__aeabi_dsub>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4620      	mov	r0, r4
 8004040:	4629      	mov	r1, r5
 8004042:	f7fc f8c5 	bl	80001d0 <__aeabi_dsub>
 8004046:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004048:	f10b 33ff 	add.w	r3, fp, #4294967295
 800404c:	4313      	orrs	r3, r2
 800404e:	4606      	mov	r6, r0
 8004050:	460f      	mov	r7, r1
 8004052:	f040 81eb 	bne.w	800442c <__ieee754_pow+0x6c4>
 8004056:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004110 <__ieee754_pow+0x3a8>
 800405a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800405e:	2400      	movs	r4, #0
 8004060:	4622      	mov	r2, r4
 8004062:	462b      	mov	r3, r5
 8004064:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004068:	ed8d 7b02 	vstr	d7, [sp, #8]
 800406c:	f7fc f8b0 	bl	80001d0 <__aeabi_dsub>
 8004070:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004074:	f7fc fa64 	bl	8000540 <__aeabi_dmul>
 8004078:	e9dd 2300 	ldrd	r2, r3, [sp]
 800407c:	4680      	mov	r8, r0
 800407e:	4689      	mov	r9, r1
 8004080:	4630      	mov	r0, r6
 8004082:	4639      	mov	r1, r7
 8004084:	f7fc fa5c 	bl	8000540 <__aeabi_dmul>
 8004088:	4602      	mov	r2, r0
 800408a:	460b      	mov	r3, r1
 800408c:	4640      	mov	r0, r8
 800408e:	4649      	mov	r1, r9
 8004090:	f7fc f8a0 	bl	80001d4 <__adddf3>
 8004094:	4622      	mov	r2, r4
 8004096:	462b      	mov	r3, r5
 8004098:	4680      	mov	r8, r0
 800409a:	4689      	mov	r9, r1
 800409c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80040a0:	f7fc fa4e 	bl	8000540 <__aeabi_dmul>
 80040a4:	460b      	mov	r3, r1
 80040a6:	4604      	mov	r4, r0
 80040a8:	460d      	mov	r5, r1
 80040aa:	4602      	mov	r2, r0
 80040ac:	4649      	mov	r1, r9
 80040ae:	4640      	mov	r0, r8
 80040b0:	e9cd 4500 	strd	r4, r5, [sp]
 80040b4:	f7fc f88e 	bl	80001d4 <__adddf3>
 80040b8:	4b1c      	ldr	r3, [pc, #112]	; (800412c <__ieee754_pow+0x3c4>)
 80040ba:	4299      	cmp	r1, r3
 80040bc:	4606      	mov	r6, r0
 80040be:	460f      	mov	r7, r1
 80040c0:	468b      	mov	fp, r1
 80040c2:	f340 82f7 	ble.w	80046b4 <__ieee754_pow+0x94c>
 80040c6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80040ca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80040ce:	4303      	orrs	r3, r0
 80040d0:	f000 81ea 	beq.w	80044a8 <__ieee754_pow+0x740>
 80040d4:	a310      	add	r3, pc, #64	; (adr r3, 8004118 <__ieee754_pow+0x3b0>)
 80040d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040da:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80040de:	f7fc fa2f 	bl	8000540 <__aeabi_dmul>
 80040e2:	a30d      	add	r3, pc, #52	; (adr r3, 8004118 <__ieee754_pow+0x3b0>)
 80040e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e8:	e6d5      	b.n	8003e96 <__ieee754_pow+0x12e>
 80040ea:	bf00      	nop
 80040ec:	f3af 8000 	nop.w
 80040f0:	60000000 	.word	0x60000000
 80040f4:	3ff71547 	.word	0x3ff71547
 80040f8:	f85ddf44 	.word	0xf85ddf44
 80040fc:	3e54ae0b 	.word	0x3e54ae0b
 8004100:	55555555 	.word	0x55555555
 8004104:	3fd55555 	.word	0x3fd55555
 8004108:	652b82fe 	.word	0x652b82fe
 800410c:	3ff71547 	.word	0x3ff71547
 8004110:	00000000 	.word	0x00000000
 8004114:	bff00000 	.word	0xbff00000
 8004118:	8800759c 	.word	0x8800759c
 800411c:	7e37e43c 	.word	0x7e37e43c
 8004120:	3ff00000 	.word	0x3ff00000
 8004124:	3fd00000 	.word	0x3fd00000
 8004128:	3fe00000 	.word	0x3fe00000
 800412c:	408fffff 	.word	0x408fffff
 8004130:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004134:	f04f 0200 	mov.w	r2, #0
 8004138:	da05      	bge.n	8004146 <__ieee754_pow+0x3de>
 800413a:	4bd3      	ldr	r3, [pc, #844]	; (8004488 <__ieee754_pow+0x720>)
 800413c:	f7fc fa00 	bl	8000540 <__aeabi_dmul>
 8004140:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004144:	460c      	mov	r4, r1
 8004146:	1523      	asrs	r3, r4, #20
 8004148:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800414c:	4413      	add	r3, r2
 800414e:	9309      	str	r3, [sp, #36]	; 0x24
 8004150:	4bce      	ldr	r3, [pc, #824]	; (800448c <__ieee754_pow+0x724>)
 8004152:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004156:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800415a:	429c      	cmp	r4, r3
 800415c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004160:	dd08      	ble.n	8004174 <__ieee754_pow+0x40c>
 8004162:	4bcb      	ldr	r3, [pc, #812]	; (8004490 <__ieee754_pow+0x728>)
 8004164:	429c      	cmp	r4, r3
 8004166:	f340 815e 	ble.w	8004426 <__ieee754_pow+0x6be>
 800416a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416c:	3301      	adds	r3, #1
 800416e:	9309      	str	r3, [sp, #36]	; 0x24
 8004170:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004174:	f04f 0a00 	mov.w	sl, #0
 8004178:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800417c:	930c      	str	r3, [sp, #48]	; 0x30
 800417e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004180:	4bc4      	ldr	r3, [pc, #784]	; (8004494 <__ieee754_pow+0x72c>)
 8004182:	4413      	add	r3, r2
 8004184:	ed93 7b00 	vldr	d7, [r3]
 8004188:	4629      	mov	r1, r5
 800418a:	ec53 2b17 	vmov	r2, r3, d7
 800418e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004192:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004196:	f7fc f81b 	bl	80001d0 <__aeabi_dsub>
 800419a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800419e:	4606      	mov	r6, r0
 80041a0:	460f      	mov	r7, r1
 80041a2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80041a6:	f7fc f815 	bl	80001d4 <__adddf3>
 80041aa:	4602      	mov	r2, r0
 80041ac:	460b      	mov	r3, r1
 80041ae:	2000      	movs	r0, #0
 80041b0:	49b9      	ldr	r1, [pc, #740]	; (8004498 <__ieee754_pow+0x730>)
 80041b2:	f7fc faef 	bl	8000794 <__aeabi_ddiv>
 80041b6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4630      	mov	r0, r6
 80041c0:	4639      	mov	r1, r7
 80041c2:	f7fc f9bd 	bl	8000540 <__aeabi_dmul>
 80041c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80041ca:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80041ce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80041d2:	2300      	movs	r3, #0
 80041d4:	9302      	str	r3, [sp, #8]
 80041d6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80041da:	106d      	asrs	r5, r5, #1
 80041dc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80041e0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80041e4:	2200      	movs	r2, #0
 80041e6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80041ea:	4640      	mov	r0, r8
 80041ec:	4649      	mov	r1, r9
 80041ee:	4614      	mov	r4, r2
 80041f0:	461d      	mov	r5, r3
 80041f2:	f7fc f9a5 	bl	8000540 <__aeabi_dmul>
 80041f6:	4602      	mov	r2, r0
 80041f8:	460b      	mov	r3, r1
 80041fa:	4630      	mov	r0, r6
 80041fc:	4639      	mov	r1, r7
 80041fe:	f7fb ffe7 	bl	80001d0 <__aeabi_dsub>
 8004202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004206:	4606      	mov	r6, r0
 8004208:	460f      	mov	r7, r1
 800420a:	4620      	mov	r0, r4
 800420c:	4629      	mov	r1, r5
 800420e:	f7fb ffdf 	bl	80001d0 <__aeabi_dsub>
 8004212:	4602      	mov	r2, r0
 8004214:	460b      	mov	r3, r1
 8004216:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800421a:	f7fb ffd9 	bl	80001d0 <__aeabi_dsub>
 800421e:	4642      	mov	r2, r8
 8004220:	464b      	mov	r3, r9
 8004222:	f7fc f98d 	bl	8000540 <__aeabi_dmul>
 8004226:	4602      	mov	r2, r0
 8004228:	460b      	mov	r3, r1
 800422a:	4630      	mov	r0, r6
 800422c:	4639      	mov	r1, r7
 800422e:	f7fb ffcf 	bl	80001d0 <__aeabi_dsub>
 8004232:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004236:	f7fc f983 	bl	8000540 <__aeabi_dmul>
 800423a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800423e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	f7fc f97b 	bl	8000540 <__aeabi_dmul>
 800424a:	a37b      	add	r3, pc, #492	; (adr r3, 8004438 <__ieee754_pow+0x6d0>)
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	4604      	mov	r4, r0
 8004252:	460d      	mov	r5, r1
 8004254:	f7fc f974 	bl	8000540 <__aeabi_dmul>
 8004258:	a379      	add	r3, pc, #484	; (adr r3, 8004440 <__ieee754_pow+0x6d8>)
 800425a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425e:	f7fb ffb9 	bl	80001d4 <__adddf3>
 8004262:	4622      	mov	r2, r4
 8004264:	462b      	mov	r3, r5
 8004266:	f7fc f96b 	bl	8000540 <__aeabi_dmul>
 800426a:	a377      	add	r3, pc, #476	; (adr r3, 8004448 <__ieee754_pow+0x6e0>)
 800426c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004270:	f7fb ffb0 	bl	80001d4 <__adddf3>
 8004274:	4622      	mov	r2, r4
 8004276:	462b      	mov	r3, r5
 8004278:	f7fc f962 	bl	8000540 <__aeabi_dmul>
 800427c:	a374      	add	r3, pc, #464	; (adr r3, 8004450 <__ieee754_pow+0x6e8>)
 800427e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004282:	f7fb ffa7 	bl	80001d4 <__adddf3>
 8004286:	4622      	mov	r2, r4
 8004288:	462b      	mov	r3, r5
 800428a:	f7fc f959 	bl	8000540 <__aeabi_dmul>
 800428e:	a372      	add	r3, pc, #456	; (adr r3, 8004458 <__ieee754_pow+0x6f0>)
 8004290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004294:	f7fb ff9e 	bl	80001d4 <__adddf3>
 8004298:	4622      	mov	r2, r4
 800429a:	462b      	mov	r3, r5
 800429c:	f7fc f950 	bl	8000540 <__aeabi_dmul>
 80042a0:	a36f      	add	r3, pc, #444	; (adr r3, 8004460 <__ieee754_pow+0x6f8>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	f7fb ff95 	bl	80001d4 <__adddf3>
 80042aa:	4622      	mov	r2, r4
 80042ac:	4606      	mov	r6, r0
 80042ae:	460f      	mov	r7, r1
 80042b0:	462b      	mov	r3, r5
 80042b2:	4620      	mov	r0, r4
 80042b4:	4629      	mov	r1, r5
 80042b6:	f7fc f943 	bl	8000540 <__aeabi_dmul>
 80042ba:	4602      	mov	r2, r0
 80042bc:	460b      	mov	r3, r1
 80042be:	4630      	mov	r0, r6
 80042c0:	4639      	mov	r1, r7
 80042c2:	f7fc f93d 	bl	8000540 <__aeabi_dmul>
 80042c6:	4642      	mov	r2, r8
 80042c8:	4604      	mov	r4, r0
 80042ca:	460d      	mov	r5, r1
 80042cc:	464b      	mov	r3, r9
 80042ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80042d2:	f7fb ff7f 	bl	80001d4 <__adddf3>
 80042d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80042da:	f7fc f931 	bl	8000540 <__aeabi_dmul>
 80042de:	4622      	mov	r2, r4
 80042e0:	462b      	mov	r3, r5
 80042e2:	f7fb ff77 	bl	80001d4 <__adddf3>
 80042e6:	4642      	mov	r2, r8
 80042e8:	4606      	mov	r6, r0
 80042ea:	460f      	mov	r7, r1
 80042ec:	464b      	mov	r3, r9
 80042ee:	4640      	mov	r0, r8
 80042f0:	4649      	mov	r1, r9
 80042f2:	f7fc f925 	bl	8000540 <__aeabi_dmul>
 80042f6:	2200      	movs	r2, #0
 80042f8:	4b68      	ldr	r3, [pc, #416]	; (800449c <__ieee754_pow+0x734>)
 80042fa:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80042fe:	f7fb ff69 	bl	80001d4 <__adddf3>
 8004302:	4632      	mov	r2, r6
 8004304:	463b      	mov	r3, r7
 8004306:	f7fb ff65 	bl	80001d4 <__adddf3>
 800430a:	9802      	ldr	r0, [sp, #8]
 800430c:	460d      	mov	r5, r1
 800430e:	4604      	mov	r4, r0
 8004310:	4602      	mov	r2, r0
 8004312:	460b      	mov	r3, r1
 8004314:	4640      	mov	r0, r8
 8004316:	4649      	mov	r1, r9
 8004318:	f7fc f912 	bl	8000540 <__aeabi_dmul>
 800431c:	2200      	movs	r2, #0
 800431e:	4680      	mov	r8, r0
 8004320:	4689      	mov	r9, r1
 8004322:	4b5e      	ldr	r3, [pc, #376]	; (800449c <__ieee754_pow+0x734>)
 8004324:	4620      	mov	r0, r4
 8004326:	4629      	mov	r1, r5
 8004328:	f7fb ff52 	bl	80001d0 <__aeabi_dsub>
 800432c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004330:	f7fb ff4e 	bl	80001d0 <__aeabi_dsub>
 8004334:	4602      	mov	r2, r0
 8004336:	460b      	mov	r3, r1
 8004338:	4630      	mov	r0, r6
 800433a:	4639      	mov	r1, r7
 800433c:	f7fb ff48 	bl	80001d0 <__aeabi_dsub>
 8004340:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004344:	f7fc f8fc 	bl	8000540 <__aeabi_dmul>
 8004348:	4622      	mov	r2, r4
 800434a:	4606      	mov	r6, r0
 800434c:	460f      	mov	r7, r1
 800434e:	462b      	mov	r3, r5
 8004350:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004354:	f7fc f8f4 	bl	8000540 <__aeabi_dmul>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4630      	mov	r0, r6
 800435e:	4639      	mov	r1, r7
 8004360:	f7fb ff38 	bl	80001d4 <__adddf3>
 8004364:	4606      	mov	r6, r0
 8004366:	460f      	mov	r7, r1
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	4640      	mov	r0, r8
 800436e:	4649      	mov	r1, r9
 8004370:	f7fb ff30 	bl	80001d4 <__adddf3>
 8004374:	9802      	ldr	r0, [sp, #8]
 8004376:	a33c      	add	r3, pc, #240	; (adr r3, 8004468 <__ieee754_pow+0x700>)
 8004378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437c:	4604      	mov	r4, r0
 800437e:	460d      	mov	r5, r1
 8004380:	f7fc f8de 	bl	8000540 <__aeabi_dmul>
 8004384:	4642      	mov	r2, r8
 8004386:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800438a:	464b      	mov	r3, r9
 800438c:	4620      	mov	r0, r4
 800438e:	4629      	mov	r1, r5
 8004390:	f7fb ff1e 	bl	80001d0 <__aeabi_dsub>
 8004394:	4602      	mov	r2, r0
 8004396:	460b      	mov	r3, r1
 8004398:	4630      	mov	r0, r6
 800439a:	4639      	mov	r1, r7
 800439c:	f7fb ff18 	bl	80001d0 <__aeabi_dsub>
 80043a0:	a333      	add	r3, pc, #204	; (adr r3, 8004470 <__ieee754_pow+0x708>)
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	f7fc f8cb 	bl	8000540 <__aeabi_dmul>
 80043aa:	a333      	add	r3, pc, #204	; (adr r3, 8004478 <__ieee754_pow+0x710>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	4606      	mov	r6, r0
 80043b2:	460f      	mov	r7, r1
 80043b4:	4620      	mov	r0, r4
 80043b6:	4629      	mov	r1, r5
 80043b8:	f7fc f8c2 	bl	8000540 <__aeabi_dmul>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4630      	mov	r0, r6
 80043c2:	4639      	mov	r1, r7
 80043c4:	f7fb ff06 	bl	80001d4 <__adddf3>
 80043c8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043ca:	4b35      	ldr	r3, [pc, #212]	; (80044a0 <__ieee754_pow+0x738>)
 80043cc:	4413      	add	r3, r2
 80043ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043d2:	f7fb feff 	bl	80001d4 <__adddf3>
 80043d6:	4604      	mov	r4, r0
 80043d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043da:	460d      	mov	r5, r1
 80043dc:	f7fc f846 	bl	800046c <__aeabi_i2d>
 80043e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80043e2:	4b30      	ldr	r3, [pc, #192]	; (80044a4 <__ieee754_pow+0x73c>)
 80043e4:	4413      	add	r3, r2
 80043e6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80043ea:	4606      	mov	r6, r0
 80043ec:	460f      	mov	r7, r1
 80043ee:	4622      	mov	r2, r4
 80043f0:	462b      	mov	r3, r5
 80043f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80043f6:	f7fb feed 	bl	80001d4 <__adddf3>
 80043fa:	4642      	mov	r2, r8
 80043fc:	464b      	mov	r3, r9
 80043fe:	f7fb fee9 	bl	80001d4 <__adddf3>
 8004402:	4632      	mov	r2, r6
 8004404:	463b      	mov	r3, r7
 8004406:	f7fb fee5 	bl	80001d4 <__adddf3>
 800440a:	9802      	ldr	r0, [sp, #8]
 800440c:	4632      	mov	r2, r6
 800440e:	463b      	mov	r3, r7
 8004410:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004414:	f7fb fedc 	bl	80001d0 <__aeabi_dsub>
 8004418:	4642      	mov	r2, r8
 800441a:	464b      	mov	r3, r9
 800441c:	f7fb fed8 	bl	80001d0 <__aeabi_dsub>
 8004420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004424:	e607      	b.n	8004036 <__ieee754_pow+0x2ce>
 8004426:	f04f 0a01 	mov.w	sl, #1
 800442a:	e6a5      	b.n	8004178 <__ieee754_pow+0x410>
 800442c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004480 <__ieee754_pow+0x718>
 8004430:	e613      	b.n	800405a <__ieee754_pow+0x2f2>
 8004432:	bf00      	nop
 8004434:	f3af 8000 	nop.w
 8004438:	4a454eef 	.word	0x4a454eef
 800443c:	3fca7e28 	.word	0x3fca7e28
 8004440:	93c9db65 	.word	0x93c9db65
 8004444:	3fcd864a 	.word	0x3fcd864a
 8004448:	a91d4101 	.word	0xa91d4101
 800444c:	3fd17460 	.word	0x3fd17460
 8004450:	518f264d 	.word	0x518f264d
 8004454:	3fd55555 	.word	0x3fd55555
 8004458:	db6fabff 	.word	0xdb6fabff
 800445c:	3fdb6db6 	.word	0x3fdb6db6
 8004460:	33333303 	.word	0x33333303
 8004464:	3fe33333 	.word	0x3fe33333
 8004468:	e0000000 	.word	0xe0000000
 800446c:	3feec709 	.word	0x3feec709
 8004470:	dc3a03fd 	.word	0xdc3a03fd
 8004474:	3feec709 	.word	0x3feec709
 8004478:	145b01f5 	.word	0x145b01f5
 800447c:	be3e2fe0 	.word	0xbe3e2fe0
 8004480:	00000000 	.word	0x00000000
 8004484:	3ff00000 	.word	0x3ff00000
 8004488:	43400000 	.word	0x43400000
 800448c:	0003988e 	.word	0x0003988e
 8004490:	000bb679 	.word	0x000bb679
 8004494:	08005ab8 	.word	0x08005ab8
 8004498:	3ff00000 	.word	0x3ff00000
 800449c:	40080000 	.word	0x40080000
 80044a0:	08005ad8 	.word	0x08005ad8
 80044a4:	08005ac8 	.word	0x08005ac8
 80044a8:	a3b4      	add	r3, pc, #720	; (adr r3, 800477c <__ieee754_pow+0xa14>)
 80044aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ae:	4640      	mov	r0, r8
 80044b0:	4649      	mov	r1, r9
 80044b2:	f7fb fe8f 	bl	80001d4 <__adddf3>
 80044b6:	4622      	mov	r2, r4
 80044b8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80044bc:	462b      	mov	r3, r5
 80044be:	4630      	mov	r0, r6
 80044c0:	4639      	mov	r1, r7
 80044c2:	f7fb fe85 	bl	80001d0 <__aeabi_dsub>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044ce:	f7fc fac7 	bl	8000a60 <__aeabi_dcmpgt>
 80044d2:	2800      	cmp	r0, #0
 80044d4:	f47f adfe 	bne.w	80040d4 <__ieee754_pow+0x36c>
 80044d8:	4aa3      	ldr	r2, [pc, #652]	; (8004768 <__ieee754_pow+0xa00>)
 80044da:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80044de:	4293      	cmp	r3, r2
 80044e0:	f340 810a 	ble.w	80046f8 <__ieee754_pow+0x990>
 80044e4:	151b      	asrs	r3, r3, #20
 80044e6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80044ea:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80044ee:	fa4a f303 	asr.w	r3, sl, r3
 80044f2:	445b      	add	r3, fp
 80044f4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80044f8:	4e9c      	ldr	r6, [pc, #624]	; (800476c <__ieee754_pow+0xa04>)
 80044fa:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80044fe:	4116      	asrs	r6, r2
 8004500:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004504:	2000      	movs	r0, #0
 8004506:	ea23 0106 	bic.w	r1, r3, r6
 800450a:	f1c2 0214 	rsb	r2, r2, #20
 800450e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004512:	fa4a fa02 	asr.w	sl, sl, r2
 8004516:	f1bb 0f00 	cmp.w	fp, #0
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	bfb8      	it	lt
 8004524:	f1ca 0a00 	rsblt	sl, sl, #0
 8004528:	f7fb fe52 	bl	80001d0 <__aeabi_dsub>
 800452c:	e9cd 0100 	strd	r0, r1, [sp]
 8004530:	4642      	mov	r2, r8
 8004532:	464b      	mov	r3, r9
 8004534:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004538:	f7fb fe4c 	bl	80001d4 <__adddf3>
 800453c:	2000      	movs	r0, #0
 800453e:	a378      	add	r3, pc, #480	; (adr r3, 8004720 <__ieee754_pow+0x9b8>)
 8004540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004544:	4604      	mov	r4, r0
 8004546:	460d      	mov	r5, r1
 8004548:	f7fb fffa 	bl	8000540 <__aeabi_dmul>
 800454c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004550:	4606      	mov	r6, r0
 8004552:	460f      	mov	r7, r1
 8004554:	4620      	mov	r0, r4
 8004556:	4629      	mov	r1, r5
 8004558:	f7fb fe3a 	bl	80001d0 <__aeabi_dsub>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4640      	mov	r0, r8
 8004562:	4649      	mov	r1, r9
 8004564:	f7fb fe34 	bl	80001d0 <__aeabi_dsub>
 8004568:	a36f      	add	r3, pc, #444	; (adr r3, 8004728 <__ieee754_pow+0x9c0>)
 800456a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800456e:	f7fb ffe7 	bl	8000540 <__aeabi_dmul>
 8004572:	a36f      	add	r3, pc, #444	; (adr r3, 8004730 <__ieee754_pow+0x9c8>)
 8004574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004578:	4680      	mov	r8, r0
 800457a:	4689      	mov	r9, r1
 800457c:	4620      	mov	r0, r4
 800457e:	4629      	mov	r1, r5
 8004580:	f7fb ffde 	bl	8000540 <__aeabi_dmul>
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	4640      	mov	r0, r8
 800458a:	4649      	mov	r1, r9
 800458c:	f7fb fe22 	bl	80001d4 <__adddf3>
 8004590:	4604      	mov	r4, r0
 8004592:	460d      	mov	r5, r1
 8004594:	4602      	mov	r2, r0
 8004596:	460b      	mov	r3, r1
 8004598:	4630      	mov	r0, r6
 800459a:	4639      	mov	r1, r7
 800459c:	f7fb fe1a 	bl	80001d4 <__adddf3>
 80045a0:	4632      	mov	r2, r6
 80045a2:	463b      	mov	r3, r7
 80045a4:	4680      	mov	r8, r0
 80045a6:	4689      	mov	r9, r1
 80045a8:	f7fb fe12 	bl	80001d0 <__aeabi_dsub>
 80045ac:	4602      	mov	r2, r0
 80045ae:	460b      	mov	r3, r1
 80045b0:	4620      	mov	r0, r4
 80045b2:	4629      	mov	r1, r5
 80045b4:	f7fb fe0c 	bl	80001d0 <__aeabi_dsub>
 80045b8:	4642      	mov	r2, r8
 80045ba:	4606      	mov	r6, r0
 80045bc:	460f      	mov	r7, r1
 80045be:	464b      	mov	r3, r9
 80045c0:	4640      	mov	r0, r8
 80045c2:	4649      	mov	r1, r9
 80045c4:	f7fb ffbc 	bl	8000540 <__aeabi_dmul>
 80045c8:	a35b      	add	r3, pc, #364	; (adr r3, 8004738 <__ieee754_pow+0x9d0>)
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	4604      	mov	r4, r0
 80045d0:	460d      	mov	r5, r1
 80045d2:	f7fb ffb5 	bl	8000540 <__aeabi_dmul>
 80045d6:	a35a      	add	r3, pc, #360	; (adr r3, 8004740 <__ieee754_pow+0x9d8>)
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	f7fb fdf8 	bl	80001d0 <__aeabi_dsub>
 80045e0:	4622      	mov	r2, r4
 80045e2:	462b      	mov	r3, r5
 80045e4:	f7fb ffac 	bl	8000540 <__aeabi_dmul>
 80045e8:	a357      	add	r3, pc, #348	; (adr r3, 8004748 <__ieee754_pow+0x9e0>)
 80045ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ee:	f7fb fdf1 	bl	80001d4 <__adddf3>
 80045f2:	4622      	mov	r2, r4
 80045f4:	462b      	mov	r3, r5
 80045f6:	f7fb ffa3 	bl	8000540 <__aeabi_dmul>
 80045fa:	a355      	add	r3, pc, #340	; (adr r3, 8004750 <__ieee754_pow+0x9e8>)
 80045fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004600:	f7fb fde6 	bl	80001d0 <__aeabi_dsub>
 8004604:	4622      	mov	r2, r4
 8004606:	462b      	mov	r3, r5
 8004608:	f7fb ff9a 	bl	8000540 <__aeabi_dmul>
 800460c:	a352      	add	r3, pc, #328	; (adr r3, 8004758 <__ieee754_pow+0x9f0>)
 800460e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004612:	f7fb fddf 	bl	80001d4 <__adddf3>
 8004616:	4622      	mov	r2, r4
 8004618:	462b      	mov	r3, r5
 800461a:	f7fb ff91 	bl	8000540 <__aeabi_dmul>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4640      	mov	r0, r8
 8004624:	4649      	mov	r1, r9
 8004626:	f7fb fdd3 	bl	80001d0 <__aeabi_dsub>
 800462a:	4604      	mov	r4, r0
 800462c:	460d      	mov	r5, r1
 800462e:	4602      	mov	r2, r0
 8004630:	460b      	mov	r3, r1
 8004632:	4640      	mov	r0, r8
 8004634:	4649      	mov	r1, r9
 8004636:	f7fb ff83 	bl	8000540 <__aeabi_dmul>
 800463a:	2200      	movs	r2, #0
 800463c:	e9cd 0100 	strd	r0, r1, [sp]
 8004640:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004644:	4620      	mov	r0, r4
 8004646:	4629      	mov	r1, r5
 8004648:	f7fb fdc2 	bl	80001d0 <__aeabi_dsub>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004654:	f7fc f89e 	bl	8000794 <__aeabi_ddiv>
 8004658:	4632      	mov	r2, r6
 800465a:	4604      	mov	r4, r0
 800465c:	460d      	mov	r5, r1
 800465e:	463b      	mov	r3, r7
 8004660:	4640      	mov	r0, r8
 8004662:	4649      	mov	r1, r9
 8004664:	f7fb ff6c 	bl	8000540 <__aeabi_dmul>
 8004668:	4632      	mov	r2, r6
 800466a:	463b      	mov	r3, r7
 800466c:	f7fb fdb2 	bl	80001d4 <__adddf3>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4620      	mov	r0, r4
 8004676:	4629      	mov	r1, r5
 8004678:	f7fb fdaa 	bl	80001d0 <__aeabi_dsub>
 800467c:	4642      	mov	r2, r8
 800467e:	464b      	mov	r3, r9
 8004680:	f7fb fda6 	bl	80001d0 <__aeabi_dsub>
 8004684:	4602      	mov	r2, r0
 8004686:	460b      	mov	r3, r1
 8004688:	2000      	movs	r0, #0
 800468a:	4939      	ldr	r1, [pc, #228]	; (8004770 <__ieee754_pow+0xa08>)
 800468c:	f7fb fda0 	bl	80001d0 <__aeabi_dsub>
 8004690:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004694:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004698:	4602      	mov	r2, r0
 800469a:	460b      	mov	r3, r1
 800469c:	da2f      	bge.n	80046fe <__ieee754_pow+0x996>
 800469e:	4650      	mov	r0, sl
 80046a0:	ec43 2b10 	vmov	d0, r2, r3
 80046a4:	f001 f8fc 	bl	80058a0 <scalbn>
 80046a8:	ec51 0b10 	vmov	r0, r1, d0
 80046ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80046b0:	f7ff bbf1 	b.w	8003e96 <__ieee754_pow+0x12e>
 80046b4:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <__ieee754_pow+0xa0c>)
 80046b6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80046ba:	429e      	cmp	r6, r3
 80046bc:	f77f af0c 	ble.w	80044d8 <__ieee754_pow+0x770>
 80046c0:	4b2d      	ldr	r3, [pc, #180]	; (8004778 <__ieee754_pow+0xa10>)
 80046c2:	440b      	add	r3, r1
 80046c4:	4303      	orrs	r3, r0
 80046c6:	d00b      	beq.n	80046e0 <__ieee754_pow+0x978>
 80046c8:	a325      	add	r3, pc, #148	; (adr r3, 8004760 <__ieee754_pow+0x9f8>)
 80046ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80046d2:	f7fb ff35 	bl	8000540 <__aeabi_dmul>
 80046d6:	a322      	add	r3, pc, #136	; (adr r3, 8004760 <__ieee754_pow+0x9f8>)
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	f7ff bbdb 	b.w	8003e96 <__ieee754_pow+0x12e>
 80046e0:	4622      	mov	r2, r4
 80046e2:	462b      	mov	r3, r5
 80046e4:	f7fb fd74 	bl	80001d0 <__aeabi_dsub>
 80046e8:	4642      	mov	r2, r8
 80046ea:	464b      	mov	r3, r9
 80046ec:	f7fc f9ae 	bl	8000a4c <__aeabi_dcmpge>
 80046f0:	2800      	cmp	r0, #0
 80046f2:	f43f aef1 	beq.w	80044d8 <__ieee754_pow+0x770>
 80046f6:	e7e7      	b.n	80046c8 <__ieee754_pow+0x960>
 80046f8:	f04f 0a00 	mov.w	sl, #0
 80046fc:	e718      	b.n	8004530 <__ieee754_pow+0x7c8>
 80046fe:	4621      	mov	r1, r4
 8004700:	e7d4      	b.n	80046ac <__ieee754_pow+0x944>
 8004702:	2000      	movs	r0, #0
 8004704:	491a      	ldr	r1, [pc, #104]	; (8004770 <__ieee754_pow+0xa08>)
 8004706:	f7ff bb8f 	b.w	8003e28 <__ieee754_pow+0xc0>
 800470a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800470e:	f7ff bb8b 	b.w	8003e28 <__ieee754_pow+0xc0>
 8004712:	4630      	mov	r0, r6
 8004714:	4639      	mov	r1, r7
 8004716:	f7ff bb87 	b.w	8003e28 <__ieee754_pow+0xc0>
 800471a:	4693      	mov	fp, r2
 800471c:	f7ff bb98 	b.w	8003e50 <__ieee754_pow+0xe8>
 8004720:	00000000 	.word	0x00000000
 8004724:	3fe62e43 	.word	0x3fe62e43
 8004728:	fefa39ef 	.word	0xfefa39ef
 800472c:	3fe62e42 	.word	0x3fe62e42
 8004730:	0ca86c39 	.word	0x0ca86c39
 8004734:	be205c61 	.word	0xbe205c61
 8004738:	72bea4d0 	.word	0x72bea4d0
 800473c:	3e663769 	.word	0x3e663769
 8004740:	c5d26bf1 	.word	0xc5d26bf1
 8004744:	3ebbbd41 	.word	0x3ebbbd41
 8004748:	af25de2c 	.word	0xaf25de2c
 800474c:	3f11566a 	.word	0x3f11566a
 8004750:	16bebd93 	.word	0x16bebd93
 8004754:	3f66c16c 	.word	0x3f66c16c
 8004758:	5555553e 	.word	0x5555553e
 800475c:	3fc55555 	.word	0x3fc55555
 8004760:	c2f8f359 	.word	0xc2f8f359
 8004764:	01a56e1f 	.word	0x01a56e1f
 8004768:	3fe00000 	.word	0x3fe00000
 800476c:	000fffff 	.word	0x000fffff
 8004770:	3ff00000 	.word	0x3ff00000
 8004774:	4090cbff 	.word	0x4090cbff
 8004778:	3f6f3400 	.word	0x3f6f3400
 800477c:	652b82fe 	.word	0x652b82fe
 8004780:	3c971547 	.word	0x3c971547
 8004784:	00000000 	.word	0x00000000

08004788 <__ieee754_rem_pio2>:
 8004788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800478c:	ec57 6b10 	vmov	r6, r7, d0
 8004790:	4bc3      	ldr	r3, [pc, #780]	; (8004aa0 <__ieee754_rem_pio2+0x318>)
 8004792:	b08d      	sub	sp, #52	; 0x34
 8004794:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004798:	4598      	cmp	r8, r3
 800479a:	4604      	mov	r4, r0
 800479c:	9704      	str	r7, [sp, #16]
 800479e:	dc07      	bgt.n	80047b0 <__ieee754_rem_pio2+0x28>
 80047a0:	2200      	movs	r2, #0
 80047a2:	2300      	movs	r3, #0
 80047a4:	ed84 0b00 	vstr	d0, [r4]
 80047a8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80047ac:	2500      	movs	r5, #0
 80047ae:	e027      	b.n	8004800 <__ieee754_rem_pio2+0x78>
 80047b0:	4bbc      	ldr	r3, [pc, #752]	; (8004aa4 <__ieee754_rem_pio2+0x31c>)
 80047b2:	4598      	cmp	r8, r3
 80047b4:	dc75      	bgt.n	80048a2 <__ieee754_rem_pio2+0x11a>
 80047b6:	9b04      	ldr	r3, [sp, #16]
 80047b8:	4dbb      	ldr	r5, [pc, #748]	; (8004aa8 <__ieee754_rem_pio2+0x320>)
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	ee10 0a10 	vmov	r0, s0
 80047c0:	a3a9      	add	r3, pc, #676	; (adr r3, 8004a68 <__ieee754_rem_pio2+0x2e0>)
 80047c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c6:	4639      	mov	r1, r7
 80047c8:	dd36      	ble.n	8004838 <__ieee754_rem_pio2+0xb0>
 80047ca:	f7fb fd01 	bl	80001d0 <__aeabi_dsub>
 80047ce:	45a8      	cmp	r8, r5
 80047d0:	4606      	mov	r6, r0
 80047d2:	460f      	mov	r7, r1
 80047d4:	d018      	beq.n	8004808 <__ieee754_rem_pio2+0x80>
 80047d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004a70 <__ieee754_rem_pio2+0x2e8>)
 80047d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047dc:	f7fb fcf8 	bl	80001d0 <__aeabi_dsub>
 80047e0:	4602      	mov	r2, r0
 80047e2:	460b      	mov	r3, r1
 80047e4:	e9c4 2300 	strd	r2, r3, [r4]
 80047e8:	4630      	mov	r0, r6
 80047ea:	4639      	mov	r1, r7
 80047ec:	f7fb fcf0 	bl	80001d0 <__aeabi_dsub>
 80047f0:	a39f      	add	r3, pc, #636	; (adr r3, 8004a70 <__ieee754_rem_pio2+0x2e8>)
 80047f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f6:	f7fb fceb 	bl	80001d0 <__aeabi_dsub>
 80047fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80047fe:	2501      	movs	r5, #1
 8004800:	4628      	mov	r0, r5
 8004802:	b00d      	add	sp, #52	; 0x34
 8004804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004808:	a39b      	add	r3, pc, #620	; (adr r3, 8004a78 <__ieee754_rem_pio2+0x2f0>)
 800480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800480e:	f7fb fcdf 	bl	80001d0 <__aeabi_dsub>
 8004812:	a39b      	add	r3, pc, #620	; (adr r3, 8004a80 <__ieee754_rem_pio2+0x2f8>)
 8004814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004818:	4606      	mov	r6, r0
 800481a:	460f      	mov	r7, r1
 800481c:	f7fb fcd8 	bl	80001d0 <__aeabi_dsub>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	e9c4 2300 	strd	r2, r3, [r4]
 8004828:	4630      	mov	r0, r6
 800482a:	4639      	mov	r1, r7
 800482c:	f7fb fcd0 	bl	80001d0 <__aeabi_dsub>
 8004830:	a393      	add	r3, pc, #588	; (adr r3, 8004a80 <__ieee754_rem_pio2+0x2f8>)
 8004832:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004836:	e7de      	b.n	80047f6 <__ieee754_rem_pio2+0x6e>
 8004838:	f7fb fccc 	bl	80001d4 <__adddf3>
 800483c:	45a8      	cmp	r8, r5
 800483e:	4606      	mov	r6, r0
 8004840:	460f      	mov	r7, r1
 8004842:	d016      	beq.n	8004872 <__ieee754_rem_pio2+0xea>
 8004844:	a38a      	add	r3, pc, #552	; (adr r3, 8004a70 <__ieee754_rem_pio2+0x2e8>)
 8004846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484a:	f7fb fcc3 	bl	80001d4 <__adddf3>
 800484e:	4602      	mov	r2, r0
 8004850:	460b      	mov	r3, r1
 8004852:	e9c4 2300 	strd	r2, r3, [r4]
 8004856:	4630      	mov	r0, r6
 8004858:	4639      	mov	r1, r7
 800485a:	f7fb fcb9 	bl	80001d0 <__aeabi_dsub>
 800485e:	a384      	add	r3, pc, #528	; (adr r3, 8004a70 <__ieee754_rem_pio2+0x2e8>)
 8004860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004864:	f7fb fcb6 	bl	80001d4 <__adddf3>
 8004868:	f04f 35ff 	mov.w	r5, #4294967295
 800486c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004870:	e7c6      	b.n	8004800 <__ieee754_rem_pio2+0x78>
 8004872:	a381      	add	r3, pc, #516	; (adr r3, 8004a78 <__ieee754_rem_pio2+0x2f0>)
 8004874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004878:	f7fb fcac 	bl	80001d4 <__adddf3>
 800487c:	a380      	add	r3, pc, #512	; (adr r3, 8004a80 <__ieee754_rem_pio2+0x2f8>)
 800487e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004882:	4606      	mov	r6, r0
 8004884:	460f      	mov	r7, r1
 8004886:	f7fb fca5 	bl	80001d4 <__adddf3>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	e9c4 2300 	strd	r2, r3, [r4]
 8004892:	4630      	mov	r0, r6
 8004894:	4639      	mov	r1, r7
 8004896:	f7fb fc9b 	bl	80001d0 <__aeabi_dsub>
 800489a:	a379      	add	r3, pc, #484	; (adr r3, 8004a80 <__ieee754_rem_pio2+0x2f8>)
 800489c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a0:	e7e0      	b.n	8004864 <__ieee754_rem_pio2+0xdc>
 80048a2:	4b82      	ldr	r3, [pc, #520]	; (8004aac <__ieee754_rem_pio2+0x324>)
 80048a4:	4598      	cmp	r8, r3
 80048a6:	f300 80d0 	bgt.w	8004a4a <__ieee754_rem_pio2+0x2c2>
 80048aa:	f000 fed3 	bl	8005654 <fabs>
 80048ae:	ec57 6b10 	vmov	r6, r7, d0
 80048b2:	ee10 0a10 	vmov	r0, s0
 80048b6:	a374      	add	r3, pc, #464	; (adr r3, 8004a88 <__ieee754_rem_pio2+0x300>)
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	4639      	mov	r1, r7
 80048be:	f7fb fe3f 	bl	8000540 <__aeabi_dmul>
 80048c2:	2200      	movs	r2, #0
 80048c4:	4b7a      	ldr	r3, [pc, #488]	; (8004ab0 <__ieee754_rem_pio2+0x328>)
 80048c6:	f7fb fc85 	bl	80001d4 <__adddf3>
 80048ca:	f7fc f8e9 	bl	8000aa0 <__aeabi_d2iz>
 80048ce:	4605      	mov	r5, r0
 80048d0:	f7fb fdcc 	bl	800046c <__aeabi_i2d>
 80048d4:	a364      	add	r3, pc, #400	; (adr r3, 8004a68 <__ieee754_rem_pio2+0x2e0>)
 80048d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048de:	f7fb fe2f 	bl	8000540 <__aeabi_dmul>
 80048e2:	4602      	mov	r2, r0
 80048e4:	460b      	mov	r3, r1
 80048e6:	4630      	mov	r0, r6
 80048e8:	4639      	mov	r1, r7
 80048ea:	f7fb fc71 	bl	80001d0 <__aeabi_dsub>
 80048ee:	a360      	add	r3, pc, #384	; (adr r3, 8004a70 <__ieee754_rem_pio2+0x2e8>)
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	4682      	mov	sl, r0
 80048f6:	468b      	mov	fp, r1
 80048f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048fc:	f7fb fe20 	bl	8000540 <__aeabi_dmul>
 8004900:	2d1f      	cmp	r5, #31
 8004902:	4606      	mov	r6, r0
 8004904:	460f      	mov	r7, r1
 8004906:	dc0c      	bgt.n	8004922 <__ieee754_rem_pio2+0x19a>
 8004908:	1e6a      	subs	r2, r5, #1
 800490a:	4b6a      	ldr	r3, [pc, #424]	; (8004ab4 <__ieee754_rem_pio2+0x32c>)
 800490c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004910:	4543      	cmp	r3, r8
 8004912:	d006      	beq.n	8004922 <__ieee754_rem_pio2+0x19a>
 8004914:	4632      	mov	r2, r6
 8004916:	463b      	mov	r3, r7
 8004918:	4650      	mov	r0, sl
 800491a:	4659      	mov	r1, fp
 800491c:	f7fb fc58 	bl	80001d0 <__aeabi_dsub>
 8004920:	e00e      	b.n	8004940 <__ieee754_rem_pio2+0x1b8>
 8004922:	4632      	mov	r2, r6
 8004924:	463b      	mov	r3, r7
 8004926:	4650      	mov	r0, sl
 8004928:	4659      	mov	r1, fp
 800492a:	f7fb fc51 	bl	80001d0 <__aeabi_dsub>
 800492e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004932:	9305      	str	r3, [sp, #20]
 8004934:	9a05      	ldr	r2, [sp, #20]
 8004936:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800493a:	1ad3      	subs	r3, r2, r3
 800493c:	2b10      	cmp	r3, #16
 800493e:	dc02      	bgt.n	8004946 <__ieee754_rem_pio2+0x1be>
 8004940:	e9c4 0100 	strd	r0, r1, [r4]
 8004944:	e039      	b.n	80049ba <__ieee754_rem_pio2+0x232>
 8004946:	a34c      	add	r3, pc, #304	; (adr r3, 8004a78 <__ieee754_rem_pio2+0x2f0>)
 8004948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004950:	f7fb fdf6 	bl	8000540 <__aeabi_dmul>
 8004954:	4606      	mov	r6, r0
 8004956:	460f      	mov	r7, r1
 8004958:	4602      	mov	r2, r0
 800495a:	460b      	mov	r3, r1
 800495c:	4650      	mov	r0, sl
 800495e:	4659      	mov	r1, fp
 8004960:	f7fb fc36 	bl	80001d0 <__aeabi_dsub>
 8004964:	4602      	mov	r2, r0
 8004966:	460b      	mov	r3, r1
 8004968:	4680      	mov	r8, r0
 800496a:	4689      	mov	r9, r1
 800496c:	4650      	mov	r0, sl
 800496e:	4659      	mov	r1, fp
 8004970:	f7fb fc2e 	bl	80001d0 <__aeabi_dsub>
 8004974:	4632      	mov	r2, r6
 8004976:	463b      	mov	r3, r7
 8004978:	f7fb fc2a 	bl	80001d0 <__aeabi_dsub>
 800497c:	a340      	add	r3, pc, #256	; (adr r3, 8004a80 <__ieee754_rem_pio2+0x2f8>)
 800497e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004982:	4606      	mov	r6, r0
 8004984:	460f      	mov	r7, r1
 8004986:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800498a:	f7fb fdd9 	bl	8000540 <__aeabi_dmul>
 800498e:	4632      	mov	r2, r6
 8004990:	463b      	mov	r3, r7
 8004992:	f7fb fc1d 	bl	80001d0 <__aeabi_dsub>
 8004996:	4602      	mov	r2, r0
 8004998:	460b      	mov	r3, r1
 800499a:	4606      	mov	r6, r0
 800499c:	460f      	mov	r7, r1
 800499e:	4640      	mov	r0, r8
 80049a0:	4649      	mov	r1, r9
 80049a2:	f7fb fc15 	bl	80001d0 <__aeabi_dsub>
 80049a6:	9a05      	ldr	r2, [sp, #20]
 80049a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b31      	cmp	r3, #49	; 0x31
 80049b0:	dc20      	bgt.n	80049f4 <__ieee754_rem_pio2+0x26c>
 80049b2:	e9c4 0100 	strd	r0, r1, [r4]
 80049b6:	46c2      	mov	sl, r8
 80049b8:	46cb      	mov	fp, r9
 80049ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80049be:	4650      	mov	r0, sl
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	4659      	mov	r1, fp
 80049c6:	f7fb fc03 	bl	80001d0 <__aeabi_dsub>
 80049ca:	463b      	mov	r3, r7
 80049cc:	4632      	mov	r2, r6
 80049ce:	f7fb fbff 	bl	80001d0 <__aeabi_dsub>
 80049d2:	9b04      	ldr	r3, [sp, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049da:	f6bf af11 	bge.w	8004800 <__ieee754_rem_pio2+0x78>
 80049de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80049e2:	6063      	str	r3, [r4, #4]
 80049e4:	f8c4 8000 	str.w	r8, [r4]
 80049e8:	60a0      	str	r0, [r4, #8]
 80049ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80049ee:	60e3      	str	r3, [r4, #12]
 80049f0:	426d      	negs	r5, r5
 80049f2:	e705      	b.n	8004800 <__ieee754_rem_pio2+0x78>
 80049f4:	a326      	add	r3, pc, #152	; (adr r3, 8004a90 <__ieee754_rem_pio2+0x308>)
 80049f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049fe:	f7fb fd9f 	bl	8000540 <__aeabi_dmul>
 8004a02:	4606      	mov	r6, r0
 8004a04:	460f      	mov	r7, r1
 8004a06:	4602      	mov	r2, r0
 8004a08:	460b      	mov	r3, r1
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	4649      	mov	r1, r9
 8004a0e:	f7fb fbdf 	bl	80001d0 <__aeabi_dsub>
 8004a12:	4602      	mov	r2, r0
 8004a14:	460b      	mov	r3, r1
 8004a16:	4682      	mov	sl, r0
 8004a18:	468b      	mov	fp, r1
 8004a1a:	4640      	mov	r0, r8
 8004a1c:	4649      	mov	r1, r9
 8004a1e:	f7fb fbd7 	bl	80001d0 <__aeabi_dsub>
 8004a22:	4632      	mov	r2, r6
 8004a24:	463b      	mov	r3, r7
 8004a26:	f7fb fbd3 	bl	80001d0 <__aeabi_dsub>
 8004a2a:	a31b      	add	r3, pc, #108	; (adr r3, 8004a98 <__ieee754_rem_pio2+0x310>)
 8004a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a30:	4606      	mov	r6, r0
 8004a32:	460f      	mov	r7, r1
 8004a34:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004a38:	f7fb fd82 	bl	8000540 <__aeabi_dmul>
 8004a3c:	4632      	mov	r2, r6
 8004a3e:	463b      	mov	r3, r7
 8004a40:	f7fb fbc6 	bl	80001d0 <__aeabi_dsub>
 8004a44:	4606      	mov	r6, r0
 8004a46:	460f      	mov	r7, r1
 8004a48:	e764      	b.n	8004914 <__ieee754_rem_pio2+0x18c>
 8004a4a:	4b1b      	ldr	r3, [pc, #108]	; (8004ab8 <__ieee754_rem_pio2+0x330>)
 8004a4c:	4598      	cmp	r8, r3
 8004a4e:	dd35      	ble.n	8004abc <__ieee754_rem_pio2+0x334>
 8004a50:	ee10 2a10 	vmov	r2, s0
 8004a54:	463b      	mov	r3, r7
 8004a56:	4630      	mov	r0, r6
 8004a58:	4639      	mov	r1, r7
 8004a5a:	f7fb fbb9 	bl	80001d0 <__aeabi_dsub>
 8004a5e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004a62:	e9c4 0100 	strd	r0, r1, [r4]
 8004a66:	e6a1      	b.n	80047ac <__ieee754_rem_pio2+0x24>
 8004a68:	54400000 	.word	0x54400000
 8004a6c:	3ff921fb 	.word	0x3ff921fb
 8004a70:	1a626331 	.word	0x1a626331
 8004a74:	3dd0b461 	.word	0x3dd0b461
 8004a78:	1a600000 	.word	0x1a600000
 8004a7c:	3dd0b461 	.word	0x3dd0b461
 8004a80:	2e037073 	.word	0x2e037073
 8004a84:	3ba3198a 	.word	0x3ba3198a
 8004a88:	6dc9c883 	.word	0x6dc9c883
 8004a8c:	3fe45f30 	.word	0x3fe45f30
 8004a90:	2e000000 	.word	0x2e000000
 8004a94:	3ba3198a 	.word	0x3ba3198a
 8004a98:	252049c1 	.word	0x252049c1
 8004a9c:	397b839a 	.word	0x397b839a
 8004aa0:	3fe921fb 	.word	0x3fe921fb
 8004aa4:	4002d97b 	.word	0x4002d97b
 8004aa8:	3ff921fb 	.word	0x3ff921fb
 8004aac:	413921fb 	.word	0x413921fb
 8004ab0:	3fe00000 	.word	0x3fe00000
 8004ab4:	08005ae8 	.word	0x08005ae8
 8004ab8:	7fefffff 	.word	0x7fefffff
 8004abc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004ac0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004ac4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004ac8:	4630      	mov	r0, r6
 8004aca:	460f      	mov	r7, r1
 8004acc:	f7fb ffe8 	bl	8000aa0 <__aeabi_d2iz>
 8004ad0:	f7fb fccc 	bl	800046c <__aeabi_i2d>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	4630      	mov	r0, r6
 8004ada:	4639      	mov	r1, r7
 8004adc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004ae0:	f7fb fb76 	bl	80001d0 <__aeabi_dsub>
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <__ieee754_rem_pio2+0x3dc>)
 8004ae8:	f7fb fd2a 	bl	8000540 <__aeabi_dmul>
 8004aec:	460f      	mov	r7, r1
 8004aee:	4606      	mov	r6, r0
 8004af0:	f7fb ffd6 	bl	8000aa0 <__aeabi_d2iz>
 8004af4:	f7fb fcba 	bl	800046c <__aeabi_i2d>
 8004af8:	4602      	mov	r2, r0
 8004afa:	460b      	mov	r3, r1
 8004afc:	4630      	mov	r0, r6
 8004afe:	4639      	mov	r1, r7
 8004b00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b04:	f7fb fb64 	bl	80001d0 <__aeabi_dsub>
 8004b08:	2200      	movs	r2, #0
 8004b0a:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <__ieee754_rem_pio2+0x3dc>)
 8004b0c:	f7fb fd18 	bl	8000540 <__aeabi_dmul>
 8004b10:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b14:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004b18:	f04f 0803 	mov.w	r8, #3
 8004b1c:	2600      	movs	r6, #0
 8004b1e:	2700      	movs	r7, #0
 8004b20:	4632      	mov	r2, r6
 8004b22:	463b      	mov	r3, r7
 8004b24:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004b28:	f108 3aff 	add.w	sl, r8, #4294967295
 8004b2c:	f7fb ff70 	bl	8000a10 <__aeabi_dcmpeq>
 8004b30:	b9b0      	cbnz	r0, 8004b60 <__ieee754_rem_pio2+0x3d8>
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <__ieee754_rem_pio2+0x3e0>)
 8004b34:	9301      	str	r3, [sp, #4]
 8004b36:	2302      	movs	r3, #2
 8004b38:	9300      	str	r3, [sp, #0]
 8004b3a:	462a      	mov	r2, r5
 8004b3c:	4643      	mov	r3, r8
 8004b3e:	4621      	mov	r1, r4
 8004b40:	a806      	add	r0, sp, #24
 8004b42:	f000 f98d 	bl	8004e60 <__kernel_rem_pio2>
 8004b46:	9b04      	ldr	r3, [sp, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	4605      	mov	r5, r0
 8004b4c:	f6bf ae58 	bge.w	8004800 <__ieee754_rem_pio2+0x78>
 8004b50:	6863      	ldr	r3, [r4, #4]
 8004b52:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b56:	6063      	str	r3, [r4, #4]
 8004b58:	68e3      	ldr	r3, [r4, #12]
 8004b5a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004b5e:	e746      	b.n	80049ee <__ieee754_rem_pio2+0x266>
 8004b60:	46d0      	mov	r8, sl
 8004b62:	e7dd      	b.n	8004b20 <__ieee754_rem_pio2+0x398>
 8004b64:	41700000 	.word	0x41700000
 8004b68:	08005b68 	.word	0x08005b68

08004b6c <__ieee754_sqrt>:
 8004b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b70:	4955      	ldr	r1, [pc, #340]	; (8004cc8 <__ieee754_sqrt+0x15c>)
 8004b72:	ec55 4b10 	vmov	r4, r5, d0
 8004b76:	43a9      	bics	r1, r5
 8004b78:	462b      	mov	r3, r5
 8004b7a:	462a      	mov	r2, r5
 8004b7c:	d112      	bne.n	8004ba4 <__ieee754_sqrt+0x38>
 8004b7e:	ee10 2a10 	vmov	r2, s0
 8004b82:	ee10 0a10 	vmov	r0, s0
 8004b86:	4629      	mov	r1, r5
 8004b88:	f7fb fcda 	bl	8000540 <__aeabi_dmul>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	460b      	mov	r3, r1
 8004b90:	4620      	mov	r0, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	f7fb fb1e 	bl	80001d4 <__adddf3>
 8004b98:	4604      	mov	r4, r0
 8004b9a:	460d      	mov	r5, r1
 8004b9c:	ec45 4b10 	vmov	d0, r4, r5
 8004ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ba4:	2d00      	cmp	r5, #0
 8004ba6:	ee10 0a10 	vmov	r0, s0
 8004baa:	4621      	mov	r1, r4
 8004bac:	dc0f      	bgt.n	8004bce <__ieee754_sqrt+0x62>
 8004bae:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004bb2:	4330      	orrs	r0, r6
 8004bb4:	d0f2      	beq.n	8004b9c <__ieee754_sqrt+0x30>
 8004bb6:	b155      	cbz	r5, 8004bce <__ieee754_sqrt+0x62>
 8004bb8:	ee10 2a10 	vmov	r2, s0
 8004bbc:	4620      	mov	r0, r4
 8004bbe:	4629      	mov	r1, r5
 8004bc0:	f7fb fb06 	bl	80001d0 <__aeabi_dsub>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	460b      	mov	r3, r1
 8004bc8:	f7fb fde4 	bl	8000794 <__aeabi_ddiv>
 8004bcc:	e7e4      	b.n	8004b98 <__ieee754_sqrt+0x2c>
 8004bce:	151b      	asrs	r3, r3, #20
 8004bd0:	d073      	beq.n	8004cba <__ieee754_sqrt+0x14e>
 8004bd2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004bd6:	07dd      	lsls	r5, r3, #31
 8004bd8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004bdc:	bf48      	it	mi
 8004bde:	0fc8      	lsrmi	r0, r1, #31
 8004be0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004be4:	bf44      	itt	mi
 8004be6:	0049      	lslmi	r1, r1, #1
 8004be8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004bec:	2500      	movs	r5, #0
 8004bee:	1058      	asrs	r0, r3, #1
 8004bf0:	0fcb      	lsrs	r3, r1, #31
 8004bf2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004bf6:	0049      	lsls	r1, r1, #1
 8004bf8:	2316      	movs	r3, #22
 8004bfa:	462c      	mov	r4, r5
 8004bfc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004c00:	19a7      	adds	r7, r4, r6
 8004c02:	4297      	cmp	r7, r2
 8004c04:	bfde      	ittt	le
 8004c06:	19bc      	addle	r4, r7, r6
 8004c08:	1bd2      	suble	r2, r2, r7
 8004c0a:	19ad      	addle	r5, r5, r6
 8004c0c:	0fcf      	lsrs	r7, r1, #31
 8004c0e:	3b01      	subs	r3, #1
 8004c10:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004c14:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004c18:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004c1c:	d1f0      	bne.n	8004c00 <__ieee754_sqrt+0x94>
 8004c1e:	f04f 0c20 	mov.w	ip, #32
 8004c22:	469e      	mov	lr, r3
 8004c24:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004c28:	42a2      	cmp	r2, r4
 8004c2a:	eb06 070e 	add.w	r7, r6, lr
 8004c2e:	dc02      	bgt.n	8004c36 <__ieee754_sqrt+0xca>
 8004c30:	d112      	bne.n	8004c58 <__ieee754_sqrt+0xec>
 8004c32:	428f      	cmp	r7, r1
 8004c34:	d810      	bhi.n	8004c58 <__ieee754_sqrt+0xec>
 8004c36:	2f00      	cmp	r7, #0
 8004c38:	eb07 0e06 	add.w	lr, r7, r6
 8004c3c:	da42      	bge.n	8004cc4 <__ieee754_sqrt+0x158>
 8004c3e:	f1be 0f00 	cmp.w	lr, #0
 8004c42:	db3f      	blt.n	8004cc4 <__ieee754_sqrt+0x158>
 8004c44:	f104 0801 	add.w	r8, r4, #1
 8004c48:	1b12      	subs	r2, r2, r4
 8004c4a:	428f      	cmp	r7, r1
 8004c4c:	bf88      	it	hi
 8004c4e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004c52:	1bc9      	subs	r1, r1, r7
 8004c54:	4433      	add	r3, r6
 8004c56:	4644      	mov	r4, r8
 8004c58:	0052      	lsls	r2, r2, #1
 8004c5a:	f1bc 0c01 	subs.w	ip, ip, #1
 8004c5e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004c62:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004c66:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004c6a:	d1dd      	bne.n	8004c28 <__ieee754_sqrt+0xbc>
 8004c6c:	430a      	orrs	r2, r1
 8004c6e:	d006      	beq.n	8004c7e <__ieee754_sqrt+0x112>
 8004c70:	1c5c      	adds	r4, r3, #1
 8004c72:	bf13      	iteet	ne
 8004c74:	3301      	addne	r3, #1
 8004c76:	3501      	addeq	r5, #1
 8004c78:	4663      	moveq	r3, ip
 8004c7a:	f023 0301 	bicne.w	r3, r3, #1
 8004c7e:	106a      	asrs	r2, r5, #1
 8004c80:	085b      	lsrs	r3, r3, #1
 8004c82:	07e9      	lsls	r1, r5, #31
 8004c84:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004c88:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004c8c:	bf48      	it	mi
 8004c8e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004c92:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004c96:	461c      	mov	r4, r3
 8004c98:	e780      	b.n	8004b9c <__ieee754_sqrt+0x30>
 8004c9a:	0aca      	lsrs	r2, r1, #11
 8004c9c:	3815      	subs	r0, #21
 8004c9e:	0549      	lsls	r1, r1, #21
 8004ca0:	2a00      	cmp	r2, #0
 8004ca2:	d0fa      	beq.n	8004c9a <__ieee754_sqrt+0x12e>
 8004ca4:	02d6      	lsls	r6, r2, #11
 8004ca6:	d50a      	bpl.n	8004cbe <__ieee754_sqrt+0x152>
 8004ca8:	f1c3 0420 	rsb	r4, r3, #32
 8004cac:	fa21 f404 	lsr.w	r4, r1, r4
 8004cb0:	1e5d      	subs	r5, r3, #1
 8004cb2:	4099      	lsls	r1, r3
 8004cb4:	4322      	orrs	r2, r4
 8004cb6:	1b43      	subs	r3, r0, r5
 8004cb8:	e78b      	b.n	8004bd2 <__ieee754_sqrt+0x66>
 8004cba:	4618      	mov	r0, r3
 8004cbc:	e7f0      	b.n	8004ca0 <__ieee754_sqrt+0x134>
 8004cbe:	0052      	lsls	r2, r2, #1
 8004cc0:	3301      	adds	r3, #1
 8004cc2:	e7ef      	b.n	8004ca4 <__ieee754_sqrt+0x138>
 8004cc4:	46a0      	mov	r8, r4
 8004cc6:	e7bf      	b.n	8004c48 <__ieee754_sqrt+0xdc>
 8004cc8:	7ff00000 	.word	0x7ff00000
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <__kernel_cos>:
 8004cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	ec59 8b10 	vmov	r8, r9, d0
 8004cd8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8004cdc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004ce0:	ed2d 8b02 	vpush	{d8}
 8004ce4:	eeb0 8a41 	vmov.f32	s16, s2
 8004ce8:	eef0 8a61 	vmov.f32	s17, s3
 8004cec:	da07      	bge.n	8004cfe <__kernel_cos+0x2e>
 8004cee:	ee10 0a10 	vmov	r0, s0
 8004cf2:	4649      	mov	r1, r9
 8004cf4:	f7fb fed4 	bl	8000aa0 <__aeabi_d2iz>
 8004cf8:	2800      	cmp	r0, #0
 8004cfa:	f000 8089 	beq.w	8004e10 <__kernel_cos+0x140>
 8004cfe:	4642      	mov	r2, r8
 8004d00:	464b      	mov	r3, r9
 8004d02:	4640      	mov	r0, r8
 8004d04:	4649      	mov	r1, r9
 8004d06:	f7fb fc1b 	bl	8000540 <__aeabi_dmul>
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <__kernel_cos+0x178>)
 8004d0e:	4604      	mov	r4, r0
 8004d10:	460d      	mov	r5, r1
 8004d12:	f7fb fc15 	bl	8000540 <__aeabi_dmul>
 8004d16:	a340      	add	r3, pc, #256	; (adr r3, 8004e18 <__kernel_cos+0x148>)
 8004d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1c:	4682      	mov	sl, r0
 8004d1e:	468b      	mov	fp, r1
 8004d20:	4620      	mov	r0, r4
 8004d22:	4629      	mov	r1, r5
 8004d24:	f7fb fc0c 	bl	8000540 <__aeabi_dmul>
 8004d28:	a33d      	add	r3, pc, #244	; (adr r3, 8004e20 <__kernel_cos+0x150>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	f7fb fa51 	bl	80001d4 <__adddf3>
 8004d32:	4622      	mov	r2, r4
 8004d34:	462b      	mov	r3, r5
 8004d36:	f7fb fc03 	bl	8000540 <__aeabi_dmul>
 8004d3a:	a33b      	add	r3, pc, #236	; (adr r3, 8004e28 <__kernel_cos+0x158>)
 8004d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d40:	f7fb fa46 	bl	80001d0 <__aeabi_dsub>
 8004d44:	4622      	mov	r2, r4
 8004d46:	462b      	mov	r3, r5
 8004d48:	f7fb fbfa 	bl	8000540 <__aeabi_dmul>
 8004d4c:	a338      	add	r3, pc, #224	; (adr r3, 8004e30 <__kernel_cos+0x160>)
 8004d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d52:	f7fb fa3f 	bl	80001d4 <__adddf3>
 8004d56:	4622      	mov	r2, r4
 8004d58:	462b      	mov	r3, r5
 8004d5a:	f7fb fbf1 	bl	8000540 <__aeabi_dmul>
 8004d5e:	a336      	add	r3, pc, #216	; (adr r3, 8004e38 <__kernel_cos+0x168>)
 8004d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d64:	f7fb fa34 	bl	80001d0 <__aeabi_dsub>
 8004d68:	4622      	mov	r2, r4
 8004d6a:	462b      	mov	r3, r5
 8004d6c:	f7fb fbe8 	bl	8000540 <__aeabi_dmul>
 8004d70:	a333      	add	r3, pc, #204	; (adr r3, 8004e40 <__kernel_cos+0x170>)
 8004d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d76:	f7fb fa2d 	bl	80001d4 <__adddf3>
 8004d7a:	4622      	mov	r2, r4
 8004d7c:	462b      	mov	r3, r5
 8004d7e:	f7fb fbdf 	bl	8000540 <__aeabi_dmul>
 8004d82:	4622      	mov	r2, r4
 8004d84:	462b      	mov	r3, r5
 8004d86:	f7fb fbdb 	bl	8000540 <__aeabi_dmul>
 8004d8a:	ec53 2b18 	vmov	r2, r3, d8
 8004d8e:	4604      	mov	r4, r0
 8004d90:	460d      	mov	r5, r1
 8004d92:	4640      	mov	r0, r8
 8004d94:	4649      	mov	r1, r9
 8004d96:	f7fb fbd3 	bl	8000540 <__aeabi_dmul>
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4629      	mov	r1, r5
 8004da0:	4620      	mov	r0, r4
 8004da2:	f7fb fa15 	bl	80001d0 <__aeabi_dsub>
 8004da6:	4b29      	ldr	r3, [pc, #164]	; (8004e4c <__kernel_cos+0x17c>)
 8004da8:	429e      	cmp	r6, r3
 8004daa:	4680      	mov	r8, r0
 8004dac:	4689      	mov	r9, r1
 8004dae:	dc11      	bgt.n	8004dd4 <__kernel_cos+0x104>
 8004db0:	4602      	mov	r2, r0
 8004db2:	460b      	mov	r3, r1
 8004db4:	4650      	mov	r0, sl
 8004db6:	4659      	mov	r1, fp
 8004db8:	f7fb fa0a 	bl	80001d0 <__aeabi_dsub>
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4924      	ldr	r1, [pc, #144]	; (8004e50 <__kernel_cos+0x180>)
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	2000      	movs	r0, #0
 8004dc4:	f7fb fa04 	bl	80001d0 <__aeabi_dsub>
 8004dc8:	ecbd 8b02 	vpop	{d8}
 8004dcc:	ec41 0b10 	vmov	d0, r0, r1
 8004dd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	; (8004e54 <__kernel_cos+0x184>)
 8004dd6:	491e      	ldr	r1, [pc, #120]	; (8004e50 <__kernel_cos+0x180>)
 8004dd8:	429e      	cmp	r6, r3
 8004dda:	bfcc      	ite	gt
 8004ddc:	4d1e      	ldrgt	r5, [pc, #120]	; (8004e58 <__kernel_cos+0x188>)
 8004dde:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004de2:	2400      	movs	r4, #0
 8004de4:	4622      	mov	r2, r4
 8004de6:	462b      	mov	r3, r5
 8004de8:	2000      	movs	r0, #0
 8004dea:	f7fb f9f1 	bl	80001d0 <__aeabi_dsub>
 8004dee:	4622      	mov	r2, r4
 8004df0:	4606      	mov	r6, r0
 8004df2:	460f      	mov	r7, r1
 8004df4:	462b      	mov	r3, r5
 8004df6:	4650      	mov	r0, sl
 8004df8:	4659      	mov	r1, fp
 8004dfa:	f7fb f9e9 	bl	80001d0 <__aeabi_dsub>
 8004dfe:	4642      	mov	r2, r8
 8004e00:	464b      	mov	r3, r9
 8004e02:	f7fb f9e5 	bl	80001d0 <__aeabi_dsub>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	4639      	mov	r1, r7
 8004e0e:	e7d9      	b.n	8004dc4 <__kernel_cos+0xf4>
 8004e10:	2000      	movs	r0, #0
 8004e12:	490f      	ldr	r1, [pc, #60]	; (8004e50 <__kernel_cos+0x180>)
 8004e14:	e7d8      	b.n	8004dc8 <__kernel_cos+0xf8>
 8004e16:	bf00      	nop
 8004e18:	be8838d4 	.word	0xbe8838d4
 8004e1c:	bda8fae9 	.word	0xbda8fae9
 8004e20:	bdb4b1c4 	.word	0xbdb4b1c4
 8004e24:	3e21ee9e 	.word	0x3e21ee9e
 8004e28:	809c52ad 	.word	0x809c52ad
 8004e2c:	3e927e4f 	.word	0x3e927e4f
 8004e30:	19cb1590 	.word	0x19cb1590
 8004e34:	3efa01a0 	.word	0x3efa01a0
 8004e38:	16c15177 	.word	0x16c15177
 8004e3c:	3f56c16c 	.word	0x3f56c16c
 8004e40:	5555554c 	.word	0x5555554c
 8004e44:	3fa55555 	.word	0x3fa55555
 8004e48:	3fe00000 	.word	0x3fe00000
 8004e4c:	3fd33332 	.word	0x3fd33332
 8004e50:	3ff00000 	.word	0x3ff00000
 8004e54:	3fe90000 	.word	0x3fe90000
 8004e58:	3fd20000 	.word	0x3fd20000
 8004e5c:	00000000 	.word	0x00000000

08004e60 <__kernel_rem_pio2>:
 8004e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e64:	ed2d 8b02 	vpush	{d8}
 8004e68:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004e6c:	1ed4      	subs	r4, r2, #3
 8004e6e:	9308      	str	r3, [sp, #32]
 8004e70:	9101      	str	r1, [sp, #4]
 8004e72:	4bc5      	ldr	r3, [pc, #788]	; (8005188 <__kernel_rem_pio2+0x328>)
 8004e74:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004e76:	9009      	str	r0, [sp, #36]	; 0x24
 8004e78:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004e7c:	9304      	str	r3, [sp, #16]
 8004e7e:	9b08      	ldr	r3, [sp, #32]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	9307      	str	r3, [sp, #28]
 8004e84:	2318      	movs	r3, #24
 8004e86:	fb94 f4f3 	sdiv	r4, r4, r3
 8004e8a:	f06f 0317 	mvn.w	r3, #23
 8004e8e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8004e92:	fb04 3303 	mla	r3, r4, r3, r3
 8004e96:	eb03 0a02 	add.w	sl, r3, r2
 8004e9a:	9b04      	ldr	r3, [sp, #16]
 8004e9c:	9a07      	ldr	r2, [sp, #28]
 8004e9e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005178 <__kernel_rem_pio2+0x318>
 8004ea2:	eb03 0802 	add.w	r8, r3, r2
 8004ea6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004ea8:	1aa7      	subs	r7, r4, r2
 8004eaa:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004eae:	ae22      	add	r6, sp, #136	; 0x88
 8004eb0:	2500      	movs	r5, #0
 8004eb2:	4545      	cmp	r5, r8
 8004eb4:	dd13      	ble.n	8004ede <__kernel_rem_pio2+0x7e>
 8004eb6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005178 <__kernel_rem_pio2+0x318>
 8004eba:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8004ebe:	2600      	movs	r6, #0
 8004ec0:	9b04      	ldr	r3, [sp, #16]
 8004ec2:	429e      	cmp	r6, r3
 8004ec4:	dc32      	bgt.n	8004f2c <__kernel_rem_pio2+0xcc>
 8004ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004ec8:	9302      	str	r3, [sp, #8]
 8004eca:	9b08      	ldr	r3, [sp, #32]
 8004ecc:	199d      	adds	r5, r3, r6
 8004ece:	ab22      	add	r3, sp, #136	; 0x88
 8004ed0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8004ed4:	9306      	str	r3, [sp, #24]
 8004ed6:	ec59 8b18 	vmov	r8, r9, d8
 8004eda:	2700      	movs	r7, #0
 8004edc:	e01f      	b.n	8004f1e <__kernel_rem_pio2+0xbe>
 8004ede:	42ef      	cmn	r7, r5
 8004ee0:	d407      	bmi.n	8004ef2 <__kernel_rem_pio2+0x92>
 8004ee2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004ee6:	f7fb fac1 	bl	800046c <__aeabi_i2d>
 8004eea:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004eee:	3501      	adds	r5, #1
 8004ef0:	e7df      	b.n	8004eb2 <__kernel_rem_pio2+0x52>
 8004ef2:	ec51 0b18 	vmov	r0, r1, d8
 8004ef6:	e7f8      	b.n	8004eea <__kernel_rem_pio2+0x8a>
 8004ef8:	9906      	ldr	r1, [sp, #24]
 8004efa:	9d02      	ldr	r5, [sp, #8]
 8004efc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004f00:	9106      	str	r1, [sp, #24]
 8004f02:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004f06:	9502      	str	r5, [sp, #8]
 8004f08:	f7fb fb1a 	bl	8000540 <__aeabi_dmul>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4640      	mov	r0, r8
 8004f12:	4649      	mov	r1, r9
 8004f14:	f7fb f95e 	bl	80001d4 <__adddf3>
 8004f18:	3701      	adds	r7, #1
 8004f1a:	4680      	mov	r8, r0
 8004f1c:	4689      	mov	r9, r1
 8004f1e:	9b07      	ldr	r3, [sp, #28]
 8004f20:	429f      	cmp	r7, r3
 8004f22:	dde9      	ble.n	8004ef8 <__kernel_rem_pio2+0x98>
 8004f24:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004f28:	3601      	adds	r6, #1
 8004f2a:	e7c9      	b.n	8004ec0 <__kernel_rem_pio2+0x60>
 8004f2c:	9b04      	ldr	r3, [sp, #16]
 8004f2e:	aa0e      	add	r2, sp, #56	; 0x38
 8004f30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004f34:	930c      	str	r3, [sp, #48]	; 0x30
 8004f36:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004f38:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004f3c:	9c04      	ldr	r4, [sp, #16]
 8004f3e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f40:	ab9a      	add	r3, sp, #616	; 0x268
 8004f42:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8004f46:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004f4a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f4e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004f52:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004f56:	ab9a      	add	r3, sp, #616	; 0x268
 8004f58:	445b      	add	r3, fp
 8004f5a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 8004f5e:	2500      	movs	r5, #0
 8004f60:	1b63      	subs	r3, r4, r5
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dc78      	bgt.n	8005058 <__kernel_rem_pio2+0x1f8>
 8004f66:	4650      	mov	r0, sl
 8004f68:	ec49 8b10 	vmov	d0, r8, r9
 8004f6c:	f000 fc98 	bl	80058a0 <scalbn>
 8004f70:	ec57 6b10 	vmov	r6, r7, d0
 8004f74:	2200      	movs	r2, #0
 8004f76:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8004f7a:	ee10 0a10 	vmov	r0, s0
 8004f7e:	4639      	mov	r1, r7
 8004f80:	f7fb fade 	bl	8000540 <__aeabi_dmul>
 8004f84:	ec41 0b10 	vmov	d0, r0, r1
 8004f88:	f000 fb76 	bl	8005678 <floor>
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	ec51 0b10 	vmov	r0, r1, d0
 8004f92:	4b7e      	ldr	r3, [pc, #504]	; (800518c <__kernel_rem_pio2+0x32c>)
 8004f94:	f7fb fad4 	bl	8000540 <__aeabi_dmul>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	460b      	mov	r3, r1
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	4639      	mov	r1, r7
 8004fa0:	f7fb f916 	bl	80001d0 <__aeabi_dsub>
 8004fa4:	460f      	mov	r7, r1
 8004fa6:	4606      	mov	r6, r0
 8004fa8:	f7fb fd7a 	bl	8000aa0 <__aeabi_d2iz>
 8004fac:	9006      	str	r0, [sp, #24]
 8004fae:	f7fb fa5d 	bl	800046c <__aeabi_i2d>
 8004fb2:	4602      	mov	r2, r0
 8004fb4:	460b      	mov	r3, r1
 8004fb6:	4630      	mov	r0, r6
 8004fb8:	4639      	mov	r1, r7
 8004fba:	f7fb f909 	bl	80001d0 <__aeabi_dsub>
 8004fbe:	f1ba 0f00 	cmp.w	sl, #0
 8004fc2:	4606      	mov	r6, r0
 8004fc4:	460f      	mov	r7, r1
 8004fc6:	dd6c      	ble.n	80050a2 <__kernel_rem_pio2+0x242>
 8004fc8:	1e62      	subs	r2, r4, #1
 8004fca:	ab0e      	add	r3, sp, #56	; 0x38
 8004fcc:	f1ca 0118 	rsb	r1, sl, #24
 8004fd0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8004fd4:	9d06      	ldr	r5, [sp, #24]
 8004fd6:	fa40 f301 	asr.w	r3, r0, r1
 8004fda:	441d      	add	r5, r3
 8004fdc:	408b      	lsls	r3, r1
 8004fde:	1ac0      	subs	r0, r0, r3
 8004fe0:	ab0e      	add	r3, sp, #56	; 0x38
 8004fe2:	9506      	str	r5, [sp, #24]
 8004fe4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004fe8:	f1ca 0317 	rsb	r3, sl, #23
 8004fec:	fa40 f303 	asr.w	r3, r0, r3
 8004ff0:	9302      	str	r3, [sp, #8]
 8004ff2:	9b02      	ldr	r3, [sp, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	dd62      	ble.n	80050be <__kernel_rem_pio2+0x25e>
 8004ff8:	9b06      	ldr	r3, [sp, #24]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	9306      	str	r3, [sp, #24]
 8005000:	4615      	mov	r5, r2
 8005002:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005006:	4294      	cmp	r4, r2
 8005008:	f300 8095 	bgt.w	8005136 <__kernel_rem_pio2+0x2d6>
 800500c:	f1ba 0f00 	cmp.w	sl, #0
 8005010:	dd07      	ble.n	8005022 <__kernel_rem_pio2+0x1c2>
 8005012:	f1ba 0f01 	cmp.w	sl, #1
 8005016:	f000 80a2 	beq.w	800515e <__kernel_rem_pio2+0x2fe>
 800501a:	f1ba 0f02 	cmp.w	sl, #2
 800501e:	f000 80c1 	beq.w	80051a4 <__kernel_rem_pio2+0x344>
 8005022:	9b02      	ldr	r3, [sp, #8]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d14a      	bne.n	80050be <__kernel_rem_pio2+0x25e>
 8005028:	4632      	mov	r2, r6
 800502a:	463b      	mov	r3, r7
 800502c:	2000      	movs	r0, #0
 800502e:	4958      	ldr	r1, [pc, #352]	; (8005190 <__kernel_rem_pio2+0x330>)
 8005030:	f7fb f8ce 	bl	80001d0 <__aeabi_dsub>
 8005034:	4606      	mov	r6, r0
 8005036:	460f      	mov	r7, r1
 8005038:	2d00      	cmp	r5, #0
 800503a:	d040      	beq.n	80050be <__kernel_rem_pio2+0x25e>
 800503c:	4650      	mov	r0, sl
 800503e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005180 <__kernel_rem_pio2+0x320>
 8005042:	f000 fc2d 	bl	80058a0 <scalbn>
 8005046:	4630      	mov	r0, r6
 8005048:	4639      	mov	r1, r7
 800504a:	ec53 2b10 	vmov	r2, r3, d0
 800504e:	f7fb f8bf 	bl	80001d0 <__aeabi_dsub>
 8005052:	4606      	mov	r6, r0
 8005054:	460f      	mov	r7, r1
 8005056:	e032      	b.n	80050be <__kernel_rem_pio2+0x25e>
 8005058:	2200      	movs	r2, #0
 800505a:	4b4e      	ldr	r3, [pc, #312]	; (8005194 <__kernel_rem_pio2+0x334>)
 800505c:	4640      	mov	r0, r8
 800505e:	4649      	mov	r1, r9
 8005060:	f7fb fa6e 	bl	8000540 <__aeabi_dmul>
 8005064:	f7fb fd1c 	bl	8000aa0 <__aeabi_d2iz>
 8005068:	f7fb fa00 	bl	800046c <__aeabi_i2d>
 800506c:	2200      	movs	r2, #0
 800506e:	4b4a      	ldr	r3, [pc, #296]	; (8005198 <__kernel_rem_pio2+0x338>)
 8005070:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005074:	f7fb fa64 	bl	8000540 <__aeabi_dmul>
 8005078:	4602      	mov	r2, r0
 800507a:	460b      	mov	r3, r1
 800507c:	4640      	mov	r0, r8
 800507e:	4649      	mov	r1, r9
 8005080:	f7fb f8a6 	bl	80001d0 <__aeabi_dsub>
 8005084:	f7fb fd0c 	bl	8000aa0 <__aeabi_d2iz>
 8005088:	ab0e      	add	r3, sp, #56	; 0x38
 800508a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800508e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005092:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005096:	f7fb f89d 	bl	80001d4 <__adddf3>
 800509a:	3501      	adds	r5, #1
 800509c:	4680      	mov	r8, r0
 800509e:	4689      	mov	r9, r1
 80050a0:	e75e      	b.n	8004f60 <__kernel_rem_pio2+0x100>
 80050a2:	d105      	bne.n	80050b0 <__kernel_rem_pio2+0x250>
 80050a4:	1e63      	subs	r3, r4, #1
 80050a6:	aa0e      	add	r2, sp, #56	; 0x38
 80050a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80050ac:	15c3      	asrs	r3, r0, #23
 80050ae:	e79f      	b.n	8004ff0 <__kernel_rem_pio2+0x190>
 80050b0:	2200      	movs	r2, #0
 80050b2:	4b3a      	ldr	r3, [pc, #232]	; (800519c <__kernel_rem_pio2+0x33c>)
 80050b4:	f7fb fcca 	bl	8000a4c <__aeabi_dcmpge>
 80050b8:	2800      	cmp	r0, #0
 80050ba:	d139      	bne.n	8005130 <__kernel_rem_pio2+0x2d0>
 80050bc:	9002      	str	r0, [sp, #8]
 80050be:	2200      	movs	r2, #0
 80050c0:	2300      	movs	r3, #0
 80050c2:	4630      	mov	r0, r6
 80050c4:	4639      	mov	r1, r7
 80050c6:	f7fb fca3 	bl	8000a10 <__aeabi_dcmpeq>
 80050ca:	2800      	cmp	r0, #0
 80050cc:	f000 80c7 	beq.w	800525e <__kernel_rem_pio2+0x3fe>
 80050d0:	1e65      	subs	r5, r4, #1
 80050d2:	462b      	mov	r3, r5
 80050d4:	2200      	movs	r2, #0
 80050d6:	9904      	ldr	r1, [sp, #16]
 80050d8:	428b      	cmp	r3, r1
 80050da:	da6a      	bge.n	80051b2 <__kernel_rem_pio2+0x352>
 80050dc:	2a00      	cmp	r2, #0
 80050de:	f000 8088 	beq.w	80051f2 <__kernel_rem_pio2+0x392>
 80050e2:	ab0e      	add	r3, sp, #56	; 0x38
 80050e4:	f1aa 0a18 	sub.w	sl, sl, #24
 80050e8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 80b4 	beq.w	800525a <__kernel_rem_pio2+0x3fa>
 80050f2:	4650      	mov	r0, sl
 80050f4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005180 <__kernel_rem_pio2+0x320>
 80050f8:	f000 fbd2 	bl	80058a0 <scalbn>
 80050fc:	00ec      	lsls	r4, r5, #3
 80050fe:	ab72      	add	r3, sp, #456	; 0x1c8
 8005100:	191e      	adds	r6, r3, r4
 8005102:	ec59 8b10 	vmov	r8, r9, d0
 8005106:	f106 0a08 	add.w	sl, r6, #8
 800510a:	462f      	mov	r7, r5
 800510c:	2f00      	cmp	r7, #0
 800510e:	f280 80df 	bge.w	80052d0 <__kernel_rem_pio2+0x470>
 8005112:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005178 <__kernel_rem_pio2+0x318>
 8005116:	f04f 0a00 	mov.w	sl, #0
 800511a:	eba5 030a 	sub.w	r3, r5, sl
 800511e:	2b00      	cmp	r3, #0
 8005120:	f2c0 810a 	blt.w	8005338 <__kernel_rem_pio2+0x4d8>
 8005124:	f8df b078 	ldr.w	fp, [pc, #120]	; 80051a0 <__kernel_rem_pio2+0x340>
 8005128:	ec59 8b18 	vmov	r8, r9, d8
 800512c:	2700      	movs	r7, #0
 800512e:	e0f5      	b.n	800531c <__kernel_rem_pio2+0x4bc>
 8005130:	2302      	movs	r3, #2
 8005132:	9302      	str	r3, [sp, #8]
 8005134:	e760      	b.n	8004ff8 <__kernel_rem_pio2+0x198>
 8005136:	ab0e      	add	r3, sp, #56	; 0x38
 8005138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800513c:	b94d      	cbnz	r5, 8005152 <__kernel_rem_pio2+0x2f2>
 800513e:	b12b      	cbz	r3, 800514c <__kernel_rem_pio2+0x2ec>
 8005140:	a80e      	add	r0, sp, #56	; 0x38
 8005142:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005146:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800514a:	2301      	movs	r3, #1
 800514c:	3201      	adds	r2, #1
 800514e:	461d      	mov	r5, r3
 8005150:	e759      	b.n	8005006 <__kernel_rem_pio2+0x1a6>
 8005152:	a80e      	add	r0, sp, #56	; 0x38
 8005154:	1acb      	subs	r3, r1, r3
 8005156:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800515a:	462b      	mov	r3, r5
 800515c:	e7f6      	b.n	800514c <__kernel_rem_pio2+0x2ec>
 800515e:	1e62      	subs	r2, r4, #1
 8005160:	ab0e      	add	r3, sp, #56	; 0x38
 8005162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005166:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800516a:	a90e      	add	r1, sp, #56	; 0x38
 800516c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005170:	e757      	b.n	8005022 <__kernel_rem_pio2+0x1c2>
 8005172:	bf00      	nop
 8005174:	f3af 8000 	nop.w
	...
 8005184:	3ff00000 	.word	0x3ff00000
 8005188:	08005cb0 	.word	0x08005cb0
 800518c:	40200000 	.word	0x40200000
 8005190:	3ff00000 	.word	0x3ff00000
 8005194:	3e700000 	.word	0x3e700000
 8005198:	41700000 	.word	0x41700000
 800519c:	3fe00000 	.word	0x3fe00000
 80051a0:	08005c70 	.word	0x08005c70
 80051a4:	1e62      	subs	r2, r4, #1
 80051a6:	ab0e      	add	r3, sp, #56	; 0x38
 80051a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ac:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80051b0:	e7db      	b.n	800516a <__kernel_rem_pio2+0x30a>
 80051b2:	a90e      	add	r1, sp, #56	; 0x38
 80051b4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80051b8:	3b01      	subs	r3, #1
 80051ba:	430a      	orrs	r2, r1
 80051bc:	e78b      	b.n	80050d6 <__kernel_rem_pio2+0x276>
 80051be:	3301      	adds	r3, #1
 80051c0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80051c4:	2900      	cmp	r1, #0
 80051c6:	d0fa      	beq.n	80051be <__kernel_rem_pio2+0x35e>
 80051c8:	9a08      	ldr	r2, [sp, #32]
 80051ca:	4422      	add	r2, r4
 80051cc:	00d2      	lsls	r2, r2, #3
 80051ce:	a922      	add	r1, sp, #136	; 0x88
 80051d0:	18e3      	adds	r3, r4, r3
 80051d2:	9206      	str	r2, [sp, #24]
 80051d4:	440a      	add	r2, r1
 80051d6:	9302      	str	r3, [sp, #8]
 80051d8:	f10b 0108 	add.w	r1, fp, #8
 80051dc:	f102 0308 	add.w	r3, r2, #8
 80051e0:	1c66      	adds	r6, r4, #1
 80051e2:	910a      	str	r1, [sp, #40]	; 0x28
 80051e4:	2500      	movs	r5, #0
 80051e6:	930d      	str	r3, [sp, #52]	; 0x34
 80051e8:	9b02      	ldr	r3, [sp, #8]
 80051ea:	42b3      	cmp	r3, r6
 80051ec:	da04      	bge.n	80051f8 <__kernel_rem_pio2+0x398>
 80051ee:	461c      	mov	r4, r3
 80051f0:	e6a6      	b.n	8004f40 <__kernel_rem_pio2+0xe0>
 80051f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051f4:	2301      	movs	r3, #1
 80051f6:	e7e3      	b.n	80051c0 <__kernel_rem_pio2+0x360>
 80051f8:	9b06      	ldr	r3, [sp, #24]
 80051fa:	18ef      	adds	r7, r5, r3
 80051fc:	ab22      	add	r3, sp, #136	; 0x88
 80051fe:	441f      	add	r7, r3
 8005200:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005202:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005206:	f7fb f931 	bl	800046c <__aeabi_i2d>
 800520a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520c:	461c      	mov	r4, r3
 800520e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005210:	e9c7 0100 	strd	r0, r1, [r7]
 8005214:	eb03 0b05 	add.w	fp, r3, r5
 8005218:	2700      	movs	r7, #0
 800521a:	f04f 0800 	mov.w	r8, #0
 800521e:	f04f 0900 	mov.w	r9, #0
 8005222:	9b07      	ldr	r3, [sp, #28]
 8005224:	429f      	cmp	r7, r3
 8005226:	dd08      	ble.n	800523a <__kernel_rem_pio2+0x3da>
 8005228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800522a:	aa72      	add	r2, sp, #456	; 0x1c8
 800522c:	18eb      	adds	r3, r5, r3
 800522e:	4413      	add	r3, r2
 8005230:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005234:	3601      	adds	r6, #1
 8005236:	3508      	adds	r5, #8
 8005238:	e7d6      	b.n	80051e8 <__kernel_rem_pio2+0x388>
 800523a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800523e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005242:	f7fb f97d 	bl	8000540 <__aeabi_dmul>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4640      	mov	r0, r8
 800524c:	4649      	mov	r1, r9
 800524e:	f7fa ffc1 	bl	80001d4 <__adddf3>
 8005252:	3701      	adds	r7, #1
 8005254:	4680      	mov	r8, r0
 8005256:	4689      	mov	r9, r1
 8005258:	e7e3      	b.n	8005222 <__kernel_rem_pio2+0x3c2>
 800525a:	3d01      	subs	r5, #1
 800525c:	e741      	b.n	80050e2 <__kernel_rem_pio2+0x282>
 800525e:	f1ca 0000 	rsb	r0, sl, #0
 8005262:	ec47 6b10 	vmov	d0, r6, r7
 8005266:	f000 fb1b 	bl	80058a0 <scalbn>
 800526a:	ec57 6b10 	vmov	r6, r7, d0
 800526e:	2200      	movs	r2, #0
 8005270:	4b99      	ldr	r3, [pc, #612]	; (80054d8 <__kernel_rem_pio2+0x678>)
 8005272:	ee10 0a10 	vmov	r0, s0
 8005276:	4639      	mov	r1, r7
 8005278:	f7fb fbe8 	bl	8000a4c <__aeabi_dcmpge>
 800527c:	b1f8      	cbz	r0, 80052be <__kernel_rem_pio2+0x45e>
 800527e:	2200      	movs	r2, #0
 8005280:	4b96      	ldr	r3, [pc, #600]	; (80054dc <__kernel_rem_pio2+0x67c>)
 8005282:	4630      	mov	r0, r6
 8005284:	4639      	mov	r1, r7
 8005286:	f7fb f95b 	bl	8000540 <__aeabi_dmul>
 800528a:	f7fb fc09 	bl	8000aa0 <__aeabi_d2iz>
 800528e:	4680      	mov	r8, r0
 8005290:	f7fb f8ec 	bl	800046c <__aeabi_i2d>
 8005294:	2200      	movs	r2, #0
 8005296:	4b90      	ldr	r3, [pc, #576]	; (80054d8 <__kernel_rem_pio2+0x678>)
 8005298:	f7fb f952 	bl	8000540 <__aeabi_dmul>
 800529c:	460b      	mov	r3, r1
 800529e:	4602      	mov	r2, r0
 80052a0:	4639      	mov	r1, r7
 80052a2:	4630      	mov	r0, r6
 80052a4:	f7fa ff94 	bl	80001d0 <__aeabi_dsub>
 80052a8:	f7fb fbfa 	bl	8000aa0 <__aeabi_d2iz>
 80052ac:	1c65      	adds	r5, r4, #1
 80052ae:	ab0e      	add	r3, sp, #56	; 0x38
 80052b0:	f10a 0a18 	add.w	sl, sl, #24
 80052b4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80052b8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80052bc:	e719      	b.n	80050f2 <__kernel_rem_pio2+0x292>
 80052be:	4630      	mov	r0, r6
 80052c0:	4639      	mov	r1, r7
 80052c2:	f7fb fbed 	bl	8000aa0 <__aeabi_d2iz>
 80052c6:	ab0e      	add	r3, sp, #56	; 0x38
 80052c8:	4625      	mov	r5, r4
 80052ca:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80052ce:	e710      	b.n	80050f2 <__kernel_rem_pio2+0x292>
 80052d0:	ab0e      	add	r3, sp, #56	; 0x38
 80052d2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80052d6:	f7fb f8c9 	bl	800046c <__aeabi_i2d>
 80052da:	4642      	mov	r2, r8
 80052dc:	464b      	mov	r3, r9
 80052de:	f7fb f92f 	bl	8000540 <__aeabi_dmul>
 80052e2:	2200      	movs	r2, #0
 80052e4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80052e8:	4b7c      	ldr	r3, [pc, #496]	; (80054dc <__kernel_rem_pio2+0x67c>)
 80052ea:	4640      	mov	r0, r8
 80052ec:	4649      	mov	r1, r9
 80052ee:	f7fb f927 	bl	8000540 <__aeabi_dmul>
 80052f2:	3f01      	subs	r7, #1
 80052f4:	4680      	mov	r8, r0
 80052f6:	4689      	mov	r9, r1
 80052f8:	e708      	b.n	800510c <__kernel_rem_pio2+0x2ac>
 80052fa:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80052fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005302:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005306:	f7fb f91b 	bl	8000540 <__aeabi_dmul>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4640      	mov	r0, r8
 8005310:	4649      	mov	r1, r9
 8005312:	f7fa ff5f 	bl	80001d4 <__adddf3>
 8005316:	3701      	adds	r7, #1
 8005318:	4680      	mov	r8, r0
 800531a:	4689      	mov	r9, r1
 800531c:	9b04      	ldr	r3, [sp, #16]
 800531e:	429f      	cmp	r7, r3
 8005320:	dc01      	bgt.n	8005326 <__kernel_rem_pio2+0x4c6>
 8005322:	45ba      	cmp	sl, r7
 8005324:	dae9      	bge.n	80052fa <__kernel_rem_pio2+0x49a>
 8005326:	ab4a      	add	r3, sp, #296	; 0x128
 8005328:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800532c:	e9c3 8900 	strd	r8, r9, [r3]
 8005330:	f10a 0a01 	add.w	sl, sl, #1
 8005334:	3e08      	subs	r6, #8
 8005336:	e6f0      	b.n	800511a <__kernel_rem_pio2+0x2ba>
 8005338:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800533a:	2b03      	cmp	r3, #3
 800533c:	d85b      	bhi.n	80053f6 <__kernel_rem_pio2+0x596>
 800533e:	e8df f003 	tbb	[pc, r3]
 8005342:	264a      	.short	0x264a
 8005344:	0226      	.short	0x0226
 8005346:	ab9a      	add	r3, sp, #616	; 0x268
 8005348:	441c      	add	r4, r3
 800534a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800534e:	46a2      	mov	sl, r4
 8005350:	46ab      	mov	fp, r5
 8005352:	f1bb 0f00 	cmp.w	fp, #0
 8005356:	dc6c      	bgt.n	8005432 <__kernel_rem_pio2+0x5d2>
 8005358:	46a2      	mov	sl, r4
 800535a:	46ab      	mov	fp, r5
 800535c:	f1bb 0f01 	cmp.w	fp, #1
 8005360:	f300 8086 	bgt.w	8005470 <__kernel_rem_pio2+0x610>
 8005364:	2000      	movs	r0, #0
 8005366:	2100      	movs	r1, #0
 8005368:	2d01      	cmp	r5, #1
 800536a:	f300 80a0 	bgt.w	80054ae <__kernel_rem_pio2+0x64e>
 800536e:	9b02      	ldr	r3, [sp, #8]
 8005370:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005374:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005378:	2b00      	cmp	r3, #0
 800537a:	f040 809e 	bne.w	80054ba <__kernel_rem_pio2+0x65a>
 800537e:	9b01      	ldr	r3, [sp, #4]
 8005380:	e9c3 7800 	strd	r7, r8, [r3]
 8005384:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005388:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800538c:	e033      	b.n	80053f6 <__kernel_rem_pio2+0x596>
 800538e:	3408      	adds	r4, #8
 8005390:	ab4a      	add	r3, sp, #296	; 0x128
 8005392:	441c      	add	r4, r3
 8005394:	462e      	mov	r6, r5
 8005396:	2000      	movs	r0, #0
 8005398:	2100      	movs	r1, #0
 800539a:	2e00      	cmp	r6, #0
 800539c:	da3a      	bge.n	8005414 <__kernel_rem_pio2+0x5b4>
 800539e:	9b02      	ldr	r3, [sp, #8]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d03d      	beq.n	8005420 <__kernel_rem_pio2+0x5c0>
 80053a4:	4602      	mov	r2, r0
 80053a6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053aa:	9c01      	ldr	r4, [sp, #4]
 80053ac:	e9c4 2300 	strd	r2, r3, [r4]
 80053b0:	4602      	mov	r2, r0
 80053b2:	460b      	mov	r3, r1
 80053b4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80053b8:	f7fa ff0a 	bl	80001d0 <__aeabi_dsub>
 80053bc:	ae4c      	add	r6, sp, #304	; 0x130
 80053be:	2401      	movs	r4, #1
 80053c0:	42a5      	cmp	r5, r4
 80053c2:	da30      	bge.n	8005426 <__kernel_rem_pio2+0x5c6>
 80053c4:	9b02      	ldr	r3, [sp, #8]
 80053c6:	b113      	cbz	r3, 80053ce <__kernel_rem_pio2+0x56e>
 80053c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053cc:	4619      	mov	r1, r3
 80053ce:	9b01      	ldr	r3, [sp, #4]
 80053d0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80053d4:	e00f      	b.n	80053f6 <__kernel_rem_pio2+0x596>
 80053d6:	ab9a      	add	r3, sp, #616	; 0x268
 80053d8:	441c      	add	r4, r3
 80053da:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80053de:	2000      	movs	r0, #0
 80053e0:	2100      	movs	r1, #0
 80053e2:	2d00      	cmp	r5, #0
 80053e4:	da10      	bge.n	8005408 <__kernel_rem_pio2+0x5a8>
 80053e6:	9b02      	ldr	r3, [sp, #8]
 80053e8:	b113      	cbz	r3, 80053f0 <__kernel_rem_pio2+0x590>
 80053ea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053ee:	4619      	mov	r1, r3
 80053f0:	9b01      	ldr	r3, [sp, #4]
 80053f2:	e9c3 0100 	strd	r0, r1, [r3]
 80053f6:	9b06      	ldr	r3, [sp, #24]
 80053f8:	f003 0007 	and.w	r0, r3, #7
 80053fc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005400:	ecbd 8b02 	vpop	{d8}
 8005404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005408:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800540c:	f7fa fee2 	bl	80001d4 <__adddf3>
 8005410:	3d01      	subs	r5, #1
 8005412:	e7e6      	b.n	80053e2 <__kernel_rem_pio2+0x582>
 8005414:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005418:	f7fa fedc 	bl	80001d4 <__adddf3>
 800541c:	3e01      	subs	r6, #1
 800541e:	e7bc      	b.n	800539a <__kernel_rem_pio2+0x53a>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	e7c1      	b.n	80053aa <__kernel_rem_pio2+0x54a>
 8005426:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800542a:	f7fa fed3 	bl	80001d4 <__adddf3>
 800542e:	3401      	adds	r4, #1
 8005430:	e7c6      	b.n	80053c0 <__kernel_rem_pio2+0x560>
 8005432:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005436:	ed3a 7b02 	vldmdb	sl!, {d7}
 800543a:	4640      	mov	r0, r8
 800543c:	ec53 2b17 	vmov	r2, r3, d7
 8005440:	4649      	mov	r1, r9
 8005442:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005446:	f7fa fec5 	bl	80001d4 <__adddf3>
 800544a:	4602      	mov	r2, r0
 800544c:	460b      	mov	r3, r1
 800544e:	4606      	mov	r6, r0
 8005450:	460f      	mov	r7, r1
 8005452:	4640      	mov	r0, r8
 8005454:	4649      	mov	r1, r9
 8005456:	f7fa febb 	bl	80001d0 <__aeabi_dsub>
 800545a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800545e:	f7fa feb9 	bl	80001d4 <__adddf3>
 8005462:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005466:	e9ca 0100 	strd	r0, r1, [sl]
 800546a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800546e:	e770      	b.n	8005352 <__kernel_rem_pio2+0x4f2>
 8005470:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005474:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005478:	4630      	mov	r0, r6
 800547a:	ec53 2b17 	vmov	r2, r3, d7
 800547e:	4639      	mov	r1, r7
 8005480:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005484:	f7fa fea6 	bl	80001d4 <__adddf3>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4680      	mov	r8, r0
 800548e:	4689      	mov	r9, r1
 8005490:	4630      	mov	r0, r6
 8005492:	4639      	mov	r1, r7
 8005494:	f7fa fe9c 	bl	80001d0 <__aeabi_dsub>
 8005498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800549c:	f7fa fe9a 	bl	80001d4 <__adddf3>
 80054a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80054a4:	e9ca 0100 	strd	r0, r1, [sl]
 80054a8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80054ac:	e756      	b.n	800535c <__kernel_rem_pio2+0x4fc>
 80054ae:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80054b2:	f7fa fe8f 	bl	80001d4 <__adddf3>
 80054b6:	3d01      	subs	r5, #1
 80054b8:	e756      	b.n	8005368 <__kernel_rem_pio2+0x508>
 80054ba:	9b01      	ldr	r3, [sp, #4]
 80054bc:	9a01      	ldr	r2, [sp, #4]
 80054be:	601f      	str	r7, [r3, #0]
 80054c0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80054c4:	605c      	str	r4, [r3, #4]
 80054c6:	609d      	str	r5, [r3, #8]
 80054c8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80054cc:	60d3      	str	r3, [r2, #12]
 80054ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80054d2:	6110      	str	r0, [r2, #16]
 80054d4:	6153      	str	r3, [r2, #20]
 80054d6:	e78e      	b.n	80053f6 <__kernel_rem_pio2+0x596>
 80054d8:	41700000 	.word	0x41700000
 80054dc:	3e700000 	.word	0x3e700000

080054e0 <__kernel_sin>:
 80054e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e4:	ec55 4b10 	vmov	r4, r5, d0
 80054e8:	b085      	sub	sp, #20
 80054ea:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80054ee:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80054f2:	ed8d 1b00 	vstr	d1, [sp]
 80054f6:	9002      	str	r0, [sp, #8]
 80054f8:	da06      	bge.n	8005508 <__kernel_sin+0x28>
 80054fa:	ee10 0a10 	vmov	r0, s0
 80054fe:	4629      	mov	r1, r5
 8005500:	f7fb face 	bl	8000aa0 <__aeabi_d2iz>
 8005504:	2800      	cmp	r0, #0
 8005506:	d051      	beq.n	80055ac <__kernel_sin+0xcc>
 8005508:	4622      	mov	r2, r4
 800550a:	462b      	mov	r3, r5
 800550c:	4620      	mov	r0, r4
 800550e:	4629      	mov	r1, r5
 8005510:	f7fb f816 	bl	8000540 <__aeabi_dmul>
 8005514:	4682      	mov	sl, r0
 8005516:	468b      	mov	fp, r1
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	f7fb f80e 	bl	8000540 <__aeabi_dmul>
 8005524:	a341      	add	r3, pc, #260	; (adr r3, 800562c <__kernel_sin+0x14c>)
 8005526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800552a:	4680      	mov	r8, r0
 800552c:	4689      	mov	r9, r1
 800552e:	4650      	mov	r0, sl
 8005530:	4659      	mov	r1, fp
 8005532:	f7fb f805 	bl	8000540 <__aeabi_dmul>
 8005536:	a33f      	add	r3, pc, #252	; (adr r3, 8005634 <__kernel_sin+0x154>)
 8005538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553c:	f7fa fe48 	bl	80001d0 <__aeabi_dsub>
 8005540:	4652      	mov	r2, sl
 8005542:	465b      	mov	r3, fp
 8005544:	f7fa fffc 	bl	8000540 <__aeabi_dmul>
 8005548:	a33c      	add	r3, pc, #240	; (adr r3, 800563c <__kernel_sin+0x15c>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fa fe41 	bl	80001d4 <__adddf3>
 8005552:	4652      	mov	r2, sl
 8005554:	465b      	mov	r3, fp
 8005556:	f7fa fff3 	bl	8000540 <__aeabi_dmul>
 800555a:	a33a      	add	r3, pc, #232	; (adr r3, 8005644 <__kernel_sin+0x164>)
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f7fa fe36 	bl	80001d0 <__aeabi_dsub>
 8005564:	4652      	mov	r2, sl
 8005566:	465b      	mov	r3, fp
 8005568:	f7fa ffea 	bl	8000540 <__aeabi_dmul>
 800556c:	a337      	add	r3, pc, #220	; (adr r3, 800564c <__kernel_sin+0x16c>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f7fa fe2f 	bl	80001d4 <__adddf3>
 8005576:	9b02      	ldr	r3, [sp, #8]
 8005578:	4606      	mov	r6, r0
 800557a:	460f      	mov	r7, r1
 800557c:	b9db      	cbnz	r3, 80055b6 <__kernel_sin+0xd6>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4650      	mov	r0, sl
 8005584:	4659      	mov	r1, fp
 8005586:	f7fa ffdb 	bl	8000540 <__aeabi_dmul>
 800558a:	a325      	add	r3, pc, #148	; (adr r3, 8005620 <__kernel_sin+0x140>)
 800558c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005590:	f7fa fe1e 	bl	80001d0 <__aeabi_dsub>
 8005594:	4642      	mov	r2, r8
 8005596:	464b      	mov	r3, r9
 8005598:	f7fa ffd2 	bl	8000540 <__aeabi_dmul>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4620      	mov	r0, r4
 80055a2:	4629      	mov	r1, r5
 80055a4:	f7fa fe16 	bl	80001d4 <__adddf3>
 80055a8:	4604      	mov	r4, r0
 80055aa:	460d      	mov	r5, r1
 80055ac:	ec45 4b10 	vmov	d0, r4, r5
 80055b0:	b005      	add	sp, #20
 80055b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055b6:	2200      	movs	r2, #0
 80055b8:	4b1b      	ldr	r3, [pc, #108]	; (8005628 <__kernel_sin+0x148>)
 80055ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80055be:	f7fa ffbf 	bl	8000540 <__aeabi_dmul>
 80055c2:	4632      	mov	r2, r6
 80055c4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80055c8:	463b      	mov	r3, r7
 80055ca:	4640      	mov	r0, r8
 80055cc:	4649      	mov	r1, r9
 80055ce:	f7fa ffb7 	bl	8000540 <__aeabi_dmul>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055da:	f7fa fdf9 	bl	80001d0 <__aeabi_dsub>
 80055de:	4652      	mov	r2, sl
 80055e0:	465b      	mov	r3, fp
 80055e2:	f7fa ffad 	bl	8000540 <__aeabi_dmul>
 80055e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80055ea:	f7fa fdf1 	bl	80001d0 <__aeabi_dsub>
 80055ee:	a30c      	add	r3, pc, #48	; (adr r3, 8005620 <__kernel_sin+0x140>)
 80055f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f4:	4606      	mov	r6, r0
 80055f6:	460f      	mov	r7, r1
 80055f8:	4640      	mov	r0, r8
 80055fa:	4649      	mov	r1, r9
 80055fc:	f7fa ffa0 	bl	8000540 <__aeabi_dmul>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	4630      	mov	r0, r6
 8005606:	4639      	mov	r1, r7
 8005608:	f7fa fde4 	bl	80001d4 <__adddf3>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
 8005610:	4620      	mov	r0, r4
 8005612:	4629      	mov	r1, r5
 8005614:	f7fa fddc 	bl	80001d0 <__aeabi_dsub>
 8005618:	e7c6      	b.n	80055a8 <__kernel_sin+0xc8>
 800561a:	bf00      	nop
 800561c:	f3af 8000 	nop.w
 8005620:	55555549 	.word	0x55555549
 8005624:	3fc55555 	.word	0x3fc55555
 8005628:	3fe00000 	.word	0x3fe00000
 800562c:	5acfd57c 	.word	0x5acfd57c
 8005630:	3de5d93a 	.word	0x3de5d93a
 8005634:	8a2b9ceb 	.word	0x8a2b9ceb
 8005638:	3e5ae5e6 	.word	0x3e5ae5e6
 800563c:	57b1fe7d 	.word	0x57b1fe7d
 8005640:	3ec71de3 	.word	0x3ec71de3
 8005644:	19c161d5 	.word	0x19c161d5
 8005648:	3f2a01a0 	.word	0x3f2a01a0
 800564c:	1110f8a6 	.word	0x1110f8a6
 8005650:	3f811111 	.word	0x3f811111

08005654 <fabs>:
 8005654:	ec51 0b10 	vmov	r0, r1, d0
 8005658:	ee10 2a10 	vmov	r2, s0
 800565c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005660:	ec43 2b10 	vmov	d0, r2, r3
 8005664:	4770      	bx	lr

08005666 <finite>:
 8005666:	ee10 3a90 	vmov	r3, s1
 800566a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800566e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005672:	0fc0      	lsrs	r0, r0, #31
 8005674:	4770      	bx	lr
	...

08005678 <floor>:
 8005678:	ec51 0b10 	vmov	r0, r1, d0
 800567c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005680:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005684:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005688:	2e13      	cmp	r6, #19
 800568a:	460c      	mov	r4, r1
 800568c:	ee10 5a10 	vmov	r5, s0
 8005690:	4680      	mov	r8, r0
 8005692:	dc34      	bgt.n	80056fe <floor+0x86>
 8005694:	2e00      	cmp	r6, #0
 8005696:	da16      	bge.n	80056c6 <floor+0x4e>
 8005698:	a335      	add	r3, pc, #212	; (adr r3, 8005770 <floor+0xf8>)
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	f7fa fd99 	bl	80001d4 <__adddf3>
 80056a2:	2200      	movs	r2, #0
 80056a4:	2300      	movs	r3, #0
 80056a6:	f7fb f9db 	bl	8000a60 <__aeabi_dcmpgt>
 80056aa:	b148      	cbz	r0, 80056c0 <floor+0x48>
 80056ac:	2c00      	cmp	r4, #0
 80056ae:	da59      	bge.n	8005764 <floor+0xec>
 80056b0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80056b4:	4a30      	ldr	r2, [pc, #192]	; (8005778 <floor+0x100>)
 80056b6:	432b      	orrs	r3, r5
 80056b8:	2500      	movs	r5, #0
 80056ba:	42ab      	cmp	r3, r5
 80056bc:	bf18      	it	ne
 80056be:	4614      	movne	r4, r2
 80056c0:	4621      	mov	r1, r4
 80056c2:	4628      	mov	r0, r5
 80056c4:	e025      	b.n	8005712 <floor+0x9a>
 80056c6:	4f2d      	ldr	r7, [pc, #180]	; (800577c <floor+0x104>)
 80056c8:	4137      	asrs	r7, r6
 80056ca:	ea01 0307 	and.w	r3, r1, r7
 80056ce:	4303      	orrs	r3, r0
 80056d0:	d01f      	beq.n	8005712 <floor+0x9a>
 80056d2:	a327      	add	r3, pc, #156	; (adr r3, 8005770 <floor+0xf8>)
 80056d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056d8:	f7fa fd7c 	bl	80001d4 <__adddf3>
 80056dc:	2200      	movs	r2, #0
 80056de:	2300      	movs	r3, #0
 80056e0:	f7fb f9be 	bl	8000a60 <__aeabi_dcmpgt>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d0eb      	beq.n	80056c0 <floor+0x48>
 80056e8:	2c00      	cmp	r4, #0
 80056ea:	bfbe      	ittt	lt
 80056ec:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80056f0:	fa43 f606 	asrlt.w	r6, r3, r6
 80056f4:	19a4      	addlt	r4, r4, r6
 80056f6:	ea24 0407 	bic.w	r4, r4, r7
 80056fa:	2500      	movs	r5, #0
 80056fc:	e7e0      	b.n	80056c0 <floor+0x48>
 80056fe:	2e33      	cmp	r6, #51	; 0x33
 8005700:	dd0b      	ble.n	800571a <floor+0xa2>
 8005702:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005706:	d104      	bne.n	8005712 <floor+0x9a>
 8005708:	ee10 2a10 	vmov	r2, s0
 800570c:	460b      	mov	r3, r1
 800570e:	f7fa fd61 	bl	80001d4 <__adddf3>
 8005712:	ec41 0b10 	vmov	d0, r0, r1
 8005716:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800571a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800571e:	f04f 33ff 	mov.w	r3, #4294967295
 8005722:	fa23 f707 	lsr.w	r7, r3, r7
 8005726:	4207      	tst	r7, r0
 8005728:	d0f3      	beq.n	8005712 <floor+0x9a>
 800572a:	a311      	add	r3, pc, #68	; (adr r3, 8005770 <floor+0xf8>)
 800572c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005730:	f7fa fd50 	bl	80001d4 <__adddf3>
 8005734:	2200      	movs	r2, #0
 8005736:	2300      	movs	r3, #0
 8005738:	f7fb f992 	bl	8000a60 <__aeabi_dcmpgt>
 800573c:	2800      	cmp	r0, #0
 800573e:	d0bf      	beq.n	80056c0 <floor+0x48>
 8005740:	2c00      	cmp	r4, #0
 8005742:	da02      	bge.n	800574a <floor+0xd2>
 8005744:	2e14      	cmp	r6, #20
 8005746:	d103      	bne.n	8005750 <floor+0xd8>
 8005748:	3401      	adds	r4, #1
 800574a:	ea25 0507 	bic.w	r5, r5, r7
 800574e:	e7b7      	b.n	80056c0 <floor+0x48>
 8005750:	2301      	movs	r3, #1
 8005752:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005756:	fa03 f606 	lsl.w	r6, r3, r6
 800575a:	4435      	add	r5, r6
 800575c:	4545      	cmp	r5, r8
 800575e:	bf38      	it	cc
 8005760:	18e4      	addcc	r4, r4, r3
 8005762:	e7f2      	b.n	800574a <floor+0xd2>
 8005764:	2500      	movs	r5, #0
 8005766:	462c      	mov	r4, r5
 8005768:	e7aa      	b.n	80056c0 <floor+0x48>
 800576a:	bf00      	nop
 800576c:	f3af 8000 	nop.w
 8005770:	8800759c 	.word	0x8800759c
 8005774:	7e37e43c 	.word	0x7e37e43c
 8005778:	bff00000 	.word	0xbff00000
 800577c:	000fffff 	.word	0x000fffff

08005780 <matherr>:
 8005780:	2000      	movs	r0, #0
 8005782:	4770      	bx	lr
 8005784:	0000      	movs	r0, r0
	...

08005788 <nan>:
 8005788:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005790 <nan+0x8>
 800578c:	4770      	bx	lr
 800578e:	bf00      	nop
 8005790:	00000000 	.word	0x00000000
 8005794:	7ff80000 	.word	0x7ff80000

08005798 <rint>:
 8005798:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800579a:	ec51 0b10 	vmov	r0, r1, d0
 800579e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80057a2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80057a6:	2e13      	cmp	r6, #19
 80057a8:	460b      	mov	r3, r1
 80057aa:	ee10 4a10 	vmov	r4, s0
 80057ae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80057b2:	dc56      	bgt.n	8005862 <rint+0xca>
 80057b4:	2e00      	cmp	r6, #0
 80057b6:	da2b      	bge.n	8005810 <rint+0x78>
 80057b8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80057bc:	4302      	orrs	r2, r0
 80057be:	d023      	beq.n	8005808 <rint+0x70>
 80057c0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80057c4:	4302      	orrs	r2, r0
 80057c6:	4254      	negs	r4, r2
 80057c8:	4314      	orrs	r4, r2
 80057ca:	0c4b      	lsrs	r3, r1, #17
 80057cc:	0b24      	lsrs	r4, r4, #12
 80057ce:	045b      	lsls	r3, r3, #17
 80057d0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80057d4:	ea44 0103 	orr.w	r1, r4, r3
 80057d8:	460b      	mov	r3, r1
 80057da:	492f      	ldr	r1, [pc, #188]	; (8005898 <rint+0x100>)
 80057dc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80057e0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80057e4:	4602      	mov	r2, r0
 80057e6:	4639      	mov	r1, r7
 80057e8:	4630      	mov	r0, r6
 80057ea:	f7fa fcf3 	bl	80001d4 <__adddf3>
 80057ee:	e9cd 0100 	strd	r0, r1, [sp]
 80057f2:	463b      	mov	r3, r7
 80057f4:	4632      	mov	r2, r6
 80057f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057fa:	f7fa fce9 	bl	80001d0 <__aeabi_dsub>
 80057fe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005802:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005806:	4639      	mov	r1, r7
 8005808:	ec41 0b10 	vmov	d0, r0, r1
 800580c:	b003      	add	sp, #12
 800580e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005810:	4a22      	ldr	r2, [pc, #136]	; (800589c <rint+0x104>)
 8005812:	4132      	asrs	r2, r6
 8005814:	ea01 0702 	and.w	r7, r1, r2
 8005818:	4307      	orrs	r7, r0
 800581a:	d0f5      	beq.n	8005808 <rint+0x70>
 800581c:	0852      	lsrs	r2, r2, #1
 800581e:	4011      	ands	r1, r2
 8005820:	430c      	orrs	r4, r1
 8005822:	d00b      	beq.n	800583c <rint+0xa4>
 8005824:	ea23 0202 	bic.w	r2, r3, r2
 8005828:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800582c:	2e13      	cmp	r6, #19
 800582e:	fa43 f306 	asr.w	r3, r3, r6
 8005832:	bf0c      	ite	eq
 8005834:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005838:	2400      	movne	r4, #0
 800583a:	4313      	orrs	r3, r2
 800583c:	4916      	ldr	r1, [pc, #88]	; (8005898 <rint+0x100>)
 800583e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005842:	4622      	mov	r2, r4
 8005844:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005848:	4620      	mov	r0, r4
 800584a:	4629      	mov	r1, r5
 800584c:	f7fa fcc2 	bl	80001d4 <__adddf3>
 8005850:	e9cd 0100 	strd	r0, r1, [sp]
 8005854:	4622      	mov	r2, r4
 8005856:	462b      	mov	r3, r5
 8005858:	e9dd 0100 	ldrd	r0, r1, [sp]
 800585c:	f7fa fcb8 	bl	80001d0 <__aeabi_dsub>
 8005860:	e7d2      	b.n	8005808 <rint+0x70>
 8005862:	2e33      	cmp	r6, #51	; 0x33
 8005864:	dd07      	ble.n	8005876 <rint+0xde>
 8005866:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800586a:	d1cd      	bne.n	8005808 <rint+0x70>
 800586c:	ee10 2a10 	vmov	r2, s0
 8005870:	f7fa fcb0 	bl	80001d4 <__adddf3>
 8005874:	e7c8      	b.n	8005808 <rint+0x70>
 8005876:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800587a:	f04f 32ff 	mov.w	r2, #4294967295
 800587e:	40f2      	lsrs	r2, r6
 8005880:	4210      	tst	r0, r2
 8005882:	d0c1      	beq.n	8005808 <rint+0x70>
 8005884:	0852      	lsrs	r2, r2, #1
 8005886:	4210      	tst	r0, r2
 8005888:	bf1f      	itttt	ne
 800588a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800588e:	ea20 0202 	bicne.w	r2, r0, r2
 8005892:	4134      	asrne	r4, r6
 8005894:	4314      	orrne	r4, r2
 8005896:	e7d1      	b.n	800583c <rint+0xa4>
 8005898:	08005cc0 	.word	0x08005cc0
 800589c:	000fffff 	.word	0x000fffff

080058a0 <scalbn>:
 80058a0:	b570      	push	{r4, r5, r6, lr}
 80058a2:	ec55 4b10 	vmov	r4, r5, d0
 80058a6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80058aa:	4606      	mov	r6, r0
 80058ac:	462b      	mov	r3, r5
 80058ae:	b9aa      	cbnz	r2, 80058dc <scalbn+0x3c>
 80058b0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80058b4:	4323      	orrs	r3, r4
 80058b6:	d03b      	beq.n	8005930 <scalbn+0x90>
 80058b8:	4b31      	ldr	r3, [pc, #196]	; (8005980 <scalbn+0xe0>)
 80058ba:	4629      	mov	r1, r5
 80058bc:	2200      	movs	r2, #0
 80058be:	ee10 0a10 	vmov	r0, s0
 80058c2:	f7fa fe3d 	bl	8000540 <__aeabi_dmul>
 80058c6:	4b2f      	ldr	r3, [pc, #188]	; (8005984 <scalbn+0xe4>)
 80058c8:	429e      	cmp	r6, r3
 80058ca:	4604      	mov	r4, r0
 80058cc:	460d      	mov	r5, r1
 80058ce:	da12      	bge.n	80058f6 <scalbn+0x56>
 80058d0:	a327      	add	r3, pc, #156	; (adr r3, 8005970 <scalbn+0xd0>)
 80058d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058d6:	f7fa fe33 	bl	8000540 <__aeabi_dmul>
 80058da:	e009      	b.n	80058f0 <scalbn+0x50>
 80058dc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80058e0:	428a      	cmp	r2, r1
 80058e2:	d10c      	bne.n	80058fe <scalbn+0x5e>
 80058e4:	ee10 2a10 	vmov	r2, s0
 80058e8:	4620      	mov	r0, r4
 80058ea:	4629      	mov	r1, r5
 80058ec:	f7fa fc72 	bl	80001d4 <__adddf3>
 80058f0:	4604      	mov	r4, r0
 80058f2:	460d      	mov	r5, r1
 80058f4:	e01c      	b.n	8005930 <scalbn+0x90>
 80058f6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80058fa:	460b      	mov	r3, r1
 80058fc:	3a36      	subs	r2, #54	; 0x36
 80058fe:	4432      	add	r2, r6
 8005900:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005904:	428a      	cmp	r2, r1
 8005906:	dd0b      	ble.n	8005920 <scalbn+0x80>
 8005908:	ec45 4b11 	vmov	d1, r4, r5
 800590c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005978 <scalbn+0xd8>
 8005910:	f000 f83c 	bl	800598c <copysign>
 8005914:	a318      	add	r3, pc, #96	; (adr r3, 8005978 <scalbn+0xd8>)
 8005916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591a:	ec51 0b10 	vmov	r0, r1, d0
 800591e:	e7da      	b.n	80058d6 <scalbn+0x36>
 8005920:	2a00      	cmp	r2, #0
 8005922:	dd08      	ble.n	8005936 <scalbn+0x96>
 8005924:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005928:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800592c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005930:	ec45 4b10 	vmov	d0, r4, r5
 8005934:	bd70      	pop	{r4, r5, r6, pc}
 8005936:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800593a:	da0d      	bge.n	8005958 <scalbn+0xb8>
 800593c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005940:	429e      	cmp	r6, r3
 8005942:	ec45 4b11 	vmov	d1, r4, r5
 8005946:	dce1      	bgt.n	800590c <scalbn+0x6c>
 8005948:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005970 <scalbn+0xd0>
 800594c:	f000 f81e 	bl	800598c <copysign>
 8005950:	a307      	add	r3, pc, #28	; (adr r3, 8005970 <scalbn+0xd0>)
 8005952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005956:	e7e0      	b.n	800591a <scalbn+0x7a>
 8005958:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800595c:	3236      	adds	r2, #54	; 0x36
 800595e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005962:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005966:	4620      	mov	r0, r4
 8005968:	4629      	mov	r1, r5
 800596a:	2200      	movs	r2, #0
 800596c:	4b06      	ldr	r3, [pc, #24]	; (8005988 <scalbn+0xe8>)
 800596e:	e7b2      	b.n	80058d6 <scalbn+0x36>
 8005970:	c2f8f359 	.word	0xc2f8f359
 8005974:	01a56e1f 	.word	0x01a56e1f
 8005978:	8800759c 	.word	0x8800759c
 800597c:	7e37e43c 	.word	0x7e37e43c
 8005980:	43500000 	.word	0x43500000
 8005984:	ffff3cb0 	.word	0xffff3cb0
 8005988:	3c900000 	.word	0x3c900000

0800598c <copysign>:
 800598c:	ec51 0b10 	vmov	r0, r1, d0
 8005990:	ee11 0a90 	vmov	r0, s3
 8005994:	ee10 2a10 	vmov	r2, s0
 8005998:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800599c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80059a0:	ea41 0300 	orr.w	r3, r1, r0
 80059a4:	ec43 2b10 	vmov	d0, r2, r3
 80059a8:	4770      	bx	lr
	...

080059ac <_init>:
 80059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ae:	bf00      	nop
 80059b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059b2:	bc08      	pop	{r3}
 80059b4:	469e      	mov	lr, r3
 80059b6:	4770      	bx	lr

080059b8 <_fini>:
 80059b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059ba:	bf00      	nop
 80059bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059be:	bc08      	pop	{r3}
 80059c0:	469e      	mov	lr, r3
 80059c2:	4770      	bx	lr
