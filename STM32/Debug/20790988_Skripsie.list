
20790988_Skripsie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002794  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f4  080029f4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080029f4  080029f4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029f4  080029f4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029f8  080029f8  000129f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080029fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000000c  08002a08  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08002a08  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011356  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024f0  00000000  00000000  00031392  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  00033888  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d78  00000000  00000000  00034660  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d150  00000000  00000000  000353d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b2ba  00000000  00000000  00052528  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a99f8  00000000  00000000  0005d7e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001071da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000240c  00000000  00000000  00107258  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009a8f  00000000  00000000  00109664  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002904 	.word	0x08002904

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002904 	.word	0x08002904

080001c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001cc:	2400      	movs	r4, #0
 80001ce:	9405      	str	r4, [sp, #20]
 80001d0:	9406      	str	r4, [sp, #24]
 80001d2:	9407      	str	r4, [sp, #28]
 80001d4:	9408      	str	r4, [sp, #32]
 80001d6:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80001d8:	4b20      	ldr	r3, [pc, #128]	; (800025c <MX_GPIO_Init+0x94>)
 80001da:	695a      	ldr	r2, [r3, #20]
 80001dc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80001e0:	615a      	str	r2, [r3, #20]
 80001e2:	695a      	ldr	r2, [r3, #20]
 80001e4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80001e8:	9201      	str	r2, [sp, #4]
 80001ea:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001ec:	695a      	ldr	r2, [r3, #20]
 80001ee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80001f2:	615a      	str	r2, [r3, #20]
 80001f4:	695a      	ldr	r2, [r3, #20]
 80001f6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80001fa:	9202      	str	r2, [sp, #8]
 80001fc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001fe:	695a      	ldr	r2, [r3, #20]
 8000200:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000204:	615a      	str	r2, [r3, #20]
 8000206:	695a      	ldr	r2, [r3, #20]
 8000208:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800020c:	9203      	str	r2, [sp, #12]
 800020e:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000210:	695a      	ldr	r2, [r3, #20]
 8000212:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000216:	615a      	str	r2, [r3, #20]
 8000218:	695b      	ldr	r3, [r3, #20]
 800021a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800021e:	9304      	str	r3, [sp, #16]
 8000220:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000222:	4d0f      	ldr	r5, [pc, #60]	; (8000260 <MX_GPIO_Init+0x98>)
 8000224:	4622      	mov	r2, r4
 8000226:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022a:	4628      	mov	r0, r5
 800022c:	f001 f844 	bl	80012b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000230:	2601      	movs	r6, #1
 8000232:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000234:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <MX_GPIO_Init+0x9c>)
 8000236:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000238:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800023a:	a905      	add	r1, sp, #20
 800023c:	4628      	mov	r0, r5
 800023e:	f000 ff77 	bl	8001130 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000246:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000248:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800024a:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800024c:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800024e:	a905      	add	r1, sp, #20
 8000250:	4628      	mov	r0, r5
 8000252:	f000 ff6d 	bl	8001130 <HAL_GPIO_Init>

}
 8000256:	b00a      	add	sp, #40	; 0x28
 8000258:	bd70      	pop	{r4, r5, r6, pc}
 800025a:	bf00      	nop
 800025c:	40021000 	.word	0x40021000
 8000260:	48000400 	.word	0x48000400
 8000264:	10110000 	.word	0x10110000

08000268 <MX_DMA_Init>:
{
 8000268:	b500      	push	{lr}
 800026a:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 800026c:	4b0a      	ldr	r3, [pc, #40]	; (8000298 <MX_DMA_Init+0x30>)
 800026e:	695a      	ldr	r2, [r3, #20]
 8000270:	f042 0201 	orr.w	r2, r2, #1
 8000274:	615a      	str	r2, [r3, #20]
 8000276:	695b      	ldr	r3, [r3, #20]
 8000278:	f003 0301 	and.w	r3, r3, #1
 800027c:	9301      	str	r3, [sp, #4]
 800027e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8000280:	2200      	movs	r2, #0
 8000282:	4611      	mov	r1, r2
 8000284:	200d      	movs	r0, #13
 8000286:	f000 fc73 	bl	8000b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800028a:	200d      	movs	r0, #13
 800028c:	f000 fca4 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
}
 8000290:	b003      	add	sp, #12
 8000292:	f85d fb04 	ldr.w	pc, [sp], #4
 8000296:	bf00      	nop
 8000298:	40021000 	.word	0x40021000

0800029c <MX_NVIC_Init>:
{
 800029c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800029e:	2200      	movs	r2, #0
 80002a0:	4611      	mov	r1, r2
 80002a2:	2025      	movs	r0, #37	; 0x25
 80002a4:	f000 fc64 	bl	8000b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 80002a8:	2025      	movs	r0, #37	; 0x25
 80002aa:	f000 fc95 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80002ae:	2200      	movs	r2, #0
 80002b0:	4611      	mov	r1, r2
 80002b2:	2026      	movs	r0, #38	; 0x26
 80002b4:	f000 fc5c 	bl	8000b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80002b8:	2026      	movs	r0, #38	; 0x26
 80002ba:	f000 fc8d 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80002be:	2200      	movs	r2, #0
 80002c0:	4611      	mov	r1, r2
 80002c2:	2006      	movs	r0, #6
 80002c4:	f000 fc54 	bl	8000b70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80002c8:	2006      	movs	r0, #6
 80002ca:	f000 fc85 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
}
 80002ce:	bd08      	pop	{r3, pc}

080002d0 <MX_USART2_UART_Init>:
{
 80002d0:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 80002d2:	4c0f      	ldr	r4, [pc, #60]	; (8000310 <MX_USART2_UART_Init+0x40>)
 80002d4:	4b0f      	ldr	r3, [pc, #60]	; (8000314 <MX_USART2_UART_Init+0x44>)
 80002d6:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 80002d8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80002dc:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	2300      	movs	r3, #0
 80002e0:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002e2:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002e4:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002e6:	220c      	movs	r2, #12
 80002e8:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ea:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002ee:	6223      	str	r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002f0:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002f2:	4620      	mov	r0, r4
 80002f4:	f002 faa7 	bl	8002846 <HAL_UART_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_RXNE);
 80002f8:	6822      	ldr	r2, [r4, #0]
 80002fa:	6813      	ldr	r3, [r2, #0]
 80002fc:	f043 0301 	orr.w	r3, r3, #1
 8000300:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_TC);
 8000302:	6822      	ldr	r2, [r4, #0]
 8000304:	6853      	ldr	r3, [r2, #4]
 8000306:	f043 0301 	orr.w	r3, r3, #1
 800030a:	6053      	str	r3, [r2, #4]
}
 800030c:	bd10      	pop	{r4, pc}
 800030e:	bf00      	nop
 8000310:	20000198 	.word	0x20000198
 8000314:	40004400 	.word	0x40004400

08000318 <MX_USART1_UART_Init>:
{
 8000318:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 800031a:	4809      	ldr	r0, [pc, #36]	; (8000340 <MX_USART1_UART_Init+0x28>)
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_USART1_UART_Init+0x2c>)
 800031e:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 8000320:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000324:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000326:	2300      	movs	r3, #0
 8000328:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800032a:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800032c:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800032e:	220c      	movs	r2, #12
 8000330:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000332:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000334:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000336:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000338:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800033a:	f002 fa84 	bl	8002846 <HAL_UART_Init>
}
 800033e:	bd08      	pop	{r3, pc}
 8000340:	20000098 	.word	0x20000098
 8000344:	40013800 	.word	0x40013800

08000348 <MX_DAC1_Init>:
{
 8000348:	b530      	push	{r4, r5, lr}
 800034a:	b085      	sub	sp, #20
  DAC_ChannelConfTypeDef sConfig = {0};
 800034c:	2400      	movs	r4, #0
 800034e:	9401      	str	r4, [sp, #4]
 8000350:	9402      	str	r4, [sp, #8]
 8000352:	9403      	str	r4, [sp, #12]
  hdac1.Instance = DAC1;
 8000354:	4d08      	ldr	r5, [pc, #32]	; (8000378 <MX_DAC1_Init+0x30>)
 8000356:	4b09      	ldr	r3, [pc, #36]	; (800037c <MX_DAC1_Init+0x34>)
 8000358:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800035a:	4628      	mov	r0, r5
 800035c:	f000 fc60 	bl	8000c20 <HAL_DAC_Init>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000360:	2304      	movs	r3, #4
 8000362:	9301      	str	r3, [sp, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 8000364:	2302      	movs	r3, #2
 8000366:	9302      	str	r3, [sp, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000368:	4622      	mov	r2, r4
 800036a:	a901      	add	r1, sp, #4
 800036c:	4628      	mov	r0, r5
 800036e:	f000 fd27 	bl	8000dc0 <HAL_DAC_ConfigChannel>
}
 8000372:	b005      	add	sp, #20
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	bf00      	nop
 8000378:	20000040 	.word	0x20000040
 800037c:	40007400 	.word	0x40007400

08000380 <MX_TIM2_Init>:
{
 8000380:	b530      	push	{r4, r5, lr}
 8000382:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000384:	2400      	movs	r4, #0
 8000386:	9404      	str	r4, [sp, #16]
 8000388:	9405      	str	r4, [sp, #20]
 800038a:	9406      	str	r4, [sp, #24]
 800038c:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800038e:	9401      	str	r4, [sp, #4]
 8000390:	9402      	str	r4, [sp, #8]
 8000392:	9403      	str	r4, [sp, #12]
  htim2.Instance = TIM2;
 8000394:	4d0e      	ldr	r5, [pc, #56]	; (80003d0 <MX_TIM2_Init+0x50>)
 8000396:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800039a:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 90-1;
 800039c:	2359      	movs	r3, #89	; 0x59
 800039e:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a0:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 100-1;
 80003a2:	2363      	movs	r3, #99	; 0x63
 80003a4:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003a6:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a8:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80003aa:	4628      	mov	r0, r5
 80003ac:	f001 fe42 	bl	8002034 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80003b4:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80003b6:	a904      	add	r1, sp, #16
 80003b8:	4628      	mov	r0, r5
 80003ba:	f001 fe61 	bl	8002080 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003be:	2320      	movs	r3, #32
 80003c0:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c2:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003c4:	a901      	add	r1, sp, #4
 80003c6:	4628      	mov	r0, r5
 80003c8:	f001 fec8 	bl	800215c <HAL_TIMEx_MasterConfigSynchronization>
}
 80003cc:	b009      	add	sp, #36	; 0x24
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	20000158 	.word	0x20000158

080003d4 <MX_TIM6_Init>:
{
 80003d4:	b530      	push	{r4, r5, lr}
 80003d6:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003d8:	2500      	movs	r5, #0
 80003da:	9501      	str	r5, [sp, #4]
 80003dc:	9502      	str	r5, [sp, #8]
 80003de:	9503      	str	r5, [sp, #12]
  htim6.Instance = TIM6;
 80003e0:	4c0a      	ldr	r4, [pc, #40]	; (800040c <MX_TIM6_Init+0x38>)
 80003e2:	4b0b      	ldr	r3, [pc, #44]	; (8000410 <MX_TIM6_Init+0x3c>)
 80003e4:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 90;
 80003e6:	235a      	movs	r3, #90	; 0x5a
 80003e8:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003ea:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 100;
 80003ec:	2364      	movs	r3, #100	; 0x64
 80003ee:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003f0:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003f2:	4620      	mov	r0, r4
 80003f4:	f001 fe1e 	bl	8002034 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003f8:	2320      	movs	r3, #32
 80003fa:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003fc:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003fe:	a901      	add	r1, sp, #4
 8000400:	4620      	mov	r0, r4
 8000402:	f001 feab 	bl	800215c <HAL_TIMEx_MasterConfigSynchronization>
}
 8000406:	b005      	add	sp, #20
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop
 800040c:	20000118 	.word	0x20000118
 8000410:	40001000 	.word	0x40001000

08000414 <SystemClock_Config>:
{
 8000414:	b530      	push	{r4, r5, lr}
 8000416:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000418:	2224      	movs	r2, #36	; 0x24
 800041a:	2100      	movs	r1, #0
 800041c:	a80d      	add	r0, sp, #52	; 0x34
 800041e:	f002 fa69 	bl	80028f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000422:	2400      	movs	r4, #0
 8000424:	9407      	str	r4, [sp, #28]
 8000426:	9408      	str	r4, [sp, #32]
 8000428:	9409      	str	r4, [sp, #36]	; 0x24
 800042a:	940a      	str	r4, [sp, #40]	; 0x28
 800042c:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042e:	9400      	str	r4, [sp, #0]
 8000430:	9401      	str	r4, [sp, #4]
 8000432:	9402      	str	r4, [sp, #8]
 8000434:	9403      	str	r4, [sp, #12]
 8000436:	9404      	str	r4, [sp, #16]
 8000438:	9405      	str	r4, [sp, #20]
 800043a:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800043c:	2302      	movs	r3, #2
 800043e:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000440:	2501      	movs	r5, #1
 8000442:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000444:	2310      	movs	r3, #16
 8000446:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000448:	a80c      	add	r0, sp, #48	; 0x30
 800044a:	f000 ff49 	bl	80012e0 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800044e:	230f      	movs	r3, #15
 8000450:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000452:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000454:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000456:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000458:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800045a:	4621      	mov	r1, r4
 800045c:	a807      	add	r0, sp, #28
 800045e:	f001 fa99 	bl	8001994 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000462:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000464:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000466:	4668      	mov	r0, sp
 8000468:	f001 fb98 	bl	8001b9c <HAL_RCCEx_PeriphCLKConfig>
}
 800046c:	b017      	add	sp, #92	; 0x5c
 800046e:	bd30      	pop	{r4, r5, pc}

08000470 <main>:
{
 8000470:	b500      	push	{lr}
 8000472:	b08b      	sub	sp, #44	; 0x2c
    concat_timecode();
 8000474:	f000 fa9e 	bl	80009b4 <concat_timecode>
  HAL_Init();
 8000478:	f000 fb44 	bl	8000b04 <HAL_Init>
  SystemClock_Config();
 800047c:	f7ff ffca 	bl	8000414 <SystemClock_Config>
  MX_GPIO_Init();
 8000480:	f7ff fea2 	bl	80001c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000484:	f7ff fef0 	bl	8000268 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000488:	f7ff ff22 	bl	80002d0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 800048c:	f7ff ff44 	bl	8000318 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8000490:	f7ff ff5a 	bl	8000348 <MX_DAC1_Init>
  MX_TIM2_Init();
 8000494:	f7ff ff74 	bl	8000380 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000498:	f7ff ff9c 	bl	80003d4 <MX_TIM6_Init>
  MX_NVIC_Init();
 800049c:	f7ff fefe 	bl	800029c <MX_NVIC_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 80004a0:	4a41      	ldr	r2, [pc, #260]	; (80005a8 <main+0x138>)
 80004a2:	6811      	ldr	r1, [r2, #0]
 80004a4:	680b      	ldr	r3, [r1, #0]
 80004a6:	f043 0320 	orr.w	r3, r3, #32
 80004aa:	600b      	str	r3, [r1, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 80004ac:	6812      	ldr	r2, [r2, #0]
 80004ae:	6813      	ldr	r3, [r2, #0]
 80004b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004b4:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80004b6:	4a3d      	ldr	r2, [pc, #244]	; (80005ac <main+0x13c>)
 80004b8:	6811      	ldr	r1, [r2, #0]
 80004ba:	680b      	ldr	r3, [r1, #0]
 80004bc:	f043 0320 	orr.w	r3, r3, #32
 80004c0:	600b      	str	r3, [r1, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 80004c2:	6812      	ldr	r2, [r2, #0]
 80004c4:	6813      	ldr	r3, [r2, #0]
 80004c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004ca:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 80004cc:	4838      	ldr	r0, [pc, #224]	; (80005b0 <main+0x140>)
 80004ce:	f001 fc6b 	bl	8001da8 <HAL_TIM_Base_Start_IT>
 80004d2:	e033      	b.n	800053c <main+0xcc>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "pong\n", 5);
 80004d4:	2205      	movs	r2, #5
 80004d6:	4937      	ldr	r1, [pc, #220]	; (80005b4 <main+0x144>)
 80004d8:	4833      	ldr	r0, [pc, #204]	; (80005a8 <main+0x138>)
 80004da:	f001 fed1 	bl	8002280 <HAL_UART_Transmit_IT>
 80004de:	e039      	b.n	8000554 <main+0xe4>
                HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80004e0:	4e35      	ldr	r6, [pc, #212]	; (80005b8 <main+0x148>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4630      	mov	r0, r6
 80004e6:	f000 fbad 	bl	8000c44 <HAL_DAC_Stop_DMA>
                uint32_t pulse[] = { 0xFFF, 0xFFF, 0, 0, 0xFFF, 0, 0xFFF, 0 };
 80004ea:	ac02      	add	r4, sp, #8
 80004ec:	4d33      	ldr	r5, [pc, #204]	; (80005bc <main+0x14c>)
 80004ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004f2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004f6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, pulse, 8,
 80004fa:	2100      	movs	r1, #0
 80004fc:	9100      	str	r1, [sp, #0]
 80004fe:	2308      	movs	r3, #8
 8000500:	eb0d 0203 	add.w	r2, sp, r3
 8000504:	4630      	mov	r0, r6
 8000506:	f000 fbe3 	bl	8000cd0 <HAL_DAC_Start_DMA>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "high\n", 5);
 800050a:	2205      	movs	r2, #5
 800050c:	492c      	ldr	r1, [pc, #176]	; (80005c0 <main+0x150>)
 800050e:	4826      	ldr	r0, [pc, #152]	; (80005a8 <main+0x138>)
 8000510:	f001 feb6 	bl	8002280 <HAL_UART_Transmit_IT>
 8000514:	e025      	b.n	8000562 <main+0xf2>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "query\n", 6);
 8000516:	2206      	movs	r2, #6
 8000518:	492a      	ldr	r1, [pc, #168]	; (80005c4 <main+0x154>)
 800051a:	4823      	ldr	r0, [pc, #140]	; (80005a8 <main+0x138>)
 800051c:	f001 feb0 	bl	8002280 <HAL_UART_Transmit_IT>
                HAL_UART_Transmit_IT(&huart1, (uint8_t*) "$PMTK414*33\r\n", 13);
 8000520:	220d      	movs	r2, #13
 8000522:	4929      	ldr	r1, [pc, #164]	; (80005c8 <main+0x158>)
 8000524:	4821      	ldr	r0, [pc, #132]	; (80005ac <main+0x13c>)
 8000526:	f001 feab 	bl	8002280 <HAL_UART_Transmit_IT>
 800052a:	e021      	b.n	8000570 <main+0x100>
            PC_UART = IDLE;
 800052c:	4b27      	ldr	r3, [pc, #156]	; (80005cc <main+0x15c>)
 800052e:	2200      	movs	r2, #0
 8000530:	701a      	strb	r2, [r3, #0]
        if (GPS_UART == DONE)
 8000532:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <main+0x160>)
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	b2db      	uxtb	r3, r3
 8000538:	2b02      	cmp	r3, #2
 800053a:	d026      	beq.n	800058a <main+0x11a>
        if (PC_UART == DONE)
 800053c:	4b23      	ldr	r3, [pc, #140]	; (80005cc <main+0x15c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	2b02      	cmp	r3, #2
 8000544:	d1f5      	bne.n	8000532 <main+0xc2>
            if (is_same_string("ping", pc_message, 4))
 8000546:	2204      	movs	r2, #4
 8000548:	4922      	ldr	r1, [pc, #136]	; (80005d4 <main+0x164>)
 800054a:	4823      	ldr	r0, [pc, #140]	; (80005d8 <main+0x168>)
 800054c:	f000 fa70 	bl	8000a30 <is_same_string>
 8000550:	2800      	cmp	r0, #0
 8000552:	d1bf      	bne.n	80004d4 <main+0x64>
            if (is_same_string("pulse", pc_message, 5))
 8000554:	2205      	movs	r2, #5
 8000556:	491f      	ldr	r1, [pc, #124]	; (80005d4 <main+0x164>)
 8000558:	4820      	ldr	r0, [pc, #128]	; (80005dc <main+0x16c>)
 800055a:	f000 fa69 	bl	8000a30 <is_same_string>
 800055e:	2800      	cmp	r0, #0
 8000560:	d1be      	bne.n	80004e0 <main+0x70>
            if (is_same_string("NMEAquery", pc_message, 9))
 8000562:	2209      	movs	r2, #9
 8000564:	491b      	ldr	r1, [pc, #108]	; (80005d4 <main+0x164>)
 8000566:	481e      	ldr	r0, [pc, #120]	; (80005e0 <main+0x170>)
 8000568:	f000 fa62 	bl	8000a30 <is_same_string>
 800056c:	2800      	cmp	r0, #0
 800056e:	d1d2      	bne.n	8000516 <main+0xa6>
            if (is_same_string("NMEAset", pc_message, 7))
 8000570:	2207      	movs	r2, #7
 8000572:	4918      	ldr	r1, [pc, #96]	; (80005d4 <main+0x164>)
 8000574:	481b      	ldr	r0, [pc, #108]	; (80005e4 <main+0x174>)
 8000576:	f000 fa5b 	bl	8000a30 <is_same_string>
 800057a:	2800      	cmp	r0, #0
 800057c:	d0d6      	beq.n	800052c <main+0xbc>
                HAL_UART_Transmit_IT(&huart1,
 800057e:	2233      	movs	r2, #51	; 0x33
 8000580:	4919      	ldr	r1, [pc, #100]	; (80005e8 <main+0x178>)
 8000582:	480a      	ldr	r0, [pc, #40]	; (80005ac <main+0x13c>)
 8000584:	f001 fe7c 	bl	8002280 <HAL_UART_Transmit_IT>
 8000588:	e7d0      	b.n	800052c <main+0xbc>
            gps_message[gps_message_length] = '\n';
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <main+0x17c>)
 800058c:	681a      	ldr	r2, [r3, #0]
 800058e:	4918      	ldr	r1, [pc, #96]	; (80005f0 <main+0x180>)
 8000590:	200a      	movs	r0, #10
 8000592:	5488      	strb	r0, [r1, r2]
            HAL_UART_Transmit_IT(&huart2, (uint8_t*) gps_message,
 8000594:	681a      	ldr	r2, [r3, #0]
 8000596:	3201      	adds	r2, #1
 8000598:	b292      	uxth	r2, r2
 800059a:	4803      	ldr	r0, [pc, #12]	; (80005a8 <main+0x138>)
 800059c:	f001 fe70 	bl	8002280 <HAL_UART_Transmit_IT>
            GPS_UART = IDLE;
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <main+0x160>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	701a      	strb	r2, [r3, #0]
 80005a6:	e7c9      	b.n	800053c <main+0xcc>
 80005a8:	20000198 	.word	0x20000198
 80005ac:	20000098 	.word	0x20000098
 80005b0:	20000118 	.word	0x20000118
 80005b4:	08002944 	.word	0x08002944
 80005b8:	20000040 	.word	0x20000040
 80005bc:	0800291c 	.word	0x0800291c
 80005c0:	08002954 	.word	0x08002954
 80005c4:	08002968 	.word	0x08002968
 80005c8:	08002970 	.word	0x08002970
 80005cc:	20000029 	.word	0x20000029
 80005d0:	20000028 	.word	0x20000028
 80005d4:	20000218 	.word	0x20000218
 80005d8:	0800293c 	.word	0x0800293c
 80005dc:	0800294c 	.word	0x0800294c
 80005e0:	0800295c 	.word	0x0800295c
 80005e4:	08002980 	.word	0x08002980
 80005e8:	08002988 	.word	0x08002988
 80005ec:	20000034 	.word	0x20000034
 80005f0:	2000027c 	.word	0x2000027c

080005f4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80005f4:	4770      	bx	lr
	...

080005f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <HAL_MspInit+0x2c>)
 80005fc:	699a      	ldr	r2, [r3, #24]
 80005fe:	f042 0201 	orr.w	r2, r2, #1
 8000602:	619a      	str	r2, [r3, #24]
 8000604:	699a      	ldr	r2, [r3, #24]
 8000606:	f002 0201 	and.w	r2, r2, #1
 800060a:	9200      	str	r2, [sp, #0]
 800060c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	69da      	ldr	r2, [r3, #28]
 8000610:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000614:	61da      	str	r2, [r3, #28]
 8000616:	69db      	ldr	r3, [r3, #28]
 8000618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000620:	b002      	add	sp, #8
 8000622:	4770      	bx	lr
 8000624:	40021000 	.word	0x40021000

08000628 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000628:	b530      	push	{r4, r5, lr}
 800062a:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062c:	2300      	movs	r3, #0
 800062e:	9303      	str	r3, [sp, #12]
 8000630:	9304      	str	r3, [sp, #16]
 8000632:	9305      	str	r3, [sp, #20]
 8000634:	9306      	str	r3, [sp, #24]
 8000636:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 8000638:	6802      	ldr	r2, [r0, #0]
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <HAL_DAC_MspInit+0xac>)
 800063c:	429a      	cmp	r2, r3
 800063e:	d001      	beq.n	8000644 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8000640:	b009      	add	sp, #36	; 0x24
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000646:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
 800064a:	69da      	ldr	r2, [r3, #28]
 800064c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000650:	61da      	str	r2, [r3, #28]
 8000652:	69da      	ldr	r2, [r3, #28]
 8000654:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000658:	9201      	str	r2, [sp, #4]
 800065a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065c:	695a      	ldr	r2, [r3, #20]
 800065e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000662:	615a      	str	r2, [r3, #20]
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066a:	9302      	str	r3, [sp, #8]
 800066c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800066e:	2510      	movs	r5, #16
 8000670:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000672:	2303      	movs	r3, #3
 8000674:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	a903      	add	r1, sp, #12
 8000678:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800067c:	f000 fd58 	bl	8001130 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8000680:	4815      	ldr	r0, [pc, #84]	; (80006d8 <HAL_DAC_MspInit+0xb0>)
 8000682:	4b16      	ldr	r3, [pc, #88]	; (80006dc <HAL_DAC_MspInit+0xb4>)
 8000684:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000686:	6045      	str	r5, [r0, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000688:	2300      	movs	r3, #0
 800068a:	6083      	str	r3, [r0, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800068c:	2280      	movs	r2, #128	; 0x80
 800068e:	60c2      	str	r2, [r0, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000694:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000696:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800069a:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800069c:	6183      	str	r3, [r0, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800069e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80006a2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80006a4:	f000 fc40 	bl	8000f28 <HAL_DMA_Init>
 80006a8:	b980      	cbnz	r0, 80006cc <HAL_DAC_MspInit+0xa4>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 80006aa:	4a0d      	ldr	r2, [pc, #52]	; (80006e0 <HAL_DAC_MspInit+0xb8>)
 80006ac:	6813      	ldr	r3, [r2, #0]
 80006ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006b2:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_DAC_MspInit+0xb0>)
 80006b6:	60a3      	str	r3, [r4, #8]
 80006b8:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80006ba:	2200      	movs	r2, #0
 80006bc:	4611      	mov	r1, r2
 80006be:	2036      	movs	r0, #54	; 0x36
 80006c0:	f000 fa56 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80006c4:	2036      	movs	r0, #54	; 0x36
 80006c6:	f000 fa87 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
}
 80006ca:	e7b9      	b.n	8000640 <HAL_DAC_MspInit+0x18>
      Error_Handler();
 80006cc:	f7ff ff92 	bl	80005f4 <Error_Handler>
 80006d0:	e7eb      	b.n	80006aa <HAL_DAC_MspInit+0x82>
 80006d2:	bf00      	nop
 80006d4:	40007400 	.word	0x40007400
 80006d8:	20000054 	.word	0x20000054
 80006dc:	40020030 	.word	0x40020030
 80006e0:	40010000 	.word	0x40010000

080006e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006e4:	b500      	push	{lr}
 80006e6:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 80006e8:	6803      	ldr	r3, [r0, #0]
 80006ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ee:	d005      	beq.n	80006fc <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80006f0:	4a16      	ldr	r2, [pc, #88]	; (800074c <HAL_TIM_Base_MspInit+0x68>)
 80006f2:	4293      	cmp	r3, r2
 80006f4:	d016      	beq.n	8000724 <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80006f6:	b003      	add	sp, #12
 80006f8:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006fc:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8000700:	69da      	ldr	r2, [r3, #28]
 8000702:	f042 0201 	orr.w	r2, r2, #1
 8000706:	61da      	str	r2, [r3, #28]
 8000708:	69db      	ldr	r3, [r3, #28]
 800070a:	f003 0301 	and.w	r3, r3, #1
 800070e:	9300      	str	r3, [sp, #0]
 8000710:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000712:	2200      	movs	r2, #0
 8000714:	4611      	mov	r1, r2
 8000716:	201c      	movs	r0, #28
 8000718:	f000 fa2a 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800071c:	201c      	movs	r0, #28
 800071e:	f000 fa5b 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
 8000722:	e7e8      	b.n	80006f6 <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000724:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <HAL_TIM_Base_MspInit+0x6c>)
 8000726:	69da      	ldr	r2, [r3, #28]
 8000728:	f042 0210 	orr.w	r2, r2, #16
 800072c:	61da      	str	r2, [r3, #28]
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	f003 0310 	and.w	r3, r3, #16
 8000734:	9301      	str	r3, [sp, #4]
 8000736:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000738:	2200      	movs	r2, #0
 800073a:	4611      	mov	r1, r2
 800073c:	2036      	movs	r0, #54	; 0x36
 800073e:	f000 fa17 	bl	8000b70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 8000742:	2036      	movs	r0, #54	; 0x36
 8000744:	f000 fa48 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
}
 8000748:	e7d5      	b.n	80006f6 <HAL_TIM_Base_MspInit+0x12>
 800074a:	bf00      	nop
 800074c:	40001000 	.word	0x40001000
 8000750:	40021000 	.word	0x40021000

08000754 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000754:	b500      	push	{lr}
 8000756:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000758:	2300      	movs	r3, #0
 800075a:	9305      	str	r3, [sp, #20]
 800075c:	9306      	str	r3, [sp, #24]
 800075e:	9307      	str	r3, [sp, #28]
 8000760:	9308      	str	r3, [sp, #32]
 8000762:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 8000764:	6803      	ldr	r3, [r0, #0]
 8000766:	4a25      	ldr	r2, [pc, #148]	; (80007fc <HAL_UART_MspInit+0xa8>)
 8000768:	4293      	cmp	r3, r2
 800076a:	d005      	beq.n	8000778 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 800076c:	4a24      	ldr	r2, [pc, #144]	; (8000800 <HAL_UART_MspInit+0xac>)
 800076e:	4293      	cmp	r3, r2
 8000770:	d022      	beq.n	80007b8 <HAL_UART_MspInit+0x64>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000772:	b00b      	add	sp, #44	; 0x2c
 8000774:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000778:	4b22      	ldr	r3, [pc, #136]	; (8000804 <HAL_UART_MspInit+0xb0>)
 800077a:	699a      	ldr	r2, [r3, #24]
 800077c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000780:	619a      	str	r2, [r3, #24]
 8000782:	699a      	ldr	r2, [r3, #24]
 8000784:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000788:	9201      	str	r2, [sp, #4]
 800078a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800078c:	695a      	ldr	r2, [r3, #20]
 800078e:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000792:	615a      	str	r2, [r3, #20]
 8000794:	695b      	ldr	r3, [r3, #20]
 8000796:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800079a:	9302      	str	r3, [sp, #8]
 800079c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800079e:	2330      	movs	r3, #48	; 0x30
 80007a0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a2:	2302      	movs	r3, #2
 80007a4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80007aa:	2307      	movs	r3, #7
 80007ac:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007ae:	a905      	add	r1, sp, #20
 80007b0:	4815      	ldr	r0, [pc, #84]	; (8000808 <HAL_UART_MspInit+0xb4>)
 80007b2:	f000 fcbd 	bl	8001130 <HAL_GPIO_Init>
 80007b6:	e7dc      	b.n	8000772 <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_UART_MspInit+0xb0>)
 80007ba:	69da      	ldr	r2, [r3, #28]
 80007bc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80007c0:	61da      	str	r2, [r3, #28]
 80007c2:	69da      	ldr	r2, [r3, #28]
 80007c4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80007c8:	9203      	str	r2, [sp, #12]
 80007ca:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007cc:	695a      	ldr	r2, [r3, #20]
 80007ce:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80007d2:	615a      	str	r2, [r3, #20]
 80007d4:	695b      	ldr	r3, [r3, #20]
 80007d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007da:	9304      	str	r3, [sp, #16]
 80007dc:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007de:	230c      	movs	r3, #12
 80007e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e2:	2302      	movs	r3, #2
 80007e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007e6:	2303      	movs	r3, #3
 80007e8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ea:	2307      	movs	r3, #7
 80007ec:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ee:	a905      	add	r1, sp, #20
 80007f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f4:	f000 fc9c 	bl	8001130 <HAL_GPIO_Init>
}
 80007f8:	e7bb      	b.n	8000772 <HAL_UART_MspInit+0x1e>
 80007fa:	bf00      	nop
 80007fc:	40013800 	.word	0x40013800
 8000800:	40004400 	.word	0x40004400
 8000804:	40021000 	.word	0x40021000
 8000808:	48000800 	.word	0x48000800

0800080c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800080c:	4770      	bx	lr

0800080e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080e:	e7fe      	b.n	800080e <HardFault_Handler>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	e7fe      	b.n	8000810 <MemManage_Handler>

08000812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000812:	e7fe      	b.n	8000812 <BusFault_Handler>

08000814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler>

08000816 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000816:	4770      	bx	lr

08000818 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000818:	4770      	bx	lr

0800081a <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800081a:	4770      	bx	lr

0800081c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800081c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800081e:	f000 f983 	bl	8000b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000822:	bd08      	pop	{r3, pc}

08000824 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000824:	b510      	push	{r4, lr}
 8000826:	b082      	sub	sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000828:	2001      	movs	r0, #1
 800082a:	f000 fd4b 	bl	80012c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800082e:	4c09      	ldr	r4, [pc, #36]	; (8000854 <EXTI0_IRQHandler+0x30>)
 8000830:	2100      	movs	r1, #0
 8000832:	4620      	mov	r0, r4
 8000834:	f000 fa06 	bl	8000c44 <HAL_DAC_Stop_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)timecode_pulse, TIMECODE_LENGTH, DAC_ALIGN_12B_R);
 8000838:	2100      	movs	r1, #0
 800083a:	9100      	str	r1, [sp, #0]
 800083c:	2312      	movs	r3, #18
 800083e:	4a06      	ldr	r2, [pc, #24]	; (8000858 <EXTI0_IRQHandler+0x34>)
 8000840:	4620      	mov	r0, r4
 8000842:	f000 fa45 	bl	8000cd0 <HAL_DAC_Start_DMA>
  HAL_TIM_Base_Start_IT(&htim6);
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <EXTI0_IRQHandler+0x38>)
 8000848:	f001 faae 	bl	8001da8 <HAL_TIM_Base_Start_IT>
  concat_timecode();
 800084c:	f000 f8b2 	bl	80009b4 <concat_timecode>

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000850:	b002      	add	sp, #8
 8000852:	bd10      	pop	{r4, pc}
 8000854:	20000040 	.word	0x20000040
 8000858:	200002e0 	.word	0x200002e0
 800085c:	20000118 	.word	0x20000118

08000860 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8000860:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8000862:	4802      	ldr	r0, [pc, #8]	; (800086c <DMA1_Channel3_IRQHandler+0xc>)
 8000864:	f000 fc09 	bl	800107a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8000868:	bd08      	pop	{r3, pc}
 800086a:	bf00      	nop
 800086c:	20000054 	.word	0x20000054

08000870 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000870:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000872:	4802      	ldr	r0, [pc, #8]	; (800087c <TIM2_IRQHandler+0xc>)
 8000874:	f001 fac9 	bl	8001e0a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000878:	bd08      	pop	{r3, pc}
 800087a:	bf00      	nop
 800087c:	20000158 	.word	0x20000158

08000880 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000880:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  int  flag = __HAL_UART_GET_FLAG(&huart1,UART_FLAG_RXNE);
 8000882:	4808      	ldr	r0, [pc, #32]	; (80008a4 <USART1_IRQHandler+0x24>)
 8000884:	6803      	ldr	r3, [r0, #0]
 8000886:	69dc      	ldr	r4, [r3, #28]
 8000888:	f004 0420 	and.w	r4, r4, #32
  char  inchar;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800088c:	f001 fd40 	bl	8002310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (flag == 1)
 8000890:	b904      	cbnz	r4, 8000894 <USART1_IRQHandler+0x14>
    {
      inchar = (uint8_t)huart1.Instance->RDR;
      handle_uart_interrupt_gps(inchar);
    }
  /* USER CODE END USART1_IRQn 1 */
}
 8000892:	bd10      	pop	{r4, pc}
      inchar = (uint8_t)huart1.Instance->RDR;
 8000894:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <USART1_IRQHandler+0x24>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	8c98      	ldrh	r0, [r3, #36]	; 0x24
      handle_uart_interrupt_gps(inchar);
 800089a:	b2c0      	uxtb	r0, r0
 800089c:	f000 f85e 	bl	800095c <handle_uart_interrupt_gps>
}
 80008a0:	e7f7      	b.n	8000892 <USART1_IRQHandler+0x12>
 80008a2:	bf00      	nop
 80008a4:	20000098 	.word	0x20000098

080008a8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80008a8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  int  flag = __HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE);
 80008aa:	4808      	ldr	r0, [pc, #32]	; (80008cc <USART2_IRQHandler+0x24>)
 80008ac:	6803      	ldr	r3, [r0, #0]
 80008ae:	69dc      	ldr	r4, [r3, #28]
 80008b0:	f004 0420 	and.w	r4, r4, #32
  char  inchar;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80008b4:	f001 fd2c 	bl	8002310 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if (flag == 1)
 80008b8:	b904      	cbnz	r4, 80008bc <USART2_IRQHandler+0x14>
  {
    inchar = (uint8_t)huart2.Instance->RDR;
    handle_uart_interrupt_pc(inchar);
  }
  /* USER CODE END USART2_IRQn 1 */
}
 80008ba:	bd10      	pop	{r4, pc}
    inchar = (uint8_t)huart2.Instance->RDR;
 80008bc:	4b03      	ldr	r3, [pc, #12]	; (80008cc <USART2_IRQHandler+0x24>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    handle_uart_interrupt_pc(inchar);
 80008c2:	b2c0      	uxtb	r0, r0
 80008c4:	f000 f81e 	bl	8000904 <handle_uart_interrupt_pc>
}
 80008c8:	e7f7      	b.n	80008ba <USART2_IRQHandler+0x12>
 80008ca:	bf00      	nop
 80008cc:	20000198 	.word	0x20000198

080008d0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80008d0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008d2:	4803      	ldr	r0, [pc, #12]	; (80008e0 <TIM6_DAC1_IRQHandler+0x10>)
 80008d4:	f001 fa99 	bl	8001e0a <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80008d8:	4802      	ldr	r0, [pc, #8]	; (80008e4 <TIM6_DAC1_IRQHandler+0x14>)
 80008da:	f000 fac4 	bl	8000e66 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80008de:	bd08      	pop	{r3, pc}
 80008e0:	20000118 	.word	0x20000118
 80008e4:	20000040 	.word	0x20000040

080008e8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008e8:	4b05      	ldr	r3, [pc, #20]	; (8000900 <SystemInit+0x18>)
 80008ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008ee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80008f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008fa:	609a      	str	r2, [r3, #8]
#endif
}
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	e000ed00 	.word	0xe000ed00

08000904 <handle_uart_interrupt_pc>:

void handle_uart_interrupt_pc(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 8000904:	2824      	cmp	r0, #36	; 0x24
 8000906:	d007      	beq.n	8000918 <handle_uart_interrupt_pc+0x14>
    {
        current_index = 0;
        PC_UART = RECEIVING;
    }
    else if (inchar == '*')
 8000908:	282a      	cmp	r0, #42	; 0x2a
 800090a:	d00c      	beq.n	8000926 <handle_uart_interrupt_pc+0x22>
    {
        pc_message_length = current_index;
        PC_UART = DONE;
    }
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <handle_uart_interrupt_pc+0x48>)
 800090e:	781b      	ldrb	r3, [r3, #0]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	2b01      	cmp	r3, #1
 8000914:	d00f      	beq.n	8000936 <handle_uart_interrupt_pc+0x32>
    {
        pc_message[current_index] = inchar;
        current_index++;
    }
}
 8000916:	4770      	bx	lr
        current_index = 0;
 8000918:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <handle_uart_interrupt_pc+0x4c>)
 800091a:	2200      	movs	r2, #0
 800091c:	601a      	str	r2, [r3, #0]
        PC_UART = RECEIVING;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <handle_uart_interrupt_pc+0x48>)
 8000920:	2201      	movs	r2, #1
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	4770      	bx	lr
        pc_message_length = current_index;
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <handle_uart_interrupt_pc+0x4c>)
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	4b0a      	ldr	r3, [pc, #40]	; (8000954 <handle_uart_interrupt_pc+0x50>)
 800092c:	601a      	str	r2, [r3, #0]
        PC_UART = DONE;
 800092e:	4b07      	ldr	r3, [pc, #28]	; (800094c <handle_uart_interrupt_pc+0x48>)
 8000930:	2202      	movs	r2, #2
 8000932:	701a      	strb	r2, [r3, #0]
 8000934:	4770      	bx	lr
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <handle_uart_interrupt_pc+0x4c>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	2b63      	cmp	r3, #99	; 0x63
 800093c:	dceb      	bgt.n	8000916 <handle_uart_interrupt_pc+0x12>
        pc_message[current_index] = inchar;
 800093e:	4a06      	ldr	r2, [pc, #24]	; (8000958 <handle_uart_interrupt_pc+0x54>)
 8000940:	54d0      	strb	r0, [r2, r3]
        current_index++;
 8000942:	3301      	adds	r3, #1
 8000944:	4a02      	ldr	r2, [pc, #8]	; (8000950 <handle_uart_interrupt_pc+0x4c>)
 8000946:	6013      	str	r3, [r2, #0]
}
 8000948:	e7e5      	b.n	8000916 <handle_uart_interrupt_pc+0x12>
 800094a:	bf00      	nop
 800094c:	20000029 	.word	0x20000029
 8000950:	2000002c 	.word	0x2000002c
 8000954:	20000038 	.word	0x20000038
 8000958:	20000218 	.word	0x20000218

0800095c <handle_uart_interrupt_gps>:

void handle_uart_interrupt_gps(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 800095c:	2824      	cmp	r0, #36	; 0x24
 800095e:	d007      	beq.n	8000970 <handle_uart_interrupt_gps+0x14>
    {
        current_index = 0;
       GPS_UART = RECEIVING;
    }
    else if (inchar == '*')
 8000960:	282a      	cmp	r0, #42	; 0x2a
 8000962:	d00c      	beq.n	800097e <handle_uart_interrupt_gps+0x22>
    {
        gps_message_length = current_index;
        GPS_UART = DONE;
    }
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 8000964:	4b0f      	ldr	r3, [pc, #60]	; (80009a4 <handle_uart_interrupt_gps+0x48>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b2db      	uxtb	r3, r3
 800096a:	2b01      	cmp	r3, #1
 800096c:	d00f      	beq.n	800098e <handle_uart_interrupt_gps+0x32>
    {
        gps_message[current_index] = inchar;
        current_index++;
    }
}
 800096e:	4770      	bx	lr
        current_index = 0;
 8000970:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <handle_uart_interrupt_gps+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
       GPS_UART = RECEIVING;
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <handle_uart_interrupt_gps+0x48>)
 8000978:	2201      	movs	r2, #1
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	4770      	bx	lr
        gps_message_length = current_index;
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <handle_uart_interrupt_gps+0x4c>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <handle_uart_interrupt_gps+0x50>)
 8000984:	601a      	str	r2, [r3, #0]
        GPS_UART = DONE;
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <handle_uart_interrupt_gps+0x48>)
 8000988:	2202      	movs	r2, #2
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	4770      	bx	lr
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 800098e:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <handle_uart_interrupt_gps+0x4c>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	2b63      	cmp	r3, #99	; 0x63
 8000994:	dceb      	bgt.n	800096e <handle_uart_interrupt_gps+0x12>
        gps_message[current_index] = inchar;
 8000996:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <handle_uart_interrupt_gps+0x54>)
 8000998:	54d0      	strb	r0, [r2, r3]
        current_index++;
 800099a:	3301      	adds	r3, #1
 800099c:	4a02      	ldr	r2, [pc, #8]	; (80009a8 <handle_uart_interrupt_gps+0x4c>)
 800099e:	6013      	str	r3, [r2, #0]
}
 80009a0:	e7e5      	b.n	800096e <handle_uart_interrupt_gps+0x12>
 80009a2:	bf00      	nop
 80009a4:	20000028 	.word	0x20000028
 80009a8:	20000030 	.word	0x20000030
 80009ac:	20000034 	.word	0x20000034
 80009b0:	2000027c 	.word	0x2000027c

080009b4 <concat_timecode>:

void concat_timecode()
{
    static uint16_t seconds = 0;

    timecode[0] = 'P';
 80009b4:	4b1b      	ldr	r3, [pc, #108]	; (8000a24 <concat_timecode+0x70>)
 80009b6:	2250      	movs	r2, #80	; 0x50
 80009b8:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i<TIMECODE_LENGTH-1; i++)
 80009ba:	2200      	movs	r2, #0
 80009bc:	e008      	b.n	80009d0 <concat_timecode+0x1c>
    {
        timecode[i+1] = '0' + (seconds>>i & 1);
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <concat_timecode+0x74>)
 80009c0:	881b      	ldrh	r3, [r3, #0]
 80009c2:	4113      	asrs	r3, r2
 80009c4:	f003 0301 	and.w	r3, r3, #1
 80009c8:	3201      	adds	r2, #1
 80009ca:	3330      	adds	r3, #48	; 0x30
 80009cc:	4915      	ldr	r1, [pc, #84]	; (8000a24 <concat_timecode+0x70>)
 80009ce:	548b      	strb	r3, [r1, r2]
    for (int i = 0; i<TIMECODE_LENGTH-1; i++)
 80009d0:	2a10      	cmp	r2, #16
 80009d2:	ddf4      	ble.n	80009be <concat_timecode+0xa>
    }

    for (int i = 0; i<TIMECODE_LENGTH;i++)
 80009d4:	2300      	movs	r3, #0
 80009d6:	e005      	b.n	80009e4 <concat_timecode+0x30>
    {
        switch(timecode[i])
        {
        case 'P':
            timecode_pulse[i] = 310;
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <concat_timecode+0x78>)
 80009da:	f44f 719b 	mov.w	r1, #310	; 0x136
 80009de:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i<TIMECODE_LENGTH;i++)
 80009e2:	3301      	adds	r3, #1
 80009e4:	2b11      	cmp	r3, #17
 80009e6:	dc17      	bgt.n	8000a18 <concat_timecode+0x64>
        switch(timecode[i])
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <concat_timecode+0x70>)
 80009ea:	5cd2      	ldrb	r2, [r2, r3]
 80009ec:	2a31      	cmp	r2, #49	; 0x31
 80009ee:	d00d      	beq.n	8000a0c <concat_timecode+0x58>
 80009f0:	2a50      	cmp	r2, #80	; 0x50
 80009f2:	d0f1      	beq.n	80009d8 <concat_timecode+0x24>
 80009f4:	2a30      	cmp	r2, #48	; 0x30
 80009f6:	d004      	beq.n	8000a02 <concat_timecode+0x4e>
            break;
        case '1':
            timecode_pulse[i] = 620;
            break;
        default:
            timecode_pulse[i] = 0x000;
 80009f8:	4a0c      	ldr	r2, [pc, #48]	; (8000a2c <concat_timecode+0x78>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000a00:	e7ef      	b.n	80009e2 <concat_timecode+0x2e>
            timecode_pulse[i] = 0x000;
 8000a02:	4a0a      	ldr	r2, [pc, #40]	; (8000a2c <concat_timecode+0x78>)
 8000a04:	2100      	movs	r1, #0
 8000a06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8000a0a:	e7ea      	b.n	80009e2 <concat_timecode+0x2e>
            timecode_pulse[i] = 620;
 8000a0c:	4a07      	ldr	r2, [pc, #28]	; (8000a2c <concat_timecode+0x78>)
 8000a0e:	f44f 711b 	mov.w	r1, #620	; 0x26c
 8000a12:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8000a16:	e7e4      	b.n	80009e2 <concat_timecode+0x2e>
        }
    }

    seconds++;
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <concat_timecode+0x74>)
 8000a1a:	8813      	ldrh	r3, [r2, #0]
 8000a1c:	3301      	adds	r3, #1
 8000a1e:	8013      	strh	r3, [r2, #0]
}
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000328 	.word	0x20000328
 8000a28:	2000003c 	.word	0x2000003c
 8000a2c:	200002e0 	.word	0x200002e0

08000a30 <is_same_string>:

bool is_same_string(const char str1[], const char str2[], int length)
{
    bool isSame = true;
    for (int i = 0; i < length; i++)
 8000a30:	2300      	movs	r3, #0
 8000a32:	4293      	cmp	r3, r2
 8000a34:	da0c      	bge.n	8000a50 <is_same_string+0x20>
{
 8000a36:	b430      	push	{r4, r5}
    {
        if (str1[i] != str2[i])
 8000a38:	5cc5      	ldrb	r5, [r0, r3]
 8000a3a:	5ccc      	ldrb	r4, [r1, r3]
 8000a3c:	42a5      	cmp	r5, r4
 8000a3e:	d105      	bne.n	8000a4c <is_same_string+0x1c>
    for (int i = 0; i < length; i++)
 8000a40:	3301      	adds	r3, #1
 8000a42:	4293      	cmp	r3, r2
 8000a44:	dbf8      	blt.n	8000a38 <is_same_string+0x8>
    bool isSame = true;
 8000a46:	2001      	movs	r0, #1
            isSame = false;
            break;
        }
    }
    return isSame;
}
 8000a48:	bc30      	pop	{r4, r5}
 8000a4a:	4770      	bx	lr
            isSame = false;
 8000a4c:	2000      	movs	r0, #0
 8000a4e:	e7fb      	b.n	8000a48 <is_same_string+0x18>
    bool isSame = true;
 8000a50:	2001      	movs	r0, #1
}
 8000a52:	4770      	bx	lr

08000a54 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef* hdac)
{
 8000a54:	b508      	push	{r3, lr}
    //HAL_DAC_Stop_DMA(hdac, DAC_CHANNEL_1);
    HAL_TIM_Base_Stop_IT(&htim6);
 8000a56:	4802      	ldr	r0, [pc, #8]	; (8000a60 <HAL_DAC_ConvCpltCallbackCh1+0xc>)
 8000a58:	f001 f9bc 	bl	8001dd4 <HAL_TIM_Base_Stop_IT>
}
 8000a5c:	bd08      	pop	{r3, pc}
 8000a5e:	bf00      	nop
 8000a60:	20000118 	.word	0x20000118

08000a64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a68:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a6a:	e003      	b.n	8000a74 <LoopCopyDataInit>

08000a6c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a6e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a70:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a72:	3104      	adds	r1, #4

08000a74 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a74:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a76:	4b0c      	ldr	r3, [pc, #48]	; (8000aa8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a78:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a7a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a7c:	d3f6      	bcc.n	8000a6c <CopyDataInit>
	ldr	r2, =_sbss
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	; (8000aac <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a80:	e002      	b.n	8000a88 <LoopFillZerobss>

08000a82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a82:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a84:	f842 3b04 	str.w	r3, [r2], #4

08000a88 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a88:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <LoopForever+0x16>)
	cmp	r2, r3
 8000a8a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a8c:	d3f9      	bcc.n	8000a82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a8e:	f7ff ff2b 	bl	80008e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a92:	f001 ff0b 	bl	80028ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a96:	f7ff fceb 	bl	8000470 <main>

08000a9a <LoopForever>:

LoopForever:
    b LoopForever
 8000a9a:	e7fe      	b.n	8000a9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a9c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000aa0:	080029fc 	.word	0x080029fc
	ldr	r0, =_sdata
 8000aa4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000aa8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000aac:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ab0:	20000340 	.word	0x20000340

08000ab4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ab4:	e7fe      	b.n	8000ab4 <ADC1_2_IRQHandler>
	...

08000ab8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab8:	b510      	push	{r4, lr}
 8000aba:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b0e      	ldr	r3, [pc, #56]	; (8000af8 <HAL_InitTick+0x40>)
 8000abe:	7818      	ldrb	r0, [r3, #0]
 8000ac0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ac8:	4a0c      	ldr	r2, [pc, #48]	; (8000afc <HAL_InitTick+0x44>)
 8000aca:	6810      	ldr	r0, [r2, #0]
 8000acc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ad0:	f000 f890 	bl	8000bf4 <HAL_SYSTICK_Config>
 8000ad4:	b968      	cbnz	r0, 8000af2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ad6:	2c0f      	cmp	r4, #15
 8000ad8:	d901      	bls.n	8000ade <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000ada:	2001      	movs	r0, #1
 8000adc:	e00a      	b.n	8000af4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	4621      	mov	r1, r4
 8000ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae6:	f000 f843 	bl	8000b70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_InitTick+0x48>)
 8000aec:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8000aee:	2000      	movs	r0, #0
 8000af0:	e000      	b.n	8000af4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000af2:	2001      	movs	r0, #1
}
 8000af4:	bd10      	pop	{r4, pc}
 8000af6:	bf00      	nop
 8000af8:	20000004 	.word	0x20000004
 8000afc:	20000000 	.word	0x20000000
 8000b00:	20000008 	.word	0x20000008

08000b04 <HAL_Init>:
{
 8000b04:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b06:	4a07      	ldr	r2, [pc, #28]	; (8000b24 <HAL_Init+0x20>)
 8000b08:	6813      	ldr	r3, [r2, #0]
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 f81b 	bl	8000b4c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff ffce 	bl	8000ab8 <HAL_InitTick>
  HAL_MspInit();
 8000b1c:	f7ff fd6c 	bl	80005f8 <HAL_MspInit>
}
 8000b20:	2000      	movs	r0, #0
 8000b22:	bd08      	pop	{r3, pc}
 8000b24:	40022000 	.word	0x40022000

08000b28 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b28:	4a03      	ldr	r2, [pc, #12]	; (8000b38 <HAL_IncTick+0x10>)
 8000b2a:	6811      	ldr	r1, [r2, #0]
 8000b2c:	4b03      	ldr	r3, [pc, #12]	; (8000b3c <HAL_IncTick+0x14>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	440b      	add	r3, r1
 8000b32:	6013      	str	r3, [r2, #0]
}
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	2000033c 	.word	0x2000033c
 8000b3c:	20000004 	.word	0x20000004

08000b40 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000b40:	4b01      	ldr	r3, [pc, #4]	; (8000b48 <HAL_GetTick+0x8>)
 8000b42:	6818      	ldr	r0, [r3, #0]
}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	2000033c 	.word	0x2000033c

08000b4c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4a07      	ldr	r2, [pc, #28]	; (8000b6c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b4e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b50:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b54:	041b      	lsls	r3, r3, #16
 8000b56:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b58:	0200      	lsls	r0, r0, #8
 8000b5a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b5e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000b60:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000b64:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b68:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b6a:	4770      	bx	lr
 8000b6c:	e000ed00 	.word	0xe000ed00

08000b70 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b70:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_NVIC_SetPriority+0x60>)
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b7a:	f1c3 0407 	rsb	r4, r3, #7
 8000b7e:	2c04      	cmp	r4, #4
 8000b80:	bf28      	it	cs
 8000b82:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b84:	1d1d      	adds	r5, r3, #4
 8000b86:	2d06      	cmp	r5, #6
 8000b88:	d918      	bls.n	8000bbc <HAL_NVIC_SetPriority+0x4c>
 8000b8a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b8c:	f04f 35ff 	mov.w	r5, #4294967295
 8000b90:	fa05 f404 	lsl.w	r4, r5, r4
 8000b94:	ea21 0104 	bic.w	r1, r1, r4
 8000b98:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b9a:	fa05 f303 	lsl.w	r3, r5, r3
 8000b9e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	db0b      	blt.n	8000bc0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba8:	0109      	lsls	r1, r1, #4
 8000baa:	b2c9      	uxtb	r1, r1
 8000bac:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000bb0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000bb4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000bb8:	bc30      	pop	{r4, r5}
 8000bba:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	e7e5      	b.n	8000b8c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc0:	f000 000f 	and.w	r0, r0, #15
 8000bc4:	0109      	lsls	r1, r1, #4
 8000bc6:	b2c9      	uxtb	r1, r1
 8000bc8:	4b02      	ldr	r3, [pc, #8]	; (8000bd4 <HAL_NVIC_SetPriority+0x64>)
 8000bca:	5419      	strb	r1, [r3, r0]
 8000bcc:	e7f4      	b.n	8000bb8 <HAL_NVIC_SetPriority+0x48>
 8000bce:	bf00      	nop
 8000bd0:	e000ed00 	.word	0xe000ed00
 8000bd4:	e000ed14 	.word	0xe000ed14

08000bd8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	db07      	blt.n	8000bec <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bdc:	f000 021f 	and.w	r2, r0, #31
 8000be0:	0940      	lsrs	r0, r0, #5
 8000be2:	2301      	movs	r3, #1
 8000be4:	4093      	lsls	r3, r2
 8000be6:	4a02      	ldr	r2, [pc, #8]	; (8000bf0 <HAL_NVIC_EnableIRQ+0x18>)
 8000be8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000e100 	.word	0xe000e100

08000bf4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bf4:	3801      	subs	r0, #1
 8000bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bfa:	d20a      	bcs.n	8000c12 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bfc:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_SYSTICK_Config+0x24>)
 8000bfe:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	4a06      	ldr	r2, [pc, #24]	; (8000c1c <HAL_SYSTICK_Config+0x28>)
 8000c02:	21f0      	movs	r1, #240	; 0xf0
 8000c04:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c08:	2000      	movs	r0, #0
 8000c0a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c0c:	2207      	movs	r2, #7
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c12:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	e000e010 	.word	0xe000e010
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8000c20:	b170      	cbz	r0, 8000c40 <HAL_DAC_Init+0x20>
{ 
 8000c22:	b510      	push	{r4, lr}
 8000c24:	4604      	mov	r4, r0
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000c26:	7903      	ldrb	r3, [r0, #4]
 8000c28:	b133      	cbz	r3, 8000c38 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000c2e:	2000      	movs	r0, #0
 8000c30:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000c32:	2301      	movs	r3, #1
 8000c34:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8000c36:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8000c38:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8000c3a:	f7ff fcf5 	bl	8000628 <HAL_DAC_MspInit>
 8000c3e:	e7f4      	b.n	8000c2a <HAL_DAC_Init+0xa>
     return HAL_ERROR;
 8000c40:	2001      	movs	r0, #1
}
 8000c42:	4770      	bx	lr

08000c44 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000c44:	b510      	push	{r4, lr}
 8000c46:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8000c48:	6800      	ldr	r0, [r0, #0]
 8000c4a:	6803      	ldr	r3, [r0, #0]
 8000c4c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c50:	408a      	lsls	r2, r1
 8000c52:	ea23 0302 	bic.w	r3, r3, r2
 8000c56:	6003      	str	r3, [r0, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000c58:	6820      	ldr	r0, [r4, #0]
 8000c5a:	6803      	ldr	r3, [r0, #0]
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	408a      	lsls	r2, r1
 8000c60:	ea23 0302 	bic.w	r3, r3, r2
 8000c64:	6003      	str	r3, [r0, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000c66:	b959      	cbnz	r1, 8000c80 <HAL_DAC_Stop_DMA+0x3c>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8000c68:	68a0      	ldr	r0, [r4, #8]
 8000c6a:	f000 f9bf 	bl	8000fec <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000c6e:	6822      	ldr	r2, [r4, #0]
 8000c70:	6813      	ldr	r3, [r2, #0]
 8000c72:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c76:	6013      	str	r3, [r2, #0]
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8000c78:	b958      	cbnz	r0, 8000c92 <HAL_DAC_Stop_DMA+0x4e>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8000c7a:	2301      	movs	r3, #1
 8000c7c:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 8000c7e:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8000c80:	68e0      	ldr	r0, [r4, #12]
 8000c82:	f000 f9b3 	bl	8000fec <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000c86:	6822      	ldr	r2, [r4, #0]
 8000c88:	6813      	ldr	r3, [r2, #0]
 8000c8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000c8e:	6013      	str	r3, [r2, #0]
 8000c90:	e7f2      	b.n	8000c78 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 8000c92:	2304      	movs	r3, #4
 8000c94:	7123      	strb	r3, [r4, #4]
 8000c96:	e7f2      	b.n	8000c7e <HAL_DAC_Stop_DMA+0x3a>

08000c98 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000c98:	4770      	bx	lr

08000c9a <HAL_DAC_ErrorCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8000c9a:	4770      	bx	lr

08000c9c <HAL_DAC_DMAUnderrunCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000c9c:	4770      	bx	lr

08000c9e <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000c9e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ca0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ca2:	6923      	ldr	r3, [r4, #16]
 8000ca4:	f043 0304 	orr.w	r3, r3, #4
 8000ca8:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000caa:	4620      	mov	r0, r4
 8000cac:	f7ff fff5 	bl	8000c9a <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	7123      	strb	r3, [r4, #4]
}
 8000cb4:	bd10      	pop	{r4, pc}

08000cb6 <DAC_DMAHalfConvCpltCh1>:
{
 8000cb6:	b508      	push	{r3, lr}
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000cb8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000cba:	f7ff ffed 	bl	8000c98 <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 8000cbe:	bd08      	pop	{r3, pc}

08000cc0 <DAC_DMAConvCpltCh1>:
{
 8000cc0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cc2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f7ff fec5 	bl	8000a54 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	7123      	strb	r3, [r4, #4]
}
 8000cce:	bd10      	pop	{r4, pc}

08000cd0 <HAL_DAC_Start_DMA>:
{
 8000cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cd2:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdac);
 8000cd4:	7946      	ldrb	r6, [r0, #5]
 8000cd6:	2e01      	cmp	r6, #1
 8000cd8:	d064      	beq.n	8000da4 <HAL_DAC_Start_DMA+0xd4>
 8000cda:	2501      	movs	r5, #1
 8000cdc:	7145      	strb	r5, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000cde:	2502      	movs	r5, #2
 8000ce0:	7105      	strb	r5, [r0, #4]
  if(Channel == DAC_CHANNEL_1)
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d135      	bne.n	8000d52 <HAL_DAC_Start_DMA+0x82>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000ce6:	6885      	ldr	r5, [r0, #8]
 8000ce8:	4e2f      	ldr	r6, [pc, #188]	; (8000da8 <HAL_DAC_Start_DMA+0xd8>)
 8000cea:	62ae      	str	r6, [r5, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000cec:	6885      	ldr	r5, [r0, #8]
 8000cee:	4e2f      	ldr	r6, [pc, #188]	; (8000dac <HAL_DAC_Start_DMA+0xdc>)
 8000cf0:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000cf2:	6885      	ldr	r5, [r0, #8]
 8000cf4:	4e2e      	ldr	r6, [pc, #184]	; (8000db0 <HAL_DAC_Start_DMA+0xe0>)
 8000cf6:	632e      	str	r6, [r5, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8000cf8:	6806      	ldr	r6, [r0, #0]
 8000cfa:	6835      	ldr	r5, [r6, #0]
 8000cfc:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8000d00:	6035      	str	r5, [r6, #0]
    switch(Alignment)
 8000d02:	2c04      	cmp	r4, #4
 8000d04:	d01f      	beq.n	8000d46 <HAL_DAC_Start_DMA+0x76>
 8000d06:	2c08      	cmp	r4, #8
 8000d08:	d020      	beq.n	8000d4c <HAL_DAC_Start_DMA+0x7c>
 8000d0a:	b10c      	cbz	r4, 8000d10 <HAL_DAC_Start_DMA+0x40>
  uint32_t tmpreg = 0U;
 8000d0c:	460e      	mov	r6, r1
 8000d0e:	e001      	b.n	8000d14 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000d10:	6806      	ldr	r6, [r0, #0]
 8000d12:	3608      	adds	r6, #8
 8000d14:	4617      	mov	r7, r2
 8000d16:	460d      	mov	r5, r1
 8000d18:	4604      	mov	r4, r0
  if(Channel == DAC_CHANNEL_1)
 8000d1a:	2900      	cmp	r1, #0
 8000d1c:	d137      	bne.n	8000d8e <HAL_DAC_Start_DMA+0xbe>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000d1e:	6801      	ldr	r1, [r0, #0]
 8000d20:	680a      	ldr	r2, [r1, #0]
 8000d22:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d26:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000d28:	4632      	mov	r2, r6
 8000d2a:	4639      	mov	r1, r7
 8000d2c:	6880      	ldr	r0, [r0, #8]
 8000d2e:	f000 f923 	bl	8000f78 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8000d32:	2000      	movs	r0, #0
 8000d34:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8000d36:	6822      	ldr	r2, [r4, #0]
 8000d38:	6813      	ldr	r3, [r2, #0]
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	fa01 f505 	lsl.w	r5, r1, r5
 8000d40:	431d      	orrs	r5, r3
 8000d42:	6015      	str	r5, [r2, #0]
}
 8000d44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000d46:	6806      	ldr	r6, [r0, #0]
 8000d48:	360c      	adds	r6, #12
        break;
 8000d4a:	e7e3      	b.n	8000d14 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000d4c:	6806      	ldr	r6, [r0, #0]
 8000d4e:	3610      	adds	r6, #16
        break;
 8000d50:	e7e0      	b.n	8000d14 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000d52:	68c5      	ldr	r5, [r0, #12]
 8000d54:	4e17      	ldr	r6, [pc, #92]	; (8000db4 <HAL_DAC_Start_DMA+0xe4>)
 8000d56:	62ae      	str	r6, [r5, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000d58:	68c5      	ldr	r5, [r0, #12]
 8000d5a:	4e17      	ldr	r6, [pc, #92]	; (8000db8 <HAL_DAC_Start_DMA+0xe8>)
 8000d5c:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000d5e:	68c5      	ldr	r5, [r0, #12]
 8000d60:	4e16      	ldr	r6, [pc, #88]	; (8000dbc <HAL_DAC_Start_DMA+0xec>)
 8000d62:	632e      	str	r6, [r5, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8000d64:	6806      	ldr	r6, [r0, #0]
 8000d66:	6835      	ldr	r5, [r6, #0]
 8000d68:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000d6c:	6035      	str	r5, [r6, #0]
    switch(Alignment)
 8000d6e:	2c04      	cmp	r4, #4
 8000d70:	d007      	beq.n	8000d82 <HAL_DAC_Start_DMA+0xb2>
 8000d72:	2c08      	cmp	r4, #8
 8000d74:	d008      	beq.n	8000d88 <HAL_DAC_Start_DMA+0xb8>
 8000d76:	b10c      	cbz	r4, 8000d7c <HAL_DAC_Start_DMA+0xac>
  uint32_t tmpreg = 0U;
 8000d78:	2600      	movs	r6, #0
 8000d7a:	e7cb      	b.n	8000d14 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000d7c:	6806      	ldr	r6, [r0, #0]
 8000d7e:	3614      	adds	r6, #20
        break;
 8000d80:	e7c8      	b.n	8000d14 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000d82:	6806      	ldr	r6, [r0, #0]
 8000d84:	3618      	adds	r6, #24
        break;
 8000d86:	e7c5      	b.n	8000d14 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000d88:	6806      	ldr	r6, [r0, #0]
 8000d8a:	361c      	adds	r6, #28
        break;
 8000d8c:	e7c2      	b.n	8000d14 <HAL_DAC_Start_DMA+0x44>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000d8e:	6801      	ldr	r1, [r0, #0]
 8000d90:	680a      	ldr	r2, [r1, #0]
 8000d92:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000d96:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000d98:	4632      	mov	r2, r6
 8000d9a:	4639      	mov	r1, r7
 8000d9c:	68c0      	ldr	r0, [r0, #12]
 8000d9e:	f000 f8eb 	bl	8000f78 <HAL_DMA_Start_IT>
 8000da2:	e7c6      	b.n	8000d32 <HAL_DAC_Start_DMA+0x62>
  __HAL_LOCK(hdac);
 8000da4:	2002      	movs	r0, #2
 8000da6:	e7cd      	b.n	8000d44 <HAL_DAC_Start_DMA+0x74>
 8000da8:	08000cc1 	.word	0x08000cc1
 8000dac:	08000cb7 	.word	0x08000cb7
 8000db0:	08000c9f 	.word	0x08000c9f
 8000db4:	08000e2f 	.word	0x08000e2f
 8000db8:	08000e41 	.word	0x08000e41
 8000dbc:	08000e4d 	.word	0x08000e4d

08000dc0 <HAL_DAC_ConfigChannel>:
{
 8000dc0:	b430      	push	{r4, r5}
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000dc2:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdac);
 8000dc4:	7943      	ldrb	r3, [r0, #5]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d02c      	beq.n	8000e24 <HAL_DAC_ConfigChannel+0x64>
 8000dca:	2301      	movs	r3, #1
 8000dcc:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8000dd2:	6823      	ldr	r3, [r4, #0]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000dd4:	4d14      	ldr	r5, [pc, #80]	; (8000e28 <HAL_DAC_ConfigChannel+0x68>)
 8000dd6:	42ac      	cmp	r4, r5
 8000dd8:	d019      	beq.n	8000e0e <HAL_DAC_ConfigChannel+0x4e>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000dda:	f640 75fe 	movw	r5, #4094	; 0xffe
 8000dde:	4095      	lsls	r5, r2
 8000de0:	ea23 0505 	bic.w	r5, r3, r5
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000de4:	680b      	ldr	r3, [r1, #0]
 8000de6:	6889      	ldr	r1, [r1, #8]
 8000de8:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 8000dea:	4093      	lsls	r3, r2
 8000dec:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8000dee:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000df0:	6804      	ldr	r4, [r0, #0]
 8000df2:	6823      	ldr	r3, [r4, #0]
 8000df4:	21c0      	movs	r1, #192	; 0xc0
 8000df6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dfa:	ea23 0202 	bic.w	r2, r3, r2
 8000dfe:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000e00:	2301      	movs	r3, #1
 8000e02:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8000e04:	2300      	movs	r3, #0
 8000e06:	7143      	strb	r3, [r0, #5]
  return HAL_OK;
 8000e08:	4618      	mov	r0, r3
}
 8000e0a:	bc30      	pop	{r4, r5}
 8000e0c:	4770      	bx	lr
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000e0e:	2a00      	cmp	r2, #0
 8000e10:	d1e3      	bne.n	8000dda <HAL_DAC_ConfigChannel+0x1a>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000e12:	f640 75fe 	movw	r5, #4094	; 0xffe
 8000e16:	4095      	lsls	r5, r2
 8000e18:	ea23 0505 	bic.w	r5, r3, r5
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8000e1c:	680b      	ldr	r3, [r1, #0]
 8000e1e:	6849      	ldr	r1, [r1, #4]
 8000e20:	430b      	orrs	r3, r1
 8000e22:	e7e2      	b.n	8000dea <HAL_DAC_ConfigChannel+0x2a>
  __HAL_LOCK(hdac);
 8000e24:	2002      	movs	r0, #2
 8000e26:	e7f0      	b.n	8000e0a <HAL_DAC_ConfigChannel+0x4a>
 8000e28:	40007400 	.word	0x40007400

08000e2c <HAL_DACEx_ConvCpltCallbackCh2>:
}
 8000e2c:	4770      	bx	lr

08000e2e <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000e2e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e30:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000e32:	4620      	mov	r0, r4
 8000e34:	f7ff fffa 	bl	8000e2c <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	7123      	strb	r3, [r4, #4]
}
 8000e3c:	bd10      	pop	{r4, pc}

08000e3e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
}
 8000e3e:	4770      	bx	lr

08000e40 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000e40:	b508      	push	{r3, lr}

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000e42:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000e44:	f7ff fffb 	bl	8000e3e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8000e48:	bd08      	pop	{r3, pc}

08000e4a <HAL_DACEx_ErrorCallbackCh2>:
}
 8000e4a:	4770      	bx	lr

08000e4c <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000e4c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e4e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e50:	6923      	ldr	r3, [r4, #16]
 8000e52:	f043 0304 	orr.w	r3, r3, #4
 8000e56:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000e58:	4620      	mov	r0, r4
 8000e5a:	f7ff fff6 	bl	8000e4a <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	7123      	strb	r3, [r4, #4]
}
 8000e62:	bd10      	pop	{r4, pc}

08000e64 <HAL_DACEx_DMAUnderrunCallbackCh2>:
}
 8000e64:	4770      	bx	lr

08000e66 <HAL_DAC_IRQHandler>:
{
 8000e66:	b510      	push	{r4, lr}
 8000e68:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000e6a:	6803      	ldr	r3, [r0, #0]
 8000e6c:	681a      	ldr	r2, [r3, #0]
 8000e6e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000e72:	d003      	beq.n	8000e7c <HAL_DAC_IRQHandler+0x16>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e76:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000e7a:	d109      	bne.n	8000e90 <HAL_DAC_IRQHandler+0x2a>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8000e7c:	6823      	ldr	r3, [r4, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000e84:	d003      	beq.n	8000e8e <HAL_DAC_IRQHandler+0x28>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000e86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e88:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000e8c:	d111      	bne.n	8000eb2 <HAL_DAC_IRQHandler+0x4c>
}
 8000e8e:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8000e90:	2204      	movs	r2, #4
 8000e92:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000e94:	6902      	ldr	r2, [r0, #16]
 8000e96:	f042 0201 	orr.w	r2, r2, #1
 8000e9a:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8000e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea0:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000ea2:	6802      	ldr	r2, [r0, #0]
 8000ea4:	6813      	ldr	r3, [r2, #0]
 8000ea6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000eaa:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000eac:	f7ff fef6 	bl	8000c9c <HAL_DAC_DMAUnderrunCallbackCh1>
 8000eb0:	e7e4      	b.n	8000e7c <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000eb6:	6922      	ldr	r2, [r4, #16]
 8000eb8:	f042 0202 	orr.w	r2, r2, #2
 8000ebc:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8000ebe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ec2:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000ec4:	6822      	ldr	r2, [r4, #0]
 8000ec6:	6813      	ldr	r3, [r2, #0]
 8000ec8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000ece:	4620      	mov	r0, r4
 8000ed0:	f7ff ffc8 	bl	8000e64 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8000ed4:	e7db      	b.n	8000e8e <HAL_DAC_IRQHandler+0x28>

08000ed6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ed6:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ed8:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000eda:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000edc:	2401      	movs	r4, #1
 8000ede:	40b4      	lsls	r4, r6
 8000ee0:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ee2:	6804      	ldr	r4, [r0, #0]
 8000ee4:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ee6:	6843      	ldr	r3, [r0, #4]
 8000ee8:	2b10      	cmp	r3, #16
 8000eea:	d005      	beq.n	8000ef8 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000eec:	6803      	ldr	r3, [r0, #0]
 8000eee:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000ef0:	6803      	ldr	r3, [r0, #0]
 8000ef2:	60da      	str	r2, [r3, #12]
  }
}
 8000ef4:	bc70      	pop	{r4, r5, r6}
 8000ef6:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000ef8:	6803      	ldr	r3, [r0, #0]
 8000efa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000efc:	6803      	ldr	r3, [r0, #0]
 8000efe:	60d9      	str	r1, [r3, #12]
 8000f00:	e7f8      	b.n	8000ef4 <DMA_SetConfig+0x1e>
	...

08000f04 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000f04:	6802      	ldr	r2, [r0, #0]
 8000f06:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <DMA_CalcBaseAndBitshift+0x18>)
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <DMA_CalcBaseAndBitshift+0x1c>)
 8000f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000f16:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <DMA_CalcBaseAndBitshift+0x20>)
 8000f18:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8000f1a:	4770      	bx	lr
 8000f1c:	bffdfff8 	.word	0xbffdfff8
 8000f20:	cccccccd 	.word	0xcccccccd
 8000f24:	40020000 	.word	0x40020000

08000f28 <HAL_DMA_Init>:
  if(NULL == hdma)
 8000f28:	b320      	cbz	r0, 8000f74 <HAL_DMA_Init+0x4c>
{ 
 8000f2a:	b510      	push	{r4, lr}
 8000f2c:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8000f34:	6801      	ldr	r1, [r0, #0]
 8000f36:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f38:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000f3c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000f40:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f42:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8000f44:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f46:	68e0      	ldr	r0, [r4, #12]
 8000f48:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4a:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f4c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f4e:	6960      	ldr	r0, [r4, #20]
 8000f50:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f52:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f54:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f56:	69e0      	ldr	r0, [r4, #28]
 8000f58:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000f5a:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000f5c:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000f5e:	4620      	mov	r0, r4
 8000f60:	f7ff ffd0 	bl	8000f04 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f64:	2000      	movs	r0, #0
 8000f66:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000f6e:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8000f72:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f74:	2001      	movs	r0, #1
}  
 8000f76:	4770      	bx	lr

08000f78 <HAL_DMA_Start_IT>:
{
 8000f78:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8000f7a:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000f7e:	2c01      	cmp	r4, #1
 8000f80:	d032      	beq.n	8000fe8 <HAL_DMA_Start_IT+0x70>
 8000f82:	2401      	movs	r4, #1
 8000f84:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f88:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000f8c:	2c01      	cmp	r4, #1
 8000f8e:	d004      	beq.n	8000f9a <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000f90:	2300      	movs	r3, #0
 8000f92:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8000f96:	2002      	movs	r0, #2
} 
 8000f98:	bd38      	pop	{r3, r4, r5, pc}
 8000f9a:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000f9c:	2002      	movs	r0, #2
 8000f9e:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fa2:	2000      	movs	r0, #0
 8000fa4:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000fa6:	6825      	ldr	r5, [r4, #0]
 8000fa8:	6828      	ldr	r0, [r5, #0]
 8000faa:	f020 0001 	bic.w	r0, r0, #1
 8000fae:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f7ff ff90 	bl	8000ed6 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8000fb6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000fb8:	b15b      	cbz	r3, 8000fd2 <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	6813      	ldr	r3, [r2, #0]
 8000fbe:	f043 030e 	orr.w	r3, r3, #14
 8000fc2:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000fc4:	6822      	ldr	r2, [r4, #0]
 8000fc6:	6813      	ldr	r3, [r2, #0]
 8000fc8:	f043 0301 	orr.w	r3, r3, #1
 8000fcc:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000fce:	2000      	movs	r0, #0
 8000fd0:	e7e2      	b.n	8000f98 <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000fd2:	6822      	ldr	r2, [r4, #0]
 8000fd4:	6813      	ldr	r3, [r2, #0]
 8000fd6:	f043 030a 	orr.w	r3, r3, #10
 8000fda:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fdc:	6822      	ldr	r2, [r4, #0]
 8000fde:	6813      	ldr	r3, [r2, #0]
 8000fe0:	f023 0304 	bic.w	r3, r3, #4
 8000fe4:	6013      	str	r3, [r2, #0]
 8000fe6:	e7ed      	b.n	8000fc4 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000fe8:	2002      	movs	r0, #2
 8000fea:	e7d5      	b.n	8000f98 <HAL_DMA_Start_IT+0x20>

08000fec <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fec:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000ff0:	2b02      	cmp	r3, #2
 8000ff2:	d006      	beq.n	8001002 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ff4:	2304      	movs	r3, #4
 8000ff6:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000ffe:	2001      	movs	r0, #1
 8001000:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001002:	6802      	ldr	r2, [r0, #0]
 8001004:	6813      	ldr	r3, [r2, #0]
 8001006:	f023 030e 	bic.w	r3, r3, #14
 800100a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800100c:	6802      	ldr	r2, [r0, #0]
 800100e:	6813      	ldr	r3, [r2, #0]
 8001010:	f023 0301 	bic.w	r3, r3, #1
 8001014:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8001016:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001018:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800101a:	2201      	movs	r2, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8001022:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8001026:	2300      	movs	r3, #0
 8001028:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 800102c:	4618      	mov	r0, r3
}
 800102e:	4770      	bx	lr

08001030 <HAL_DMA_Abort_IT>:
{  
 8001030:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001032:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8001036:	2b02      	cmp	r3, #2
 8001038:	d003      	beq.n	8001042 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800103a:	2304      	movs	r3, #4
 800103c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800103e:	2001      	movs	r0, #1
}
 8001040:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001042:	6802      	ldr	r2, [r0, #0]
 8001044:	6813      	ldr	r3, [r2, #0]
 8001046:	f023 030e 	bic.w	r3, r3, #14
 800104a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800104c:	6802      	ldr	r2, [r0, #0]
 800104e:	6813      	ldr	r3, [r2, #0]
 8001050:	f023 0301 	bic.w	r3, r3, #1
 8001054:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001056:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8001058:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800105a:	2201      	movs	r2, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001062:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001066:	2300      	movs	r3, #0
 8001068:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800106c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800106e:	b113      	cbz	r3, 8001076 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001070:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001072:	2000      	movs	r0, #0
 8001074:	e7e4      	b.n	8001040 <HAL_DMA_Abort_IT+0x10>
 8001076:	2000      	movs	r0, #0
 8001078:	e7e2      	b.n	8001040 <HAL_DMA_Abort_IT+0x10>

0800107a <HAL_DMA_IRQHandler>:
{
 800107a:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800107c:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800107e:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001080:	6804      	ldr	r4, [r0, #0]
 8001082:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001084:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8001086:	2304      	movs	r3, #4
 8001088:	408b      	lsls	r3, r1
 800108a:	4213      	tst	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x3c>
 800108e:	f015 0f04 	tst.w	r5, #4
 8001092:	d010      	beq.n	80010b6 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	f013 0f20 	tst.w	r3, #32
 800109a:	d103      	bne.n	80010a4 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	f023 0304 	bic.w	r3, r3, #4
 80010a2:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80010a4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80010a6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80010a8:	2304      	movs	r3, #4
 80010aa:	408b      	lsls	r3, r1
 80010ac:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80010ae:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80010b0:	b103      	cbz	r3, 80010b4 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 80010b2:	4798      	blx	r3
}  
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80010b6:	2302      	movs	r3, #2
 80010b8:	408b      	lsls	r3, r1
 80010ba:	4213      	tst	r3, r2
 80010bc:	d01a      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x7a>
 80010be:	f015 0f02 	tst.w	r5, #2
 80010c2:	d017      	beq.n	80010f4 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010c4:	6823      	ldr	r3, [r4, #0]
 80010c6:	f013 0f20 	tst.w	r3, #32
 80010ca:	d106      	bne.n	80010da <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80010cc:	6823      	ldr	r3, [r4, #0]
 80010ce:	f023 030a 	bic.w	r3, r3, #10
 80010d2:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 80010d4:	2301      	movs	r3, #1
 80010d6:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80010da:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80010dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80010de:	2302      	movs	r3, #2
 80010e0:	408b      	lsls	r3, r1
 80010e2:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 80010e4:	2300      	movs	r3, #0
 80010e6:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 80010ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d0e1      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 80010f0:	4798      	blx	r3
 80010f2:	e7df      	b.n	80010b4 <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80010f4:	2308      	movs	r3, #8
 80010f6:	fa03 f101 	lsl.w	r1, r3, r1
 80010fa:	4211      	tst	r1, r2
 80010fc:	d0da      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x3a>
 80010fe:	f015 0f08 	tst.w	r5, #8
 8001102:	d0d7      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	f023 030e 	bic.w	r3, r3, #14
 800110a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800110c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800110e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001110:	2301      	movs	r3, #1
 8001112:	fa03 f202 	lsl.w	r2, r3, r2
 8001116:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001118:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800111a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 800111e:	2300      	movs	r3, #0
 8001120:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8001124:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001126:	2b00      	cmp	r3, #0
 8001128:	d0c4      	beq.n	80010b4 <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 800112a:	4798      	blx	r3
}  
 800112c:	e7c2      	b.n	80010b4 <HAL_DMA_IRQHandler+0x3a>
	...

08001130 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001130:	b4f0      	push	{r4, r5, r6, r7}
 8001132:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001134:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001136:	e036      	b.n	80011a6 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001138:	2403      	movs	r4, #3
 800113a:	e000      	b.n	800113e <HAL_GPIO_Init+0xe>
 800113c:	2400      	movs	r4, #0
 800113e:	40b4      	lsls	r4, r6
 8001140:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001142:	3502      	adds	r5, #2
 8001144:	4e58      	ldr	r6, [pc, #352]	; (80012a8 <HAL_GPIO_Init+0x178>)
 8001146:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4c58      	ldr	r4, [pc, #352]	; (80012ac <HAL_GPIO_Init+0x17c>)
 800114c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800114e:	43d4      	mvns	r4, r2
 8001150:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001154:	684f      	ldr	r7, [r1, #4]
 8001156:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800115a:	d001      	beq.n	8001160 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 800115c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001160:	4d52      	ldr	r5, [pc, #328]	; (80012ac <HAL_GPIO_Init+0x17c>)
 8001162:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001164:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001166:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800116a:	684f      	ldr	r7, [r1, #4]
 800116c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 8001170:	d001      	beq.n	8001176 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 8001172:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 8001176:	4d4d      	ldr	r5, [pc, #308]	; (80012ac <HAL_GPIO_Init+0x17c>)
 8001178:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117a:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 800117c:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001180:	684f      	ldr	r7, [r1, #4]
 8001182:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 8001186:	d001      	beq.n	800118c <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 8001188:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 800118c:	4d47      	ldr	r5, [pc, #284]	; (80012ac <HAL_GPIO_Init+0x17c>)
 800118e:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 8001190:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 8001192:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001194:	684e      	ldr	r6, [r1, #4]
 8001196:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 800119a:	d001      	beq.n	80011a0 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 800119c:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80011a0:	4a42      	ldr	r2, [pc, #264]	; (80012ac <HAL_GPIO_Init+0x17c>)
 80011a2:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80011a4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011a6:	680a      	ldr	r2, [r1, #0]
 80011a8:	fa32 f403 	lsrs.w	r4, r2, r3
 80011ac:	d078      	beq.n	80012a0 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011ae:	2401      	movs	r4, #1
 80011b0:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80011b2:	4022      	ands	r2, r4
 80011b4:	d0f6      	beq.n	80011a4 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80011b6:	684d      	ldr	r5, [r1, #4]
 80011b8:	2d02      	cmp	r5, #2
 80011ba:	d001      	beq.n	80011c0 <HAL_GPIO_Init+0x90>
 80011bc:	2d12      	cmp	r5, #18
 80011be:	d110      	bne.n	80011e2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 80011c0:	08de      	lsrs	r6, r3, #3
 80011c2:	3608      	adds	r6, #8
 80011c4:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80011c8:	f003 0507 	and.w	r5, r3, #7
 80011cc:	00af      	lsls	r7, r5, #2
 80011ce:	250f      	movs	r5, #15
 80011d0:	40bd      	lsls	r5, r7
 80011d2:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80011d6:	690d      	ldr	r5, [r1, #16]
 80011d8:	40bd      	lsls	r5, r7
 80011da:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 80011de:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 80011e2:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011e4:	005f      	lsls	r7, r3, #1
 80011e6:	2503      	movs	r5, #3
 80011e8:	40bd      	lsls	r5, r7
 80011ea:	43ed      	mvns	r5, r5
 80011ec:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011f0:	684e      	ldr	r6, [r1, #4]
 80011f2:	f006 0603 	and.w	r6, r6, #3
 80011f6:	40be      	lsls	r6, r7
 80011f8:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 80011fc:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80011fe:	684e      	ldr	r6, [r1, #4]
 8001200:	f106 3cff 	add.w	ip, r6, #4294967295
 8001204:	f1bc 0f01 	cmp.w	ip, #1
 8001208:	d903      	bls.n	8001212 <HAL_GPIO_Init+0xe2>
 800120a:	2e11      	cmp	r6, #17
 800120c:	d001      	beq.n	8001212 <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800120e:	2e12      	cmp	r6, #18
 8001210:	d110      	bne.n	8001234 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 8001212:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001214:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001218:	68ce      	ldr	r6, [r1, #12]
 800121a:	40be      	lsls	r6, r7
 800121c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8001220:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001222:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001224:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001228:	684e      	ldr	r6, [r1, #4]
 800122a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800122e:	409e      	lsls	r6, r3
 8001230:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8001232:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001234:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001236:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001238:	688c      	ldr	r4, [r1, #8]
 800123a:	40bc      	lsls	r4, r7
 800123c:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800123e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001240:	684c      	ldr	r4, [r1, #4]
 8001242:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001246:	d0ad      	beq.n	80011a4 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001248:	4c19      	ldr	r4, [pc, #100]	; (80012b0 <HAL_GPIO_Init+0x180>)
 800124a:	69a5      	ldr	r5, [r4, #24]
 800124c:	f045 0501 	orr.w	r5, r5, #1
 8001250:	61a5      	str	r5, [r4, #24]
 8001252:	69a4      	ldr	r4, [r4, #24]
 8001254:	f004 0401 	and.w	r4, r4, #1
 8001258:	9401      	str	r4, [sp, #4]
 800125a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800125c:	089d      	lsrs	r5, r3, #2
 800125e:	1cae      	adds	r6, r5, #2
 8001260:	4c11      	ldr	r4, [pc, #68]	; (80012a8 <HAL_GPIO_Init+0x178>)
 8001262:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001266:	f003 0403 	and.w	r4, r3, #3
 800126a:	00a6      	lsls	r6, r4, #2
 800126c:	240f      	movs	r4, #15
 800126e:	40b4      	lsls	r4, r6
 8001270:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001274:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8001278:	f43f af60 	beq.w	800113c <HAL_GPIO_Init+0xc>
 800127c:	4c0d      	ldr	r4, [pc, #52]	; (80012b4 <HAL_GPIO_Init+0x184>)
 800127e:	42a0      	cmp	r0, r4
 8001280:	d00a      	beq.n	8001298 <HAL_GPIO_Init+0x168>
 8001282:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001286:	42a0      	cmp	r0, r4
 8001288:	d008      	beq.n	800129c <HAL_GPIO_Init+0x16c>
 800128a:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800128e:	42a0      	cmp	r0, r4
 8001290:	f43f af52 	beq.w	8001138 <HAL_GPIO_Init+0x8>
 8001294:	2405      	movs	r4, #5
 8001296:	e752      	b.n	800113e <HAL_GPIO_Init+0xe>
 8001298:	2401      	movs	r4, #1
 800129a:	e750      	b.n	800113e <HAL_GPIO_Init+0xe>
 800129c:	2402      	movs	r4, #2
 800129e:	e74e      	b.n	800113e <HAL_GPIO_Init+0xe>
  }
}
 80012a0:	b002      	add	sp, #8
 80012a2:	bcf0      	pop	{r4, r5, r6, r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40010000 	.word	0x40010000
 80012ac:	40010400 	.word	0x40010400
 80012b0:	40021000 	.word	0x40021000
 80012b4:	48000400 	.word	0x48000400

080012b8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012b8:	b90a      	cbnz	r2, 80012be <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ba:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80012bc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012be:	6181      	str	r1, [r0, #24]
 80012c0:	4770      	bx	lr

080012c2 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80012c2:	4770      	bx	lr

080012c4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80012c4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80012c6:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80012c8:	695b      	ldr	r3, [r3, #20]
 80012ca:	4203      	tst	r3, r0
 80012cc:	d100      	bne.n	80012d0 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80012ce:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012d0:	4b02      	ldr	r3, [pc, #8]	; (80012dc <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80012d2:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012d4:	f7ff fff5 	bl	80012c2 <HAL_GPIO_EXTI_Callback>
}
 80012d8:	e7f9      	b.n	80012ce <HAL_GPIO_EXTI_IRQHandler+0xa>
 80012da:	bf00      	nop
 80012dc:	40010400 	.word	0x40010400

080012e0 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012e0:	2800      	cmp	r0, #0
 80012e2:	f000 830d 	beq.w	8001900 <HAL_RCC_OscConfig+0x620>
{
 80012e6:	b570      	push	{r4, r5, r6, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ec:	6803      	ldr	r3, [r0, #0]
 80012ee:	f013 0f01 	tst.w	r3, #1
 80012f2:	d03b      	beq.n	800136c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012f4:	4bb5      	ldr	r3, [pc, #724]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b04      	cmp	r3, #4
 80012fe:	d01e      	beq.n	800133e <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001300:	4bb2      	ldr	r3, [pc, #712]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	2b08      	cmp	r3, #8
 800130a:	d013      	beq.n	8001334 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800130c:	6863      	ldr	r3, [r4, #4]
 800130e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001312:	d068      	beq.n	80013e6 <HAL_RCC_OscConfig+0x106>
 8001314:	2b00      	cmp	r3, #0
 8001316:	f040 8092 	bne.w	800143e <HAL_RCC_OscConfig+0x15e>
 800131a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800131e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	e05d      	b.n	80013f0 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001334:	4ba5      	ldr	r3, [pc, #660]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800133c:	d0e6      	beq.n	800130c <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800133e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001342:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001346:	4ba1      	ldr	r3, [pc, #644]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 8001348:	6819      	ldr	r1, [r3, #0]
 800134a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134e:	fa93 f3a3 	rbit	r3, r3
 8001352:	fab3 f383 	clz	r3, r3
 8001356:	f003 031f 	and.w	r3, r3, #31
 800135a:	2201      	movs	r2, #1
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	420b      	tst	r3, r1
 8001362:	d003      	beq.n	800136c <HAL_RCC_OscConfig+0x8c>
 8001364:	6863      	ldr	r3, [r4, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f000 82cc 	beq.w	8001904 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800136c:	6823      	ldr	r3, [r4, #0]
 800136e:	f013 0f02 	tst.w	r3, #2
 8001372:	f000 80c6 	beq.w	8001502 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001376:	4b95      	ldr	r3, [pc, #596]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f013 0f0c 	tst.w	r3, #12
 800137e:	f000 809c 	beq.w	80014ba <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001382:	4b92      	ldr	r3, [pc, #584]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 030c 	and.w	r3, r3, #12
 800138a:	2b08      	cmp	r3, #8
 800138c:	f000 808f 	beq.w	80014ae <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001390:	6923      	ldr	r3, [r4, #16]
 8001392:	2b00      	cmp	r3, #0
 8001394:	f000 80f3 	beq.w	800157e <HAL_RCC_OscConfig+0x29e>
 8001398:	2201      	movs	r2, #1
 800139a:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800139e:	fab3 f383 	clz	r3, r3
 80013a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013aa:	009b      	lsls	r3, r3, #2
 80013ac:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013ae:	f7ff fbc7 	bl	8000b40 <HAL_GetTick>
 80013b2:	4605      	mov	r5, r0
 80013b4:	2302      	movs	r3, #2
 80013b6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ba:	4b84      	ldr	r3, [pc, #528]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 80013bc:	6819      	ldr	r1, [r3, #0]
 80013be:	2302      	movs	r3, #2
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	fab3 f383 	clz	r3, r3
 80013c8:	f003 031f 	and.w	r3, r3, #31
 80013cc:	2201      	movs	r2, #1
 80013ce:	fa02 f303 	lsl.w	r3, r2, r3
 80013d2:	420b      	tst	r3, r1
 80013d4:	f040 80c4 	bne.w	8001560 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fbb2 	bl	8000b40 <HAL_GetTick>
 80013dc:	1b40      	subs	r0, r0, r5
 80013de:	2802      	cmp	r0, #2
 80013e0:	d9e8      	bls.n	80013b4 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 80013e2:	2003      	movs	r0, #3
 80013e4:	e295      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013e6:	4a79      	ldr	r2, [pc, #484]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 80013e8:	6813      	ldr	r3, [r2, #0]
 80013ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013ee:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80013f0:	4a76      	ldr	r2, [pc, #472]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 80013f2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80013f4:	f023 030f 	bic.w	r3, r3, #15
 80013f8:	68a1      	ldr	r1, [r4, #8]
 80013fa:	430b      	orrs	r3, r1
 80013fc:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013fe:	6863      	ldr	r3, [r4, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d036      	beq.n	8001472 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001404:	f7ff fb9c 	bl	8000b40 <HAL_GetTick>
 8001408:	4605      	mov	r5, r0
 800140a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800140e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001412:	4b6e      	ldr	r3, [pc, #440]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 8001414:	6819      	ldr	r1, [r3, #0]
 8001416:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800141a:	fa93 f3a3 	rbit	r3, r3
 800141e:	fab3 f383 	clz	r3, r3
 8001422:	f003 031f 	and.w	r3, r3, #31
 8001426:	2201      	movs	r2, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	420b      	tst	r3, r1
 800142e:	d19d      	bne.n	800136c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff fb86 	bl	8000b40 <HAL_GetTick>
 8001434:	1b40      	subs	r0, r0, r5
 8001436:	2864      	cmp	r0, #100	; 0x64
 8001438:	d9e7      	bls.n	800140a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800143a:	2003      	movs	r0, #3
 800143c:	e269      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800143e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001442:	d009      	beq.n	8001458 <HAL_RCC_OscConfig+0x178>
 8001444:	4b61      	ldr	r3, [pc, #388]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001454:	601a      	str	r2, [r3, #0]
 8001456:	e7cb      	b.n	80013f0 <HAL_RCC_OscConfig+0x110>
 8001458:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800145c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001460:	681a      	ldr	r2, [r3, #0]
 8001462:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	e7be      	b.n	80013f0 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 8001472:	f7ff fb65 	bl	8000b40 <HAL_GetTick>
 8001476:	4605      	mov	r5, r0
 8001478:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800147c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001480:	4b52      	ldr	r3, [pc, #328]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 8001482:	6819      	ldr	r1, [r3, #0]
 8001484:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001488:	fa93 f3a3 	rbit	r3, r3
 800148c:	fab3 f383 	clz	r3, r3
 8001490:	f003 031f 	and.w	r3, r3, #31
 8001494:	2201      	movs	r2, #1
 8001496:	fa02 f303 	lsl.w	r3, r2, r3
 800149a:	420b      	tst	r3, r1
 800149c:	f43f af66 	beq.w	800136c <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a0:	f7ff fb4e 	bl	8000b40 <HAL_GetTick>
 80014a4:	1b40      	subs	r0, r0, r5
 80014a6:	2864      	cmp	r0, #100	; 0x64
 80014a8:	d9e6      	bls.n	8001478 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80014aa:	2003      	movs	r0, #3
 80014ac:	e231      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80014b6:	f47f af6b 	bne.w	8001390 <HAL_RCC_OscConfig+0xb0>
 80014ba:	2302      	movs	r3, #2
 80014bc:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014c0:	4b42      	ldr	r3, [pc, #264]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	2302      	movs	r3, #2
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	2201      	movs	r2, #1
 80014d4:	fa02 f303 	lsl.w	r3, r2, r3
 80014d8:	420b      	tst	r3, r1
 80014da:	d004      	beq.n	80014e6 <HAL_RCC_OscConfig+0x206>
 80014dc:	6923      	ldr	r3, [r4, #16]
 80014de:	4293      	cmp	r3, r2
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 80014e2:	2001      	movs	r0, #1
 80014e4:	e215      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e6:	4839      	ldr	r0, [pc, #228]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 80014e8:	6803      	ldr	r3, [r0, #0]
 80014ea:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80014ee:	6961      	ldr	r1, [r4, #20]
 80014f0:	22f8      	movs	r2, #248	; 0xf8
 80014f2:	fa92 f2a2 	rbit	r2, r2
 80014f6:	fab2 f282 	clz	r2, r2
 80014fa:	fa01 f202 	lsl.w	r2, r1, r2
 80014fe:	4313      	orrs	r3, r2
 8001500:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001502:	6823      	ldr	r3, [r4, #0]
 8001504:	f013 0f08 	tst.w	r3, #8
 8001508:	f000 808c 	beq.w	8001624 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800150c:	69a3      	ldr	r3, [r4, #24]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d060      	beq.n	80015d4 <HAL_RCC_OscConfig+0x2f4>
 8001512:	2101      	movs	r1, #1
 8001514:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001518:	fab2 f282 	clz	r2, r2
 800151c:	4b2c      	ldr	r3, [pc, #176]	; (80015d0 <HAL_RCC_OscConfig+0x2f0>)
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001524:	f7ff fb0c 	bl	8000b40 <HAL_GetTick>
 8001528:	4605      	mov	r5, r0
 800152a:	2302      	movs	r3, #2
 800152c:	fa93 f2a3 	rbit	r2, r3
 8001530:	fa93 f2a3 	rbit	r2, r3
 8001534:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001538:	4a24      	ldr	r2, [pc, #144]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 800153a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	fab3 f383 	clz	r3, r3
 8001544:	f003 031f 	and.w	r3, r3, #31
 8001548:	2201      	movs	r2, #1
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	420b      	tst	r3, r1
 8001550:	d168      	bne.n	8001624 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001552:	f7ff faf5 	bl	8000b40 <HAL_GetTick>
 8001556:	1b40      	subs	r0, r0, r5
 8001558:	2802      	cmp	r0, #2
 800155a:	d9e6      	bls.n	800152a <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 800155c:	2003      	movs	r0, #3
 800155e:	e1d8      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001560:	481a      	ldr	r0, [pc, #104]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 8001562:	6803      	ldr	r3, [r0, #0]
 8001564:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001568:	6961      	ldr	r1, [r4, #20]
 800156a:	22f8      	movs	r2, #248	; 0xf8
 800156c:	fa92 f2a2 	rbit	r2, r2
 8001570:	fab2 f282 	clz	r2, r2
 8001574:	fa01 f202 	lsl.w	r2, r1, r2
 8001578:	4313      	orrs	r3, r2
 800157a:	6003      	str	r3, [r0, #0]
 800157c:	e7c1      	b.n	8001502 <HAL_RCC_OscConfig+0x222>
 800157e:	2301      	movs	r3, #1
 8001580:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 8001584:	fab3 f383 	clz	r3, r3
 8001588:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800158c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	2200      	movs	r2, #0
 8001594:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001596:	f7ff fad3 	bl	8000b40 <HAL_GetTick>
 800159a:	4605      	mov	r5, r0
 800159c:	2302      	movs	r3, #2
 800159e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_RCC_OscConfig+0x2ec>)
 80015a4:	6819      	ldr	r1, [r3, #0]
 80015a6:	2302      	movs	r3, #2
 80015a8:	fa93 f3a3 	rbit	r3, r3
 80015ac:	fab3 f383 	clz	r3, r3
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2201      	movs	r2, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	420b      	tst	r3, r1
 80015bc:	d0a1      	beq.n	8001502 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015be:	f7ff fabf 	bl	8000b40 <HAL_GetTick>
 80015c2:	1b40      	subs	r0, r0, r5
 80015c4:	2802      	cmp	r0, #2
 80015c6:	d9e9      	bls.n	800159c <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 80015c8:	2003      	movs	r0, #3
 80015ca:	e1a2      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
 80015cc:	40021000 	.word	0x40021000
 80015d0:	10908120 	.word	0x10908120
 80015d4:	2201      	movs	r2, #1
 80015d6:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015da:	fab2 f282 	clz	r2, r2
 80015de:	4bbc      	ldr	r3, [pc, #752]	; (80018d0 <HAL_RCC_OscConfig+0x5f0>)
 80015e0:	4413      	add	r3, r2
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e8:	f7ff faaa 	bl	8000b40 <HAL_GetTick>
 80015ec:	4605      	mov	r5, r0
 80015ee:	2302      	movs	r3, #2
 80015f0:	fa93 f2a3 	rbit	r2, r3
 80015f4:	fa93 f2a3 	rbit	r2, r3
 80015f8:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	4ab5      	ldr	r2, [pc, #724]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 80015fe:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001600:	fa93 f3a3 	rbit	r3, r3
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	2201      	movs	r2, #1
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	420b      	tst	r3, r1
 8001614:	d006      	beq.n	8001624 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001616:	f7ff fa93 	bl	8000b40 <HAL_GetTick>
 800161a:	1b40      	subs	r0, r0, r5
 800161c:	2802      	cmp	r0, #2
 800161e:	d9e6      	bls.n	80015ee <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8001620:	2003      	movs	r0, #3
 8001622:	e176      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001624:	6823      	ldr	r3, [r4, #0]
 8001626:	f013 0f04 	tst.w	r3, #4
 800162a:	f000 80b3 	beq.w	8001794 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162e:	4ba9      	ldr	r3, [pc, #676]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001636:	d120      	bne.n	800167a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	4ba6      	ldr	r3, [pc, #664]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 800163a:	69da      	ldr	r2, [r3, #28]
 800163c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001640:	61da      	str	r2, [r3, #28]
 8001642:	69db      	ldr	r3, [r3, #28]
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	9301      	str	r3, [sp, #4]
 800164a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800164c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800164e:	4ba2      	ldr	r3, [pc, #648]	; (80018d8 <HAL_RCC_OscConfig+0x5f8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001656:	d012      	beq.n	800167e <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001658:	68e3      	ldr	r3, [r4, #12]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d023      	beq.n	80016a6 <HAL_RCC_OscConfig+0x3c6>
 800165e:	bb73      	cbnz	r3, 80016be <HAL_RCC_OscConfig+0x3de>
 8001660:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001664:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001668:	6a1a      	ldr	r2, [r3, #32]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	621a      	str	r2, [r3, #32]
 8001670:	6a1a      	ldr	r2, [r3, #32]
 8001672:	f022 0204 	bic.w	r2, r2, #4
 8001676:	621a      	str	r2, [r3, #32]
 8001678:	e01a      	b.n	80016b0 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 800167a:	2500      	movs	r5, #0
 800167c:	e7e7      	b.n	800164e <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800167e:	4a96      	ldr	r2, [pc, #600]	; (80018d8 <HAL_RCC_OscConfig+0x5f8>)
 8001680:	6813      	ldr	r3, [r2, #0]
 8001682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001686:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001688:	f7ff fa5a 	bl	8000b40 <HAL_GetTick>
 800168c:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168e:	4b92      	ldr	r3, [pc, #584]	; (80018d8 <HAL_RCC_OscConfig+0x5f8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001696:	d1df      	bne.n	8001658 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001698:	f7ff fa52 	bl	8000b40 <HAL_GetTick>
 800169c:	1b80      	subs	r0, r0, r6
 800169e:	2864      	cmp	r0, #100	; 0x64
 80016a0:	d9f5      	bls.n	800168e <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 80016a2:	2003      	movs	r0, #3
 80016a4:	e135      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016a6:	4a8b      	ldr	r2, [pc, #556]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 80016a8:	6a13      	ldr	r3, [r2, #32]
 80016aa:	f043 0301 	orr.w	r3, r3, #1
 80016ae:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016b0:	68e3      	ldr	r3, [r4, #12]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d041      	beq.n	800173a <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b6:	f7ff fa43 	bl	8000b40 <HAL_GetTick>
 80016ba:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016bc:	e02b      	b.n	8001716 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016be:	2b05      	cmp	r3, #5
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_OscConfig+0x3f6>
 80016c2:	4b84      	ldr	r3, [pc, #528]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 80016c4:	6a1a      	ldr	r2, [r3, #32]
 80016c6:	f022 0201 	bic.w	r2, r2, #1
 80016ca:	621a      	str	r2, [r3, #32]
 80016cc:	6a1a      	ldr	r2, [r3, #32]
 80016ce:	f022 0204 	bic.w	r2, r2, #4
 80016d2:	621a      	str	r2, [r3, #32]
 80016d4:	e7ec      	b.n	80016b0 <HAL_RCC_OscConfig+0x3d0>
 80016d6:	4b7f      	ldr	r3, [pc, #508]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 80016d8:	6a1a      	ldr	r2, [r3, #32]
 80016da:	f042 0204 	orr.w	r2, r2, #4
 80016de:	621a      	str	r2, [r3, #32]
 80016e0:	6a1a      	ldr	r2, [r3, #32]
 80016e2:	f042 0201 	orr.w	r2, r2, #1
 80016e6:	621a      	str	r2, [r3, #32]
 80016e8:	e7e2      	b.n	80016b0 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016ea:	4b7a      	ldr	r3, [pc, #488]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 80016ec:	6a19      	ldr	r1, [r3, #32]
 80016ee:	2302      	movs	r3, #2
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	f003 031f 	and.w	r3, r3, #31
 80016fc:	2201      	movs	r2, #1
 80016fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001702:	4219      	tst	r1, r3
 8001704:	d145      	bne.n	8001792 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001706:	f7ff fa1b 	bl	8000b40 <HAL_GetTick>
 800170a:	1b80      	subs	r0, r0, r6
 800170c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001710:	4298      	cmp	r0, r3
 8001712:	f200 80f9 	bhi.w	8001908 <HAL_RCC_OscConfig+0x628>
 8001716:	2302      	movs	r3, #2
 8001718:	fa93 f2a3 	rbit	r2, r3
 800171c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	fab3 f383 	clz	r3, r3
 8001724:	095b      	lsrs	r3, r3, #5
 8001726:	f043 0302 	orr.w	r3, r3, #2
 800172a:	2b02      	cmp	r3, #2
 800172c:	d0dd      	beq.n	80016ea <HAL_RCC_OscConfig+0x40a>
 800172e:	2302      	movs	r3, #2
 8001730:	fa93 f3a3 	rbit	r3, r3
 8001734:	4b67      	ldr	r3, [pc, #412]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 8001736:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001738:	e7d9      	b.n	80016ee <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173a:	f7ff fa01 	bl	8000b40 <HAL_GetTick>
 800173e:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001740:	e015      	b.n	800176e <HAL_RCC_OscConfig+0x48e>
 8001742:	4b64      	ldr	r3, [pc, #400]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 8001744:	6a19      	ldr	r1, [r3, #32]
 8001746:	2302      	movs	r3, #2
 8001748:	fa93 f3a3 	rbit	r3, r3
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	f003 031f 	and.w	r3, r3, #31
 8001754:	2201      	movs	r2, #1
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	4219      	tst	r1, r3
 800175c:	d019      	beq.n	8001792 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800175e:	f7ff f9ef 	bl	8000b40 <HAL_GetTick>
 8001762:	1b80      	subs	r0, r0, r6
 8001764:	f241 3388 	movw	r3, #5000	; 0x1388
 8001768:	4298      	cmp	r0, r3
 800176a:	f200 80cf 	bhi.w	800190c <HAL_RCC_OscConfig+0x62c>
 800176e:	2302      	movs	r3, #2
 8001770:	fa93 f2a3 	rbit	r2, r3
 8001774:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001778:	fab3 f383 	clz	r3, r3
 800177c:	095b      	lsrs	r3, r3, #5
 800177e:	f043 0302 	orr.w	r3, r3, #2
 8001782:	2b02      	cmp	r3, #2
 8001784:	d0dd      	beq.n	8001742 <HAL_RCC_OscConfig+0x462>
 8001786:	2302      	movs	r3, #2
 8001788:	fa93 f3a3 	rbit	r3, r3
 800178c:	4b51      	ldr	r3, [pc, #324]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 800178e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001790:	e7d9      	b.n	8001746 <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001792:	bbb5      	cbnz	r5, 8001802 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001794:	69e3      	ldr	r3, [r4, #28]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80ba 	beq.w	8001910 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800179c:	4a4d      	ldr	r2, [pc, #308]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 800179e:	6852      	ldr	r2, [r2, #4]
 80017a0:	f002 020c 	and.w	r2, r2, #12
 80017a4:	2a08      	cmp	r2, #8
 80017a6:	f000 8099 	beq.w	80018dc <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017aa:	2b02      	cmp	r3, #2
 80017ac:	d02f      	beq.n	800180e <HAL_RCC_OscConfig+0x52e>
 80017ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017b2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c8:	f7ff f9ba 	bl	8000b40 <HAL_GetTick>
 80017cc:	4604      	mov	r4, r0
 80017ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d2:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d6:	4b3f      	ldr	r3, [pc, #252]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 80017d8:	6819      	ldr	r1, [r3, #0]
 80017da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017de:	fa93 f3a3 	rbit	r3, r3
 80017e2:	fab3 f383 	clz	r3, r3
 80017e6:	f003 031f 	and.w	r3, r3, #31
 80017ea:	2201      	movs	r2, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	4219      	tst	r1, r3
 80017f2:	d06b      	beq.n	80018cc <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017f4:	f7ff f9a4 	bl	8000b40 <HAL_GetTick>
 80017f8:	1b00      	subs	r0, r0, r4
 80017fa:	2802      	cmp	r0, #2
 80017fc:	d9e7      	bls.n	80017ce <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 80017fe:	2003      	movs	r0, #3
 8001800:	e087      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001802:	4a34      	ldr	r2, [pc, #208]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 8001804:	69d3      	ldr	r3, [r2, #28]
 8001806:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800180a:	61d3      	str	r3, [r2, #28]
 800180c:	e7c2      	b.n	8001794 <HAL_RCC_OscConfig+0x4b4>
 800180e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001812:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001816:	fab3 f383 	clz	r3, r3
 800181a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800181e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001828:	f7ff f98a 	bl	8000b40 <HAL_GetTick>
 800182c:	4605      	mov	r5, r0
 800182e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001832:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001836:	4b27      	ldr	r3, [pc, #156]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 8001838:	6819      	ldr	r1, [r3, #0]
 800183a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800183e:	fa93 f3a3 	rbit	r3, r3
 8001842:	fab3 f383 	clz	r3, r3
 8001846:	f003 031f 	and.w	r3, r3, #31
 800184a:	2201      	movs	r2, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	4219      	tst	r1, r3
 8001852:	d006      	beq.n	8001862 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001854:	f7ff f974 	bl	8000b40 <HAL_GetTick>
 8001858:	1b40      	subs	r0, r0, r5
 800185a:	2802      	cmp	r0, #2
 800185c:	d9e7      	bls.n	800182e <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 800185e:	2003      	movs	r0, #3
 8001860:	e057      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001862:	491c      	ldr	r1, [pc, #112]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 8001864:	684b      	ldr	r3, [r1, #4]
 8001866:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800186a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800186c:	6a20      	ldr	r0, [r4, #32]
 800186e:	4302      	orrs	r2, r0
 8001870:	4313      	orrs	r3, r2
 8001872:	604b      	str	r3, [r1, #4]
 8001874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001878:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800187c:	fab3 f383 	clz	r3, r3
 8001880:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001884:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	2201      	movs	r2, #1
 800188c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800188e:	f7ff f957 	bl	8000b40 <HAL_GetTick>
 8001892:	4604      	mov	r4, r0
 8001894:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001898:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800189c:	4b0d      	ldr	r3, [pc, #52]	; (80018d4 <HAL_RCC_OscConfig+0x5f4>)
 800189e:	6819      	ldr	r1, [r3, #0]
 80018a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a4:	fa93 f3a3 	rbit	r3, r3
 80018a8:	fab3 f383 	clz	r3, r3
 80018ac:	f003 031f 	and.w	r3, r3, #31
 80018b0:	2201      	movs	r2, #1
 80018b2:	fa02 f303 	lsl.w	r3, r2, r3
 80018b6:	4219      	tst	r1, r3
 80018b8:	d106      	bne.n	80018c8 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018ba:	f7ff f941 	bl	8000b40 <HAL_GetTick>
 80018be:	1b00      	subs	r0, r0, r4
 80018c0:	2802      	cmp	r0, #2
 80018c2:	d9e7      	bls.n	8001894 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 80018c4:	2003      	movs	r0, #3
 80018c6:	e024      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 80018c8:	2000      	movs	r0, #0
 80018ca:	e022      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
 80018cc:	2000      	movs	r0, #0
 80018ce:	e020      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
 80018d0:	10908120 	.word	0x10908120
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d01a      	beq.n	8001916 <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 80018e0:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <HAL_RCC_OscConfig+0x640>)
 80018e2:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018e4:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80018e8:	6a22      	ldr	r2, [r4, #32]
 80018ea:	4291      	cmp	r1, r2
 80018ec:	d001      	beq.n	80018f2 <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 80018ee:	2001      	movs	r0, #1
 80018f0:	e00f      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80018f2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80018f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00e      	beq.n	800191a <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 80018fc:	2001      	movs	r0, #1
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8001900:	2001      	movs	r0, #1
}
 8001902:	4770      	bx	lr
        return HAL_ERROR;
 8001904:	2001      	movs	r0, #1
 8001906:	e004      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8001908:	2003      	movs	r0, #3
 800190a:	e002      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 800190c:	2003      	movs	r0, #3
 800190e:	e000      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8001910:	2000      	movs	r0, #0
}
 8001912:	b002      	add	sp, #8
 8001914:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001916:	2001      	movs	r0, #1
 8001918:	e7fb      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 800191a:	2000      	movs	r0, #0
 800191c:	e7f9      	b.n	8001912 <HAL_RCC_OscConfig+0x632>
 800191e:	bf00      	nop
 8001920:	40021000 	.word	0x40021000

08001924 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001926:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001928:	f001 030c 	and.w	r3, r1, #12
 800192c:	2b08      	cmp	r3, #8
 800192e:	d124      	bne.n	800197a <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001930:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001934:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001938:	fa93 f3a3 	rbit	r3, r3
 800193c:	fab3 f383 	clz	r3, r3
 8001940:	fa22 f303 	lsr.w	r3, r2, r3
 8001944:	4a0f      	ldr	r2, [pc, #60]	; (8001984 <HAL_RCC_GetSysClockFreq+0x60>)
 8001946:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001948:	4b0d      	ldr	r3, [pc, #52]	; (8001980 <HAL_RCC_GetSysClockFreq+0x5c>)
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	f003 030f 	and.w	r3, r3, #15
 8001950:	220f      	movs	r2, #15
 8001952:	fa92 f2a2 	rbit	r2, r2
 8001956:	fab2 f282 	clz	r2, r2
 800195a:	40d3      	lsrs	r3, r2
 800195c:	4a0a      	ldr	r2, [pc, #40]	; (8001988 <HAL_RCC_GetSysClockFreq+0x64>)
 800195e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001960:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001964:	d103      	bne.n	800196e <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001966:	4b09      	ldr	r3, [pc, #36]	; (800198c <HAL_RCC_GetSysClockFreq+0x68>)
 8001968:	fb03 f000 	mul.w	r0, r3, r0
 800196c:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800196e:	4b08      	ldr	r3, [pc, #32]	; (8001990 <HAL_RCC_GetSysClockFreq+0x6c>)
 8001970:	fbb3 f3f2 	udiv	r3, r3, r2
 8001974:	fb00 f003 	mul.w	r0, r0, r3
 8001978:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800197a:	4805      	ldr	r0, [pc, #20]	; (8001990 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000
 8001984:	080029d4 	.word	0x080029d4
 8001988:	080029e4 	.word	0x080029e4
 800198c:	003d0900 	.word	0x003d0900
 8001990:	007a1200 	.word	0x007a1200

08001994 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8001994:	2800      	cmp	r0, #0
 8001996:	f000 80c1 	beq.w	8001b1c <HAL_RCC_ClockConfig+0x188>
{
 800199a:	b570      	push	{r4, r5, r6, lr}
 800199c:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800199e:	4b61      	ldr	r3, [pc, #388]	; (8001b24 <HAL_RCC_ClockConfig+0x190>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0307 	and.w	r3, r3, #7
 80019a6:	428b      	cmp	r3, r1
 80019a8:	d20c      	bcs.n	80019c4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019aa:	4a5e      	ldr	r2, [pc, #376]	; (8001b24 <HAL_RCC_ClockConfig+0x190>)
 80019ac:	6813      	ldr	r3, [r2, #0]
 80019ae:	f023 0307 	bic.w	r3, r3, #7
 80019b2:	430b      	orrs	r3, r1
 80019b4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019b6:	6813      	ldr	r3, [r2, #0]
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	428b      	cmp	r3, r1
 80019be:	d001      	beq.n	80019c4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80019c0:	2001      	movs	r0, #1
}
 80019c2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019c4:	6823      	ldr	r3, [r4, #0]
 80019c6:	f013 0f02 	tst.w	r3, #2
 80019ca:	d006      	beq.n	80019da <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019cc:	4a56      	ldr	r2, [pc, #344]	; (8001b28 <HAL_RCC_ClockConfig+0x194>)
 80019ce:	6853      	ldr	r3, [r2, #4]
 80019d0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80019d4:	68a0      	ldr	r0, [r4, #8]
 80019d6:	4303      	orrs	r3, r0
 80019d8:	6053      	str	r3, [r2, #4]
 80019da:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019dc:	6823      	ldr	r3, [r4, #0]
 80019de:	f013 0f01 	tst.w	r3, #1
 80019e2:	d05a      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019e4:	6863      	ldr	r3, [r4, #4]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d02d      	beq.n	8001a46 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d040      	beq.n	8001a70 <HAL_RCC_ClockConfig+0xdc>
 80019ee:	2202      	movs	r2, #2
 80019f0:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019f4:	4a4c      	ldr	r2, [pc, #304]	; (8001b28 <HAL_RCC_ClockConfig+0x194>)
 80019f6:	6810      	ldr	r0, [r2, #0]
 80019f8:	2202      	movs	r2, #2
 80019fa:	fa92 f2a2 	rbit	r2, r2
 80019fe:	fab2 f282 	clz	r2, r2
 8001a02:	f002 021f 	and.w	r2, r2, #31
 8001a06:	2101      	movs	r1, #1
 8001a08:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0c:	4210      	tst	r0, r2
 8001a0e:	f000 8087 	beq.w	8001b20 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a12:	4945      	ldr	r1, [pc, #276]	; (8001b28 <HAL_RCC_ClockConfig+0x194>)
 8001a14:	684a      	ldr	r2, [r1, #4]
 8001a16:	f022 0203 	bic.w	r2, r2, #3
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8001a1e:	f7ff f88f 	bl	8000b40 <HAL_GetTick>
 8001a22:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a24:	4b40      	ldr	r3, [pc, #256]	; (8001b28 <HAL_RCC_ClockConfig+0x194>)
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	6862      	ldr	r2, [r4, #4]
 8001a2e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001a32:	d032      	beq.n	8001a9a <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a34:	f7ff f884 	bl	8000b40 <HAL_GetTick>
 8001a38:	1b80      	subs	r0, r0, r6
 8001a3a:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a3e:	4298      	cmp	r0, r3
 8001a40:	d9f0      	bls.n	8001a24 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8001a42:	2003      	movs	r0, #3
 8001a44:	e7bd      	b.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
 8001a46:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a4a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a4e:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <HAL_RCC_ClockConfig+0x194>)
 8001a50:	6810      	ldr	r0, [r2, #0]
 8001a52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001a56:	fa92 f2a2 	rbit	r2, r2
 8001a5a:	fab2 f282 	clz	r2, r2
 8001a5e:	f002 021f 	and.w	r2, r2, #31
 8001a62:	2101      	movs	r1, #1
 8001a64:	fa01 f202 	lsl.w	r2, r1, r2
 8001a68:	4202      	tst	r2, r0
 8001a6a:	d1d2      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	e7a8      	b.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
 8001a70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a74:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a78:	4a2b      	ldr	r2, [pc, #172]	; (8001b28 <HAL_RCC_ClockConfig+0x194>)
 8001a7a:	6810      	ldr	r0, [r2, #0]
 8001a7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a80:	fa92 f2a2 	rbit	r2, r2
 8001a84:	fab2 f282 	clz	r2, r2
 8001a88:	f002 021f 	and.w	r2, r2, #31
 8001a8c:	2101      	movs	r1, #1
 8001a8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001a92:	4210      	tst	r0, r2
 8001a94:	d1bd      	bne.n	8001a12 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8001a96:	2001      	movs	r0, #1
 8001a98:	e793      	b.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a9a:	4b22      	ldr	r3, [pc, #136]	; (8001b24 <HAL_RCC_ClockConfig+0x190>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	42ab      	cmp	r3, r5
 8001aa4:	d90c      	bls.n	8001ac0 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aa6:	4a1f      	ldr	r2, [pc, #124]	; (8001b24 <HAL_RCC_ClockConfig+0x190>)
 8001aa8:	6813      	ldr	r3, [r2, #0]
 8001aaa:	f023 0307 	bic.w	r3, r3, #7
 8001aae:	432b      	orrs	r3, r5
 8001ab0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ab2:	6813      	ldr	r3, [r2, #0]
 8001ab4:	f003 0307 	and.w	r3, r3, #7
 8001ab8:	42ab      	cmp	r3, r5
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8001abc:	2001      	movs	r0, #1
 8001abe:	e780      	b.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	6823      	ldr	r3, [r4, #0]
 8001ac2:	f013 0f04 	tst.w	r3, #4
 8001ac6:	d006      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac8:	4a17      	ldr	r2, [pc, #92]	; (8001b28 <HAL_RCC_ClockConfig+0x194>)
 8001aca:	6853      	ldr	r3, [r2, #4]
 8001acc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ad0:	68e1      	ldr	r1, [r4, #12]
 8001ad2:	430b      	orrs	r3, r1
 8001ad4:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad6:	6823      	ldr	r3, [r4, #0]
 8001ad8:	f013 0f08 	tst.w	r3, #8
 8001adc:	d007      	beq.n	8001aee <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ade:	4a12      	ldr	r2, [pc, #72]	; (8001b28 <HAL_RCC_ClockConfig+0x194>)
 8001ae0:	6853      	ldr	r3, [r2, #4]
 8001ae2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001ae6:	6921      	ldr	r1, [r4, #16]
 8001ae8:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001aec:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001aee:	f7ff ff19 	bl	8001924 <HAL_RCC_GetSysClockFreq>
 8001af2:	4b0d      	ldr	r3, [pc, #52]	; (8001b28 <HAL_RCC_ClockConfig+0x194>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001afa:	22f0      	movs	r2, #240	; 0xf0
 8001afc:	fa92 f2a2 	rbit	r2, r2
 8001b00:	fab2 f282 	clz	r2, r2
 8001b04:	40d3      	lsrs	r3, r2
 8001b06:	4a09      	ldr	r2, [pc, #36]	; (8001b2c <HAL_RCC_ClockConfig+0x198>)
 8001b08:	5cd3      	ldrb	r3, [r2, r3]
 8001b0a:	40d8      	lsrs	r0, r3
 8001b0c:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_RCC_ClockConfig+0x19c>)
 8001b0e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001b10:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <HAL_RCC_ClockConfig+0x1a0>)
 8001b12:	6818      	ldr	r0, [r3, #0]
 8001b14:	f7fe ffd0 	bl	8000ab8 <HAL_InitTick>
  return HAL_OK;
 8001b18:	2000      	movs	r0, #0
 8001b1a:	e752      	b.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001b1c:	2001      	movs	r0, #1
}
 8001b1e:	4770      	bx	lr
        return HAL_ERROR;
 8001b20:	2001      	movs	r0, #1
 8001b22:	e74e      	b.n	80019c2 <HAL_RCC_ClockConfig+0x2e>
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	080029bc 	.word	0x080029bc
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000008 	.word	0x20000008

08001b38 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b38:	4b01      	ldr	r3, [pc, #4]	; (8001b40 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b3a:	6818      	ldr	r0, [r3, #0]
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b44:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001b46:	f7ff fff7 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001b52:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001b56:	fa92 f2a2 	rbit	r2, r2
 8001b5a:	fab2 f282 	clz	r2, r2
 8001b5e:	40d3      	lsrs	r3, r2
 8001b60:	4a02      	ldr	r2, [pc, #8]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b62:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001b64:	40d8      	lsrs	r0, r3
 8001b66:	bd08      	pop	{r3, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	080029cc 	.word	0x080029cc

08001b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b70:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001b72:	f7ff ffe1 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b76:	4b07      	ldr	r3, [pc, #28]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001b7e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001b82:	fa92 f2a2 	rbit	r2, r2
 8001b86:	fab2 f282 	clz	r2, r2
 8001b8a:	40d3      	lsrs	r3, r2
 8001b8c:	4a02      	ldr	r2, [pc, #8]	; (8001b98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001b90:	40d8      	lsrs	r0, r3
 8001b92:	bd08      	pop	{r3, pc}
 8001b94:	40021000 	.word	0x40021000
 8001b98:	080029cc 	.word	0x080029cc

08001b9c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ba2:	6803      	ldr	r3, [r0, #0]
 8001ba4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ba8:	d044      	beq.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001baa:	4b64      	ldr	r3, [pc, #400]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bac:	69db      	ldr	r3, [r3, #28]
 8001bae:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001bb2:	d179      	bne.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	4b61      	ldr	r3, [pc, #388]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bbc:	61da      	str	r2, [r3, #28]
 8001bbe:	69db      	ldr	r3, [r3, #28]
 8001bc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc4:	9301      	str	r3, [sp, #4]
 8001bc6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001bc8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bca:	4b5d      	ldr	r3, [pc, #372]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bd2:	d06b      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001bd8:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001bdc:	d021      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001bde:	6862      	ldr	r2, [r4, #4]
 8001be0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d01c      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001be8:	4854      	ldr	r0, [pc, #336]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bea:	6a01      	ldr	r1, [r0, #32]
 8001bec:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bf4:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bf8:	fab2 f282 	clz	r2, r2
 8001bfc:	4f51      	ldr	r7, [pc, #324]	; (8001d44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001bfe:	443a      	add	r2, r7
 8001c00:	0092      	lsls	r2, r2, #2
 8001c02:	f04f 0c01 	mov.w	ip, #1
 8001c06:	f8c2 c000 	str.w	ip, [r2]
 8001c0a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c0e:	fab3 f383 	clz	r3, r3
 8001c12:	443b      	add	r3, r7
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001c1a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001c1c:	f011 0f01 	tst.w	r1, #1
 8001c20:	d158      	bne.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001c22:	4a46      	ldr	r2, [pc, #280]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c24:	6a13      	ldr	r3, [r2, #32]
 8001c26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c2a:	6861      	ldr	r1, [r4, #4]
 8001c2c:	430b      	orrs	r3, r1
 8001c2e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c30:	2d00      	cmp	r5, #0
 8001c32:	d17a      	bne.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c34:	6823      	ldr	r3, [r4, #0]
 8001c36:	f013 0f01 	tst.w	r3, #1
 8001c3a:	d006      	beq.n	8001c4a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c3c:	4a3f      	ldr	r2, [pc, #252]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c3e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c40:	f023 0303 	bic.w	r3, r3, #3
 8001c44:	68a1      	ldr	r1, [r4, #8]
 8001c46:	430b      	orrs	r3, r1
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c4a:	6823      	ldr	r3, [r4, #0]
 8001c4c:	f013 0f20 	tst.w	r3, #32
 8001c50:	d006      	beq.n	8001c60 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c52:	4a3a      	ldr	r2, [pc, #232]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c56:	f023 0310 	bic.w	r3, r3, #16
 8001c5a:	68e1      	ldr	r1, [r4, #12]
 8001c5c:	430b      	orrs	r3, r1
 8001c5e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001c66:	d006      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001c68:	4a34      	ldr	r2, [pc, #208]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c6a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001c6c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001c70:	6921      	ldr	r1, [r4, #16]
 8001c72:	430b      	orrs	r3, r1
 8001c74:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001c76:	6823      	ldr	r3, [r4, #0]
 8001c78:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001c7c:	d006      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001c7e:	4a2f      	ldr	r2, [pc, #188]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c80:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c86:	6961      	ldr	r1, [r4, #20]
 8001c88:	430b      	orrs	r3, r1
 8001c8a:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001c8c:	6823      	ldr	r3, [r4, #0]
 8001c8e:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001c92:	d051      	beq.n	8001d38 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001c94:	4a29      	ldr	r2, [pc, #164]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c96:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c9c:	69a1      	ldr	r1, [r4, #24]
 8001c9e:	430b      	orrs	r3, r1
 8001ca0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001ca2:	2000      	movs	r0, #0
}
 8001ca4:	b003      	add	sp, #12
 8001ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001ca8:	2500      	movs	r5, #0
 8001caa:	e78e      	b.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cac:	4a24      	ldr	r2, [pc, #144]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cae:	6813      	ldr	r3, [r2, #0]
 8001cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cb4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001cb6:	f7fe ff43 	bl	8000b40 <HAL_GetTick>
 8001cba:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cbc:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001cc4:	d186      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cc6:	f7fe ff3b 	bl	8000b40 <HAL_GetTick>
 8001cca:	1b80      	subs	r0, r0, r6
 8001ccc:	2864      	cmp	r0, #100	; 0x64
 8001cce:	d9f5      	bls.n	8001cbc <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8001cd0:	2003      	movs	r0, #3
 8001cd2:	e7e7      	b.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8001cd4:	f7fe ff34 	bl	8000b40 <HAL_GetTick>
 8001cd8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cda:	e014      	b.n	8001d06 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001cdc:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001cde:	6a19      	ldr	r1, [r3, #32]
 8001ce0:	2302      	movs	r3, #2
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	fab3 f383 	clz	r3, r3
 8001cea:	f003 031f 	and.w	r3, r3, #31
 8001cee:	2201      	movs	r2, #1
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	420b      	tst	r3, r1
 8001cf6:	d194      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf8:	f7fe ff22 	bl	8000b40 <HAL_GetTick>
 8001cfc:	1b80      	subs	r0, r0, r6
 8001cfe:	f241 3388 	movw	r3, #5000	; 0x1388
 8001d02:	4298      	cmp	r0, r3
 8001d04:	d816      	bhi.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001d06:	2302      	movs	r3, #2
 8001d08:	fa93 f2a3 	rbit	r2, r3
 8001d0c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d10:	fab3 f383 	clz	r3, r3
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	f043 0302 	orr.w	r3, r3, #2
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d0de      	beq.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001d1e:	2302      	movs	r3, #2
 8001d20:	fa93 f3a3 	rbit	r3, r3
 8001d24:	4b05      	ldr	r3, [pc, #20]	; (8001d3c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001d26:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001d28:	e7da      	b.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d2a:	69d3      	ldr	r3, [r2, #28]
 8001d2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d30:	61d3      	str	r3, [r2, #28]
 8001d32:	e77f      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8001d34:	2003      	movs	r0, #3
 8001d36:	e7b5      	b.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8001d38:	2000      	movs	r0, #0
 8001d3a:	e7b3      	b.n	8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	10908100 	.word	0x10908100

08001d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d48:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001d4a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001d4c:	6a04      	ldr	r4, [r0, #32]
 8001d4e:	f024 0401 	bic.w	r4, r4, #1
 8001d52:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d54:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001d56:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001d5a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001d5e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001d62:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001d64:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d66:	6203      	str	r3, [r0, #32]
}
 8001d68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001d6e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001d70:	6a03      	ldr	r3, [r0, #32]
 8001d72:	f023 0310 	bic.w	r3, r3, #16
 8001d76:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001d78:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001d7a:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001d7c:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001d80:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001d84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001d88:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001d8c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001d8e:	6203      	str	r3, [r0, #32]
}
 8001d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001d96:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001d98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001d9c:	4319      	orrs	r1, r3
 8001d9e:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001da2:	6081      	str	r1, [r0, #8]
}
 8001da4:	4770      	bx	lr
	...

08001da8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001da8:	6802      	ldr	r2, [r0, #0]
 8001daa:	68d3      	ldr	r3, [r2, #12]
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001db2:	6802      	ldr	r2, [r0, #0]
 8001db4:	6891      	ldr	r1, [r2, #8]
 8001db6:	4b06      	ldr	r3, [pc, #24]	; (8001dd0 <HAL_TIM_Base_Start_IT+0x28>)
 8001db8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d006      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x24>
 8001dbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dc2:	d003      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8001dc4:	6813      	ldr	r3, [r2, #0]
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	6013      	str	r3, [r2, #0]
}
 8001dcc:	2000      	movs	r0, #0
 8001dce:	4770      	bx	lr
 8001dd0:	00010007 	.word	0x00010007

08001dd4 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8001dd4:	6802      	ldr	r2, [r0, #0]
 8001dd6:	68d3      	ldr	r3, [r2, #12]
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8001dde:	6803      	ldr	r3, [r0, #0]
 8001de0:	6a19      	ldr	r1, [r3, #32]
 8001de2:	f241 1211 	movw	r2, #4369	; 0x1111
 8001de6:	4211      	tst	r1, r2
 8001de8:	d108      	bne.n	8001dfc <HAL_TIM_Base_Stop_IT+0x28>
 8001dea:	6a19      	ldr	r1, [r3, #32]
 8001dec:	f240 4244 	movw	r2, #1092	; 0x444
 8001df0:	4211      	tst	r1, r2
 8001df2:	d103      	bne.n	8001dfc <HAL_TIM_Base_Stop_IT+0x28>
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	f022 0201 	bic.w	r2, r2, #1
 8001dfa:	601a      	str	r2, [r3, #0]
}
 8001dfc:	2000      	movs	r0, #0
 8001dfe:	4770      	bx	lr

08001e00 <HAL_TIM_PeriodElapsedCallback>:
}
 8001e00:	4770      	bx	lr

08001e02 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001e02:	4770      	bx	lr

08001e04 <HAL_TIM_IC_CaptureCallback>:
}
 8001e04:	4770      	bx	lr

08001e06 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001e06:	4770      	bx	lr

08001e08 <HAL_TIM_TriggerCallback>:
}
 8001e08:	4770      	bx	lr

08001e0a <HAL_TIM_IRQHandler>:
{
 8001e0a:	b510      	push	{r4, lr}
 8001e0c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001e0e:	6803      	ldr	r3, [r0, #0]
 8001e10:	691a      	ldr	r2, [r3, #16]
 8001e12:	f012 0f02 	tst.w	r2, #2
 8001e16:	d011      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e18:	68da      	ldr	r2, [r3, #12]
 8001e1a:	f012 0f02 	tst.w	r2, #2
 8001e1e:	d00d      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e20:	f06f 0202 	mvn.w	r2, #2
 8001e24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e26:	2301      	movs	r3, #1
 8001e28:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e2a:	6803      	ldr	r3, [r0, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	f013 0f03 	tst.w	r3, #3
 8001e32:	d079      	beq.n	8001f28 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001e34:	f7ff ffe6 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e3c:	6823      	ldr	r3, [r4, #0]
 8001e3e:	691a      	ldr	r2, [r3, #16]
 8001e40:	f012 0f04 	tst.w	r2, #4
 8001e44:	d012      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e46:	68da      	ldr	r2, [r3, #12]
 8001e48:	f012 0f04 	tst.w	r2, #4
 8001e4c:	d00e      	beq.n	8001e6c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e4e:	f06f 0204 	mvn.w	r2, #4
 8001e52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e54:	2302      	movs	r3, #2
 8001e56:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e58:	6823      	ldr	r3, [r4, #0]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001e60:	d068      	beq.n	8001f34 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e62:	4620      	mov	r0, r4
 8001e64:	f7ff ffce 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e6c:	6823      	ldr	r3, [r4, #0]
 8001e6e:	691a      	ldr	r2, [r3, #16]
 8001e70:	f012 0f08 	tst.w	r2, #8
 8001e74:	d012      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	f012 0f08 	tst.w	r2, #8
 8001e7c:	d00e      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001e7e:	f06f 0208 	mvn.w	r2, #8
 8001e82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e84:	2304      	movs	r3, #4
 8001e86:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e88:	6823      	ldr	r3, [r4, #0]
 8001e8a:	69db      	ldr	r3, [r3, #28]
 8001e8c:	f013 0f03 	tst.w	r3, #3
 8001e90:	d057      	beq.n	8001f42 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	4620      	mov	r0, r4
 8001e94:	f7ff ffb6 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e9c:	6823      	ldr	r3, [r4, #0]
 8001e9e:	691a      	ldr	r2, [r3, #16]
 8001ea0:	f012 0f10 	tst.w	r2, #16
 8001ea4:	d012      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001ea6:	68da      	ldr	r2, [r3, #12]
 8001ea8:	f012 0f10 	tst.w	r2, #16
 8001eac:	d00e      	beq.n	8001ecc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001eae:	f06f 0210 	mvn.w	r2, #16
 8001eb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001eb4:	2308      	movs	r3, #8
 8001eb6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eb8:	6823      	ldr	r3, [r4, #0]
 8001eba:	69db      	ldr	r3, [r3, #28]
 8001ebc:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001ec0:	d046      	beq.n	8001f50 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001ec2:	4620      	mov	r0, r4
 8001ec4:	f7ff ff9e 	bl	8001e04 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ecc:	6823      	ldr	r3, [r4, #0]
 8001ece:	691a      	ldr	r2, [r3, #16]
 8001ed0:	f012 0f01 	tst.w	r2, #1
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	f012 0f01 	tst.w	r2, #1
 8001edc:	d13f      	bne.n	8001f5e <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ede:	6823      	ldr	r3, [r4, #0]
 8001ee0:	691a      	ldr	r2, [r3, #16]
 8001ee2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001ee6:	d003      	beq.n	8001ef0 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001ee8:	68da      	ldr	r2, [r3, #12]
 8001eea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001eee:	d13d      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001ef0:	6823      	ldr	r3, [r4, #0]
 8001ef2:	691a      	ldr	r2, [r3, #16]
 8001ef4:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001efa:	68da      	ldr	r2, [r3, #12]
 8001efc:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001f00:	d13b      	bne.n	8001f7a <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f02:	6823      	ldr	r3, [r4, #0]
 8001f04:	691a      	ldr	r2, [r3, #16]
 8001f06:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001f0a:	d003      	beq.n	8001f14 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001f12:	d139      	bne.n	8001f88 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001f14:	6823      	ldr	r3, [r4, #0]
 8001f16:	691a      	ldr	r2, [r3, #16]
 8001f18:	f012 0f20 	tst.w	r2, #32
 8001f1c:	d003      	beq.n	8001f26 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f1e:	68da      	ldr	r2, [r3, #12]
 8001f20:	f012 0f20 	tst.w	r2, #32
 8001f24:	d137      	bne.n	8001f96 <HAL_TIM_IRQHandler+0x18c>
}
 8001f26:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f28:	f7ff ff6b 	bl	8001e02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f7ff ff6a 	bl	8001e06 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f32:	e781      	b.n	8001e38 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f34:	4620      	mov	r0, r4
 8001f36:	f7ff ff64 	bl	8001e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f3a:	4620      	mov	r0, r4
 8001f3c:	f7ff ff63 	bl	8001e06 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f40:	e792      	b.n	8001e68 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f42:	4620      	mov	r0, r4
 8001f44:	f7ff ff5d 	bl	8001e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7ff ff5c 	bl	8001e06 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f4e:	e7a3      	b.n	8001e98 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f50:	4620      	mov	r0, r4
 8001f52:	f7ff ff56 	bl	8001e02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f56:	4620      	mov	r0, r4
 8001f58:	f7ff ff55 	bl	8001e06 <HAL_TIM_PWM_PulseFinishedCallback>
 8001f5c:	e7b4      	b.n	8001ec8 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f5e:	f06f 0201 	mvn.w	r2, #1
 8001f62:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f64:	4620      	mov	r0, r4
 8001f66:	f7ff ff4b 	bl	8001e00 <HAL_TIM_PeriodElapsedCallback>
 8001f6a:	e7b8      	b.n	8001ede <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f70:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001f72:	4620      	mov	r0, r4
 8001f74:	f000 f92f 	bl	80021d6 <HAL_TIMEx_BreakCallback>
 8001f78:	e7ba      	b.n	8001ef0 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f7a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001f7e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001f80:	4620      	mov	r0, r4
 8001f82:	f000 f929 	bl	80021d8 <HAL_TIMEx_Break2Callback>
 8001f86:	e7bc      	b.n	8001f02 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001f88:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001f8c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001f8e:	4620      	mov	r0, r4
 8001f90:	f7ff ff3a 	bl	8001e08 <HAL_TIM_TriggerCallback>
 8001f94:	e7be      	b.n	8001f14 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f96:	f06f 0220 	mvn.w	r2, #32
 8001f9a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001f9c:	4620      	mov	r0, r4
 8001f9e:	f000 f919 	bl	80021d4 <HAL_TIMEx_CommutCallback>
}
 8001fa2:	e7c0      	b.n	8001f26 <HAL_TIM_IRQHandler+0x11c>

08001fa4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001fa4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001fa6:	4a22      	ldr	r2, [pc, #136]	; (8002030 <TIM_Base_SetConfig+0x8c>)
 8001fa8:	4290      	cmp	r0, r2
 8001faa:	d006      	beq.n	8001fba <TIM_Base_SetConfig+0x16>
 8001fac:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fb0:	d003      	beq.n	8001fba <TIM_Base_SetConfig+0x16>
 8001fb2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001fb6:	4290      	cmp	r0, r2
 8001fb8:	d103      	bne.n	8001fc2 <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001fbe:	684a      	ldr	r2, [r1, #4]
 8001fc0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <TIM_Base_SetConfig+0x8c>)
 8001fc4:	4290      	cmp	r0, r2
 8001fc6:	d012      	beq.n	8001fee <TIM_Base_SetConfig+0x4a>
 8001fc8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0x4a>
 8001fce:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001fd2:	4290      	cmp	r0, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x4a>
 8001fd6:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8001fda:	4290      	cmp	r0, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x4a>
 8001fde:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fe2:	4290      	cmp	r0, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x4a>
 8001fe6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001fea:	4290      	cmp	r0, r2
 8001fec:	d103      	bne.n	8001ff6 <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff2:	68ca      	ldr	r2, [r1, #12]
 8001ff4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001ff6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001ffa:	694a      	ldr	r2, [r1, #20]
 8001ffc:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001ffe:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002000:	688b      	ldr	r3, [r1, #8]
 8002002:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8002004:	680b      	ldr	r3, [r1, #0]
 8002006:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002008:	4b09      	ldr	r3, [pc, #36]	; (8002030 <TIM_Base_SetConfig+0x8c>)
 800200a:	4298      	cmp	r0, r3
 800200c:	d00b      	beq.n	8002026 <TIM_Base_SetConfig+0x82>
 800200e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8002012:	4298      	cmp	r0, r3
 8002014:	d007      	beq.n	8002026 <TIM_Base_SetConfig+0x82>
 8002016:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800201a:	4298      	cmp	r0, r3
 800201c:	d003      	beq.n	8002026 <TIM_Base_SetConfig+0x82>
 800201e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002022:	4298      	cmp	r0, r3
 8002024:	d101      	bne.n	800202a <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8002026:	690b      	ldr	r3, [r1, #16]
 8002028:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800202a:	2301      	movs	r3, #1
 800202c:	6143      	str	r3, [r0, #20]
}
 800202e:	4770      	bx	lr
 8002030:	40012c00 	.word	0x40012c00

08002034 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8002034:	b1a8      	cbz	r0, 8002062 <HAL_TIM_Base_Init+0x2e>
{
 8002036:	b510      	push	{r4, lr}
 8002038:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800203a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800203e:	b15b      	cbz	r3, 8002058 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8002040:	2302      	movs	r3, #2
 8002042:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002046:	1d21      	adds	r1, r4, #4
 8002048:	6820      	ldr	r0, [r4, #0]
 800204a:	f7ff ffab 	bl	8001fa4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800204e:	2301      	movs	r3, #1
 8002050:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8002054:	2000      	movs	r0, #0
}
 8002056:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8002058:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800205c:	f7fe fb42 	bl	80006e4 <HAL_TIM_Base_MspInit>
 8002060:	e7ee      	b.n	8002040 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8002062:	2001      	movs	r0, #1
}
 8002064:	4770      	bx	lr

08002066 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002066:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002068:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800206a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800206e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8002072:	430b      	orrs	r3, r1
 8002074:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002076:	6083      	str	r3, [r0, #8]
}
 8002078:	f85d 4b04 	ldr.w	r4, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8002080:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002084:	2b01      	cmp	r3, #1
 8002086:	d064      	beq.n	8002152 <HAL_TIM_ConfigClockSource+0xd2>
{
 8002088:	b510      	push	{r4, lr}
 800208a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 800208c:	2301      	movs	r3, #1
 800208e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8002092:	2302      	movs	r3, #2
 8002094:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8002098:	6802      	ldr	r2, [r0, #0]
 800209a:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800209c:	4b2e      	ldr	r3, [pc, #184]	; (8002158 <HAL_TIM_ConfigClockSource+0xd8>)
 800209e:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80020a0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80020a2:	680b      	ldr	r3, [r1, #0]
 80020a4:	2b40      	cmp	r3, #64	; 0x40
 80020a6:	d04a      	beq.n	800213e <HAL_TIM_ConfigClockSource+0xbe>
 80020a8:	d913      	bls.n	80020d2 <HAL_TIM_ConfigClockSource+0x52>
 80020aa:	2b60      	cmp	r3, #96	; 0x60
 80020ac:	d03d      	beq.n	800212a <HAL_TIM_ConfigClockSource+0xaa>
 80020ae:	d91e      	bls.n	80020ee <HAL_TIM_ConfigClockSource+0x6e>
 80020b0:	2b70      	cmp	r3, #112	; 0x70
 80020b2:	d028      	beq.n	8002106 <HAL_TIM_ConfigClockSource+0x86>
 80020b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020b8:	d130      	bne.n	800211c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80020ba:	68cb      	ldr	r3, [r1, #12]
 80020bc:	684a      	ldr	r2, [r1, #4]
 80020be:	6889      	ldr	r1, [r1, #8]
 80020c0:	6820      	ldr	r0, [r4, #0]
 80020c2:	f7ff ffd0 	bl	8002066 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c6:	6822      	ldr	r2, [r4, #0]
 80020c8:	6893      	ldr	r3, [r2, #8]
 80020ca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020ce:	6093      	str	r3, [r2, #8]
      break;
 80020d0:	e024      	b.n	800211c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d006      	beq.n	80020e4 <HAL_TIM_ConfigClockSource+0x64>
 80020d6:	d904      	bls.n	80020e2 <HAL_TIM_ConfigClockSource+0x62>
 80020d8:	2b20      	cmp	r3, #32
 80020da:	d003      	beq.n	80020e4 <HAL_TIM_ConfigClockSource+0x64>
 80020dc:	2b30      	cmp	r3, #48	; 0x30
 80020de:	d001      	beq.n	80020e4 <HAL_TIM_ConfigClockSource+0x64>
 80020e0:	e01c      	b.n	800211c <HAL_TIM_ConfigClockSource+0x9c>
 80020e2:	b9db      	cbnz	r3, 800211c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80020e4:	4619      	mov	r1, r3
 80020e6:	6820      	ldr	r0, [r4, #0]
 80020e8:	f7ff fe55 	bl	8001d96 <TIM_ITRx_SetConfig>
      break;
 80020ec:	e016      	b.n	800211c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 80020ee:	2b50      	cmp	r3, #80	; 0x50
 80020f0:	d114      	bne.n	800211c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020f2:	68ca      	ldr	r2, [r1, #12]
 80020f4:	6849      	ldr	r1, [r1, #4]
 80020f6:	6820      	ldr	r0, [r4, #0]
 80020f8:	f7ff fe26 	bl	8001d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020fc:	2150      	movs	r1, #80	; 0x50
 80020fe:	6820      	ldr	r0, [r4, #0]
 8002100:	f7ff fe49 	bl	8001d96 <TIM_ITRx_SetConfig>
      break;
 8002104:	e00a      	b.n	800211c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8002106:	68cb      	ldr	r3, [r1, #12]
 8002108:	684a      	ldr	r2, [r1, #4]
 800210a:	6889      	ldr	r1, [r1, #8]
 800210c:	6820      	ldr	r0, [r4, #0]
 800210e:	f7ff ffaa 	bl	8002066 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002112:	6822      	ldr	r2, [r4, #0]
 8002114:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002116:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800211a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800211c:	2301      	movs	r3, #1
 800211e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002122:	2000      	movs	r0, #0
 8002124:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002128:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800212a:	68ca      	ldr	r2, [r1, #12]
 800212c:	6849      	ldr	r1, [r1, #4]
 800212e:	6820      	ldr	r0, [r4, #0]
 8002130:	f7ff fe1d 	bl	8001d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002134:	2160      	movs	r1, #96	; 0x60
 8002136:	6820      	ldr	r0, [r4, #0]
 8002138:	f7ff fe2d 	bl	8001d96 <TIM_ITRx_SetConfig>
      break;
 800213c:	e7ee      	b.n	800211c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800213e:	68ca      	ldr	r2, [r1, #12]
 8002140:	6849      	ldr	r1, [r1, #4]
 8002142:	6820      	ldr	r0, [r4, #0]
 8002144:	f7ff fe00 	bl	8001d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002148:	2140      	movs	r1, #64	; 0x40
 800214a:	6820      	ldr	r0, [r4, #0]
 800214c:	f7ff fe23 	bl	8001d96 <TIM_ITRx_SetConfig>
      break;
 8002150:	e7e4      	b.n	800211c <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8002152:	2002      	movs	r0, #2
}
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	fffe0088 	.word	0xfffe0088

0800215c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800215c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002160:	2b01      	cmp	r3, #1
 8002162:	d033      	beq.n	80021cc <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8002164:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8002166:	2301      	movs	r3, #1
 8002168:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216c:	2302      	movs	r3, #2
 800216e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002172:	6802      	ldr	r2, [r0, #0]
 8002174:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002176:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002178:	4c15      	ldr	r4, [pc, #84]	; (80021d0 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800217a:	42a2      	cmp	r2, r4
 800217c:	d021      	beq.n	80021c2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002182:	680c      	ldr	r4, [r1, #0]
 8002184:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002186:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002188:	6803      	ldr	r3, [r0, #0]
 800218a:	4a11      	ldr	r2, [pc, #68]	; (80021d0 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d00a      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002194:	d007      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002196:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800219a:	4293      	cmp	r3, r2
 800219c:	d003      	beq.n	80021a6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800219e:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d104      	bne.n	80021b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021a6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021aa:	688a      	ldr	r2, [r1, #8]
 80021ac:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021ae:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021b0:	2301      	movs	r3, #1
 80021b2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021b6:	2300      	movs	r3, #0
 80021b8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80021bc:	4618      	mov	r0, r3
}
 80021be:	bc30      	pop	{r4, r5}
 80021c0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021c6:	684c      	ldr	r4, [r1, #4]
 80021c8:	4323      	orrs	r3, r4
 80021ca:	e7d8      	b.n	800217e <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80021cc:	2002      	movs	r0, #2
}
 80021ce:	4770      	bx	lr
 80021d0:	40012c00 	.word	0x40012c00

080021d4 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021d4:	4770      	bx	lr

080021d6 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021d6:	4770      	bx	lr

080021d8 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80021d8:	4770      	bx	lr

080021da <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021da:	6802      	ldr	r2, [r0, #0]
 80021dc:	6813      	ldr	r3, [r2, #0]
 80021de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80021e2:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80021e4:	6802      	ldr	r2, [r0, #0]
 80021e6:	6893      	ldr	r3, [r2, #8]
 80021e8:	f023 0301 	bic.w	r3, r3, #1
 80021ec:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80021ee:	2320      	movs	r3, #32
 80021f0:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80021f2:	2300      	movs	r3, #0
 80021f4:	6603      	str	r3, [r0, #96]	; 0x60
}
 80021f6:	4770      	bx	lr

080021f8 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80021f8:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80021fa:	2b21      	cmp	r3, #33	; 0x21
 80021fc:	d000      	beq.n	8002200 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80021fe:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002200:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002204:	b29b      	uxth	r3, r3
 8002206:	b16b      	cbz	r3, 8002224 <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002208:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800220a:	6803      	ldr	r3, [r0, #0]
 800220c:	7812      	ldrb	r2, [r2, #0]
 800220e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002210:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002212:	3301      	adds	r3, #1
 8002214:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002216:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800221a:	3b01      	subs	r3, #1
 800221c:	b29b      	uxth	r3, r3
 800221e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8002222:	e7ec      	b.n	80021fe <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002224:	6802      	ldr	r2, [r0, #0]
 8002226:	6813      	ldr	r3, [r2, #0]
 8002228:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800222c:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800222e:	6802      	ldr	r2, [r0, #0]
 8002230:	6813      	ldr	r3, [r2, #0]
 8002232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	4770      	bx	lr

0800223a <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800223a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800223c:	2b21      	cmp	r3, #33	; 0x21
 800223e:	d000      	beq.n	8002242 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002240:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002242:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002246:	b29b      	uxth	r3, r3
 8002248:	b17b      	cbz	r3, 800226a <UART_TxISR_16BIT+0x30>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800224a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	6802      	ldr	r2, [r0, #0]
 8002250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002254:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8002256:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002258:	3302      	adds	r3, #2
 800225a:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800225c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002260:	3b01      	subs	r3, #1
 8002262:	b29b      	uxth	r3, r3
 8002264:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8002268:	e7ea      	b.n	8002240 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800226a:	6802      	ldr	r2, [r0, #0]
 800226c:	6813      	ldr	r3, [r2, #0]
 800226e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002272:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002274:	6802      	ldr	r2, [r0, #0]
 8002276:	6813      	ldr	r3, [r2, #0]
 8002278:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4770      	bx	lr

08002280 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002280:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002282:	2b20      	cmp	r3, #32
 8002284:	d128      	bne.n	80022d8 <HAL_UART_Transmit_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 8002286:	b349      	cbz	r1, 80022dc <HAL_UART_Transmit_IT+0x5c>
 8002288:	b352      	cbz	r2, 80022e0 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 800228a:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 800228e:	2b01      	cmp	r3, #1
 8002290:	d028      	beq.n	80022e4 <HAL_UART_Transmit_IT+0x64>
 8002292:	2301      	movs	r3, #1
 8002294:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 8002298:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800229a:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 800229e:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 80022a2:	2300      	movs	r3, #0
 80022a4:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022a6:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022a8:	2321      	movs	r3, #33	; 0x21
 80022aa:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022ac:	6883      	ldr	r3, [r0, #8]
 80022ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022b2:	d00b      	beq.n	80022cc <HAL_UART_Transmit_IT+0x4c>
      huart->TxISR = UART_TxISR_8BIT;
 80022b4:	4b0c      	ldr	r3, [pc, #48]	; (80022e8 <HAL_UART_Transmit_IT+0x68>)
 80022b6:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 80022b8:	2300      	movs	r3, #0
 80022ba:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80022be:	6801      	ldr	r1, [r0, #0]
 80022c0:	680a      	ldr	r2, [r1, #0]
 80022c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80022c6:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80022c8:	4618      	mov	r0, r3
 80022ca:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022cc:	6903      	ldr	r3, [r0, #16]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 80022d2:	4b06      	ldr	r3, [pc, #24]	; (80022ec <HAL_UART_Transmit_IT+0x6c>)
 80022d4:	6643      	str	r3, [r0, #100]	; 0x64
 80022d6:	e7ef      	b.n	80022b8 <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 80022d8:	2002      	movs	r0, #2
 80022da:	4770      	bx	lr
      return HAL_ERROR;
 80022dc:	2001      	movs	r0, #1
 80022de:	4770      	bx	lr
 80022e0:	2001      	movs	r0, #1
 80022e2:	4770      	bx	lr
    __HAL_LOCK(huart);
 80022e4:	2002      	movs	r0, #2
}
 80022e6:	4770      	bx	lr
 80022e8:	080021f9 	.word	0x080021f9
 80022ec:	0800223b 	.word	0x0800223b

080022f0 <HAL_UART_TxCpltCallback>:
}
 80022f0:	4770      	bx	lr

080022f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80022f2:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80022f4:	6801      	ldr	r1, [r0, #0]
 80022f6:	680a      	ldr	r2, [r1, #0]
 80022f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022fc:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80022fe:	2220      	movs	r2, #32
 8002300:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002302:	2200      	movs	r2, #0
 8002304:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002306:	f7ff fff3 	bl	80022f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800230a:	bd08      	pop	{r3, pc}

0800230c <HAL_UART_ErrorCallback>:
}
 800230c:	4770      	bx	lr
	...

08002310 <HAL_UART_IRQHandler>:
{
 8002310:	b538      	push	{r3, r4, r5, lr}
 8002312:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002314:	6801      	ldr	r1, [r0, #0]
 8002316:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002318:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800231a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800231c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8002320:	401a      	ands	r2, r3
 8002322:	d10c      	bne.n	800233e <HAL_UART_IRQHandler+0x2e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002324:	f013 0f20 	tst.w	r3, #32
 8002328:	d009      	beq.n	800233e <HAL_UART_IRQHandler+0x2e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800232a:	f010 0f20 	tst.w	r0, #32
 800232e:	d006      	beq.n	800233e <HAL_UART_IRQHandler+0x2e>
      if (huart->RxISR != NULL)
 8002330:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80a1 	beq.w	800247a <HAL_UART_IRQHandler+0x16a>
        huart->RxISR(huart);
 8002338:	4620      	mov	r0, r4
 800233a:	4798      	blx	r3
 800233c:	e09d      	b.n	800247a <HAL_UART_IRQHandler+0x16a>
  if ((errorflags != 0U)
 800233e:	2a00      	cmp	r2, #0
 8002340:	d07d      	beq.n	800243e <HAL_UART_IRQHandler+0x12e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002342:	f015 0201 	ands.w	r2, r5, #1
 8002346:	d102      	bne.n	800234e <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002348:	f410 7f90 	tst.w	r0, #288	; 0x120
 800234c:	d077      	beq.n	800243e <HAL_UART_IRQHandler+0x12e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800234e:	f013 0f01 	tst.w	r3, #1
 8002352:	d007      	beq.n	8002364 <HAL_UART_IRQHandler+0x54>
 8002354:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002358:	d004      	beq.n	8002364 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800235a:	2501      	movs	r5, #1
 800235c:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800235e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002360:	4329      	orrs	r1, r5
 8002362:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002364:	f013 0f02 	tst.w	r3, #2
 8002368:	d007      	beq.n	800237a <HAL_UART_IRQHandler+0x6a>
 800236a:	b132      	cbz	r2, 800237a <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800236c:	6821      	ldr	r1, [r4, #0]
 800236e:	2502      	movs	r5, #2
 8002370:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002372:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002374:	f041 0104 	orr.w	r1, r1, #4
 8002378:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800237a:	f013 0f04 	tst.w	r3, #4
 800237e:	d007      	beq.n	8002390 <HAL_UART_IRQHandler+0x80>
 8002380:	b132      	cbz	r2, 8002390 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002382:	6821      	ldr	r1, [r4, #0]
 8002384:	2504      	movs	r5, #4
 8002386:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002388:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800238a:	f041 0102 	orr.w	r1, r1, #2
 800238e:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002390:	f013 0f08 	tst.w	r3, #8
 8002394:	d009      	beq.n	80023aa <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002396:	f010 0f20 	tst.w	r0, #32
 800239a:	d100      	bne.n	800239e <HAL_UART_IRQHandler+0x8e>
 800239c:	b12a      	cbz	r2, 80023aa <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800239e:	6822      	ldr	r2, [r4, #0]
 80023a0:	2108      	movs	r1, #8
 80023a2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023a4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80023a6:	430a      	orrs	r2, r1
 80023a8:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80023aa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80023ae:	d00a      	beq.n	80023c6 <HAL_UART_IRQHandler+0xb6>
 80023b0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80023b4:	d007      	beq.n	80023c6 <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80023b6:	6822      	ldr	r2, [r4, #0]
 80023b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80023bc:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80023be:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80023c0:	f042 0220 	orr.w	r2, r2, #32
 80023c4:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023c6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80023c8:	2a00      	cmp	r2, #0
 80023ca:	d056      	beq.n	800247a <HAL_UART_IRQHandler+0x16a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80023cc:	f013 0f20 	tst.w	r3, #32
 80023d0:	d006      	beq.n	80023e0 <HAL_UART_IRQHandler+0xd0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80023d2:	f010 0f20 	tst.w	r0, #32
 80023d6:	d003      	beq.n	80023e0 <HAL_UART_IRQHandler+0xd0>
        if (huart->RxISR != NULL)
 80023d8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80023da:	b10b      	cbz	r3, 80023e0 <HAL_UART_IRQHandler+0xd0>
          huart->RxISR(huart);
 80023dc:	4620      	mov	r0, r4
 80023de:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80023e0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f013 0f40 	tst.w	r3, #64	; 0x40
 80023ea:	d102      	bne.n	80023f2 <HAL_UART_IRQHandler+0xe2>
 80023ec:	f012 0f28 	tst.w	r2, #40	; 0x28
 80023f0:	d01f      	beq.n	8002432 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 80023f2:	4620      	mov	r0, r4
 80023f4:	f7ff fef1 	bl	80021da <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023f8:	6823      	ldr	r3, [r4, #0]
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002400:	d013      	beq.n	800242a <HAL_UART_IRQHandler+0x11a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002408:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800240a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800240c:	b14b      	cbz	r3, 8002422 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800240e:	4a1d      	ldr	r2, [pc, #116]	; (8002484 <HAL_UART_IRQHandler+0x174>)
 8002410:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002412:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002414:	f7fe fe0c 	bl	8001030 <HAL_DMA_Abort_IT>
 8002418:	b378      	cbz	r0, 800247a <HAL_UART_IRQHandler+0x16a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800241a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800241c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800241e:	4798      	blx	r3
 8002420:	e02b      	b.n	800247a <HAL_UART_IRQHandler+0x16a>
            HAL_UART_ErrorCallback(huart);
 8002422:	4620      	mov	r0, r4
 8002424:	f7ff ff72 	bl	800230c <HAL_UART_ErrorCallback>
 8002428:	e027      	b.n	800247a <HAL_UART_IRQHandler+0x16a>
          HAL_UART_ErrorCallback(huart);
 800242a:	4620      	mov	r0, r4
 800242c:	f7ff ff6e 	bl	800230c <HAL_UART_ErrorCallback>
 8002430:	e023      	b.n	800247a <HAL_UART_IRQHandler+0x16a>
        HAL_UART_ErrorCallback(huart);
 8002432:	4620      	mov	r0, r4
 8002434:	f7ff ff6a 	bl	800230c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002438:	2300      	movs	r3, #0
 800243a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800243c:	e01d      	b.n	800247a <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800243e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002442:	d002      	beq.n	800244a <HAL_UART_IRQHandler+0x13a>
 8002444:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8002448:	d10a      	bne.n	8002460 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800244a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800244e:	d00e      	beq.n	800246e <HAL_UART_IRQHandler+0x15e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002450:	f010 0f80 	tst.w	r0, #128	; 0x80
 8002454:	d00b      	beq.n	800246e <HAL_UART_IRQHandler+0x15e>
    if (huart->TxISR != NULL)
 8002456:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002458:	b17b      	cbz	r3, 800247a <HAL_UART_IRQHandler+0x16a>
      huart->TxISR(huart);
 800245a:	4620      	mov	r0, r4
 800245c:	4798      	blx	r3
 800245e:	e00c      	b.n	800247a <HAL_UART_IRQHandler+0x16a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002460:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002464:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8002466:	4620      	mov	r0, r4
 8002468:	f000 fa1e 	bl	80028a8 <HAL_UARTEx_WakeupCallback>
    return;
 800246c:	e005      	b.n	800247a <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800246e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002472:	d002      	beq.n	800247a <HAL_UART_IRQHandler+0x16a>
 8002474:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002478:	d100      	bne.n	800247c <HAL_UART_IRQHandler+0x16c>
}
 800247a:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 800247c:	4620      	mov	r0, r4
 800247e:	f7ff ff38 	bl	80022f2 <UART_EndTransmit_IT>
    return;
 8002482:	e7fa      	b.n	800247a <HAL_UART_IRQHandler+0x16a>
 8002484:	08002489 	.word	0x08002489

08002488 <UART_DMAAbortOnError>:
{
 8002488:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800248a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 800248c:	2300      	movs	r3, #0
 800248e:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8002492:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 8002496:	f7ff ff39 	bl	800230c <HAL_UART_ErrorCallback>
}
 800249a:	bd08      	pop	{r3, pc}

0800249c <UART_SetConfig>:
{
 800249c:	b510      	push	{r4, lr}
 800249e:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024a0:	6883      	ldr	r3, [r0, #8]
 80024a2:	6902      	ldr	r2, [r0, #16]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	6942      	ldr	r2, [r0, #20]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	69c2      	ldr	r2, [r0, #28]
 80024ac:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024ae:	6801      	ldr	r1, [r0, #0]
 80024b0:	6808      	ldr	r0, [r1, #0]
 80024b2:	4a6c      	ldr	r2, [pc, #432]	; (8002664 <UART_SetConfig+0x1c8>)
 80024b4:	4002      	ands	r2, r0
 80024b6:	4313      	orrs	r3, r2
 80024b8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ba:	6822      	ldr	r2, [r4, #0]
 80024bc:	6853      	ldr	r3, [r2, #4]
 80024be:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024c2:	68e1      	ldr	r1, [r4, #12]
 80024c4:	430b      	orrs	r3, r1
 80024c6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80024c8:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80024ca:	6a23      	ldr	r3, [r4, #32]
 80024cc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80024ce:	6821      	ldr	r1, [r4, #0]
 80024d0:	688b      	ldr	r3, [r1, #8]
 80024d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80024d6:	4313      	orrs	r3, r2
 80024d8:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	4a62      	ldr	r2, [pc, #392]	; (8002668 <UART_SetConfig+0x1cc>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d015      	beq.n	800250e <UART_SetConfig+0x72>
 80024e2:	4a62      	ldr	r2, [pc, #392]	; (800266c <UART_SetConfig+0x1d0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d028      	beq.n	800253a <UART_SetConfig+0x9e>
 80024e8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d020      	beq.n	8002532 <UART_SetConfig+0x96>
 80024f0:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80024f2:	69e2      	ldr	r2, [r4, #28]
 80024f4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024f8:	d021      	beq.n	800253e <UART_SetConfig+0xa2>
    switch (clocksource)
 80024fa:	2b08      	cmp	r3, #8
 80024fc:	f200 80ab 	bhi.w	8002656 <UART_SetConfig+0x1ba>
 8002500:	e8df f003 	tbb	[pc, r3]
 8002504:	a98b816c 	.word	0xa98b816c
 8002508:	a9a9a996 	.word	0xa9a9a996
 800250c:	a0          	.byte	0xa0
 800250d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800250e:	4b58      	ldr	r3, [pc, #352]	; (8002670 <UART_SetConfig+0x1d4>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b03      	cmp	r3, #3
 8002518:	d809      	bhi.n	800252e <UART_SetConfig+0x92>
 800251a:	e8df f003 	tbb	[pc, r3]
 800251e:	0402      	.short	0x0402
 8002520:	0c06      	.short	0x0c06
 8002522:	2300      	movs	r3, #0
 8002524:	e7e5      	b.n	80024f2 <UART_SetConfig+0x56>
 8002526:	2304      	movs	r3, #4
 8002528:	e7e3      	b.n	80024f2 <UART_SetConfig+0x56>
 800252a:	2308      	movs	r3, #8
 800252c:	e7e1      	b.n	80024f2 <UART_SetConfig+0x56>
 800252e:	2310      	movs	r3, #16
 8002530:	e7df      	b.n	80024f2 <UART_SetConfig+0x56>
 8002532:	2300      	movs	r3, #0
 8002534:	e7dd      	b.n	80024f2 <UART_SetConfig+0x56>
 8002536:	2302      	movs	r3, #2
 8002538:	e7db      	b.n	80024f2 <UART_SetConfig+0x56>
 800253a:	2300      	movs	r3, #0
 800253c:	e7d9      	b.n	80024f2 <UART_SetConfig+0x56>
    switch (clocksource)
 800253e:	2b08      	cmp	r3, #8
 8002540:	d849      	bhi.n	80025d6 <UART_SetConfig+0x13a>
 8002542:	e8df f003 	tbb	[pc, r3]
 8002546:	1e05      	.short	0x1e05
 8002548:	48344829 	.word	0x48344829
 800254c:	4848      	.short	0x4848
 800254e:	3f          	.byte	0x3f
 800254f:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8002550:	f7ff faf8 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002554:	6862      	ldr	r2, [r4, #4]
 8002556:	0853      	lsrs	r3, r2, #1
 8002558:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800255c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002560:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002562:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002564:	f1a3 0110 	sub.w	r1, r3, #16
 8002568:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800256c:	4291      	cmp	r1, r2
 800256e:	d875      	bhi.n	800265c <UART_SetConfig+0x1c0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002570:	b29a      	uxth	r2, r3
 8002572:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002576:	f3c3 0342 	ubfx	r3, r3, #1, #3
 800257a:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 800257c:	6822      	ldr	r2, [r4, #0]
 800257e:	60d3      	str	r3, [r2, #12]
 8002580:	e03d      	b.n	80025fe <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002582:	f7ff faf5 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002586:	6862      	ldr	r2, [r4, #4]
 8002588:	0853      	lsrs	r3, r2, #1
 800258a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800258e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002592:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002594:	2000      	movs	r0, #0
        break;
 8002596:	e7e5      	b.n	8002564 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002598:	6862      	ldr	r2, [r4, #4]
 800259a:	0853      	lsrs	r3, r2, #1
 800259c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80025a0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80025a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80025a8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80025aa:	2000      	movs	r0, #0
        break;
 80025ac:	e7da      	b.n	8002564 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetSysClockFreq();
 80025ae:	f7ff f9b9 	bl	8001924 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80025b2:	6862      	ldr	r2, [r4, #4]
 80025b4:	0853      	lsrs	r3, r2, #1
 80025b6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80025ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80025be:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80025c0:	2000      	movs	r0, #0
        break;
 80025c2:	e7cf      	b.n	8002564 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80025c4:	6862      	ldr	r2, [r4, #4]
 80025c6:	0853      	lsrs	r3, r2, #1
 80025c8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80025cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80025d0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80025d2:	2000      	movs	r0, #0
        break;
 80025d4:	e7c6      	b.n	8002564 <UART_SetConfig+0xc8>
        ret = HAL_ERROR;
 80025d6:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80025d8:	2300      	movs	r3, #0
 80025da:	e7c3      	b.n	8002564 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80025dc:	f7ff fab2 	bl	8001b44 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80025e0:	6862      	ldr	r2, [r4, #4]
 80025e2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80025e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80025ea:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80025ec:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80025ee:	f1a3 0110 	sub.w	r1, r3, #16
 80025f2:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80025f6:	4291      	cmp	r1, r2
 80025f8:	d832      	bhi.n	8002660 <UART_SetConfig+0x1c4>
      huart->Instance->BRR = usartdiv;
 80025fa:	6822      	ldr	r2, [r4, #0]
 80025fc:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8002602:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002604:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8002606:	f7ff fab3 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800260a:	6862      	ldr	r2, [r4, #4]
 800260c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002610:	fbb3 f3f2 	udiv	r3, r3, r2
 8002614:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002616:	2000      	movs	r0, #0
        break;
 8002618:	e7e9      	b.n	80025ee <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800261a:	6862      	ldr	r2, [r4, #4]
 800261c:	0853      	lsrs	r3, r2, #1
 800261e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8002622:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8002626:	fbb3 f3f2 	udiv	r3, r3, r2
 800262a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800262c:	2000      	movs	r0, #0
        break;
 800262e:	e7de      	b.n	80025ee <UART_SetConfig+0x152>
        pclk = HAL_RCC_GetSysClockFreq();
 8002630:	f7ff f978 	bl	8001924 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002634:	6862      	ldr	r2, [r4, #4]
 8002636:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800263a:	fbb3 f3f2 	udiv	r3, r3, r2
 800263e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002640:	2000      	movs	r0, #0
        break;
 8002642:	e7d4      	b.n	80025ee <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002644:	6862      	ldr	r2, [r4, #4]
 8002646:	0853      	lsrs	r3, r2, #1
 8002648:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800264c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002650:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002652:	2000      	movs	r0, #0
        break;
 8002654:	e7cb      	b.n	80025ee <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 8002656:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002658:	2300      	movs	r3, #0
 800265a:	e7c8      	b.n	80025ee <UART_SetConfig+0x152>
      ret = HAL_ERROR;
 800265c:	2001      	movs	r0, #1
 800265e:	e7ce      	b.n	80025fe <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 8002660:	2001      	movs	r0, #1
 8002662:	e7cc      	b.n	80025fe <UART_SetConfig+0x162>
 8002664:	efff69f3 	.word	0xefff69f3
 8002668:	40013800 	.word	0x40013800
 800266c:	40004400 	.word	0x40004400
 8002670:	40021000 	.word	0x40021000

08002674 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002674:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002676:	f013 0f01 	tst.w	r3, #1
 800267a:	d006      	beq.n	800268a <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800267c:	6802      	ldr	r2, [r0, #0]
 800267e:	6853      	ldr	r3, [r2, #4]
 8002680:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002684:	6a81      	ldr	r1, [r0, #40]	; 0x28
 8002686:	430b      	orrs	r3, r1
 8002688:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800268a:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800268c:	f013 0f02 	tst.w	r3, #2
 8002690:	d006      	beq.n	80026a0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002692:	6802      	ldr	r2, [r0, #0]
 8002694:	6853      	ldr	r3, [r2, #4]
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 800269c:	430b      	orrs	r3, r1
 800269e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80026a0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026a2:	f013 0f04 	tst.w	r3, #4
 80026a6:	d006      	beq.n	80026b6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80026a8:	6802      	ldr	r2, [r0, #0]
 80026aa:	6853      	ldr	r3, [r2, #4]
 80026ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026b0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80026b2:	430b      	orrs	r3, r1
 80026b4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80026b6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026b8:	f013 0f08 	tst.w	r3, #8
 80026bc:	d006      	beq.n	80026cc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80026be:	6802      	ldr	r2, [r0, #0]
 80026c0:	6853      	ldr	r3, [r2, #4]
 80026c2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80026c6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80026c8:	430b      	orrs	r3, r1
 80026ca:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80026cc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026ce:	f013 0f10 	tst.w	r3, #16
 80026d2:	d006      	beq.n	80026e2 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80026d4:	6802      	ldr	r2, [r0, #0]
 80026d6:	6893      	ldr	r3, [r2, #8]
 80026d8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80026dc:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80026de:	430b      	orrs	r3, r1
 80026e0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80026e2:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026e4:	f013 0f20 	tst.w	r3, #32
 80026e8:	d006      	beq.n	80026f8 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80026ea:	6802      	ldr	r2, [r0, #0]
 80026ec:	6893      	ldr	r3, [r2, #8]
 80026ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80026f2:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80026f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80026fa:	f013 0f40 	tst.w	r3, #64	; 0x40
 80026fe:	d00a      	beq.n	8002716 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002700:	6802      	ldr	r2, [r0, #0]
 8002702:	6853      	ldr	r3, [r2, #4]
 8002704:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002708:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800270a:	430b      	orrs	r3, r1
 800270c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800270e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002714:	d00b      	beq.n	800272e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002716:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002718:	f013 0f80 	tst.w	r3, #128	; 0x80
 800271c:	d006      	beq.n	800272c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800271e:	6802      	ldr	r2, [r0, #0]
 8002720:	6853      	ldr	r3, [r2, #4]
 8002722:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002726:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002728:	430b      	orrs	r3, r1
 800272a:	6053      	str	r3, [r2, #4]
}
 800272c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800272e:	6802      	ldr	r2, [r0, #0]
 8002730:	6853      	ldr	r3, [r2, #4]
 8002732:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002736:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002738:	430b      	orrs	r3, r1
 800273a:	6053      	str	r3, [r2, #4]
 800273c:	e7eb      	b.n	8002716 <UART_AdvFeatureConfig+0xa2>

0800273e <UART_WaitOnFlagUntilTimeout>:
{
 800273e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002742:	4604      	mov	r4, r0
 8002744:	460f      	mov	r7, r1
 8002746:	4616      	mov	r6, r2
 8002748:	4698      	mov	r8, r3
 800274a:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	69db      	ldr	r3, [r3, #28]
 8002750:	ea37 0303 	bics.w	r3, r7, r3
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	42b3      	cmp	r3, r6
 800275c:	d13a      	bne.n	80027d4 <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 800275e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8002762:	d0f3      	beq.n	800274c <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002764:	f7fe f9ec 	bl	8000b40 <HAL_GetTick>
 8002768:	eba0 0008 	sub.w	r0, r0, r8
 800276c:	42a8      	cmp	r0, r5
 800276e:	d81f      	bhi.n	80027b0 <UART_WaitOnFlagUntilTimeout+0x72>
 8002770:	b1f5      	cbz	r5, 80027b0 <UART_WaitOnFlagUntilTimeout+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	f012 0f04 	tst.w	r2, #4
 800277a:	d0e7      	beq.n	800274c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800277c:	69da      	ldr	r2, [r3, #28]
 800277e:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8002782:	d0e3      	beq.n	800274c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002784:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002788:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800278a:	6822      	ldr	r2, [r4, #0]
 800278c:	6813      	ldr	r3, [r2, #0]
 800278e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002792:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002794:	6822      	ldr	r2, [r4, #0]
 8002796:	6893      	ldr	r3, [r2, #8]
 8002798:	f023 0301 	bic.w	r3, r3, #1
 800279c:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 800279e:	2320      	movs	r3, #32
 80027a0:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80027a2:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80027a4:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80027a6:	2300      	movs	r3, #0
 80027a8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80027ac:	2003      	movs	r0, #3
 80027ae:	e012      	b.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80027b0:	6822      	ldr	r2, [r4, #0]
 80027b2:	6813      	ldr	r3, [r2, #0]
 80027b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80027b8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027ba:	6822      	ldr	r2, [r4, #0]
 80027bc:	6893      	ldr	r3, [r2, #8]
 80027be:	f023 0301 	bic.w	r3, r3, #1
 80027c2:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80027c4:	2320      	movs	r3, #32
 80027c6:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80027c8:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80027ca:	2300      	movs	r3, #0
 80027cc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 80027d0:	2003      	movs	r0, #3
 80027d2:	e000      	b.n	80027d6 <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 80027d4:	2000      	movs	r0, #0
}
 80027d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080027da <UART_CheckIdleState>:
{
 80027da:	b530      	push	{r4, r5, lr}
 80027dc:	b083      	sub	sp, #12
 80027de:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027e0:	2300      	movs	r3, #0
 80027e2:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80027e4:	f7fe f9ac 	bl	8000b40 <HAL_GetTick>
 80027e8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80027ea:	6823      	ldr	r3, [r4, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f013 0f08 	tst.w	r3, #8
 80027f2:	d10c      	bne.n	800280e <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80027f4:	6823      	ldr	r3, [r4, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f013 0f04 	tst.w	r3, #4
 80027fc:	d115      	bne.n	800282a <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 80027fe:	2320      	movs	r3, #32
 8002800:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002802:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8002804:	2000      	movs	r0, #0
 8002806:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800280a:	b003      	add	sp, #12
 800280c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800280e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	4603      	mov	r3, r0
 8002816:	2200      	movs	r2, #0
 8002818:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800281c:	4620      	mov	r0, r4
 800281e:	f7ff ff8e 	bl	800273e <UART_WaitOnFlagUntilTimeout>
 8002822:	2800      	cmp	r0, #0
 8002824:	d0e6      	beq.n	80027f4 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002826:	2003      	movs	r0, #3
 8002828:	e7ef      	b.n	800280a <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800282a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800282e:	9300      	str	r3, [sp, #0]
 8002830:	462b      	mov	r3, r5
 8002832:	2200      	movs	r2, #0
 8002834:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002838:	4620      	mov	r0, r4
 800283a:	f7ff ff80 	bl	800273e <UART_WaitOnFlagUntilTimeout>
 800283e:	2800      	cmp	r0, #0
 8002840:	d0dd      	beq.n	80027fe <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8002842:	2003      	movs	r0, #3
 8002844:	e7e1      	b.n	800280a <UART_CheckIdleState+0x30>

08002846 <HAL_UART_Init>:
  if (huart == NULL)
 8002846:	b368      	cbz	r0, 80028a4 <HAL_UART_Init+0x5e>
{
 8002848:	b510      	push	{r4, lr}
 800284a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800284c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800284e:	b303      	cbz	r3, 8002892 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002850:	2324      	movs	r3, #36	; 0x24
 8002852:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8002854:	6822      	ldr	r2, [r4, #0]
 8002856:	6813      	ldr	r3, [r2, #0]
 8002858:	f023 0301 	bic.w	r3, r3, #1
 800285c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800285e:	4620      	mov	r0, r4
 8002860:	f7ff fe1c 	bl	800249c <UART_SetConfig>
 8002864:	2801      	cmp	r0, #1
 8002866:	d013      	beq.n	8002890 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002868:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800286a:	b9bb      	cbnz	r3, 800289c <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800286c:	6822      	ldr	r2, [r4, #0]
 800286e:	6853      	ldr	r3, [r2, #4]
 8002870:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8002874:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002876:	6822      	ldr	r2, [r4, #0]
 8002878:	6893      	ldr	r3, [r2, #8]
 800287a:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 800287e:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002880:	6822      	ldr	r2, [r4, #0]
 8002882:	6813      	ldr	r3, [r2, #0]
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 800288a:	4620      	mov	r0, r4
 800288c:	f7ff ffa5 	bl	80027da <UART_CheckIdleState>
}
 8002890:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002892:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8002896:	f7fd ff5d 	bl	8000754 <HAL_UART_MspInit>
 800289a:	e7d9      	b.n	8002850 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff fee9 	bl	8002674 <UART_AdvFeatureConfig>
 80028a2:	e7e3      	b.n	800286c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80028a4:	2001      	movs	r0, #1
}
 80028a6:	4770      	bx	lr

080028a8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80028a8:	4770      	bx	lr
	...

080028ac <__libc_init_array>:
 80028ac:	b570      	push	{r4, r5, r6, lr}
 80028ae:	4e0d      	ldr	r6, [pc, #52]	; (80028e4 <__libc_init_array+0x38>)
 80028b0:	4c0d      	ldr	r4, [pc, #52]	; (80028e8 <__libc_init_array+0x3c>)
 80028b2:	1ba4      	subs	r4, r4, r6
 80028b4:	10a4      	asrs	r4, r4, #2
 80028b6:	2500      	movs	r5, #0
 80028b8:	42a5      	cmp	r5, r4
 80028ba:	d109      	bne.n	80028d0 <__libc_init_array+0x24>
 80028bc:	4e0b      	ldr	r6, [pc, #44]	; (80028ec <__libc_init_array+0x40>)
 80028be:	4c0c      	ldr	r4, [pc, #48]	; (80028f0 <__libc_init_array+0x44>)
 80028c0:	f000 f820 	bl	8002904 <_init>
 80028c4:	1ba4      	subs	r4, r4, r6
 80028c6:	10a4      	asrs	r4, r4, #2
 80028c8:	2500      	movs	r5, #0
 80028ca:	42a5      	cmp	r5, r4
 80028cc:	d105      	bne.n	80028da <__libc_init_array+0x2e>
 80028ce:	bd70      	pop	{r4, r5, r6, pc}
 80028d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028d4:	4798      	blx	r3
 80028d6:	3501      	adds	r5, #1
 80028d8:	e7ee      	b.n	80028b8 <__libc_init_array+0xc>
 80028da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028de:	4798      	blx	r3
 80028e0:	3501      	adds	r5, #1
 80028e2:	e7f2      	b.n	80028ca <__libc_init_array+0x1e>
 80028e4:	080029f4 	.word	0x080029f4
 80028e8:	080029f4 	.word	0x080029f4
 80028ec:	080029f4 	.word	0x080029f4
 80028f0:	080029f8 	.word	0x080029f8

080028f4 <memset>:
 80028f4:	4402      	add	r2, r0
 80028f6:	4603      	mov	r3, r0
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d100      	bne.n	80028fe <memset+0xa>
 80028fc:	4770      	bx	lr
 80028fe:	f803 1b01 	strb.w	r1, [r3], #1
 8002902:	e7f9      	b.n	80028f8 <memset+0x4>

08002904 <_init>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr

08002910 <_fini>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	bf00      	nop
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr
