
20790988_Skripsie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a1c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000310  08005ba8  08005ba8  00015ba8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005eb8  08005eb8  00020114  2**0
                  CONTENTS
  4 .ARM          00000000  08005eb8  08005eb8  00020114  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005eb8  08005eb8  00020114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005eb8  08005eb8  00015eb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ebc  08005ebc  00015ebc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000114  20000000  08005ec0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000768  20000114  08005fd4  00020114  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000087c  08005fd4  0002087c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020114  2**0
                  CONTENTS, READONLY
 12 .debug_info   000145b9  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002bef  00000000  00000000  000346fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000a456  00000000  00000000  000372ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000ea0  00000000  00000000  00041748  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000e68  00000000  00000000  000425e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001e177  00000000  00000000  00043450  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000c290  00000000  00000000  000615c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000aab5b  00000000  00000000  0006d857  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001183b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d80  00000000  00000000  00118430  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000114 	.word	0x20000114
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b8c 	.word	0x08005b8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000118 	.word	0x20000118
 80001c4:	08005b8c 	.word	0x08005b8c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <days_in_year>:
}



uint32_t days_in_year(uint32_t year, uint32_t month, uint32_t day)
{
 8000b30:	b4f0      	push	{r4, r5, r6, r7}
 8000b32:	b08c      	sub	sp, #48	; 0x30
 8000b34:	4684      	mov	ip, r0
 8000b36:	460f      	mov	r7, r1
 8000b38:	4616      	mov	r6, r2
    uint32_t days_in_month[] =
 8000b3a:	466c      	mov	r4, sp
 8000b3c:	4d0f      	ldr	r5, [pc, #60]	; (8000b7c <days_in_year+0x4c>)
 8000b3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000b4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };
    uint32_t day_of_year = day;
    for (uint32_t i = 0; i < month - 1; i++)
 8000b4e:	2300      	movs	r3, #0
 8000b50:	e006      	b.n	8000b60 <days_in_year+0x30>
    {
        day_of_year += days_in_month[i];
 8000b52:	aa0c      	add	r2, sp, #48	; 0x30
 8000b54:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8000b58:	f852 2c30 	ldr.w	r2, [r2, #-48]
 8000b5c:	4416      	add	r6, r2
    for (uint32_t i = 0; i < month - 1; i++)
 8000b5e:	3301      	adds	r3, #1
 8000b60:	1e7a      	subs	r2, r7, #1
 8000b62:	429a      	cmp	r2, r3
 8000b64:	d8f5      	bhi.n	8000b52 <days_in_year+0x22>
    }

    if (year % 4 == 0 && month > 2)
 8000b66:	f01c 0f03 	tst.w	ip, #3
 8000b6a:	d102      	bne.n	8000b72 <days_in_year+0x42>
 8000b6c:	2f02      	cmp	r7, #2
 8000b6e:	d900      	bls.n	8000b72 <days_in_year+0x42>
    {
        day_of_year++;
 8000b70:	3601      	adds	r6, #1
    }
    return day_of_year;
}
 8000b72:	4630      	mov	r0, r6
 8000b74:	b00c      	add	sp, #48	; 0x30
 8000b76:	bcf0      	pop	{r4, r5, r6, r7}
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	08005ba8 	.word	0x08005ba8

08000b80 <insert_binary_into_string>:

void insert_binary_into_string(char *p_timecode, uint32_t num, uint32_t len)
{
 8000b80:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000b84:	4605      	mov	r5, r0
 8000b86:	4614      	mov	r4, r2

    if (num < 10 && num < pow(2, len))
 8000b88:	2909      	cmp	r1, #9
 8000b8a:	d901      	bls.n	8000b90 <insert_binary_into_string+0x10>
    {
        for (uint32_t i = 0; i < len; i++)
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	e025      	b.n	8000bdc <insert_binary_into_string+0x5c>
 8000b90:	460e      	mov	r6, r1
    if (num < 10 && num < pow(2, len))
 8000b92:	4608      	mov	r0, r1
 8000b94:	f7ff fc5a 	bl	800044c <__aeabi_ui2d>
 8000b98:	4680      	mov	r8, r0
 8000b9a:	4689      	mov	r9, r1
 8000b9c:	4620      	mov	r0, r4
 8000b9e:	f7ff fc55 	bl	800044c <__aeabi_ui2d>
 8000ba2:	ec41 0b11 	vmov	d1, r0, r1
 8000ba6:	ed9f 0b10 	vldr	d0, [pc, #64]	; 8000be8 <insert_binary_into_string+0x68>
 8000baa:	f003 f85d 	bl	8003c68 <pow>
 8000bae:	ec53 2b10 	vmov	r2, r3, d0
 8000bb2:	4640      	mov	r0, r8
 8000bb4:	4649      	mov	r1, r9
 8000bb6:	f7ff ff35 	bl	8000a24 <__aeabi_dcmplt>
 8000bba:	2800      	cmp	r0, #0
 8000bbc:	d0e6      	beq.n	8000b8c <insert_binary_into_string+0xc>
        for (uint32_t i = 0; i < len; i++)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	e006      	b.n	8000bd0 <insert_binary_into_string+0x50>
        {
            p_timecode[i] = '0' + (num >> i & 1);
 8000bc2:	fa26 f302 	lsr.w	r3, r6, r2
 8000bc6:	f003 0301 	and.w	r3, r3, #1
 8000bca:	3330      	adds	r3, #48	; 0x30
 8000bcc:	54ab      	strb	r3, [r5, r2]
        for (uint32_t i = 0; i < len; i++)
 8000bce:	3201      	adds	r2, #1
 8000bd0:	42a2      	cmp	r2, r4
 8000bd2:	d3f6      	bcc.n	8000bc2 <insert_binary_into_string+0x42>
 8000bd4:	e004      	b.n	8000be0 <insert_binary_into_string+0x60>
    }
    else
    {
        for (uint32_t i = 0; i < len; i++)
        {
            p_timecode[i] = 'E';
 8000bd6:	2245      	movs	r2, #69	; 0x45
 8000bd8:	54ea      	strb	r2, [r5, r3]
        for (uint32_t i = 0; i < len; i++)
 8000bda:	3301      	adds	r3, #1
 8000bdc:	42a3      	cmp	r3, r4
 8000bde:	d3fa      	bcc.n	8000bd6 <insert_binary_into_string+0x56>
        }
    }
}
 8000be0:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8000be4:	f3af 8000 	nop.w
 8000be8:	00000000 	.word	0x00000000
 8000bec:	40000000 	.word	0x40000000

08000bf0 <equals>:
}

//checks if two strings have the same characters up until length len
//if ignoreCase is true, capitals and lower case letters are considered equal
bool equals(char *str1, char *str2, uint32_t len, bool ignoreCase)
{
 8000bf0:	b4f0      	push	{r4, r5, r6, r7}
    uint32_t i = 0;
    bool equal = true;
    char c1, c2;

    for (i = 0; i < len; i++)
 8000bf2:	2400      	movs	r4, #0
 8000bf4:	e012      	b.n	8000c1c <equals+0x2c>
                break;
            }
        }
        else
        {
            c1 = str1[i];
 8000bf6:	5d06      	ldrb	r6, [r0, r4]
            c2 = str2[i];
 8000bf8:	5d0d      	ldrb	r5, [r1, r4]
            if (c1 >= 'a' && c1 <= 'z')
 8000bfa:	f1a6 0761 	sub.w	r7, r6, #97	; 0x61
 8000bfe:	b2ff      	uxtb	r7, r7
 8000c00:	2f19      	cmp	r7, #25
 8000c02:	d801      	bhi.n	8000c08 <equals+0x18>
            {
                c1 -= 32;
 8000c04:	3e20      	subs	r6, #32
 8000c06:	b2f6      	uxtb	r6, r6
            }

            if (c2 >= 'a' && c2 <= 'z')
 8000c08:	f1a5 0761 	sub.w	r7, r5, #97	; 0x61
 8000c0c:	b2ff      	uxtb	r7, r7
 8000c0e:	2f19      	cmp	r7, #25
 8000c10:	d801      	bhi.n	8000c16 <equals+0x26>
            {
                c2 -= 32;
 8000c12:	3d20      	subs	r5, #32
 8000c14:	b2ed      	uxtb	r5, r5
            }

            if (c1 != c2)
 8000c16:	42ae      	cmp	r6, r5
 8000c18:	d10d      	bne.n	8000c36 <equals+0x46>
    for (i = 0; i < len; i++)
 8000c1a:	3401      	adds	r4, #1
 8000c1c:	4294      	cmp	r4, r2
 8000c1e:	d207      	bcs.n	8000c30 <equals+0x40>
        if (!ignoreCase)
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d1e8      	bne.n	8000bf6 <equals+0x6>
            if (str1[i] != str2[i])
 8000c24:	5d06      	ldrb	r6, [r0, r4]
 8000c26:	5d0d      	ldrb	r5, [r1, r4]
 8000c28:	42ae      	cmp	r6, r5
 8000c2a:	d0f6      	beq.n	8000c1a <equals+0x2a>
                equal = false;
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	e000      	b.n	8000c32 <equals+0x42>
    bool equal = true;
 8000c30:	2001      	movs	r0, #1
            }
        }
    }

    return equal;
}
 8000c32:	bcf0      	pop	{r4, r5, r6, r7}
 8000c34:	4770      	bx	lr
                equal = false;
 8000c36:	2000      	movs	r0, #0
 8000c38:	e7fb      	b.n	8000c32 <equals+0x42>

08000c3a <parse_char>:

//converts a character to its numerical equivalent for example '3' -> 3
uint32_t parse_char(char c)
{
    return (c - '0');
}
 8000c3a:	3830      	subs	r0, #48	; 0x30
 8000c3c:	4770      	bx	lr
	...

08000c40 <parse_nmea>:
{
 8000c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c44:	b083      	sub	sp, #12
 8000c46:	4605      	mov	r5, r0
 8000c48:	460e      	mov	r6, r1
    char **p_strings = malloc((sizeof(char*)) * 11);
 8000c4a:	202c      	movs	r0, #44	; 0x2c
 8000c4c:	f002 fef0 	bl	8003a30 <malloc>
 8000c50:	4604      	mov	r4, r0
    bool is_GPRMC_msg = equals("GNRMC", &GPSString[0], 5, false);
 8000c52:	2300      	movs	r3, #0
 8000c54:	2205      	movs	r2, #5
 8000c56:	4629      	mov	r1, r5
 8000c58:	483e      	ldr	r0, [pc, #248]	; (8000d54 <parse_nmea+0x114>)
 8000c5a:	f7ff ffc9 	bl	8000bf0 <equals>
    if (is_GPRMC_msg)
 8000c5e:	9001      	str	r0, [sp, #4]
 8000c60:	2800      	cmp	r0, #0
 8000c62:	d067      	beq.n	8000d34 <parse_nmea+0xf4>
    uint32_t numStrings = 0;
 8000c64:	2100      	movs	r1, #0
        for (i = 0; i < GPSStringLen; i++)
 8000c66:	460b      	mov	r3, r1
 8000c68:	e000      	b.n	8000c6c <parse_nmea+0x2c>
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	42b3      	cmp	r3, r6
 8000c6e:	d208      	bcs.n	8000c82 <parse_nmea+0x42>
            if (GPSString[i] == ',')
 8000c70:	5cea      	ldrb	r2, [r5, r3]
 8000c72:	2a2c      	cmp	r2, #44	; 0x2c
 8000c74:	d1f9      	bne.n	8000c6a <parse_nmea+0x2a>
                p_strings[numStrings] = &GPSString[i + 1];
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	442a      	add	r2, r5
 8000c7a:	f844 2021 	str.w	r2, [r4, r1, lsl #2]
                numStrings++;
 8000c7e:	3101      	adds	r1, #1
 8000c80:	e7f3      	b.n	8000c6a <parse_nmea+0x2a>
        if (p_strings[1] - p_strings[0] != 1)
 8000c82:	6863      	ldr	r3, [r4, #4]
 8000c84:	6825      	ldr	r5, [r4, #0]
 8000c86:	1b5b      	subs	r3, r3, r5
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d05a      	beq.n	8000d42 <parse_nmea+0x102>
            l_hour = 10 * parse_char(time[0]) + parse_char(time[1]);
 8000c8c:	7828      	ldrb	r0, [r5, #0]
 8000c8e:	f7ff ffd4 	bl	8000c3a <parse_char>
 8000c92:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000c96:	ea4f 0a40 	mov.w	sl, r0, lsl #1
 8000c9a:	7868      	ldrb	r0, [r5, #1]
 8000c9c:	f7ff ffcd 	bl	8000c3a <parse_char>
 8000ca0:	4482      	add	sl, r0
            l_min = 10 * parse_char(time[2]) + parse_char(time[3]);
 8000ca2:	78a8      	ldrb	r0, [r5, #2]
 8000ca4:	f7ff ffc9 	bl	8000c3a <parse_char>
 8000ca8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000cac:	ea4f 0940 	mov.w	r9, r0, lsl #1
 8000cb0:	78e8      	ldrb	r0, [r5, #3]
 8000cb2:	f7ff ffc2 	bl	8000c3a <parse_char>
 8000cb6:	4481      	add	r9, r0
            l_sec = 10 * parse_char(time[4]) + parse_char(time[5]);
 8000cb8:	7928      	ldrb	r0, [r5, #4]
 8000cba:	f7ff ffbe 	bl	8000c3a <parse_char>
 8000cbe:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000cc2:	0047      	lsls	r7, r0, #1
 8000cc4:	7968      	ldrb	r0, [r5, #5]
 8000cc6:	f7ff ffb8 	bl	8000c3a <parse_char>
 8000cca:	4407      	add	r7, r0
        if (p_strings[9] - p_strings[8] != 1)
 8000ccc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000cce:	6a25      	ldr	r5, [r4, #32]
 8000cd0:	1b5b      	subs	r3, r3, r5
 8000cd2:	2b01      	cmp	r3, #1
 8000cd4:	d039      	beq.n	8000d4a <parse_nmea+0x10a>
            l_day = 10 * parse_char(p_date[0]) + parse_char(p_date[1]);
 8000cd6:	7828      	ldrb	r0, [r5, #0]
 8000cd8:	f7ff ffaf 	bl	8000c3a <parse_char>
 8000cdc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000ce0:	0046      	lsls	r6, r0, #1
 8000ce2:	7868      	ldrb	r0, [r5, #1]
 8000ce4:	f7ff ffa9 	bl	8000c3a <parse_char>
 8000ce8:	4406      	add	r6, r0
            l_month = 10 * parse_char(p_date[2]) + parse_char(p_date[3]);
 8000cea:	78a8      	ldrb	r0, [r5, #2]
 8000cec:	f7ff ffa5 	bl	8000c3a <parse_char>
 8000cf0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000cf4:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8000cf8:	78e8      	ldrb	r0, [r5, #3]
 8000cfa:	f7ff ff9e 	bl	8000c3a <parse_char>
 8000cfe:	4480      	add	r8, r0
            l_year = 10 * parse_char(p_date[4]) + parse_char(p_date[5]);
 8000d00:	7928      	ldrb	r0, [r5, #4]
 8000d02:	f7ff ff9a 	bl	8000c3a <parse_char>
 8000d06:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8000d0a:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8000d0e:	7968      	ldrb	r0, [r5, #5]
 8000d10:	f7ff ff93 	bl	8000c3a <parse_char>
 8000d14:	4458      	add	r0, fp
        hour = l_hour;
 8000d16:	4b10      	ldr	r3, [pc, #64]	; (8000d58 <parse_nmea+0x118>)
 8000d18:	f8c3 a000 	str.w	sl, [r3]
        min = l_min;
 8000d1c:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <parse_nmea+0x11c>)
 8000d1e:	f8c3 9000 	str.w	r9, [r3]
        sec = l_sec;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <parse_nmea+0x120>)
 8000d24:	601f      	str	r7, [r3, #0]
        year = l_year;
 8000d26:	4b0f      	ldr	r3, [pc, #60]	; (8000d64 <parse_nmea+0x124>)
 8000d28:	6018      	str	r0, [r3, #0]
        month = l_month;
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <parse_nmea+0x128>)
 8000d2c:	f8c3 8000 	str.w	r8, [r3]
        day = l_day;
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <parse_nmea+0x12c>)
 8000d32:	601e      	str	r6, [r3, #0]
    free(p_strings);
 8000d34:	4620      	mov	r0, r4
 8000d36:	f002 fe83 	bl	8003a40 <free>
}
 8000d3a:	9801      	ldr	r0, [sp, #4]
 8000d3c:	b003      	add	sp, #12
 8000d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    uint32_t l_sec = 0;
 8000d42:	2700      	movs	r7, #0
    uint32_t l_min = 0;
 8000d44:	46b9      	mov	r9, r7
    uint32_t l_hour = 0;
 8000d46:	46ba      	mov	sl, r7
 8000d48:	e7c0      	b.n	8000ccc <parse_nmea+0x8c>
    uint32_t l_day = 0;
 8000d4a:	2600      	movs	r6, #0
    uint32_t l_month = 0;
 8000d4c:	46b0      	mov	r8, r6
    uint32_t l_year = 0;
 8000d4e:	4630      	mov	r0, r6
 8000d50:	e7e1      	b.n	8000d16 <parse_nmea+0xd6>
 8000d52:	bf00      	nop
 8000d54:	08005bd8 	.word	0x08005bd8
 8000d58:	20000130 	.word	0x20000130
 8000d5c:	20000134 	.word	0x20000134
 8000d60:	20000138 	.word	0x20000138
 8000d64:	20000070 	.word	0x20000070
 8000d68:	20000004 	.word	0x20000004
 8000d6c:	20000000 	.word	0x20000000

08000d70 <fill_bool>:
//    }
//}

void fill_bool(bool target[], uint32_t ones, uint32_t length)
{
    for (uint32_t i = 0; i<length; i++)
 8000d70:	2300      	movs	r3, #0
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d20e      	bcs.n	8000d94 <fill_bool+0x24>
{
 8000d76:	b410      	push	{r4}
 8000d78:	e004      	b.n	8000d84 <fill_bool+0x14>
        {
            target[i] = true;
        }
        else
        {
            target[i] = false;
 8000d7a:	2400      	movs	r4, #0
 8000d7c:	54c4      	strb	r4, [r0, r3]
    for (uint32_t i = 0; i<length; i++)
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d204      	bcs.n	8000d8e <fill_bool+0x1e>
        if (i<ones)
 8000d84:	428b      	cmp	r3, r1
 8000d86:	d2f8      	bcs.n	8000d7a <fill_bool+0xa>
            target[i] = true;
 8000d88:	2401      	movs	r4, #1
 8000d8a:	54c4      	strb	r4, [r0, r3]
 8000d8c:	e7f7      	b.n	8000d7e <fill_bool+0xe>
        }
    }
}
 8000d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	4770      	bx	lr
	...

08000d98 <concat_timecode>:
{
 8000d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    insert_binary_into_string(&timecode[1], sec % 10, 4);
 8000d9c:	4f9b      	ldr	r7, [pc, #620]	; (800100c <concat_timecode+0x274>)
 8000d9e:	6838      	ldr	r0, [r7, #0]
 8000da0:	4d9b      	ldr	r5, [pc, #620]	; (8001010 <concat_timecode+0x278>)
 8000da2:	fba5 2300 	umull	r2, r3, r5, r0
 8000da6:	08db      	lsrs	r3, r3, #3
 8000da8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dac:	0059      	lsls	r1, r3, #1
 8000dae:	4c99      	ldr	r4, [pc, #612]	; (8001014 <concat_timecode+0x27c>)
 8000db0:	2204      	movs	r2, #4
 8000db2:	1a41      	subs	r1, r0, r1
 8000db4:	1c60      	adds	r0, r4, #1
 8000db6:	f7ff fee3 	bl	8000b80 <insert_binary_into_string>
    insert_binary_into_string(&timecode[6], sec / 10, 3);
 8000dba:	683b      	ldr	r3, [r7, #0]
 8000dbc:	fba5 2303 	umull	r2, r3, r5, r3
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa23 f102 	lsr.w	r1, r3, r2
 8000dc6:	1da0      	adds	r0, r4, #6
 8000dc8:	f7ff feda 	bl	8000b80 <insert_binary_into_string>
    insert_binary_into_string(&timecode[10], min % 10, 4);
 8000dcc:	f8df 8258 	ldr.w	r8, [pc, #600]	; 8001028 <concat_timecode+0x290>
 8000dd0:	f8d8 0000 	ldr.w	r0, [r8]
 8000dd4:	fba5 2300 	umull	r2, r3, r5, r0
 8000dd8:	08db      	lsrs	r3, r3, #3
 8000dda:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000dde:	0059      	lsls	r1, r3, #1
 8000de0:	2204      	movs	r2, #4
 8000de2:	1a41      	subs	r1, r0, r1
 8000de4:	f104 000a 	add.w	r0, r4, #10
 8000de8:	f7ff feca 	bl	8000b80 <insert_binary_into_string>
    insert_binary_into_string(&timecode[15], min / 10, 3);
 8000dec:	f8d8 3000 	ldr.w	r3, [r8]
 8000df0:	fba5 2303 	umull	r2, r3, r5, r3
 8000df4:	2203      	movs	r2, #3
 8000df6:	fa23 f102 	lsr.w	r1, r3, r2
 8000dfa:	f104 000f 	add.w	r0, r4, #15
 8000dfe:	f7ff febf 	bl	8000b80 <insert_binary_into_string>
    insert_binary_into_string(&timecode[20], hour % 10, 4);
 8000e02:	f8df 9228 	ldr.w	r9, [pc, #552]	; 800102c <concat_timecode+0x294>
 8000e06:	f8d9 0000 	ldr.w	r0, [r9]
 8000e0a:	fba5 2300 	umull	r2, r3, r5, r0
 8000e0e:	08db      	lsrs	r3, r3, #3
 8000e10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e14:	0059      	lsls	r1, r3, #1
 8000e16:	2204      	movs	r2, #4
 8000e18:	1a41      	subs	r1, r0, r1
 8000e1a:	f104 0014 	add.w	r0, r4, #20
 8000e1e:	f7ff feaf 	bl	8000b80 <insert_binary_into_string>
    insert_binary_into_string(&timecode[25], hour / 10, 2);
 8000e22:	f8d9 3000 	ldr.w	r3, [r9]
 8000e26:	fba5 2303 	umull	r2, r3, r5, r3
 8000e2a:	2202      	movs	r2, #2
 8000e2c:	08d9      	lsrs	r1, r3, #3
 8000e2e:	f104 0019 	add.w	r0, r4, #25
 8000e32:	f7ff fea5 	bl	8000b80 <insert_binary_into_string>
    uint32_t day_of_year = days_in_year(year, month, day);
 8000e36:	f8df a1f8 	ldr.w	sl, [pc, #504]	; 8001030 <concat_timecode+0x298>
 8000e3a:	4b77      	ldr	r3, [pc, #476]	; (8001018 <concat_timecode+0x280>)
 8000e3c:	681a      	ldr	r2, [r3, #0]
 8000e3e:	4b77      	ldr	r3, [pc, #476]	; (800101c <concat_timecode+0x284>)
 8000e40:	6819      	ldr	r1, [r3, #0]
 8000e42:	f8da 0000 	ldr.w	r0, [sl]
 8000e46:	f7ff fe73 	bl	8000b30 <days_in_year>
 8000e4a:	4606      	mov	r6, r0
    insert_binary_into_string(&timecode[30], day_of_year % 10, 4);
 8000e4c:	fba5 2300 	umull	r2, r3, r5, r0
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000e56:	0059      	lsls	r1, r3, #1
 8000e58:	2204      	movs	r2, #4
 8000e5a:	1a41      	subs	r1, r0, r1
 8000e5c:	f104 001e 	add.w	r0, r4, #30
 8000e60:	f7ff fe8e 	bl	8000b80 <insert_binary_into_string>
    insert_binary_into_string(&timecode[35], (day_of_year % 100) / 10, 4);
 8000e64:	4b6e      	ldr	r3, [pc, #440]	; (8001020 <concat_timecode+0x288>)
 8000e66:	fba3 2b06 	umull	r2, fp, r3, r6
 8000e6a:	ea4f 135b 	mov.w	r3, fp, lsr #5
 8000e6e:	2264      	movs	r2, #100	; 0x64
 8000e70:	fb02 6313 	mls	r3, r2, r3, r6
 8000e74:	fba5 0303 	umull	r0, r3, r5, r3
 8000e78:	2204      	movs	r2, #4
 8000e7a:	08d9      	lsrs	r1, r3, #3
 8000e7c:	f104 0023 	add.w	r0, r4, #35	; 0x23
 8000e80:	f7ff fe7e 	bl	8000b80 <insert_binary_into_string>
    insert_binary_into_string(&timecode[40], day_of_year / 100, 2);
 8000e84:	2202      	movs	r2, #2
 8000e86:	ea4f 115b 	mov.w	r1, fp, lsr #5
 8000e8a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8000e8e:	f7ff fe77 	bl	8000b80 <insert_binary_into_string>
    insert_binary_into_string(&timecode[50], year % 10, 4);
 8000e92:	f8da 0000 	ldr.w	r0, [sl]
 8000e96:	fba5 6300 	umull	r6, r3, r5, r0
 8000e9a:	08db      	lsrs	r3, r3, #3
 8000e9c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000ea0:	0059      	lsls	r1, r3, #1
 8000ea2:	2204      	movs	r2, #4
 8000ea4:	1a41      	subs	r1, r0, r1
 8000ea6:	f104 0032 	add.w	r0, r4, #50	; 0x32
 8000eaa:	f7ff fe69 	bl	8000b80 <insert_binary_into_string>
    insert_binary_into_string(&timecode[55], (year % 100) / 10, 4);
 8000eae:	f8da 2000 	ldr.w	r2, [sl]
 8000eb2:	4b5b      	ldr	r3, [pc, #364]	; (8001020 <concat_timecode+0x288>)
 8000eb4:	fba3 0302 	umull	r0, r3, r3, r2
 8000eb8:	095b      	lsrs	r3, r3, #5
 8000eba:	2164      	movs	r1, #100	; 0x64
 8000ebc:	fb01 2313 	mls	r3, r1, r3, r2
 8000ec0:	fba5 2303 	umull	r2, r3, r5, r3
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	08d9      	lsrs	r1, r3, #3
 8000ec8:	f104 0037 	add.w	r0, r4, #55	; 0x37
 8000ecc:	f7ff fe58 	bl	8000b80 <insert_binary_into_string>
    uint32_t seconds_of_day = hour * 3600 + min * 60 + sec;
 8000ed0:	f8d9 0000 	ldr.w	r0, [r9]
 8000ed4:	f8d8 3000 	ldr.w	r3, [r8]
 8000ed8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8000edc:	009a      	lsls	r2, r3, #2
 8000ede:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8000ee2:	fb03 2000 	mla	r0, r3, r0, r2
 8000ee6:	683b      	ldr	r3, [r7, #0]
 8000ee8:	4418      	add	r0, r3
    for (uint32_t i = 0; i <= 16; i++)
 8000eea:	2300      	movs	r3, #0
 8000eec:	e009      	b.n	8000f02 <concat_timecode+0x16a>
            timecode[80 + i + 1] = '0' + (seconds_of_day >> i & 1);
 8000eee:	fa20 f203 	lsr.w	r2, r0, r3
 8000ef2:	f002 0201 	and.w	r2, r2, #1
 8000ef6:	f103 0151 	add.w	r1, r3, #81	; 0x51
 8000efa:	3230      	adds	r2, #48	; 0x30
 8000efc:	4c45      	ldr	r4, [pc, #276]	; (8001014 <concat_timecode+0x27c>)
 8000efe:	5462      	strb	r2, [r4, r1]
    for (uint32_t i = 0; i <= 16; i++)
 8000f00:	3301      	adds	r3, #1
 8000f02:	2b10      	cmp	r3, #16
 8000f04:	d80b      	bhi.n	8000f1e <concat_timecode+0x186>
        if (i < 9)
 8000f06:	2b08      	cmp	r3, #8
 8000f08:	d8f1      	bhi.n	8000eee <concat_timecode+0x156>
            timecode[80 + i] = '0' + (seconds_of_day >> i & 1);
 8000f0a:	fa20 f203 	lsr.w	r2, r0, r3
 8000f0e:	f002 0201 	and.w	r2, r2, #1
 8000f12:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8000f16:	3230      	adds	r2, #48	; 0x30
 8000f18:	4c3e      	ldr	r4, [pc, #248]	; (8001014 <concat_timecode+0x27c>)
 8000f1a:	5462      	strb	r2, [r4, r1]
 8000f1c:	e7f0      	b.n	8000f00 <concat_timecode+0x168>
    for (int i = 0; i < TIMECODE_LENGTH; i++)
 8000f1e:	2400      	movs	r4, #0
 8000f20:	e006      	b.n	8000f30 <concat_timecode+0x198>
            fill_bool(&timecode_bool[position],8,SINES_PER_CHARACTER);
 8000f22:	220a      	movs	r2, #10
 8000f24:	2108      	movs	r1, #8
 8000f26:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <concat_timecode+0x28c>)
 8000f28:	4418      	add	r0, r3
 8000f2a:	f7ff ff21 	bl	8000d70 <fill_bool>
    for (int i = 0; i < TIMECODE_LENGTH; i++)
 8000f2e:	3401      	adds	r4, #1
 8000f30:	2c63      	cmp	r4, #99	; 0x63
 8000f32:	dc69      	bgt.n	8001008 <concat_timecode+0x270>
        uint32_t position = i * SINES_PER_CHARACTER;
 8000f34:	eb04 0384 	add.w	r3, r4, r4, lsl #2
 8000f38:	0058      	lsls	r0, r3, #1
        switch (timecode[i])
 8000f3a:	4b36      	ldr	r3, [pc, #216]	; (8001014 <concat_timecode+0x27c>)
 8000f3c:	5d1b      	ldrb	r3, [r3, r4]
 8000f3e:	3b30      	subs	r3, #48	; 0x30
 8000f40:	2b20      	cmp	r3, #32
 8000f42:	d85a      	bhi.n	8000ffa <concat_timecode+0x262>
 8000f44:	a201      	add	r2, pc, #4	; (adr r2, 8000f4c <concat_timecode+0x1b4>)
 8000f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f4a:	bf00      	nop
 8000f4c:	08000fdf 	.word	0x08000fdf
 8000f50:	08000fed 	.word	0x08000fed
 8000f54:	08000ffb 	.word	0x08000ffb
 8000f58:	08000ffb 	.word	0x08000ffb
 8000f5c:	08000ffb 	.word	0x08000ffb
 8000f60:	08000ffb 	.word	0x08000ffb
 8000f64:	08000ffb 	.word	0x08000ffb
 8000f68:	08000ffb 	.word	0x08000ffb
 8000f6c:	08000ffb 	.word	0x08000ffb
 8000f70:	08000ffb 	.word	0x08000ffb
 8000f74:	08000ffb 	.word	0x08000ffb
 8000f78:	08000ffb 	.word	0x08000ffb
 8000f7c:	08000ffb 	.word	0x08000ffb
 8000f80:	08000ffb 	.word	0x08000ffb
 8000f84:	08000ffb 	.word	0x08000ffb
 8000f88:	08000ffb 	.word	0x08000ffb
 8000f8c:	08000ffb 	.word	0x08000ffb
 8000f90:	08000ffb 	.word	0x08000ffb
 8000f94:	08000ffb 	.word	0x08000ffb
 8000f98:	08000ffb 	.word	0x08000ffb
 8000f9c:	08000ffb 	.word	0x08000ffb
 8000fa0:	08000ffb 	.word	0x08000ffb
 8000fa4:	08000ffb 	.word	0x08000ffb
 8000fa8:	08000ffb 	.word	0x08000ffb
 8000fac:	08000ffb 	.word	0x08000ffb
 8000fb0:	08000fd1 	.word	0x08000fd1
 8000fb4:	08000ffb 	.word	0x08000ffb
 8000fb8:	08000ffb 	.word	0x08000ffb
 8000fbc:	08000ffb 	.word	0x08000ffb
 8000fc0:	08000ffb 	.word	0x08000ffb
 8000fc4:	08000ffb 	.word	0x08000ffb
 8000fc8:	08000ffb 	.word	0x08000ffb
 8000fcc:	08000f23 	.word	0x08000f23
            fill_bool(&timecode_bool[position],2,SINES_PER_CHARACTER);
 8000fd0:	220a      	movs	r2, #10
 8000fd2:	2102      	movs	r1, #2
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <concat_timecode+0x28c>)
 8000fd6:	4418      	add	r0, r3
 8000fd8:	f7ff feca 	bl	8000d70 <fill_bool>
            break;
 8000fdc:	e7a7      	b.n	8000f2e <concat_timecode+0x196>
            fill_bool(&timecode_bool[position],2,SINES_PER_CHARACTER);
 8000fde:	220a      	movs	r2, #10
 8000fe0:	2102      	movs	r1, #2
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <concat_timecode+0x28c>)
 8000fe4:	4418      	add	r0, r3
 8000fe6:	f7ff fec3 	bl	8000d70 <fill_bool>
            break;
 8000fea:	e7a0      	b.n	8000f2e <concat_timecode+0x196>
            fill_bool(&timecode_bool[position],5,SINES_PER_CHARACTER);
 8000fec:	220a      	movs	r2, #10
 8000fee:	2105      	movs	r1, #5
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	; (8001024 <concat_timecode+0x28c>)
 8000ff2:	4418      	add	r0, r3
 8000ff4:	f7ff febc 	bl	8000d70 <fill_bool>
            break;
 8000ff8:	e799      	b.n	8000f2e <concat_timecode+0x196>
            fill_bool(&timecode_bool[position],10,SINES_PER_CHARACTER);
 8000ffa:	220a      	movs	r2, #10
 8000ffc:	4611      	mov	r1, r2
 8000ffe:	4b09      	ldr	r3, [pc, #36]	; (8001024 <concat_timecode+0x28c>)
 8001000:	4418      	add	r0, r3
 8001002:	f7ff feb5 	bl	8000d70 <fill_bool>
 8001006:	e792      	b.n	8000f2e <concat_timecode+0x196>
}
 8001008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800100c:	20000138 	.word	0x20000138
 8001010:	cccccccd 	.word	0xcccccccd
 8001014:	20000008 	.word	0x20000008
 8001018:	20000000 	.word	0x20000000
 800101c:	20000004 	.word	0x20000004
 8001020:	51eb851f 	.word	0x51eb851f
 8001024:	20000194 	.word	0x20000194
 8001028:	20000134 	.word	0x20000134
 800102c:	20000130 	.word	0x20000130
 8001030:	20000070 	.word	0x20000070

08001034 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001036:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001038:	2400      	movs	r4, #0
 800103a:	9405      	str	r4, [sp, #20]
 800103c:	9406      	str	r4, [sp, #24]
 800103e:	9407      	str	r4, [sp, #28]
 8001040:	9408      	str	r4, [sp, #32]
 8001042:	9409      	str	r4, [sp, #36]	; 0x24

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001044:	4b24      	ldr	r3, [pc, #144]	; (80010d8 <MX_GPIO_Init+0xa4>)
 8001046:	695a      	ldr	r2, [r3, #20]
 8001048:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800104c:	615a      	str	r2, [r3, #20]
 800104e:	695a      	ldr	r2, [r3, #20]
 8001050:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001054:	9201      	str	r2, [sp, #4]
 8001056:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800105e:	615a      	str	r2, [r3, #20]
 8001060:	695a      	ldr	r2, [r3, #20]
 8001062:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001066:	9202      	str	r2, [sp, #8]
 8001068:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106a:	695a      	ldr	r2, [r3, #20]
 800106c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8001070:	615a      	str	r2, [r3, #20]
 8001072:	695a      	ldr	r2, [r3, #20]
 8001074:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8001078:	9203      	str	r2, [sp, #12]
 800107a:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	695a      	ldr	r2, [r3, #20]
 800107e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001082:	615a      	str	r2, [r3, #20]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800108a:	9304      	str	r3, [sp, #16]
 800108c:	9b04      	ldr	r3, [sp, #16]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800108e:	4d13      	ldr	r5, [pc, #76]	; (80010dc <MX_GPIO_Init+0xa8>)
 8001090:	4622      	mov	r2, r4
 8001092:	2120      	movs	r1, #32
 8001094:	4628      	mov	r0, r5
 8001096:	f001 f9a7 	bl	80023e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800109a:	2601      	movs	r6, #1
 800109c:	9605      	str	r6, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800109e:	4f10      	ldr	r7, [pc, #64]	; (80010e0 <MX_GPIO_Init+0xac>)
 80010a0:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80010a2:	2302      	movs	r3, #2
 80010a4:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a6:	a905      	add	r1, sp, #20
 80010a8:	4628      	mov	r0, r5
 80010aa:	f001 f8d9 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010b4:	9706      	str	r7, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010b8:	a905      	add	r1, sp, #20
 80010ba:	480a      	ldr	r0, [pc, #40]	; (80010e4 <MX_GPIO_Init+0xb0>)
 80010bc:	f001 f8d0 	bl	8002260 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80010c0:	2320      	movs	r3, #32
 80010c2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010c4:	9606      	str	r6, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ca:	a905      	add	r1, sp, #20
 80010cc:	4628      	mov	r0, r5
 80010ce:	f001 f8c7 	bl	8002260 <HAL_GPIO_Init>

}
 80010d2:	b00b      	add	sp, #44	; 0x2c
 80010d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40021000 	.word	0x40021000
 80010dc:	48000400 	.word	0x48000400
 80010e0:	10110000 	.word	0x10110000
 80010e4:	48000800 	.word	0x48000800

080010e8 <MX_DMA_Init>:
{
 80010e8:	b500      	push	{lr}
 80010ea:	b083      	sub	sp, #12
  __HAL_RCC_DMA1_CLK_ENABLE();
 80010ec:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_DMA_Init+0x40>)
 80010ee:	695a      	ldr	r2, [r3, #20]
 80010f0:	f042 0201 	orr.w	r2, r2, #1
 80010f4:	615a      	str	r2, [r3, #20]
 80010f6:	695b      	ldr	r3, [r3, #20]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	9301      	str	r3, [sp, #4]
 80010fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001100:	2200      	movs	r2, #0
 8001102:	4611      	mov	r1, r2
 8001104:	200d      	movs	r0, #13
 8001106:	f000 fdcb 	bl	8001ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800110a:	200d      	movs	r0, #13
 800110c:	f000 fdfc 	bl	8001d08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001110:	2200      	movs	r2, #0
 8001112:	4611      	mov	r1, r2
 8001114:	200f      	movs	r0, #15
 8001116:	f000 fdc3 	bl	8001ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800111a:	200f      	movs	r0, #15
 800111c:	f000 fdf4 	bl	8001d08 <HAL_NVIC_EnableIRQ>
}
 8001120:	b003      	add	sp, #12
 8001122:	f85d fb04 	ldr.w	pc, [sp], #4
 8001126:	bf00      	nop
 8001128:	40021000 	.word	0x40021000

0800112c <MX_NVIC_Init>:
{
 800112c:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	4611      	mov	r1, r2
 8001132:	2025      	movs	r0, #37	; 0x25
 8001134:	f000 fdb4 	bl	8001ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001138:	2025      	movs	r0, #37	; 0x25
 800113a:	f000 fde5 	bl	8001d08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800113e:	2200      	movs	r2, #0
 8001140:	4611      	mov	r1, r2
 8001142:	2026      	movs	r0, #38	; 0x26
 8001144:	f000 fdac 	bl	8001ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001148:	2026      	movs	r0, #38	; 0x26
 800114a:	f000 fddd 	bl	8001d08 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	4611      	mov	r1, r2
 8001152:	2006      	movs	r0, #6
 8001154:	f000 fda4 	bl	8001ca0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001158:	2006      	movs	r0, #6
 800115a:	f000 fdd5 	bl	8001d08 <HAL_NVIC_EnableIRQ>
}
 800115e:	bd08      	pop	{r3, pc}

08001160 <MX_USART2_UART_Init>:
{
 8001160:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8001162:	4c0f      	ldr	r4, [pc, #60]	; (80011a0 <MX_USART2_UART_Init+0x40>)
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_USART2_UART_Init+0x44>)
 8001166:	6023      	str	r3, [r4, #0]
  huart2.Init.BaudRate = 9600;
 8001168:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 800116c:	6063      	str	r3, [r4, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800116e:	2300      	movs	r3, #0
 8001170:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001172:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001174:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001176:	220c      	movs	r2, #12
 8001178:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800117a:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800117c:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800117e:	6223      	str	r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001180:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001182:	4620      	mov	r0, r4
 8001184:	f002 fbf7 	bl	8003976 <HAL_UART_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_RXNE);
 8001188:	6822      	ldr	r2, [r4, #0]
 800118a:	6813      	ldr	r3, [r2, #0]
 800118c:	f043 0301 	orr.w	r3, r3, #1
 8001190:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_TC);
 8001192:	6822      	ldr	r2, [r4, #0]
 8001194:	6853      	ldr	r3, [r2, #4]
 8001196:	f043 0301 	orr.w	r3, r3, #1
 800119a:	6053      	str	r3, [r2, #4]
}
 800119c:	bd10      	pop	{r4, pc}
 800119e:	bf00      	nop
 80011a0:	2000072c 	.word	0x2000072c
 80011a4:	40004400 	.word	0x40004400

080011a8 <MX_USART1_UART_Init>:
{
 80011a8:	b508      	push	{r3, lr}
  huart1.Instance = USART1;
 80011aa:	4809      	ldr	r0, [pc, #36]	; (80011d0 <MX_USART1_UART_Init+0x28>)
 80011ac:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_USART1_UART_Init+0x2c>)
 80011ae:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 9600;
 80011b0:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80011b4:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011b6:	2300      	movs	r3, #0
 80011b8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011ba:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011bc:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011be:	220c      	movs	r2, #12
 80011c0:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c4:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c6:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011ca:	f002 fbd4 	bl	8003976 <HAL_UART_Init>
}
 80011ce:	bd08      	pop	{r3, pc}
 80011d0:	200005e8 	.word	0x200005e8
 80011d4:	40013800 	.word	0x40013800

080011d8 <MX_DAC1_Init>:
{
 80011d8:	b530      	push	{r4, r5, lr}
 80011da:	b085      	sub	sp, #20
  DAC_ChannelConfTypeDef sConfig = {0};
 80011dc:	2400      	movs	r4, #0
 80011de:	9401      	str	r4, [sp, #4]
 80011e0:	9402      	str	r4, [sp, #8]
 80011e2:	9403      	str	r4, [sp, #12]
  hdac1.Instance = DAC1;
 80011e4:	4d08      	ldr	r5, [pc, #32]	; (8001208 <MX_DAC1_Init+0x30>)
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <MX_DAC1_Init+0x34>)
 80011e8:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80011ea:	4628      	mov	r0, r5
 80011ec:	f000 fdb0 	bl	8001d50 <HAL_DAC_Init>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80011f0:	2304      	movs	r3, #4
 80011f2:	9301      	str	r3, [sp, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 80011f4:	2302      	movs	r3, #2
 80011f6:	9302      	str	r3, [sp, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80011f8:	4622      	mov	r2, r4
 80011fa:	a901      	add	r1, sp, #4
 80011fc:	4628      	mov	r0, r5
 80011fe:	f000 fe77 	bl	8001ef0 <HAL_DAC_ConfigChannel>
}
 8001202:	b005      	add	sp, #20
 8001204:	bd30      	pop	{r4, r5, pc}
 8001206:	bf00      	nop
 8001208:	20000590 	.word	0x20000590
 800120c:	40007400 	.word	0x40007400

08001210 <MX_DAC2_Init>:
{
 8001210:	b530      	push	{r4, r5, lr}
 8001212:	b085      	sub	sp, #20
  DAC_ChannelConfTypeDef sConfig = {0};
 8001214:	2400      	movs	r4, #0
 8001216:	9401      	str	r4, [sp, #4]
 8001218:	9402      	str	r4, [sp, #8]
 800121a:	9403      	str	r4, [sp, #12]
  hdac2.Instance = DAC2;
 800121c:	4d08      	ldr	r5, [pc, #32]	; (8001240 <MX_DAC2_Init+0x30>)
 800121e:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_DAC2_Init+0x34>)
 8001220:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001222:	4628      	mov	r0, r5
 8001224:	f000 fd94 	bl	8001d50 <HAL_DAC_Init>
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8001228:	2304      	movs	r3, #4
 800122a:	9301      	str	r3, [sp, #4]
  sConfig.DAC_OutputSwitch = DAC_OUTPUTSWITCH_ENABLE;
 800122c:	2302      	movs	r3, #2
 800122e:	9303      	str	r3, [sp, #12]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001230:	4622      	mov	r2, r4
 8001232:	a901      	add	r1, sp, #4
 8001234:	4628      	mov	r0, r5
 8001236:	f000 fe5b 	bl	8001ef0 <HAL_DAC_ConfigChannel>
}
 800123a:	b005      	add	sp, #20
 800123c:	bd30      	pop	{r4, r5, pc}
 800123e:	bf00      	nop
 8001240:	2000057c 	.word	0x2000057c
 8001244:	40009800 	.word	0x40009800

08001248 <MX_TIM2_Init>:
{
 8001248:	b530      	push	{r4, r5, lr}
 800124a:	b089      	sub	sp, #36	; 0x24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800124c:	2400      	movs	r4, #0
 800124e:	9404      	str	r4, [sp, #16]
 8001250:	9405      	str	r4, [sp, #20]
 8001252:	9406      	str	r4, [sp, #24]
 8001254:	9407      	str	r4, [sp, #28]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001256:	9401      	str	r4, [sp, #4]
 8001258:	9402      	str	r4, [sp, #8]
 800125a:	9403      	str	r4, [sp, #12]
  htim2.Instance = TIM2;
 800125c:	4d0e      	ldr	r5, [pc, #56]	; (8001298 <MX_TIM2_Init+0x50>)
 800125e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001262:	602b      	str	r3, [r5, #0]
  htim2.Init.Prescaler = 1999;
 8001264:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8001268:	606b      	str	r3, [r5, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126a:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 1999;
 800126c:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800126e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001270:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001272:	4628      	mov	r0, r5
 8001274:	f001 ff76 	bl	8003164 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127c:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800127e:	a904      	add	r1, sp, #16
 8001280:	4628      	mov	r0, r5
 8001282:	f001 ff95 	bl	80031b0 <HAL_TIM_ConfigClockSource>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001286:	2320      	movs	r3, #32
 8001288:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800128a:	9403      	str	r4, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800128c:	a901      	add	r1, sp, #4
 800128e:	4628      	mov	r0, r5
 8001290:	f001 fffc 	bl	800328c <HAL_TIMEx_MasterConfigSynchronization>
}
 8001294:	b009      	add	sp, #36	; 0x24
 8001296:	bd30      	pop	{r4, r5, pc}
 8001298:	200006a8 	.word	0x200006a8

0800129c <MX_TIM6_Init>:
{
 800129c:	b530      	push	{r4, r5, lr}
 800129e:	b085      	sub	sp, #20
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012a0:	2500      	movs	r5, #0
 80012a2:	9501      	str	r5, [sp, #4]
 80012a4:	9502      	str	r5, [sp, #8]
 80012a6:	9503      	str	r5, [sp, #12]
  htim6.Instance = TIM6;
 80012a8:	4c0a      	ldr	r4, [pc, #40]	; (80012d4 <MX_TIM6_Init+0x38>)
 80012aa:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <MX_TIM6_Init+0x3c>)
 80012ac:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 7;
 80012ae:	2307      	movs	r3, #7
 80012b0:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b2:	60a5      	str	r5, [r4, #8]
  htim6.Init.Period = 47;
 80012b4:	232f      	movs	r3, #47	; 0x2f
 80012b6:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012b8:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012ba:	4620      	mov	r0, r4
 80012bc:	f001 ff52 	bl	8003164 <HAL_TIM_Base_Init>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80012c0:	2320      	movs	r3, #32
 80012c2:	9301      	str	r3, [sp, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	9503      	str	r5, [sp, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012c6:	a901      	add	r1, sp, #4
 80012c8:	4620      	mov	r0, r4
 80012ca:	f001 ffdf 	bl	800328c <HAL_TIMEx_MasterConfigSynchronization>
}
 80012ce:	b005      	add	sp, #20
 80012d0:	bd30      	pop	{r4, r5, pc}
 80012d2:	bf00      	nop
 80012d4:	20000668 	.word	0x20000668
 80012d8:	40001000 	.word	0x40001000

080012dc <SystemClock_Config>:
{
 80012dc:	b530      	push	{r4, r5, lr}
 80012de:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e0:	2224      	movs	r2, #36	; 0x24
 80012e2:	2100      	movs	r1, #0
 80012e4:	a80d      	add	r0, sp, #52	; 0x34
 80012e6:	f002 fbb3 	bl	8003a50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ea:	2400      	movs	r4, #0
 80012ec:	9407      	str	r4, [sp, #28]
 80012ee:	9408      	str	r4, [sp, #32]
 80012f0:	9409      	str	r4, [sp, #36]	; 0x24
 80012f2:	940a      	str	r4, [sp, #40]	; 0x28
 80012f4:	940b      	str	r4, [sp, #44]	; 0x2c
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012f6:	9400      	str	r4, [sp, #0]
 80012f8:	9401      	str	r4, [sp, #4]
 80012fa:	9402      	str	r4, [sp, #8]
 80012fc:	9403      	str	r4, [sp, #12]
 80012fe:	9404      	str	r4, [sp, #16]
 8001300:	9405      	str	r4, [sp, #20]
 8001302:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001304:	2302      	movs	r3, #2
 8001306:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	2501      	movs	r5, #1
 800130a:	9510      	str	r5, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800130c:	2310      	movs	r3, #16
 800130e:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001310:	a80c      	add	r0, sp, #48	; 0x30
 8001312:	f001 f87d 	bl	8002410 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001316:	230f      	movs	r3, #15
 8001318:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800131a:	9408      	str	r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800131c:	9409      	str	r4, [sp, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800131e:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001320:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001322:	4621      	mov	r1, r4
 8001324:	a807      	add	r0, sp, #28
 8001326:	f001 fbcd 	bl	8002ac4 <HAL_RCC_ClockConfig>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800132a:	9500      	str	r5, [sp, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 800132c:	9402      	str	r4, [sp, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800132e:	4668      	mov	r0, sp
 8001330:	f001 fccc 	bl	8002ccc <HAL_RCCEx_PeriphCLKConfig>
}
 8001334:	b017      	add	sp, #92	; 0x5c
 8001336:	bd30      	pop	{r4, r5, pc}

08001338 <main>:
{
 8001338:	b538      	push	{r3, r4, r5, lr}
    concat_timecode();
 800133a:	f7ff fd2d 	bl	8000d98 <concat_timecode>
  HAL_Init();
 800133e:	f000 fc79 	bl	8001c34 <HAL_Init>
  SystemClock_Config();
 8001342:	f7ff ffcb 	bl	80012dc <SystemClock_Config>
  MX_GPIO_Init();
 8001346:	f7ff fe75 	bl	8001034 <MX_GPIO_Init>
  MX_DMA_Init();
 800134a:	f7ff fecd 	bl	80010e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800134e:	f7ff ff07 	bl	8001160 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001352:	f7ff ff29 	bl	80011a8 <MX_USART1_UART_Init>
  MX_DAC1_Init();
 8001356:	f7ff ff3f 	bl	80011d8 <MX_DAC1_Init>
  MX_TIM2_Init();
 800135a:	f7ff ff75 	bl	8001248 <MX_TIM2_Init>
  MX_TIM6_Init();
 800135e:	f7ff ff9d 	bl	800129c <MX_TIM6_Init>
  MX_DAC2_Init();
 8001362:	f7ff ff55 	bl	8001210 <MX_DAC2_Init>
  MX_NVIC_Init();
 8001366:	f7ff fee1 	bl	800112c <MX_NVIC_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800136a:	4a45      	ldr	r2, [pc, #276]	; (8001480 <main+0x148>)
 800136c:	6811      	ldr	r1, [r2, #0]
 800136e:	680b      	ldr	r3, [r1, #0]
 8001370:	f043 0320 	orr.w	r3, r3, #32
 8001374:	600b      	str	r3, [r1, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8001376:	6812      	ldr	r2, [r2, #0]
 8001378:	6813      	ldr	r3, [r2, #0]
 800137a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800137e:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 8001380:	4a40      	ldr	r2, [pc, #256]	; (8001484 <main+0x14c>)
 8001382:	6811      	ldr	r1, [r2, #0]
 8001384:	680b      	ldr	r3, [r1, #0]
 8001386:	f043 0320 	orr.w	r3, r3, #32
 800138a:	600b      	str	r3, [r1, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 800138c:	6812      	ldr	r2, [r2, #0]
 800138e:	6813      	ldr	r3, [r2, #0]
 8001390:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001394:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start_IT(&htim6);
 8001396:	483c      	ldr	r0, [pc, #240]	; (8001488 <main+0x150>)
 8001398:	f001 fd9e 	bl	8002ed8 <HAL_TIM_Base_Start_IT>
    HAL_TIM_Base_Start_IT(&htim2);
 800139c:	483b      	ldr	r0, [pc, #236]	; (800148c <main+0x154>)
 800139e:	f001 fd9b 	bl	8002ed8 <HAL_TIM_Base_Start_IT>
    setup_sine();
 80013a2:	f000 fbe5 	bl	8001b70 <setup_sine>
 80013a6:	e047      	b.n	8001438 <main+0x100>
            if (is_same_string("ping", pc_message, 4))
 80013a8:	2204      	movs	r2, #4
 80013aa:	4939      	ldr	r1, [pc, #228]	; (8001490 <main+0x158>)
 80013ac:	4839      	ldr	r0, [pc, #228]	; (8001494 <main+0x15c>)
 80013ae:	f000 faf3 	bl	8001998 <is_same_string>
 80013b2:	b9d8      	cbnz	r0, 80013ec <main+0xb4>
            if (is_same_string("send", pc_message, 4))
 80013b4:	2204      	movs	r2, #4
 80013b6:	4936      	ldr	r1, [pc, #216]	; (8001490 <main+0x158>)
 80013b8:	4837      	ldr	r0, [pc, #220]	; (8001498 <main+0x160>)
 80013ba:	f000 faed 	bl	8001998 <is_same_string>
 80013be:	b9d8      	cbnz	r0, 80013f8 <main+0xc0>
            if (is_same_string("NMEAquery", pc_message, 9))
 80013c0:	2209      	movs	r2, #9
 80013c2:	4933      	ldr	r1, [pc, #204]	; (8001490 <main+0x158>)
 80013c4:	4835      	ldr	r0, [pc, #212]	; (800149c <main+0x164>)
 80013c6:	f000 fae7 	bl	8001998 <is_same_string>
 80013ca:	b9d8      	cbnz	r0, 8001404 <main+0xcc>
            if (is_same_string("NMEAset", pc_message, 7))
 80013cc:	2207      	movs	r2, #7
 80013ce:	4930      	ldr	r1, [pc, #192]	; (8001490 <main+0x158>)
 80013d0:	4833      	ldr	r0, [pc, #204]	; (80014a0 <main+0x168>)
 80013d2:	f000 fae1 	bl	8001998 <is_same_string>
 80013d6:	bb00      	cbnz	r0, 800141a <main+0xe2>
            if (is_same_string("NMEAreset", pc_message, 9))
 80013d8:	2209      	movs	r2, #9
 80013da:	492d      	ldr	r1, [pc, #180]	; (8001490 <main+0x158>)
 80013dc:	4831      	ldr	r0, [pc, #196]	; (80014a4 <main+0x16c>)
 80013de:	f000 fadb 	bl	8001998 <is_same_string>
 80013e2:	bb00      	cbnz	r0, 8001426 <main+0xee>
            PC_UART = IDLE;
 80013e4:	4b30      	ldr	r3, [pc, #192]	; (80014a8 <main+0x170>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	701a      	strb	r2, [r3, #0]
 80013ea:	e02a      	b.n	8001442 <main+0x10a>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "pong\n", 5);
 80013ec:	2205      	movs	r2, #5
 80013ee:	492f      	ldr	r1, [pc, #188]	; (80014ac <main+0x174>)
 80013f0:	4823      	ldr	r0, [pc, #140]	; (8001480 <main+0x148>)
 80013f2:	f001 ffdd 	bl	80033b0 <HAL_UART_Transmit_IT>
 80013f6:	e7dd      	b.n	80013b4 <main+0x7c>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) timecode,
 80013f8:	2264      	movs	r2, #100	; 0x64
 80013fa:	492d      	ldr	r1, [pc, #180]	; (80014b0 <main+0x178>)
 80013fc:	4820      	ldr	r0, [pc, #128]	; (8001480 <main+0x148>)
 80013fe:	f001 ffd7 	bl	80033b0 <HAL_UART_Transmit_IT>
 8001402:	e7dd      	b.n	80013c0 <main+0x88>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "query\n", 6);
 8001404:	2206      	movs	r2, #6
 8001406:	492b      	ldr	r1, [pc, #172]	; (80014b4 <main+0x17c>)
 8001408:	481d      	ldr	r0, [pc, #116]	; (8001480 <main+0x148>)
 800140a:	f001 ffd1 	bl	80033b0 <HAL_UART_Transmit_IT>
                HAL_UART_Transmit_IT(&huart1, (uint8_t*) "$PMTK414*33\r\n", 13);
 800140e:	220d      	movs	r2, #13
 8001410:	4929      	ldr	r1, [pc, #164]	; (80014b8 <main+0x180>)
 8001412:	481c      	ldr	r0, [pc, #112]	; (8001484 <main+0x14c>)
 8001414:	f001 ffcc 	bl	80033b0 <HAL_UART_Transmit_IT>
 8001418:	e7d8      	b.n	80013cc <main+0x94>
                HAL_UART_Transmit_IT(&huart1, (uint8_t*) "$PCAS03,0,0,0,0,1,0,0,0*03\r\n", 28);
 800141a:	221c      	movs	r2, #28
 800141c:	4927      	ldr	r1, [pc, #156]	; (80014bc <main+0x184>)
 800141e:	4819      	ldr	r0, [pc, #100]	; (8001484 <main+0x14c>)
 8001420:	f001 ffc6 	bl	80033b0 <HAL_UART_Transmit_IT>
 8001424:	e7d8      	b.n	80013d8 <main+0xa0>
                            HAL_UART_Transmit_IT(&huart1, (uint8_t*) "$PCAS10,3*1F\r\n", 14);
 8001426:	220e      	movs	r2, #14
 8001428:	4925      	ldr	r1, [pc, #148]	; (80014c0 <main+0x188>)
 800142a:	4816      	ldr	r0, [pc, #88]	; (8001484 <main+0x14c>)
 800142c:	f001 ffc0 	bl	80033b0 <HAL_UART_Transmit_IT>
 8001430:	e7d8      	b.n	80013e4 <main+0xac>
        if (should_concat_timecode)
 8001432:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <main+0x18c>)
 8001434:	781b      	ldrb	r3, [r3, #0]
 8001436:	b9eb      	cbnz	r3, 8001474 <main+0x13c>
        if (PC_UART == DONE)
 8001438:	4b1b      	ldr	r3, [pc, #108]	; (80014a8 <main+0x170>)
 800143a:	781b      	ldrb	r3, [r3, #0]
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d0b2      	beq.n	80013a8 <main+0x70>
        if (GPS_UART == DONE)
 8001442:	4b21      	ldr	r3, [pc, #132]	; (80014c8 <main+0x190>)
 8001444:	781b      	ldrb	r3, [r3, #0]
 8001446:	b2db      	uxtb	r3, r3
 8001448:	2b02      	cmp	r3, #2
 800144a:	d1f2      	bne.n	8001432 <main+0xfa>
            bool correct_msg_type = parse_nmea(gps_message,gps_message_length);
 800144c:	4d1f      	ldr	r5, [pc, #124]	; (80014cc <main+0x194>)
 800144e:	6829      	ldr	r1, [r5, #0]
 8001450:	4c1f      	ldr	r4, [pc, #124]	; (80014d0 <main+0x198>)
 8001452:	4620      	mov	r0, r4
 8001454:	f7ff fbf4 	bl	8000c40 <parse_nmea>
            gps_message[gps_message_length] = '\n';
 8001458:	682b      	ldr	r3, [r5, #0]
 800145a:	220a      	movs	r2, #10
 800145c:	54e2      	strb	r2, [r4, r3]
            HAL_UART_Transmit_IT(&huart2, (uint8_t*) gps_message,
 800145e:	682a      	ldr	r2, [r5, #0]
 8001460:	3201      	adds	r2, #1
 8001462:	b292      	uxth	r2, r2
 8001464:	4621      	mov	r1, r4
 8001466:	4806      	ldr	r0, [pc, #24]	; (8001480 <main+0x148>)
 8001468:	f001 ffa2 	bl	80033b0 <HAL_UART_Transmit_IT>
            GPS_UART = IDLE;
 800146c:	4b16      	ldr	r3, [pc, #88]	; (80014c8 <main+0x190>)
 800146e:	2200      	movs	r2, #0
 8001470:	701a      	strb	r2, [r3, #0]
 8001472:	e7de      	b.n	8001432 <main+0xfa>
            concat_timecode();
 8001474:	f7ff fc90 	bl	8000d98 <concat_timecode>
            should_concat_timecode = false;
 8001478:	4b12      	ldr	r3, [pc, #72]	; (80014c4 <main+0x18c>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
 800147e:	e7db      	b.n	8001438 <main+0x100>
 8001480:	2000072c 	.word	0x2000072c
 8001484:	200005e8 	.word	0x200005e8
 8001488:	20000668 	.word	0x20000668
 800148c:	200006a8 	.word	0x200006a8
 8001490:	200007ac 	.word	0x200007ac
 8001494:	08005be0 	.word	0x08005be0
 8001498:	08005bf0 	.word	0x08005bf0
 800149c:	08005bf8 	.word	0x08005bf8
 80014a0:	08005c1c 	.word	0x08005c1c
 80014a4:	08005c44 	.word	0x08005c44
 80014a8:	20000145 	.word	0x20000145
 80014ac:	08005be8 	.word	0x08005be8
 80014b0:	20000008 	.word	0x20000008
 80014b4:	08005c04 	.word	0x08005c04
 80014b8:	08005c0c 	.word	0x08005c0c
 80014bc:	08005c24 	.word	0x08005c24
 80014c0:	08005c50 	.word	0x08005c50
 80014c4:	2000016c 	.word	0x2000016c
 80014c8:	20000144 	.word	0x20000144
 80014cc:	20000150 	.word	0x20000150
 80014d0:	20000810 	.word	0x20000810

080014d4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80014d4:	4770      	bx	lr
	...

080014d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014d8:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_MspInit+0x2c>)
 80014dc:	699a      	ldr	r2, [r3, #24]
 80014de:	f042 0201 	orr.w	r2, r2, #1
 80014e2:	619a      	str	r2, [r3, #24]
 80014e4:	699a      	ldr	r2, [r3, #24]
 80014e6:	f002 0201 	and.w	r2, r2, #1
 80014ea:	9200      	str	r2, [sp, #0]
 80014ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ee:	69da      	ldr	r2, [r3, #28]
 80014f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014f4:	61da      	str	r2, [r3, #28]
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001500:	b002      	add	sp, #8
 8001502:	4770      	bx	lr
 8001504:	40021000 	.word	0x40021000

08001508 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001508:	b530      	push	{r4, r5, lr}
 800150a:	b08b      	sub	sp, #44	; 0x2c
 800150c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	2300      	movs	r3, #0
 8001510:	9305      	str	r3, [sp, #20]
 8001512:	9306      	str	r3, [sp, #24]
 8001514:	9307      	str	r3, [sp, #28]
 8001516:	9308      	str	r3, [sp, #32]
 8001518:	9309      	str	r3, [sp, #36]	; 0x24
  if(hdac->Instance==DAC1)
 800151a:	6803      	ldr	r3, [r0, #0]
 800151c:	4a47      	ldr	r2, [pc, #284]	; (800163c <HAL_DAC_MspInit+0x134>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d004      	beq.n	800152c <HAL_DAC_MspInit+0x24>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
  else if(hdac->Instance==DAC2)
 8001522:	4a47      	ldr	r2, [pc, #284]	; (8001640 <HAL_DAC_MspInit+0x138>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d044      	beq.n	80015b2 <HAL_DAC_MspInit+0xaa>
  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }

}
 8001528:	b00b      	add	sp, #44	; 0x2c
 800152a:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC1_CLK_ENABLE();
 800152c:	4b45      	ldr	r3, [pc, #276]	; (8001644 <HAL_DAC_MspInit+0x13c>)
 800152e:	69da      	ldr	r2, [r3, #28]
 8001530:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001534:	61da      	str	r2, [r3, #28]
 8001536:	69da      	ldr	r2, [r3, #28]
 8001538:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800153c:	9201      	str	r2, [sp, #4]
 800153e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001540:	695a      	ldr	r2, [r3, #20]
 8001542:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001546:	615a      	str	r2, [r3, #20]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800154e:	9302      	str	r3, [sp, #8]
 8001550:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001552:	2510      	movs	r5, #16
 8001554:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001556:	2303      	movs	r3, #3
 8001558:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155a:	a905      	add	r1, sp, #20
 800155c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001560:	f000 fe7e 	bl	8002260 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 8001564:	4838      	ldr	r0, [pc, #224]	; (8001648 <HAL_DAC_MspInit+0x140>)
 8001566:	4b39      	ldr	r3, [pc, #228]	; (800164c <HAL_DAC_MspInit+0x144>)
 8001568:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800156a:	6045      	str	r5, [r0, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	2300      	movs	r3, #0
 800156e:	6083      	str	r3, [r0, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001570:	2280      	movs	r2, #128	; 0x80
 8001572:	60c2      	str	r2, [r0, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001574:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001578:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800157a:	6143      	str	r3, [r0, #20]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800157c:	6183      	str	r3, [r0, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800157e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001582:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001584:	f000 fd68 	bl	8002058 <HAL_DMA_Init>
 8001588:	b980      	cbnz	r0, 80015ac <HAL_DAC_MspInit+0xa4>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 800158a:	4a31      	ldr	r2, [pc, #196]	; (8001650 <HAL_DAC_MspInit+0x148>)
 800158c:	6813      	ldr	r3, [r2, #0]
 800158e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001592:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8001594:	4b2c      	ldr	r3, [pc, #176]	; (8001648 <HAL_DAC_MspInit+0x140>)
 8001596:	60a3      	str	r3, [r4, #8]
 8001598:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	4611      	mov	r1, r2
 800159e:	2036      	movs	r0, #54	; 0x36
 80015a0:	f000 fb7e 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80015a4:	2036      	movs	r0, #54	; 0x36
 80015a6:	f000 fbaf 	bl	8001d08 <HAL_NVIC_EnableIRQ>
 80015aa:	e7bd      	b.n	8001528 <HAL_DAC_MspInit+0x20>
      Error_Handler();
 80015ac:	f7ff ff92 	bl	80014d4 <Error_Handler>
 80015b0:	e7eb      	b.n	800158a <HAL_DAC_MspInit+0x82>
    __HAL_RCC_DAC2_CLK_ENABLE();
 80015b2:	4b24      	ldr	r3, [pc, #144]	; (8001644 <HAL_DAC_MspInit+0x13c>)
 80015b4:	69da      	ldr	r2, [r3, #28]
 80015b6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015ba:	61da      	str	r2, [r3, #28]
 80015bc:	69da      	ldr	r2, [r3, #28]
 80015be:	f002 6280 	and.w	r2, r2, #67108864	; 0x4000000
 80015c2:	9203      	str	r2, [sp, #12]
 80015c4:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	695a      	ldr	r2, [r3, #20]
 80015c8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015cc:	615a      	str	r2, [r3, #20]
 80015ce:	695b      	ldr	r3, [r3, #20]
 80015d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d4:	9304      	str	r3, [sp, #16]
 80015d6:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015d8:	2340      	movs	r3, #64	; 0x40
 80015da:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015dc:	2303      	movs	r3, #3
 80015de:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	a905      	add	r1, sp, #20
 80015e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015e6:	f000 fe3b 	bl	8002260 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel5;
 80015ea:	481a      	ldr	r0, [pc, #104]	; (8001654 <HAL_DAC_MspInit+0x14c>)
 80015ec:	4b1a      	ldr	r3, [pc, #104]	; (8001658 <HAL_DAC_MspInit+0x150>)
 80015ee:	6003      	str	r3, [r0, #0]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f0:	2310      	movs	r3, #16
 80015f2:	6043      	str	r3, [r0, #4]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	6083      	str	r3, [r0, #8]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	60c2      	str	r2, [r0, #12]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80015fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001600:	6102      	str	r2, [r0, #16]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001602:	6143      	str	r3, [r0, #20]
    hdma_dac2_ch1.Init.Mode = DMA_NORMAL;
 8001604:	6183      	str	r3, [r0, #24]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8001606:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800160a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 800160c:	f000 fd24 	bl	8002058 <HAL_DMA_Init>
 8001610:	b980      	cbnz	r0, 8001634 <HAL_DAC_MspInit+0x12c>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_DAC2_CH1_DMA1_CH5);
 8001612:	4a0f      	ldr	r2, [pc, #60]	; (8001650 <HAL_DAC_MspInit+0x148>)
 8001614:	6813      	ldr	r3, [r2, #0]
 8001616:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800161a:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac2_ch1);
 800161c:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_DAC_MspInit+0x14c>)
 800161e:	60a3      	str	r3, [r4, #8]
 8001620:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM7_DAC2_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	4611      	mov	r1, r2
 8001626:	2037      	movs	r0, #55	; 0x37
 8001628:	f000 fb3a 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_DAC2_IRQn);
 800162c:	2037      	movs	r0, #55	; 0x37
 800162e:	f000 fb6b 	bl	8001d08 <HAL_NVIC_EnableIRQ>
}
 8001632:	e779      	b.n	8001528 <HAL_DAC_MspInit+0x20>
      Error_Handler();
 8001634:	f7ff ff4e 	bl	80014d4 <Error_Handler>
 8001638:	e7eb      	b.n	8001612 <HAL_DAC_MspInit+0x10a>
 800163a:	bf00      	nop
 800163c:	40007400 	.word	0x40007400
 8001640:	40009800 	.word	0x40009800
 8001644:	40021000 	.word	0x40021000
 8001648:	200005a4 	.word	0x200005a4
 800164c:	40020030 	.word	0x40020030
 8001650:	40010000 	.word	0x40010000
 8001654:	200006e8 	.word	0x200006e8
 8001658:	40020058 	.word	0x40020058

0800165c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800165c:	b500      	push	{lr}
 800165e:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 8001660:	6803      	ldr	r3, [r0, #0]
 8001662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001666:	d005      	beq.n	8001674 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 8001668:	4a16      	ldr	r2, [pc, #88]	; (80016c4 <HAL_TIM_Base_MspInit+0x68>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d016      	beq.n	800169c <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 800166e:	b003      	add	sp, #12
 8001670:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001674:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001678:	69da      	ldr	r2, [r3, #28]
 800167a:	f042 0201 	orr.w	r2, r2, #1
 800167e:	61da      	str	r2, [r3, #28]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	f003 0301 	and.w	r3, r3, #1
 8001686:	9300      	str	r3, [sp, #0]
 8001688:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	4611      	mov	r1, r2
 800168e:	201c      	movs	r0, #28
 8001690:	f000 fb06 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001694:	201c      	movs	r0, #28
 8001696:	f000 fb37 	bl	8001d08 <HAL_NVIC_EnableIRQ>
 800169a:	e7e8      	b.n	800166e <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800169c:	4b0a      	ldr	r3, [pc, #40]	; (80016c8 <HAL_TIM_Base_MspInit+0x6c>)
 800169e:	69da      	ldr	r2, [r3, #28]
 80016a0:	f042 0210 	orr.w	r2, r2, #16
 80016a4:	61da      	str	r2, [r3, #28]
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	f003 0310 	and.w	r3, r3, #16
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	4611      	mov	r1, r2
 80016b4:	2036      	movs	r0, #54	; 0x36
 80016b6:	f000 faf3 	bl	8001ca0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80016ba:	2036      	movs	r0, #54	; 0x36
 80016bc:	f000 fb24 	bl	8001d08 <HAL_NVIC_EnableIRQ>
}
 80016c0:	e7d5      	b.n	800166e <HAL_TIM_Base_MspInit+0x12>
 80016c2:	bf00      	nop
 80016c4:	40001000 	.word	0x40001000
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016cc:	b500      	push	{lr}
 80016ce:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	2300      	movs	r3, #0
 80016d2:	9305      	str	r3, [sp, #20]
 80016d4:	9306      	str	r3, [sp, #24]
 80016d6:	9307      	str	r3, [sp, #28]
 80016d8:	9308      	str	r3, [sp, #32]
 80016da:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 80016dc:	6803      	ldr	r3, [r0, #0]
 80016de:	4a25      	ldr	r2, [pc, #148]	; (8001774 <HAL_UART_MspInit+0xa8>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d005      	beq.n	80016f0 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 80016e4:	4a24      	ldr	r2, [pc, #144]	; (8001778 <HAL_UART_MspInit+0xac>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d022      	beq.n	8001730 <HAL_UART_MspInit+0x64>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016ea:	b00b      	add	sp, #44	; 0x2c
 80016ec:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 80016f0:	4b22      	ldr	r3, [pc, #136]	; (800177c <HAL_UART_MspInit+0xb0>)
 80016f2:	699a      	ldr	r2, [r3, #24]
 80016f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016f8:	619a      	str	r2, [r3, #24]
 80016fa:	699a      	ldr	r2, [r3, #24]
 80016fc:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001700:	9201      	str	r2, [sp, #4]
 8001702:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001704:	695a      	ldr	r2, [r3, #20]
 8001706:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	695b      	ldr	r3, [r3, #20]
 800170e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001712:	9302      	str	r3, [sp, #8]
 8001714:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001716:	2330      	movs	r3, #48	; 0x30
 8001718:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800171e:	2303      	movs	r3, #3
 8001720:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001722:	2307      	movs	r3, #7
 8001724:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001726:	a905      	add	r1, sp, #20
 8001728:	4815      	ldr	r0, [pc, #84]	; (8001780 <HAL_UART_MspInit+0xb4>)
 800172a:	f000 fd99 	bl	8002260 <HAL_GPIO_Init>
 800172e:	e7dc      	b.n	80016ea <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_UART_MspInit+0xb0>)
 8001732:	69da      	ldr	r2, [r3, #28]
 8001734:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001738:	61da      	str	r2, [r3, #28]
 800173a:	69da      	ldr	r2, [r3, #28]
 800173c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001740:	9203      	str	r2, [sp, #12]
 8001742:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001744:	695a      	ldr	r2, [r3, #20]
 8001746:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800174a:	615a      	str	r2, [r3, #20]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001752:	9304      	str	r3, [sp, #16]
 8001754:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001756:	230c      	movs	r3, #12
 8001758:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800175a:	2302      	movs	r3, #2
 800175c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001762:	2307      	movs	r3, #7
 8001764:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	a905      	add	r1, sp, #20
 8001768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176c:	f000 fd78 	bl	8002260 <HAL_GPIO_Init>
}
 8001770:	e7bb      	b.n	80016ea <HAL_UART_MspInit+0x1e>
 8001772:	bf00      	nop
 8001774:	40013800 	.word	0x40013800
 8001778:	40004400 	.word	0x40004400
 800177c:	40021000 	.word	0x40021000
 8001780:	48000800 	.word	0x48000800

08001784 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001784:	4770      	bx	lr

08001786 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001786:	e7fe      	b.n	8001786 <HardFault_Handler>

08001788 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001788:	e7fe      	b.n	8001788 <MemManage_Handler>

0800178a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800178a:	e7fe      	b.n	800178a <BusFault_Handler>

0800178c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800178c:	e7fe      	b.n	800178c <UsageFault_Handler>

0800178e <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800178e:	4770      	bx	lr

08001790 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001790:	4770      	bx	lr

08001792 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001792:	4770      	bx	lr

08001794 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001794:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001796:	f000 fa5f 	bl	8001c58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800179a:	bd08      	pop	{r3, pc}

0800179c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800179c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800179e:	2001      	movs	r0, #1
 80017a0:	f000 fe28 	bl	80023f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  handle_DAC_Callback(true);
 80017a4:	2001      	movs	r0, #1
 80017a6:	f000 f909 	bl	80019bc <handle_DAC_Callback>

  /* USER CODE END EXTI0_IRQn 1 */
}
 80017aa:	bd08      	pop	{r3, pc}

080017ac <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80017ac:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80017ae:	4802      	ldr	r0, [pc, #8]	; (80017b8 <DMA1_Channel3_IRQHandler+0xc>)
 80017b0:	f000 fcfb 	bl	80021aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80017b4:	bd08      	pop	{r3, pc}
 80017b6:	bf00      	nop
 80017b8:	200005a4 	.word	0x200005a4

080017bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80017bc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 80017be:	4802      	ldr	r0, [pc, #8]	; (80017c8 <DMA1_Channel5_IRQHandler+0xc>)
 80017c0:	f000 fcf3 	bl	80021aa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80017c4:	bd08      	pop	{r3, pc}
 80017c6:	bf00      	nop
 80017c8:	200006e8 	.word	0x200006e8

080017cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80017ce:	480c      	ldr	r0, [pc, #48]	; (8001800 <TIM2_IRQHandler+0x34>)
 80017d0:	f001 fbb3 	bl	8002f3a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  static uint32_t toggle = 0;
    if (toggle == 0)
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <TIM2_IRQHandler+0x38>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	b143      	cbz	r3, 80017ec <TIM2_IRQHandler+0x20>
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
        toggle = 1;
    }
    else
    {
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80017da:	2201      	movs	r2, #1
 80017dc:	2120      	movs	r1, #32
 80017de:	480a      	ldr	r0, [pc, #40]	; (8001808 <TIM2_IRQHandler+0x3c>)
 80017e0:	f000 fe02 	bl	80023e8 <HAL_GPIO_WritePin>
        toggle = 0;
 80017e4:	4b07      	ldr	r3, [pc, #28]	; (8001804 <TIM2_IRQHandler+0x38>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
    }
  /* USER CODE END TIM2_IRQn 1 */
}
 80017ea:	bd08      	pop	{r3, pc}
        HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2120      	movs	r1, #32
 80017f0:	4805      	ldr	r0, [pc, #20]	; (8001808 <TIM2_IRQHandler+0x3c>)
 80017f2:	f000 fdf9 	bl	80023e8 <HAL_GPIO_WritePin>
        toggle = 1;
 80017f6:	4b03      	ldr	r3, [pc, #12]	; (8001804 <TIM2_IRQHandler+0x38>)
 80017f8:	2201      	movs	r2, #1
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	e7f5      	b.n	80017ea <TIM2_IRQHandler+0x1e>
 80017fe:	bf00      	nop
 8001800:	200006a8 	.word	0x200006a8
 8001804:	2000013c 	.word	0x2000013c
 8001808:	48000400 	.word	0x48000400

0800180c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 800180c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  int  flag = __HAL_UART_GET_FLAG(&huart1,UART_FLAG_RXNE);
 800180e:	4808      	ldr	r0, [pc, #32]	; (8001830 <USART1_IRQHandler+0x24>)
 8001810:	6803      	ldr	r3, [r0, #0]
 8001812:	69dc      	ldr	r4, [r3, #28]
 8001814:	f004 0420 	and.w	r4, r4, #32
  char  inchar;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001818:	f001 fe12 	bl	8003440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (flag == 1)
 800181c:	b904      	cbnz	r4, 8001820 <USART1_IRQHandler+0x14>
    {
      inchar = (uint8_t)huart1.Instance->RDR;
      handle_uart_interrupt_gps(inchar);
    }
  /* USER CODE END USART1_IRQn 1 */
}
 800181e:	bd10      	pop	{r4, pc}
      inchar = (uint8_t)huart1.Instance->RDR;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <USART1_IRQHandler+0x24>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	8c98      	ldrh	r0, [r3, #36]	; 0x24
      handle_uart_interrupt_gps(inchar);
 8001826:	b2c0      	uxtb	r0, r0
 8001828:	f000 f88a 	bl	8001940 <handle_uart_interrupt_gps>
}
 800182c:	e7f7      	b.n	800181e <USART1_IRQHandler+0x12>
 800182e:	bf00      	nop
 8001830:	200005e8 	.word	0x200005e8

08001834 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8001834:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  int  flag = __HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE);
 8001836:	4808      	ldr	r0, [pc, #32]	; (8001858 <USART2_IRQHandler+0x24>)
 8001838:	6803      	ldr	r3, [r0, #0]
 800183a:	69dc      	ldr	r4, [r3, #28]
 800183c:	f004 0420 	and.w	r4, r4, #32
  char  inchar;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001840:	f001 fdfe 	bl	8003440 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if (flag == 1)
 8001844:	b904      	cbnz	r4, 8001848 <USART2_IRQHandler+0x14>
  {
    inchar = (uint8_t)huart2.Instance->RDR;
    handle_uart_interrupt_pc(inchar);
  }
  /* USER CODE END USART2_IRQn 1 */
}
 8001846:	bd10      	pop	{r4, pc}
    inchar = (uint8_t)huart2.Instance->RDR;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <USART2_IRQHandler+0x24>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    handle_uart_interrupt_pc(inchar);
 800184e:	b2c0      	uxtb	r0, r0
 8001850:	f000 f84a 	bl	80018e8 <handle_uart_interrupt_pc>
}
 8001854:	e7f7      	b.n	8001846 <USART2_IRQHandler+0x12>
 8001856:	bf00      	nop
 8001858:	2000072c 	.word	0x2000072c

0800185c <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 800185c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */

  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800185e:	4803      	ldr	r0, [pc, #12]	; (800186c <TIM6_DAC1_IRQHandler+0x10>)
 8001860:	f001 fb6b 	bl	8002f3a <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <TIM6_DAC1_IRQHandler+0x14>)
 8001866:	f000 fb96 	bl	8001f96 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */

  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 800186a:	bd08      	pop	{r3, pc}
 800186c:	20000668 	.word	0x20000668
 8001870:	20000590 	.word	0x20000590

08001874 <TIM7_DAC2_IRQHandler>:

/**
  * @brief This function handles TIM7 global and DAC2 underrun error interrupts.
  */
void TIM7_DAC2_IRQHandler(void)
{
 8001874:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM7_DAC2_IRQn 0 */

  /* USER CODE END TIM7_DAC2_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac2);
 8001876:	4802      	ldr	r0, [pc, #8]	; (8001880 <TIM7_DAC2_IRQHandler+0xc>)
 8001878:	f000 fb8d 	bl	8001f96 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM7_DAC2_IRQn 1 */

  /* USER CODE END TIM7_DAC2_IRQn 1 */
}
 800187c:	bd08      	pop	{r3, pc}
 800187e:	bf00      	nop
 8001880:	2000057c 	.word	0x2000057c

08001884 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001884:	b510      	push	{r4, lr}
 8001886:	4603      	mov	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <_sbrk+0x38>)
 800188a:	490d      	ldr	r1, [pc, #52]	; (80018c0 <_sbrk+0x3c>)
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <_sbrk+0x40>)
 800188e:	6800      	ldr	r0, [r0, #0]
 8001890:	b140      	cbz	r0, 80018a4 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	480c      	ldr	r0, [pc, #48]	; (80018c4 <_sbrk+0x40>)
 8001894:	6800      	ldr	r0, [r0, #0]
 8001896:	4403      	add	r3, r0
 8001898:	1a52      	subs	r2, r2, r1
 800189a:	4293      	cmp	r3, r2
 800189c:	d806      	bhi.n	80018ac <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800189e:	4a09      	ldr	r2, [pc, #36]	; (80018c4 <_sbrk+0x40>)
 80018a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80018a2:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80018a4:	4807      	ldr	r0, [pc, #28]	; (80018c4 <_sbrk+0x40>)
 80018a6:	4c08      	ldr	r4, [pc, #32]	; (80018c8 <_sbrk+0x44>)
 80018a8:	6004      	str	r4, [r0, #0]
 80018aa:	e7f2      	b.n	8001892 <_sbrk+0xe>
    errno = ENOMEM;
 80018ac:	f002 f896 	bl	80039dc <__errno>
 80018b0:	230c      	movs	r3, #12
 80018b2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80018b4:	f04f 30ff 	mov.w	r0, #4294967295
 80018b8:	e7f3      	b.n	80018a2 <_sbrk+0x1e>
 80018ba:	bf00      	nop
 80018bc:	20003000 	.word	0x20003000
 80018c0:	00000400 	.word	0x00000400
 80018c4:	20000140 	.word	0x20000140
 80018c8:	20000880 	.word	0x20000880

080018cc <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <SystemInit+0x18>)
 80018ce:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018d2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80018d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80018da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018de:	609a      	str	r2, [r3, #8]
#endif
}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <handle_uart_interrupt_pc>:

void handle_uart_interrupt_pc(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 80018e8:	2824      	cmp	r0, #36	; 0x24
 80018ea:	d007      	beq.n	80018fc <handle_uart_interrupt_pc+0x14>
    {
        current_index = 0;
        PC_UART = RECEIVING;
    }
    else if (inchar == '*')
 80018ec:	282a      	cmp	r0, #42	; 0x2a
 80018ee:	d00c      	beq.n	800190a <handle_uart_interrupt_pc+0x22>
    {
        pc_message_length = current_index;
        PC_UART = DONE;
    }
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <handle_uart_interrupt_pc+0x48>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d00f      	beq.n	800191a <handle_uart_interrupt_pc+0x32>
    {
        pc_message[current_index] = inchar;
        current_index++;
    }
}
 80018fa:	4770      	bx	lr
        current_index = 0;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <handle_uart_interrupt_pc+0x4c>)
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
        PC_UART = RECEIVING;
 8001902:	4b0b      	ldr	r3, [pc, #44]	; (8001930 <handle_uart_interrupt_pc+0x48>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	4770      	bx	lr
        pc_message_length = current_index;
 800190a:	4b0a      	ldr	r3, [pc, #40]	; (8001934 <handle_uart_interrupt_pc+0x4c>)
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	4b0a      	ldr	r3, [pc, #40]	; (8001938 <handle_uart_interrupt_pc+0x50>)
 8001910:	601a      	str	r2, [r3, #0]
        PC_UART = DONE;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <handle_uart_interrupt_pc+0x48>)
 8001914:	2202      	movs	r2, #2
 8001916:	701a      	strb	r2, [r3, #0]
 8001918:	4770      	bx	lr
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <handle_uart_interrupt_pc+0x4c>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2b63      	cmp	r3, #99	; 0x63
 8001920:	dceb      	bgt.n	80018fa <handle_uart_interrupt_pc+0x12>
        pc_message[current_index] = inchar;
 8001922:	4a06      	ldr	r2, [pc, #24]	; (800193c <handle_uart_interrupt_pc+0x54>)
 8001924:	54d0      	strb	r0, [r2, r3]
        current_index++;
 8001926:	3301      	adds	r3, #1
 8001928:	4a02      	ldr	r2, [pc, #8]	; (8001934 <handle_uart_interrupt_pc+0x4c>)
 800192a:	6013      	str	r3, [r2, #0]
}
 800192c:	e7e5      	b.n	80018fa <handle_uart_interrupt_pc+0x12>
 800192e:	bf00      	nop
 8001930:	20000145 	.word	0x20000145
 8001934:	20000148 	.word	0x20000148
 8001938:	20000168 	.word	0x20000168
 800193c:	200007ac 	.word	0x200007ac

08001940 <handle_uart_interrupt_gps>:

void handle_uart_interrupt_gps(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 8001940:	2824      	cmp	r0, #36	; 0x24
 8001942:	d007      	beq.n	8001954 <handle_uart_interrupt_gps+0x14>
    {
        current_index = 0;
        GPS_UART = RECEIVING;
    }
    else if (inchar == '*')
 8001944:	282a      	cmp	r0, #42	; 0x2a
 8001946:	d00c      	beq.n	8001962 <handle_uart_interrupt_gps+0x22>
    {
        gps_message_length = current_index;
        GPS_UART = DONE;
    }
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 8001948:	4b0f      	ldr	r3, [pc, #60]	; (8001988 <handle_uart_interrupt_gps+0x48>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	b2db      	uxtb	r3, r3
 800194e:	2b01      	cmp	r3, #1
 8001950:	d00f      	beq.n	8001972 <handle_uart_interrupt_gps+0x32>
    {
        gps_message[current_index] = inchar;
        current_index++;
    }
}
 8001952:	4770      	bx	lr
        current_index = 0;
 8001954:	4b0d      	ldr	r3, [pc, #52]	; (800198c <handle_uart_interrupt_gps+0x4c>)
 8001956:	2200      	movs	r2, #0
 8001958:	601a      	str	r2, [r3, #0]
        GPS_UART = RECEIVING;
 800195a:	4b0b      	ldr	r3, [pc, #44]	; (8001988 <handle_uart_interrupt_gps+0x48>)
 800195c:	2201      	movs	r2, #1
 800195e:	701a      	strb	r2, [r3, #0]
 8001960:	4770      	bx	lr
        gps_message_length = current_index;
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <handle_uart_interrupt_gps+0x4c>)
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <handle_uart_interrupt_gps+0x50>)
 8001968:	601a      	str	r2, [r3, #0]
        GPS_UART = DONE;
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <handle_uart_interrupt_gps+0x48>)
 800196c:	2202      	movs	r2, #2
 800196e:	701a      	strb	r2, [r3, #0]
 8001970:	4770      	bx	lr
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <handle_uart_interrupt_gps+0x4c>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b63      	cmp	r3, #99	; 0x63
 8001978:	dceb      	bgt.n	8001952 <handle_uart_interrupt_gps+0x12>
        gps_message[current_index] = inchar;
 800197a:	4a06      	ldr	r2, [pc, #24]	; (8001994 <handle_uart_interrupt_gps+0x54>)
 800197c:	54d0      	strb	r0, [r2, r3]
        current_index++;
 800197e:	3301      	adds	r3, #1
 8001980:	4a02      	ldr	r2, [pc, #8]	; (800198c <handle_uart_interrupt_gps+0x4c>)
 8001982:	6013      	str	r3, [r2, #0]
}
 8001984:	e7e5      	b.n	8001952 <handle_uart_interrupt_gps+0x12>
 8001986:	bf00      	nop
 8001988:	20000144 	.word	0x20000144
 800198c:	2000014c 	.word	0x2000014c
 8001990:	20000150 	.word	0x20000150
 8001994:	20000810 	.word	0x20000810

08001998 <is_same_string>:

bool is_same_string(const char str1[], const char str2[], int length)
{
    bool isSame = true;
    for (int i = 0; i < length; i++)
 8001998:	2300      	movs	r3, #0
 800199a:	4293      	cmp	r3, r2
 800199c:	da0c      	bge.n	80019b8 <is_same_string+0x20>
{
 800199e:	b430      	push	{r4, r5}
    {
        if (str1[i] != str2[i])
 80019a0:	5cc5      	ldrb	r5, [r0, r3]
 80019a2:	5ccc      	ldrb	r4, [r1, r3]
 80019a4:	42a5      	cmp	r5, r4
 80019a6:	d105      	bne.n	80019b4 <is_same_string+0x1c>
    for (int i = 0; i < length; i++)
 80019a8:	3301      	adds	r3, #1
 80019aa:	4293      	cmp	r3, r2
 80019ac:	dbf8      	blt.n	80019a0 <is_same_string+0x8>
    bool isSame = true;
 80019ae:	2001      	movs	r0, #1
            isSame = false;
            break;
        }
    }
    return isSame;
}
 80019b0:	bc30      	pop	{r4, r5}
 80019b2:	4770      	bx	lr
            isSame = false;
 80019b4:	2000      	movs	r0, #0
 80019b6:	e7fb      	b.n	80019b0 <is_same_string+0x18>
    bool isSame = true;
 80019b8:	2001      	movs	r0, #1
}
 80019ba:	4770      	bx	lr

080019bc <handle_DAC_Callback>:
        not_sine[i] = 38 / 2;
    }
}

void handle_DAC_Callback(bool from_interrupt)
{
 80019bc:	b510      	push	{r4, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	4604      	mov	r4, r0
    HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80019c2:	2100      	movs	r1, #0
 80019c4:	481d      	ldr	r0, [pc, #116]	; (8001a3c <handle_DAC_Callback+0x80>)
 80019c6:	f000 f9d5 	bl	8001d74 <HAL_DAC_Stop_DMA>

    if (from_interrupt)
 80019ca:	b1d4      	cbz	r4, 8001a02 <handle_DAC_Callback+0x46>
    {
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, sine, SINE_LENGTH,
 80019cc:	2308      	movs	r3, #8
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	2314      	movs	r3, #20
 80019d2:	4a1b      	ldr	r2, [pc, #108]	; (8001a40 <handle_DAC_Callback+0x84>)
 80019d4:	2100      	movs	r1, #0
 80019d6:	4819      	ldr	r0, [pc, #100]	; (8001a3c <handle_DAC_Callback+0x80>)
 80019d8:	f000 fa12 	bl	8001e00 <HAL_DAC_Start_DMA>
                DAC_ALIGN_8B_R);
        HAL_TIM_Base_Start_IT(&htim6);
 80019dc:	4819      	ldr	r0, [pc, #100]	; (8001a44 <handle_DAC_Callback+0x88>)
 80019de:	f001 fa7b 	bl	8002ed8 <HAL_TIM_Base_Start_IT>
        timecode_index = 1;
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <handle_DAC_Callback+0x8c>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, p_next_DAC_output, SINE_LENGTH,
                DAC_ALIGN_8B_R);
        timecode_index++;
    }

    if (timecode_index > TIMECODE_LENGTH*SINES_PER_CHARACTER)
 80019e8:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <handle_DAC_Callback+0x8c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019f0:	d815      	bhi.n	8001a1e <handle_DAC_Callback+0x62>
        p_next_DAC_output = sine;
        should_concat_timecode = true;
    }
    else
    {
        if (timecode_bool[timecode_index])
 80019f2:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <handle_DAC_Callback+0x90>)
 80019f4:	5cd3      	ldrb	r3, [r2, r3]
 80019f6:	b9e3      	cbnz	r3, 8001a32 <handle_DAC_Callback+0x76>
        {
            p_next_DAC_output = sine;
        }
        else
        {
            p_next_DAC_output = not_sine;
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <handle_DAC_Callback+0x94>)
 80019fa:	4a16      	ldr	r2, [pc, #88]	; (8001a54 <handle_DAC_Callback+0x98>)
 80019fc:	601a      	str	r2, [r3, #0]
        }
    }

}
 80019fe:	b002      	add	sp, #8
 8001a00:	bd10      	pop	{r4, pc}
        HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, p_next_DAC_output, SINE_LENGTH,
 8001a02:	4b13      	ldr	r3, [pc, #76]	; (8001a50 <handle_DAC_Callback+0x94>)
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	2308      	movs	r3, #8
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2314      	movs	r3, #20
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	480b      	ldr	r0, [pc, #44]	; (8001a3c <handle_DAC_Callback+0x80>)
 8001a10:	f000 f9f6 	bl	8001e00 <HAL_DAC_Start_DMA>
        timecode_index++;
 8001a14:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <handle_DAC_Callback+0x8c>)
 8001a16:	6813      	ldr	r3, [r2, #0]
 8001a18:	3301      	adds	r3, #1
 8001a1a:	6013      	str	r3, [r2, #0]
 8001a1c:	e7e4      	b.n	80019e8 <handle_DAC_Callback+0x2c>
        HAL_TIM_Base_Stop_IT(&htim6);
 8001a1e:	4809      	ldr	r0, [pc, #36]	; (8001a44 <handle_DAC_Callback+0x88>)
 8001a20:	f001 fa70 	bl	8002f04 <HAL_TIM_Base_Stop_IT>
        p_next_DAC_output = sine;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	; (8001a50 <handle_DAC_Callback+0x94>)
 8001a26:	4a06      	ldr	r2, [pc, #24]	; (8001a40 <handle_DAC_Callback+0x84>)
 8001a28:	601a      	str	r2, [r3, #0]
        should_concat_timecode = true;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <handle_DAC_Callback+0x9c>)
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e7e5      	b.n	80019fe <handle_DAC_Callback+0x42>
            p_next_DAC_output = sine;
 8001a32:	4b07      	ldr	r3, [pc, #28]	; (8001a50 <handle_DAC_Callback+0x94>)
 8001a34:	4a02      	ldr	r2, [pc, #8]	; (8001a40 <handle_DAC_Callback+0x84>)
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	e7e1      	b.n	80019fe <handle_DAC_Callback+0x42>
 8001a3a:	bf00      	nop
 8001a3c:	20000590 	.word	0x20000590
 8001a40:	20000170 	.word	0x20000170
 8001a44:	20000668 	.word	0x20000668
 8001a48:	20000184 	.word	0x20000184
 8001a4c:	20000194 	.word	0x20000194
 8001a50:	20000078 	.word	0x20000078
 8001a54:	20000154 	.word	0x20000154
 8001a58:	2000016c 	.word	0x2000016c

08001a5c <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001a5c:	b510      	push	{r4, lr}
 8001a5e:	b082      	sub	sp, #8
    static uint32_t toggle = 0;

    if (hdac == &hdac1)
 8001a60:	4b18      	ldr	r3, [pc, #96]	; (8001ac4 <HAL_DAC_ConvCpltCallbackCh1+0x68>)
 8001a62:	4298      	cmp	r0, r3
 8001a64:	d004      	beq.n	8001a70 <HAL_DAC_ConvCpltCallbackCh1+0x14>
    {
        handle_DAC_Callback(false);
    }
    else if (hdac == &hdac2)
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8001a68:	4298      	cmp	r0, r3
 8001a6a:	d005      	beq.n	8001a78 <HAL_DAC_ConvCpltCallbackCh1+0x1c>
                    DAC_ALIGN_8B_R);
            toggle = 0;
        }

    }
}
 8001a6c:	b002      	add	sp, #8
 8001a6e:	bd10      	pop	{r4, pc}
        handle_DAC_Callback(false);
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ffa3 	bl	80019bc <handle_DAC_Callback>
 8001a76:	e7f9      	b.n	8001a6c <HAL_DAC_ConvCpltCallbackCh1+0x10>
        if (toggle == 0)
 8001a78:	4b14      	ldr	r3, [pc, #80]	; (8001acc <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	b183      	cbz	r3, 8001aa0 <HAL_DAC_ConvCpltCallbackCh1+0x44>
            HAL_DAC_Stop_DMA(&hdac2, DAC_CHANNEL_1);
 8001a7e:	4c12      	ldr	r4, [pc, #72]	; (8001ac8 <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8001a80:	2100      	movs	r1, #0
 8001a82:	4620      	mov	r0, r4
 8001a84:	f000 f976 	bl	8001d74 <HAL_DAC_Stop_DMA>
            HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, test_code2, 20,
 8001a88:	2308      	movs	r3, #8
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2314      	movs	r3, #20
 8001a8e:	4a10      	ldr	r2, [pc, #64]	; (8001ad0 <HAL_DAC_ConvCpltCallbackCh1+0x74>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	4620      	mov	r0, r4
 8001a94:	f000 f9b4 	bl	8001e00 <HAL_DAC_Start_DMA>
            toggle = 0;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
}
 8001a9e:	e7e5      	b.n	8001a6c <HAL_DAC_ConvCpltCallbackCh1+0x10>
            HAL_DAC_Stop_DMA(&hdac2, DAC_CHANNEL_1);
 8001aa0:	4c09      	ldr	r4, [pc, #36]	; (8001ac8 <HAL_DAC_ConvCpltCallbackCh1+0x6c>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	f000 f965 	bl	8001d74 <HAL_DAC_Stop_DMA>
            HAL_DAC_Start_DMA(&hdac2, DAC_CHANNEL_1, test_code1, 20,
 8001aaa:	2308      	movs	r3, #8
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2314      	movs	r3, #20
 8001ab0:	4a08      	ldr	r2, [pc, #32]	; (8001ad4 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	f000 f9a3 	bl	8001e00 <HAL_DAC_Start_DMA>
            toggle = 1;
 8001aba:	4b04      	ldr	r3, [pc, #16]	; (8001acc <HAL_DAC_ConvCpltCallbackCh1+0x70>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
 8001ac0:	e7d4      	b.n	8001a6c <HAL_DAC_ConvCpltCallbackCh1+0x10>
 8001ac2:	bf00      	nop
 8001ac4:	20000590 	.word	0x20000590
 8001ac8:	2000057c 	.word	0x2000057c
 8001acc:	20000188 	.word	0x20000188
 8001ad0:	20000090 	.word	0x20000090
 8001ad4:	2000007c 	.word	0x2000007c

08001ad8 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ad8:	b508      	push	{r3, lr}
    int i = HAL_DAC_GetError(&hdac1);
 8001ada:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <HAL_DAC_ErrorCallbackCh1+0xc>)
 8001adc:	f000 f974 	bl	8001dc8 <HAL_DAC_GetError>
}
 8001ae0:	bd08      	pop	{r3, pc}
 8001ae2:	bf00      	nop
 8001ae4:	20000590 	.word	0x20000590

08001ae8 <HAL_DAC_DMAUnderrunCallbackCh1>:

void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001ae8:	b508      	push	{r3, lr}
    int i = HAL_DAC_GetError(&hdac1);
 8001aea:	4802      	ldr	r0, [pc, #8]	; (8001af4 <HAL_DAC_DMAUnderrunCallbackCh1+0xc>)
 8001aec:	f000 f96c 	bl	8001dc8 <HAL_DAC_GetError>
}
 8001af0:	bd08      	pop	{r3, pc}
 8001af2:	bf00      	nop
 8001af4:	20000590 	.word	0x20000590

08001af8 <generate_sine>:

void generate_sine(uint8_t target[], uint32_t length)
{
 8001af8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001afc:	4680      	mov	r8, r0
 8001afe:	460d      	mov	r5, r1
    uint32_t bin_max = 0xFF;
    uint32_t voltage_max = 3300;
    uint32_t voltage_pp = 500;
    uint32_t bin_pp = bin_max * voltage_pp / voltage_max;

    target[0] = (bin_pp + 1) / 2;
 8001b00:	2313      	movs	r3, #19
 8001b02:	7003      	strb	r3, [r0, #0]
    for (uint32_t i = 1; i < length; i++)
 8001b04:	2401      	movs	r4, #1
 8001b06:	e025      	b.n	8001b54 <generate_sine+0x5c>
    {
        target[i] = (uint16_t) ((sin(i * 2 * M_PI / length) + 1)
 8001b08:	0060      	lsls	r0, r4, #1
 8001b0a:	f7fe fc9f 	bl	800044c <__aeabi_ui2d>
 8001b0e:	a316      	add	r3, pc, #88	; (adr r3, 8001b68 <generate_sine+0x70>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd14 	bl	8000540 <__aeabi_dmul>
 8001b18:	4606      	mov	r6, r0
 8001b1a:	460f      	mov	r7, r1
 8001b1c:	4628      	mov	r0, r5
 8001b1e:	f7fe fc95 	bl	800044c <__aeabi_ui2d>
 8001b22:	4602      	mov	r2, r0
 8001b24:	460b      	mov	r3, r1
 8001b26:	4630      	mov	r0, r6
 8001b28:	4639      	mov	r1, r7
 8001b2a:	f7fe fe33 	bl	8000794 <__aeabi_ddiv>
 8001b2e:	ec41 0b10 	vmov	d0, r0, r1
 8001b32:	f002 f851 	bl	8003bd8 <sin>
 8001b36:	2200      	movs	r2, #0
 8001b38:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <generate_sine+0x68>)
 8001b3a:	ec51 0b10 	vmov	r0, r1, d0
 8001b3e:	f7fe fb49 	bl	80001d4 <__adddf3>
                * ((bin_pp + 1) / 2));
 8001b42:	2200      	movs	r2, #0
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <generate_sine+0x6c>)
 8001b46:	f7fe fcfb 	bl	8000540 <__aeabi_dmul>
        target[i] = (uint16_t) ((sin(i * 2 * M_PI / length) + 1)
 8001b4a:	f7fe ffd1 	bl	8000af0 <__aeabi_d2uiz>
 8001b4e:	f808 0004 	strb.w	r0, [r8, r4]
    for (uint32_t i = 1; i < length; i++)
 8001b52:	3401      	adds	r4, #1
 8001b54:	42ac      	cmp	r4, r5
 8001b56:	d3d7      	bcc.n	8001b08 <generate_sine+0x10>
    }
}
 8001b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b5c:	f3af 8000 	nop.w
 8001b60:	3ff00000 	.word	0x3ff00000
 8001b64:	40330000 	.word	0x40330000
 8001b68:	54442d18 	.word	0x54442d18
 8001b6c:	400921fb 	.word	0x400921fb

08001b70 <setup_sine>:
{
 8001b70:	b508      	push	{r3, lr}
    generate_sine(sine, SINE_LENGTH);
 8001b72:	2114      	movs	r1, #20
 8001b74:	4805      	ldr	r0, [pc, #20]	; (8001b8c <setup_sine+0x1c>)
 8001b76:	f7ff ffbf 	bl	8001af8 <generate_sine>
    for (uint32_t i = 0; i < SINE_LENGTH; i++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	e003      	b.n	8001b86 <setup_sine+0x16>
        not_sine[i] = 38 / 2;
 8001b7e:	4a04      	ldr	r2, [pc, #16]	; (8001b90 <setup_sine+0x20>)
 8001b80:	2113      	movs	r1, #19
 8001b82:	54d1      	strb	r1, [r2, r3]
    for (uint32_t i = 0; i < SINE_LENGTH; i++)
 8001b84:	3301      	adds	r3, #1
 8001b86:	2b13      	cmp	r3, #19
 8001b88:	d9f9      	bls.n	8001b7e <setup_sine+0xe>
}
 8001b8a:	bd08      	pop	{r3, pc}
 8001b8c:	20000170 	.word	0x20000170
 8001b90:	20000154 	.word	0x20000154

08001b94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bcc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001b98:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001b9a:	e003      	b.n	8001ba4 <LoopCopyDataInit>

08001b9c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001b9c:	4b0c      	ldr	r3, [pc, #48]	; (8001bd0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001b9e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ba0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ba2:	3104      	adds	r1, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ba4:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ba8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001baa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001bac:	d3f6      	bcc.n	8001b9c <CopyDataInit>
	ldr	r2, =_sbss
 8001bae:	4a0b      	ldr	r2, [pc, #44]	; (8001bdc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bb0:	e002      	b.n	8001bb8 <LoopFillZerobss>

08001bb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bb2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bb4:	f842 3b04 	str.w	r3, [r2], #4

08001bb8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bb8:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <LoopForever+0x16>)
	cmp	r2, r3
 8001bba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bbc:	d3f9      	bcc.n	8001bb2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bbe:	f7ff fe85 	bl	80018cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bc2:	f001 ff11 	bl	80039e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bc6:	f7ff fbb7 	bl	8001338 <main>

08001bca <LoopForever>:

LoopForever:
    b LoopForever
 8001bca:	e7fe      	b.n	8001bca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001bcc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001bd0:	08005ec0 	.word	0x08005ec0
	ldr	r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001bd8:	20000114 	.word	0x20000114
	ldr	r2, =_sbss
 8001bdc:	20000114 	.word	0x20000114
	ldr	r3, = _ebss
 8001be0:	2000087c 	.word	0x2000087c

08001be4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001be4:	e7fe      	b.n	8001be4 <ADC1_2_IRQHandler>
	...

08001be8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001be8:	b510      	push	{r4, lr}
 8001bea:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bec:	4b0e      	ldr	r3, [pc, #56]	; (8001c28 <HAL_InitTick+0x40>)
 8001bee:	7818      	ldrb	r0, [r3, #0]
 8001bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001bf4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bf8:	4a0c      	ldr	r2, [pc, #48]	; (8001c2c <HAL_InitTick+0x44>)
 8001bfa:	6810      	ldr	r0, [r2, #0]
 8001bfc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c00:	f000 f890 	bl	8001d24 <HAL_SYSTICK_Config>
 8001c04:	b968      	cbnz	r0, 8001c22 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c06:	2c0f      	cmp	r4, #15
 8001c08:	d901      	bls.n	8001c0e <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8001c0a:	2001      	movs	r0, #1
 8001c0c:	e00a      	b.n	8001c24 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c0e:	2200      	movs	r2, #0
 8001c10:	4621      	mov	r1, r4
 8001c12:	f04f 30ff 	mov.w	r0, #4294967295
 8001c16:	f000 f843 	bl	8001ca0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <HAL_InitTick+0x48>)
 8001c1c:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8001c1e:	2000      	movs	r0, #0
 8001c20:	e000      	b.n	8001c24 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8001c22:	2001      	movs	r0, #1
}
 8001c24:	bd10      	pop	{r4, pc}
 8001c26:	bf00      	nop
 8001c28:	200000a4 	.word	0x200000a4
 8001c2c:	20000074 	.word	0x20000074
 8001c30:	200000a8 	.word	0x200000a8

08001c34 <HAL_Init>:
{
 8001c34:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_Init+0x20>)
 8001c38:	6813      	ldr	r3, [r2, #0]
 8001c3a:	f043 0310 	orr.w	r3, r3, #16
 8001c3e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c40:	2003      	movs	r0, #3
 8001c42:	f000 f81b 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c46:	2000      	movs	r0, #0
 8001c48:	f7ff ffce 	bl	8001be8 <HAL_InitTick>
  HAL_MspInit();
 8001c4c:	f7ff fc44 	bl	80014d8 <HAL_MspInit>
}
 8001c50:	2000      	movs	r0, #0
 8001c52:	bd08      	pop	{r3, pc}
 8001c54:	40022000 	.word	0x40022000

08001c58 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <HAL_IncTick+0x10>)
 8001c5a:	6811      	ldr	r1, [r2, #0]
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <HAL_IncTick+0x14>)
 8001c5e:	781b      	ldrb	r3, [r3, #0]
 8001c60:	440b      	add	r3, r1
 8001c62:	6013      	str	r3, [r2, #0]
}
 8001c64:	4770      	bx	lr
 8001c66:	bf00      	nop
 8001c68:	20000874 	.word	0x20000874
 8001c6c:	200000a4 	.word	0x200000a4

08001c70 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8001c70:	4b01      	ldr	r3, [pc, #4]	; (8001c78 <HAL_GetTick+0x8>)
 8001c72:	6818      	ldr	r0, [r3, #0]
}
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000874 	.word	0x20000874

08001c7c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4a07      	ldr	r2, [pc, #28]	; (8001c9c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001c7e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c84:	041b      	lsls	r3, r3, #16
 8001c86:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c88:	0200      	lsls	r0, r0, #8
 8001c8a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c8e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8001c90:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8001c94:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001c98:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001c9a:	4770      	bx	lr
 8001c9c:	e000ed00 	.word	0xe000ed00

08001ca0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ca0:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca2:	4b17      	ldr	r3, [pc, #92]	; (8001d00 <HAL_NVIC_SetPriority+0x60>)
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001caa:	f1c3 0407 	rsb	r4, r3, #7
 8001cae:	2c04      	cmp	r4, #4
 8001cb0:	bf28      	it	cs
 8001cb2:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cb4:	1d1d      	adds	r5, r3, #4
 8001cb6:	2d06      	cmp	r5, #6
 8001cb8:	d918      	bls.n	8001cec <HAL_NVIC_SetPriority+0x4c>
 8001cba:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 35ff 	mov.w	r5, #4294967295
 8001cc0:	fa05 f404 	lsl.w	r4, r5, r4
 8001cc4:	ea21 0104 	bic.w	r1, r1, r4
 8001cc8:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cca:	fa05 f303 	lsl.w	r3, r5, r3
 8001cce:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd2:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8001cd4:	2800      	cmp	r0, #0
 8001cd6:	db0b      	blt.n	8001cf0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cd8:	0109      	lsls	r1, r1, #4
 8001cda:	b2c9      	uxtb	r1, r1
 8001cdc:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001ce0:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001ce4:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001ce8:	bc30      	pop	{r4, r5}
 8001cea:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cec:	2300      	movs	r3, #0
 8001cee:	e7e5      	b.n	8001cbc <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cf0:	f000 000f 	and.w	r0, r0, #15
 8001cf4:	0109      	lsls	r1, r1, #4
 8001cf6:	b2c9      	uxtb	r1, r1
 8001cf8:	4b02      	ldr	r3, [pc, #8]	; (8001d04 <HAL_NVIC_SetPriority+0x64>)
 8001cfa:	5419      	strb	r1, [r3, r0]
 8001cfc:	e7f4      	b.n	8001ce8 <HAL_NVIC_SetPriority+0x48>
 8001cfe:	bf00      	nop
 8001d00:	e000ed00 	.word	0xe000ed00
 8001d04:	e000ed14 	.word	0xe000ed14

08001d08 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	db07      	blt.n	8001d1c <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d0c:	f000 021f 	and.w	r2, r0, #31
 8001d10:	0940      	lsrs	r0, r0, #5
 8001d12:	2301      	movs	r3, #1
 8001d14:	4093      	lsls	r3, r2
 8001d16:	4a02      	ldr	r2, [pc, #8]	; (8001d20 <HAL_NVIC_EnableIRQ+0x18>)
 8001d18:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	e000e100 	.word	0xe000e100

08001d24 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d24:	3801      	subs	r0, #1
 8001d26:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001d2a:	d20a      	bcs.n	8001d42 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_SYSTICK_Config+0x24>)
 8001d2e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	4a06      	ldr	r2, [pc, #24]	; (8001d4c <HAL_SYSTICK_Config+0x28>)
 8001d32:	21f0      	movs	r1, #240	; 0xf0
 8001d34:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d38:	2000      	movs	r0, #0
 8001d3a:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d3c:	2207      	movs	r2, #7
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d42:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e010 	.word	0xe000e010
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8001d50:	b170      	cbz	r0, 8001d70 <HAL_DAC_Init+0x20>
{ 
 8001d52:	b510      	push	{r4, lr}
 8001d54:	4604      	mov	r4, r0
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8001d56:	7903      	ldrb	r3, [r0, #4]
 8001d58:	b133      	cbz	r3, 8001d68 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001d5e:	2000      	movs	r0, #0
 8001d60:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001d62:	2301      	movs	r3, #1
 8001d64:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8001d66:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8001d68:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8001d6a:	f7ff fbcd 	bl	8001508 <HAL_DAC_MspInit>
 8001d6e:	e7f4      	b.n	8001d5a <HAL_DAC_Init+0xa>
     return HAL_ERROR;
 8001d70:	2001      	movs	r0, #1
}
 8001d72:	4770      	bx	lr

08001d74 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8001d74:	b510      	push	{r4, lr}
 8001d76:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8001d78:	6800      	ldr	r0, [r0, #0]
 8001d7a:	6803      	ldr	r3, [r0, #0]
 8001d7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d80:	408a      	lsls	r2, r1
 8001d82:	ea23 0302 	bic.w	r3, r3, r2
 8001d86:	6003      	str	r3, [r0, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8001d88:	6820      	ldr	r0, [r4, #0]
 8001d8a:	6803      	ldr	r3, [r0, #0]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	408a      	lsls	r2, r1
 8001d90:	ea23 0302 	bic.w	r3, r3, r2
 8001d94:	6003      	str	r3, [r0, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8001d96:	b959      	cbnz	r1, 8001db0 <HAL_DAC_Stop_DMA+0x3c>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8001d98:	68a0      	ldr	r0, [r4, #8]
 8001d9a:	f000 f9bf 	bl	800211c <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001d9e:	6822      	ldr	r2, [r4, #0]
 8001da0:	6813      	ldr	r3, [r2, #0]
 8001da2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001da6:	6013      	str	r3, [r2, #0]
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8001da8:	b958      	cbnz	r0, 8001dc2 <HAL_DAC_Stop_DMA+0x4e>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8001daa:	2301      	movs	r3, #1
 8001dac:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 8001dae:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8001db0:	68e0      	ldr	r0, [r4, #12]
 8001db2:	f000 f9b3 	bl	800211c <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001db6:	6822      	ldr	r2, [r4, #0]
 8001db8:	6813      	ldr	r3, [r2, #0]
 8001dba:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	e7f2      	b.n	8001da8 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	7123      	strb	r3, [r4, #4]
 8001dc6:	e7f2      	b.n	8001dae <HAL_DAC_Stop_DMA+0x3a>

08001dc8 <HAL_DAC_GetError>:
  *         the configuration information for the specified DAC.
  * @retval DAC Error Code
  */
uint32_t HAL_DAC_GetError(DAC_HandleTypeDef *hdac)
{
  return hdac->ErrorCode;
 8001dc8:	6900      	ldr	r0, [r0, #16]
}
 8001dca:	4770      	bx	lr

08001dcc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001dcc:	4770      	bx	lr

08001dce <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8001dce:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001dd0:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001dd2:	6923      	ldr	r3, [r4, #16]
 8001dd4:	f043 0304 	orr.w	r3, r3, #4
 8001dd8:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8001dda:	4620      	mov	r0, r4
 8001ddc:	f7ff fe7c 	bl	8001ad8 <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001de0:	2301      	movs	r3, #1
 8001de2:	7123      	strb	r3, [r4, #4]
}
 8001de4:	bd10      	pop	{r4, pc}

08001de6 <DAC_DMAHalfConvCpltCh1>:
{
 8001de6:	b508      	push	{r3, lr}
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8001de8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001dea:	f7ff ffef 	bl	8001dcc <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 8001dee:	bd08      	pop	{r3, pc}

08001df0 <DAC_DMAConvCpltCh1>:
{
 8001df0:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001df2:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8001df4:	4620      	mov	r0, r4
 8001df6:	f7ff fe31 	bl	8001a5c <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	7123      	strb	r3, [r4, #4]
}
 8001dfe:	bd10      	pop	{r4, pc}

08001e00 <HAL_DAC_Start_DMA>:
{
 8001e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e02:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdac);
 8001e04:	7946      	ldrb	r6, [r0, #5]
 8001e06:	2e01      	cmp	r6, #1
 8001e08:	d064      	beq.n	8001ed4 <HAL_DAC_Start_DMA+0xd4>
 8001e0a:	2501      	movs	r5, #1
 8001e0c:	7145      	strb	r5, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001e0e:	2502      	movs	r5, #2
 8001e10:	7105      	strb	r5, [r0, #4]
  if(Channel == DAC_CHANNEL_1)
 8001e12:	2900      	cmp	r1, #0
 8001e14:	d135      	bne.n	8001e82 <HAL_DAC_Start_DMA+0x82>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001e16:	6885      	ldr	r5, [r0, #8]
 8001e18:	4e2f      	ldr	r6, [pc, #188]	; (8001ed8 <HAL_DAC_Start_DMA+0xd8>)
 8001e1a:	62ae      	str	r6, [r5, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001e1c:	6885      	ldr	r5, [r0, #8]
 8001e1e:	4e2f      	ldr	r6, [pc, #188]	; (8001edc <HAL_DAC_Start_DMA+0xdc>)
 8001e20:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001e22:	6885      	ldr	r5, [r0, #8]
 8001e24:	4e2e      	ldr	r6, [pc, #184]	; (8001ee0 <HAL_DAC_Start_DMA+0xe0>)
 8001e26:	632e      	str	r6, [r5, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8001e28:	6806      	ldr	r6, [r0, #0]
 8001e2a:	6835      	ldr	r5, [r6, #0]
 8001e2c:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8001e30:	6035      	str	r5, [r6, #0]
    switch(Alignment)
 8001e32:	2c04      	cmp	r4, #4
 8001e34:	d01f      	beq.n	8001e76 <HAL_DAC_Start_DMA+0x76>
 8001e36:	2c08      	cmp	r4, #8
 8001e38:	d020      	beq.n	8001e7c <HAL_DAC_Start_DMA+0x7c>
 8001e3a:	b10c      	cbz	r4, 8001e40 <HAL_DAC_Start_DMA+0x40>
  uint32_t tmpreg = 0U;
 8001e3c:	460e      	mov	r6, r1
 8001e3e:	e001      	b.n	8001e44 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001e40:	6806      	ldr	r6, [r0, #0]
 8001e42:	3608      	adds	r6, #8
 8001e44:	4617      	mov	r7, r2
 8001e46:	460d      	mov	r5, r1
 8001e48:	4604      	mov	r4, r0
  if(Channel == DAC_CHANNEL_1)
 8001e4a:	2900      	cmp	r1, #0
 8001e4c:	d137      	bne.n	8001ebe <HAL_DAC_Start_DMA+0xbe>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001e4e:	6801      	ldr	r1, [r0, #0]
 8001e50:	680a      	ldr	r2, [r1, #0]
 8001e52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e56:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001e58:	4632      	mov	r2, r6
 8001e5a:	4639      	mov	r1, r7
 8001e5c:	6880      	ldr	r0, [r0, #8]
 8001e5e:	f000 f923 	bl	80020a8 <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8001e62:	2000      	movs	r0, #0
 8001e64:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8001e66:	6822      	ldr	r2, [r4, #0]
 8001e68:	6813      	ldr	r3, [r2, #0]
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	fa01 f505 	lsl.w	r5, r1, r5
 8001e70:	431d      	orrs	r5, r3
 8001e72:	6015      	str	r5, [r2, #0]
}
 8001e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001e76:	6806      	ldr	r6, [r0, #0]
 8001e78:	360c      	adds	r6, #12
        break;
 8001e7a:	e7e3      	b.n	8001e44 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001e7c:	6806      	ldr	r6, [r0, #0]
 8001e7e:	3610      	adds	r6, #16
        break;
 8001e80:	e7e0      	b.n	8001e44 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001e82:	68c5      	ldr	r5, [r0, #12]
 8001e84:	4e17      	ldr	r6, [pc, #92]	; (8001ee4 <HAL_DAC_Start_DMA+0xe4>)
 8001e86:	62ae      	str	r6, [r5, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001e88:	68c5      	ldr	r5, [r0, #12]
 8001e8a:	4e17      	ldr	r6, [pc, #92]	; (8001ee8 <HAL_DAC_Start_DMA+0xe8>)
 8001e8c:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001e8e:	68c5      	ldr	r5, [r0, #12]
 8001e90:	4e16      	ldr	r6, [pc, #88]	; (8001eec <HAL_DAC_Start_DMA+0xec>)
 8001e92:	632e      	str	r6, [r5, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8001e94:	6806      	ldr	r6, [r0, #0]
 8001e96:	6835      	ldr	r5, [r6, #0]
 8001e98:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8001e9c:	6035      	str	r5, [r6, #0]
    switch(Alignment)
 8001e9e:	2c04      	cmp	r4, #4
 8001ea0:	d007      	beq.n	8001eb2 <HAL_DAC_Start_DMA+0xb2>
 8001ea2:	2c08      	cmp	r4, #8
 8001ea4:	d008      	beq.n	8001eb8 <HAL_DAC_Start_DMA+0xb8>
 8001ea6:	b10c      	cbz	r4, 8001eac <HAL_DAC_Start_DMA+0xac>
  uint32_t tmpreg = 0U;
 8001ea8:	2600      	movs	r6, #0
 8001eaa:	e7cb      	b.n	8001e44 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001eac:	6806      	ldr	r6, [r0, #0]
 8001eae:	3614      	adds	r6, #20
        break;
 8001eb0:	e7c8      	b.n	8001e44 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001eb2:	6806      	ldr	r6, [r0, #0]
 8001eb4:	3618      	adds	r6, #24
        break;
 8001eb6:	e7c5      	b.n	8001e44 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001eb8:	6806      	ldr	r6, [r0, #0]
 8001eba:	361c      	adds	r6, #28
        break;
 8001ebc:	e7c2      	b.n	8001e44 <HAL_DAC_Start_DMA+0x44>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001ebe:	6801      	ldr	r1, [r0, #0]
 8001ec0:	680a      	ldr	r2, [r1, #0]
 8001ec2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ec6:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001ec8:	4632      	mov	r2, r6
 8001eca:	4639      	mov	r1, r7
 8001ecc:	68c0      	ldr	r0, [r0, #12]
 8001ece:	f000 f8eb 	bl	80020a8 <HAL_DMA_Start_IT>
 8001ed2:	e7c6      	b.n	8001e62 <HAL_DAC_Start_DMA+0x62>
  __HAL_LOCK(hdac);
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	e7cd      	b.n	8001e74 <HAL_DAC_Start_DMA+0x74>
 8001ed8:	08001df1 	.word	0x08001df1
 8001edc:	08001de7 	.word	0x08001de7
 8001ee0:	08001dcf 	.word	0x08001dcf
 8001ee4:	08001f5f 	.word	0x08001f5f
 8001ee8:	08001f71 	.word	0x08001f71
 8001eec:	08001f7d 	.word	0x08001f7d

08001ef0 <HAL_DAC_ConfigChannel>:
{
 8001ef0:	b430      	push	{r4, r5}
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001ef2:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdac);
 8001ef4:	7943      	ldrb	r3, [r0, #5]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d02c      	beq.n	8001f54 <HAL_DAC_ConfigChannel+0x64>
 8001efa:	2301      	movs	r3, #1
 8001efc:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8001efe:	2302      	movs	r3, #2
 8001f00:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8001f02:	6823      	ldr	r3, [r4, #0]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001f04:	4d14      	ldr	r5, [pc, #80]	; (8001f58 <HAL_DAC_ConfigChannel+0x68>)
 8001f06:	42ac      	cmp	r4, r5
 8001f08:	d019      	beq.n	8001f3e <HAL_DAC_ConfigChannel+0x4e>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8001f0a:	f640 75fe 	movw	r5, #4094	; 0xffe
 8001f0e:	4095      	lsls	r5, r2
 8001f10:	ea23 0505 	bic.w	r5, r3, r5
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8001f14:	680b      	ldr	r3, [r1, #0]
 8001f16:	6889      	ldr	r1, [r1, #8]
 8001f18:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 8001f1a:	4093      	lsls	r3, r2
 8001f1c:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8001f1e:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8001f20:	6804      	ldr	r4, [r0, #0]
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	21c0      	movs	r1, #192	; 0xc0
 8001f26:	fa01 f202 	lsl.w	r2, r1, r2
 8001f2a:	ea23 0202 	bic.w	r2, r3, r2
 8001f2e:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8001f30:	2301      	movs	r3, #1
 8001f32:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8001f34:	2300      	movs	r3, #0
 8001f36:	7143      	strb	r3, [r0, #5]
  return HAL_OK;
 8001f38:	4618      	mov	r0, r3
}
 8001f3a:	bc30      	pop	{r4, r5}
 8001f3c:	4770      	bx	lr
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8001f3e:	2a00      	cmp	r2, #0
 8001f40:	d1e3      	bne.n	8001f0a <HAL_DAC_ConfigChannel+0x1a>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8001f42:	f640 75fe 	movw	r5, #4094	; 0xffe
 8001f46:	4095      	lsls	r5, r2
 8001f48:	ea23 0505 	bic.w	r5, r3, r5
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8001f4c:	680b      	ldr	r3, [r1, #0]
 8001f4e:	6849      	ldr	r1, [r1, #4]
 8001f50:	430b      	orrs	r3, r1
 8001f52:	e7e2      	b.n	8001f1a <HAL_DAC_ConfigChannel+0x2a>
  __HAL_LOCK(hdac);
 8001f54:	2002      	movs	r0, #2
 8001f56:	e7f0      	b.n	8001f3a <HAL_DAC_ConfigChannel+0x4a>
 8001f58:	40007400 	.word	0x40007400

08001f5c <HAL_DACEx_ConvCpltCallbackCh2>:
}
 8001f5c:	4770      	bx	lr

08001f5e <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001f5e:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f60:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8001f62:	4620      	mov	r0, r4
 8001f64:	f7ff fffa 	bl	8001f5c <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	7123      	strb	r3, [r4, #4]
}
 8001f6c:	bd10      	pop	{r4, pc}

08001f6e <HAL_DACEx_ConvHalfCpltCallbackCh2>:
}
 8001f6e:	4770      	bx	lr

08001f70 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8001f70:	b508      	push	{r3, lr}

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8001f72:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8001f74:	f7ff fffb 	bl	8001f6e <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8001f78:	bd08      	pop	{r3, pc}

08001f7a <HAL_DACEx_ErrorCallbackCh2>:
}
 8001f7a:	4770      	bx	lr

08001f7c <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8001f7c:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001f7e:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f80:	6923      	ldr	r3, [r4, #16]
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8001f88:	4620      	mov	r0, r4
 8001f8a:	f7ff fff6 	bl	8001f7a <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	7123      	strb	r3, [r4, #4]
}
 8001f92:	bd10      	pop	{r4, pc}

08001f94 <HAL_DACEx_DMAUnderrunCallbackCh2>:
}
 8001f94:	4770      	bx	lr

08001f96 <HAL_DAC_IRQHandler>:
{
 8001f96:	b510      	push	{r4, lr}
 8001f98:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001f9a:	6803      	ldr	r3, [r0, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001fa2:	d003      	beq.n	8001fac <HAL_DAC_IRQHandler+0x16>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001fa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fa6:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8001faa:	d109      	bne.n	8001fc0 <HAL_DAC_IRQHandler+0x2a>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001fb4:	d003      	beq.n	8001fbe <HAL_DAC_IRQHandler+0x28>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8001fb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb8:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8001fbc:	d111      	bne.n	8001fe2 <HAL_DAC_IRQHandler+0x4c>
}
 8001fbe:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fc0:	2204      	movs	r2, #4
 8001fc2:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001fc4:	6902      	ldr	r2, [r0, #16]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8001fcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fd0:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001fd2:	6802      	ldr	r2, [r0, #0]
 8001fd4:	6813      	ldr	r3, [r2, #0]
 8001fd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001fda:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001fdc:	f7ff fd84 	bl	8001ae8 <HAL_DAC_DMAUnderrunCallbackCh1>
 8001fe0:	e7e4      	b.n	8001fac <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fe2:	2204      	movs	r2, #4
 8001fe4:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8001fe6:	6922      	ldr	r2, [r4, #16]
 8001fe8:	f042 0202 	orr.w	r2, r2, #2
 8001fec:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8001fee:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ff2:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001ff4:	6822      	ldr	r2, [r4, #0]
 8001ff6:	6813      	ldr	r3, [r2, #0]
 8001ff8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ffc:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8001ffe:	4620      	mov	r0, r4
 8002000:	f7ff ffc8 	bl	8001f94 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8002004:	e7db      	b.n	8001fbe <HAL_DAC_IRQHandler+0x28>

08002006 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002006:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002008:	6c06      	ldr	r6, [r0, #64]	; 0x40
 800200a:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 800200c:	2401      	movs	r4, #1
 800200e:	40b4      	lsls	r4, r6
 8002010:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002012:	6804      	ldr	r4, [r0, #0]
 8002014:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002016:	6843      	ldr	r3, [r0, #4]
 8002018:	2b10      	cmp	r3, #16
 800201a:	d005      	beq.n	8002028 <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 800201c:	6803      	ldr	r3, [r0, #0]
 800201e:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8002020:	6803      	ldr	r3, [r0, #0]
 8002022:	60da      	str	r2, [r3, #12]
  }
}
 8002024:	bc70      	pop	{r4, r5, r6}
 8002026:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8002028:	6803      	ldr	r3, [r0, #0]
 800202a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 800202c:	6803      	ldr	r3, [r0, #0]
 800202e:	60d9      	str	r1, [r3, #12]
 8002030:	e7f8      	b.n	8002024 <DMA_SetConfig+0x1e>
	...

08002034 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002034:	6802      	ldr	r2, [r0, #0]
 8002036:	4b05      	ldr	r3, [pc, #20]	; (800204c <DMA_CalcBaseAndBitshift+0x18>)
 8002038:	4413      	add	r3, r2
 800203a:	4a05      	ldr	r2, [pc, #20]	; (8002050 <DMA_CalcBaseAndBitshift+0x1c>)
 800203c:	fba2 2303 	umull	r2, r3, r2, r3
 8002040:	091b      	lsrs	r3, r3, #4
 8002042:	009b      	lsls	r3, r3, #2
 8002044:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002046:	4b03      	ldr	r3, [pc, #12]	; (8002054 <DMA_CalcBaseAndBitshift+0x20>)
 8002048:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 800204a:	4770      	bx	lr
 800204c:	bffdfff8 	.word	0xbffdfff8
 8002050:	cccccccd 	.word	0xcccccccd
 8002054:	40020000 	.word	0x40020000

08002058 <HAL_DMA_Init>:
  if(NULL == hdma)
 8002058:	b320      	cbz	r0, 80020a4 <HAL_DMA_Init+0x4c>
{ 
 800205a:	b510      	push	{r4, lr}
 800205c:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 800205e:	2302      	movs	r3, #2
 8002060:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8002064:	6801      	ldr	r1, [r0, #0]
 8002066:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002068:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800206c:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8002070:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002072:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8002074:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002076:	68e0      	ldr	r0, [r4, #12]
 8002078:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207a:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207e:	6960      	ldr	r0, [r4, #20]
 8002080:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002082:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002084:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8002086:	69e0      	ldr	r0, [r4, #28]
 8002088:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 800208a:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 800208c:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 800208e:	4620      	mov	r0, r4
 8002090:	f7ff ffd0 	bl	8002034 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002094:	2000      	movs	r0, #0
 8002096:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8002098:	2301      	movs	r3, #1
 800209a:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 800209e:	f884 0020 	strb.w	r0, [r4, #32]
}  
 80020a2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020a4:	2001      	movs	r0, #1
}  
 80020a6:	4770      	bx	lr

080020a8 <HAL_DMA_Start_IT>:
{
 80020a8:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 80020aa:	f890 4020 	ldrb.w	r4, [r0, #32]
 80020ae:	2c01      	cmp	r4, #1
 80020b0:	d032      	beq.n	8002118 <HAL_DMA_Start_IT+0x70>
 80020b2:	2401      	movs	r4, #1
 80020b4:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 80020b8:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 80020bc:	2c01      	cmp	r4, #1
 80020be:	d004      	beq.n	80020ca <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 80020c0:	2300      	movs	r3, #0
 80020c2:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 80020c6:	2002      	movs	r0, #2
} 
 80020c8:	bd38      	pop	{r3, r4, r5, pc}
 80020ca:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 80020cc:	2002      	movs	r0, #2
 80020ce:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020d2:	2000      	movs	r0, #0
 80020d4:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020d6:	6825      	ldr	r5, [r4, #0]
 80020d8:	6828      	ldr	r0, [r5, #0]
 80020da:	f020 0001 	bic.w	r0, r0, #1
 80020de:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020e0:	4620      	mov	r0, r4
 80020e2:	f7ff ff90 	bl	8002006 <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 80020e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80020e8:	b15b      	cbz	r3, 8002102 <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020ea:	6822      	ldr	r2, [r4, #0]
 80020ec:	6813      	ldr	r3, [r2, #0]
 80020ee:	f043 030e 	orr.w	r3, r3, #14
 80020f2:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 80020f4:	6822      	ldr	r2, [r4, #0]
 80020f6:	6813      	ldr	r3, [r2, #0]
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 80020fe:	2000      	movs	r0, #0
 8002100:	e7e2      	b.n	80020c8 <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8002102:	6822      	ldr	r2, [r4, #0]
 8002104:	6813      	ldr	r3, [r2, #0]
 8002106:	f043 030a 	orr.w	r3, r3, #10
 800210a:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800210c:	6822      	ldr	r2, [r4, #0]
 800210e:	6813      	ldr	r3, [r2, #0]
 8002110:	f023 0304 	bic.w	r3, r3, #4
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e7ed      	b.n	80020f4 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8002118:	2002      	movs	r0, #2
 800211a:	e7d5      	b.n	80020c8 <HAL_DMA_Start_IT+0x20>

0800211c <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800211c:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002120:	2b02      	cmp	r3, #2
 8002122:	d006      	beq.n	8002132 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002124:	2304      	movs	r3, #4
 8002126:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8002128:	2300      	movs	r3, #0
 800212a:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 800212e:	2001      	movs	r0, #1
 8002130:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002132:	6802      	ldr	r2, [r0, #0]
 8002134:	6813      	ldr	r3, [r2, #0]
 8002136:	f023 030e 	bic.w	r3, r3, #14
 800213a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800213c:	6802      	ldr	r2, [r0, #0]
 800213e:	6813      	ldr	r3, [r2, #0]
 8002140:	f023 0301 	bic.w	r3, r3, #1
 8002144:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002146:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002148:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800214a:	2201      	movs	r2, #1
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8002152:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 8002156:	2300      	movs	r3, #0
 8002158:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 800215c:	4618      	mov	r0, r3
}
 800215e:	4770      	bx	lr

08002160 <HAL_DMA_Abort_IT>:
{  
 8002160:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002162:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8002166:	2b02      	cmp	r3, #2
 8002168:	d003      	beq.n	8002172 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800216a:	2304      	movs	r3, #4
 800216c:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 800216e:	2001      	movs	r0, #1
}
 8002170:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002172:	6802      	ldr	r2, [r0, #0]
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	f023 030e 	bic.w	r3, r3, #14
 800217a:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800217c:	6802      	ldr	r2, [r0, #0]
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8002186:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002188:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800218a:	2201      	movs	r2, #1
 800218c:	fa02 f303 	lsl.w	r3, r2, r3
 8002190:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8002192:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8002196:	2300      	movs	r3, #0
 8002198:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800219c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800219e:	b113      	cbz	r3, 80021a6 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 80021a0:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80021a2:	2000      	movs	r0, #0
 80021a4:	e7e4      	b.n	8002170 <HAL_DMA_Abort_IT+0x10>
 80021a6:	2000      	movs	r0, #0
 80021a8:	e7e2      	b.n	8002170 <HAL_DMA_Abort_IT+0x10>

080021aa <HAL_DMA_IRQHandler>:
{
 80021aa:	b538      	push	{r3, r4, r5, lr}
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80021ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80021ae:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80021b0:	6804      	ldr	r4, [r0, #0]
 80021b2:	6825      	ldr	r5, [r4, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80021b4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80021b6:	2304      	movs	r3, #4
 80021b8:	408b      	lsls	r3, r1
 80021ba:	4213      	tst	r3, r2
 80021bc:	d013      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3c>
 80021be:	f015 0f04 	tst.w	r5, #4
 80021c2:	d010      	beq.n	80021e6 <HAL_DMA_IRQHandler+0x3c>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021c4:	6823      	ldr	r3, [r4, #0]
 80021c6:	f013 0f20 	tst.w	r3, #32
 80021ca:	d103      	bne.n	80021d4 <HAL_DMA_IRQHandler+0x2a>
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80021cc:	6823      	ldr	r3, [r4, #0]
 80021ce:	f023 0304 	bic.w	r3, r3, #4
 80021d2:	6023      	str	r3, [r4, #0]
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021d4:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80021d6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80021d8:	2304      	movs	r3, #4
 80021da:	408b      	lsls	r3, r1
 80021dc:	6053      	str	r3, [r2, #4]
  	if(hdma->XferHalfCpltCallback != NULL)
 80021de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80021e0:	b103      	cbz	r3, 80021e4 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferHalfCpltCallback(hdma);
 80021e2:	4798      	blx	r3
}  
 80021e4:	bd38      	pop	{r3, r4, r5, pc}
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021e6:	2302      	movs	r3, #2
 80021e8:	408b      	lsls	r3, r1
 80021ea:	4213      	tst	r3, r2
 80021ec:	d01a      	beq.n	8002224 <HAL_DMA_IRQHandler+0x7a>
 80021ee:	f015 0f02 	tst.w	r5, #2
 80021f2:	d017      	beq.n	8002224 <HAL_DMA_IRQHandler+0x7a>
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021f4:	6823      	ldr	r3, [r4, #0]
 80021f6:	f013 0f20 	tst.w	r3, #32
 80021fa:	d106      	bne.n	800220a <HAL_DMA_IRQHandler+0x60>
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	f023 030a 	bic.w	r3, r3, #10
 8002202:	6023      	str	r3, [r4, #0]
  		hdma->State = HAL_DMA_STATE_READY;
 8002204:	2301      	movs	r3, #1
 8002206:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800220a:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800220c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800220e:	2302      	movs	r3, #2
 8002210:	408b      	lsls	r3, r1
 8002212:	6053      	str	r3, [r2, #4]
  	__HAL_UNLOCK(hdma);
 8002214:	2300      	movs	r3, #0
 8002216:	f880 3020 	strb.w	r3, [r0, #32]
  	if(hdma->XferCpltCallback != NULL)
 800221a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d0e1      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x3a>
  		hdma->XferCpltCallback(hdma);
 8002220:	4798      	blx	r3
 8002222:	e7df      	b.n	80021e4 <HAL_DMA_IRQHandler+0x3a>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002224:	2308      	movs	r3, #8
 8002226:	fa03 f101 	lsl.w	r1, r3, r1
 800222a:	4211      	tst	r1, r2
 800222c:	d0da      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x3a>
 800222e:	f015 0f08 	tst.w	r5, #8
 8002232:	d0d7      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x3a>
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002234:	6823      	ldr	r3, [r4, #0]
 8002236:	f023 030e 	bic.w	r3, r3, #14
 800223a:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800223c:	6c02      	ldr	r2, [r0, #64]	; 0x40
 800223e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002240:	2301      	movs	r3, #1
 8002242:	fa03 f202 	lsl.w	r2, r3, r2
 8002246:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002248:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;    
 800224a:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma); 
 800224e:	2300      	movs	r3, #0
 8002250:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferErrorCallback != NULL)
 8002254:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0c4      	beq.n	80021e4 <HAL_DMA_IRQHandler+0x3a>
    	hdma->XferErrorCallback(hdma);
 800225a:	4798      	blx	r3
}  
 800225c:	e7c2      	b.n	80021e4 <HAL_DMA_IRQHandler+0x3a>
	...

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b4f0      	push	{r4, r5, r6, r7}
 8002262:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8002264:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002266:	e036      	b.n	80022d6 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002268:	2403      	movs	r4, #3
 800226a:	e000      	b.n	800226e <HAL_GPIO_Init+0xe>
 800226c:	2400      	movs	r4, #0
 800226e:	40b4      	lsls	r4, r6
 8002270:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002272:	3502      	adds	r5, #2
 8002274:	4e58      	ldr	r6, [pc, #352]	; (80023d8 <HAL_GPIO_Init+0x178>)
 8002276:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227a:	4c58      	ldr	r4, [pc, #352]	; (80023dc <HAL_GPIO_Init+0x17c>)
 800227c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800227e:	43d4      	mvns	r4, r2
 8002280:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002284:	684f      	ldr	r7, [r1, #4]
 8002286:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800228a:	d001      	beq.n	8002290 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 800228c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8002290:	4d52      	ldr	r5, [pc, #328]	; (80023dc <HAL_GPIO_Init+0x17c>)
 8002292:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8002294:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8002296:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800229a:	684f      	ldr	r7, [r1, #4]
 800229c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80022a0:	d001      	beq.n	80022a6 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 80022a2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80022a6:	4d4d      	ldr	r5, [pc, #308]	; (80023dc <HAL_GPIO_Init+0x17c>)
 80022a8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022aa:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80022ac:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b0:	684f      	ldr	r7, [r1, #4]
 80022b2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80022b6:	d001      	beq.n	80022bc <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 80022b8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80022bc:	4d47      	ldr	r5, [pc, #284]	; (80023dc <HAL_GPIO_Init+0x17c>)
 80022be:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80022c0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80022c2:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022c4:	684e      	ldr	r6, [r1, #4]
 80022c6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80022ca:	d001      	beq.n	80022d0 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80022cc:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80022d0:	4a42      	ldr	r2, [pc, #264]	; (80023dc <HAL_GPIO_Init+0x17c>)
 80022d2:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80022d4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022d6:	680a      	ldr	r2, [r1, #0]
 80022d8:	fa32 f403 	lsrs.w	r4, r2, r3
 80022dc:	d078      	beq.n	80023d0 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022de:	2401      	movs	r4, #1
 80022e0:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80022e2:	4022      	ands	r2, r4
 80022e4:	d0f6      	beq.n	80022d4 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80022e6:	684d      	ldr	r5, [r1, #4]
 80022e8:	2d02      	cmp	r5, #2
 80022ea:	d001      	beq.n	80022f0 <HAL_GPIO_Init+0x90>
 80022ec:	2d12      	cmp	r5, #18
 80022ee:	d110      	bne.n	8002312 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 80022f0:	08de      	lsrs	r6, r3, #3
 80022f2:	3608      	adds	r6, #8
 80022f4:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80022f8:	f003 0507 	and.w	r5, r3, #7
 80022fc:	00af      	lsls	r7, r5, #2
 80022fe:	250f      	movs	r5, #15
 8002300:	40bd      	lsls	r5, r7
 8002302:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002306:	690d      	ldr	r5, [r1, #16]
 8002308:	40bd      	lsls	r5, r7
 800230a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 800230e:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8002312:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002314:	005f      	lsls	r7, r3, #1
 8002316:	2503      	movs	r5, #3
 8002318:	40bd      	lsls	r5, r7
 800231a:	43ed      	mvns	r5, r5
 800231c:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002320:	684e      	ldr	r6, [r1, #4]
 8002322:	f006 0603 	and.w	r6, r6, #3
 8002326:	40be      	lsls	r6, r7
 8002328:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 800232c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800232e:	684e      	ldr	r6, [r1, #4]
 8002330:	f106 3cff 	add.w	ip, r6, #4294967295
 8002334:	f1bc 0f01 	cmp.w	ip, #1
 8002338:	d903      	bls.n	8002342 <HAL_GPIO_Init+0xe2>
 800233a:	2e11      	cmp	r6, #17
 800233c:	d001      	beq.n	8002342 <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233e:	2e12      	cmp	r6, #18
 8002340:	d110      	bne.n	8002364 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 8002342:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002344:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002348:	68ce      	ldr	r6, [r1, #12]
 800234a:	40be      	lsls	r6, r7
 800234c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8002350:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8002352:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002354:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002358:	684e      	ldr	r6, [r1, #4]
 800235a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800235e:	409e      	lsls	r6, r3
 8002360:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8002362:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8002364:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002366:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002368:	688c      	ldr	r4, [r1, #8]
 800236a:	40bc      	lsls	r4, r7
 800236c:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800236e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002370:	684c      	ldr	r4, [r1, #4]
 8002372:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8002376:	d0ad      	beq.n	80022d4 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002378:	4c19      	ldr	r4, [pc, #100]	; (80023e0 <HAL_GPIO_Init+0x180>)
 800237a:	69a5      	ldr	r5, [r4, #24]
 800237c:	f045 0501 	orr.w	r5, r5, #1
 8002380:	61a5      	str	r5, [r4, #24]
 8002382:	69a4      	ldr	r4, [r4, #24]
 8002384:	f004 0401 	and.w	r4, r4, #1
 8002388:	9401      	str	r4, [sp, #4]
 800238a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800238c:	089d      	lsrs	r5, r3, #2
 800238e:	1cae      	adds	r6, r5, #2
 8002390:	4c11      	ldr	r4, [pc, #68]	; (80023d8 <HAL_GPIO_Init+0x178>)
 8002392:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002396:	f003 0403 	and.w	r4, r3, #3
 800239a:	00a6      	lsls	r6, r4, #2
 800239c:	240f      	movs	r4, #15
 800239e:	40b4      	lsls	r4, r6
 80023a0:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80023a4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80023a8:	f43f af60 	beq.w	800226c <HAL_GPIO_Init+0xc>
 80023ac:	4c0d      	ldr	r4, [pc, #52]	; (80023e4 <HAL_GPIO_Init+0x184>)
 80023ae:	42a0      	cmp	r0, r4
 80023b0:	d00a      	beq.n	80023c8 <HAL_GPIO_Init+0x168>
 80023b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80023b6:	42a0      	cmp	r0, r4
 80023b8:	d008      	beq.n	80023cc <HAL_GPIO_Init+0x16c>
 80023ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80023be:	42a0      	cmp	r0, r4
 80023c0:	f43f af52 	beq.w	8002268 <HAL_GPIO_Init+0x8>
 80023c4:	2405      	movs	r4, #5
 80023c6:	e752      	b.n	800226e <HAL_GPIO_Init+0xe>
 80023c8:	2401      	movs	r4, #1
 80023ca:	e750      	b.n	800226e <HAL_GPIO_Init+0xe>
 80023cc:	2402      	movs	r4, #2
 80023ce:	e74e      	b.n	800226e <HAL_GPIO_Init+0xe>
  }
}
 80023d0:	b002      	add	sp, #8
 80023d2:	bcf0      	pop	{r4, r5, r6, r7}
 80023d4:	4770      	bx	lr
 80023d6:	bf00      	nop
 80023d8:	40010000 	.word	0x40010000
 80023dc:	40010400 	.word	0x40010400
 80023e0:	40021000 	.word	0x40021000
 80023e4:	48000400 	.word	0x48000400

080023e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023e8:	b90a      	cbnz	r2, 80023ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80023ea:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80023ec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80023ee:	6181      	str	r1, [r0, #24]
 80023f0:	4770      	bx	lr

080023f2 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80023f2:	4770      	bx	lr

080023f4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80023f4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80023f6:	4b05      	ldr	r3, [pc, #20]	; (800240c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80023f8:	695b      	ldr	r3, [r3, #20]
 80023fa:	4203      	tst	r3, r0
 80023fc:	d100      	bne.n	8002400 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80023fe:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002400:	4b02      	ldr	r3, [pc, #8]	; (800240c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8002402:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002404:	f7ff fff5 	bl	80023f2 <HAL_GPIO_EXTI_Callback>
}
 8002408:	e7f9      	b.n	80023fe <HAL_GPIO_EXTI_IRQHandler+0xa>
 800240a:	bf00      	nop
 800240c:	40010400 	.word	0x40010400

08002410 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002410:	2800      	cmp	r0, #0
 8002412:	f000 830d 	beq.w	8002a30 <HAL_RCC_OscConfig+0x620>
{
 8002416:	b570      	push	{r4, r5, r6, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800241c:	6803      	ldr	r3, [r0, #0]
 800241e:	f013 0f01 	tst.w	r3, #1
 8002422:	d03b      	beq.n	800249c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002424:	4bb5      	ldr	r3, [pc, #724]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f003 030c 	and.w	r3, r3, #12
 800242c:	2b04      	cmp	r3, #4
 800242e:	d01e      	beq.n	800246e <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002430:	4bb2      	ldr	r3, [pc, #712]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d013      	beq.n	8002464 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800243c:	6863      	ldr	r3, [r4, #4]
 800243e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002442:	d068      	beq.n	8002516 <HAL_RCC_OscConfig+0x106>
 8002444:	2b00      	cmp	r3, #0
 8002446:	f040 8092 	bne.w	800256e <HAL_RCC_OscConfig+0x15e>
 800244a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800244e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002460:	601a      	str	r2, [r3, #0]
 8002462:	e05d      	b.n	8002520 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002464:	4ba5      	ldr	r3, [pc, #660]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800246c:	d0e6      	beq.n	800243c <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002472:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002476:	4ba1      	ldr	r3, [pc, #644]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002478:	6819      	ldr	r1, [r3, #0]
 800247a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	fab3 f383 	clz	r3, r3
 8002486:	f003 031f 	and.w	r3, r3, #31
 800248a:	2201      	movs	r2, #1
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	420b      	tst	r3, r1
 8002492:	d003      	beq.n	800249c <HAL_RCC_OscConfig+0x8c>
 8002494:	6863      	ldr	r3, [r4, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 82cc 	beq.w	8002a34 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800249c:	6823      	ldr	r3, [r4, #0]
 800249e:	f013 0f02 	tst.w	r3, #2
 80024a2:	f000 80c6 	beq.w	8002632 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80024a6:	4b95      	ldr	r3, [pc, #596]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	f013 0f0c 	tst.w	r3, #12
 80024ae:	f000 809c 	beq.w	80025ea <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80024b2:	4b92      	ldr	r3, [pc, #584]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b08      	cmp	r3, #8
 80024bc:	f000 808f 	beq.w	80025de <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024c0:	6923      	ldr	r3, [r4, #16]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f000 80f3 	beq.w	80026ae <HAL_RCC_OscConfig+0x29e>
 80024c8:	2201      	movs	r2, #1
 80024ca:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ce:	fab3 f383 	clz	r3, r3
 80024d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024de:	f7ff fbc7 	bl	8001c70 <HAL_GetTick>
 80024e2:	4605      	mov	r5, r0
 80024e4:	2302      	movs	r3, #2
 80024e6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024ea:	4b84      	ldr	r3, [pc, #528]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	2302      	movs	r3, #2
 80024f0:	fa93 f3a3 	rbit	r3, r3
 80024f4:	fab3 f383 	clz	r3, r3
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2201      	movs	r2, #1
 80024fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002502:	420b      	tst	r3, r1
 8002504:	f040 80c4 	bne.w	8002690 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002508:	f7ff fbb2 	bl	8001c70 <HAL_GetTick>
 800250c:	1b40      	subs	r0, r0, r5
 800250e:	2802      	cmp	r0, #2
 8002510:	d9e8      	bls.n	80024e4 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8002512:	2003      	movs	r0, #3
 8002514:	e295      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002516:	4a79      	ldr	r2, [pc, #484]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002518:	6813      	ldr	r3, [r2, #0]
 800251a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800251e:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002520:	4a76      	ldr	r2, [pc, #472]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002522:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002524:	f023 030f 	bic.w	r3, r3, #15
 8002528:	68a1      	ldr	r1, [r4, #8]
 800252a:	430b      	orrs	r3, r1
 800252c:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800252e:	6863      	ldr	r3, [r4, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d036      	beq.n	80025a2 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8002534:	f7ff fb9c 	bl	8001c70 <HAL_GetTick>
 8002538:	4605      	mov	r5, r0
 800253a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800253e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002542:	4b6e      	ldr	r3, [pc, #440]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800254a:	fa93 f3a3 	rbit	r3, r3
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2201      	movs	r2, #1
 8002558:	fa02 f303 	lsl.w	r3, r2, r3
 800255c:	420b      	tst	r3, r1
 800255e:	d19d      	bne.n	800249c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002560:	f7ff fb86 	bl	8001c70 <HAL_GetTick>
 8002564:	1b40      	subs	r0, r0, r5
 8002566:	2864      	cmp	r0, #100	; 0x64
 8002568:	d9e7      	bls.n	800253a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800256a:	2003      	movs	r0, #3
 800256c:	e269      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800256e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002572:	d009      	beq.n	8002588 <HAL_RCC_OscConfig+0x178>
 8002574:	4b61      	ldr	r3, [pc, #388]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002584:	601a      	str	r2, [r3, #0]
 8002586:	e7cb      	b.n	8002520 <HAL_RCC_OscConfig+0x110>
 8002588:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800258c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8002590:	681a      	ldr	r2, [r3, #0]
 8002592:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	e7be      	b.n	8002520 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80025a2:	f7ff fb65 	bl	8001c70 <HAL_GetTick>
 80025a6:	4605      	mov	r5, r0
 80025a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ac:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025b0:	4b52      	ldr	r3, [pc, #328]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 80025b2:	6819      	ldr	r1, [r3, #0]
 80025b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b8:	fa93 f3a3 	rbit	r3, r3
 80025bc:	fab3 f383 	clz	r3, r3
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2201      	movs	r2, #1
 80025c6:	fa02 f303 	lsl.w	r3, r2, r3
 80025ca:	420b      	tst	r3, r1
 80025cc:	f43f af66 	beq.w	800249c <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025d0:	f7ff fb4e 	bl	8001c70 <HAL_GetTick>
 80025d4:	1b40      	subs	r0, r0, r5
 80025d6:	2864      	cmp	r0, #100	; 0x64
 80025d8:	d9e6      	bls.n	80025a8 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80025da:	2003      	movs	r0, #3
 80025dc:	e231      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025de:	4b47      	ldr	r3, [pc, #284]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80025e6:	f47f af6b 	bne.w	80024c0 <HAL_RCC_OscConfig+0xb0>
 80025ea:	2302      	movs	r3, #2
 80025ec:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025f0:	4b42      	ldr	r3, [pc, #264]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 80025f2:	6819      	ldr	r1, [r3, #0]
 80025f4:	2302      	movs	r3, #2
 80025f6:	fa93 f3a3 	rbit	r3, r3
 80025fa:	fab3 f383 	clz	r3, r3
 80025fe:	f003 031f 	and.w	r3, r3, #31
 8002602:	2201      	movs	r2, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	420b      	tst	r3, r1
 800260a:	d004      	beq.n	8002616 <HAL_RCC_OscConfig+0x206>
 800260c:	6923      	ldr	r3, [r4, #16]
 800260e:	4293      	cmp	r3, r2
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8002612:	2001      	movs	r0, #1
 8002614:	e215      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4839      	ldr	r0, [pc, #228]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002618:	6803      	ldr	r3, [r0, #0]
 800261a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800261e:	6961      	ldr	r1, [r4, #20]
 8002620:	22f8      	movs	r2, #248	; 0xf8
 8002622:	fa92 f2a2 	rbit	r2, r2
 8002626:	fab2 f282 	clz	r2, r2
 800262a:	fa01 f202 	lsl.w	r2, r1, r2
 800262e:	4313      	orrs	r3, r2
 8002630:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002632:	6823      	ldr	r3, [r4, #0]
 8002634:	f013 0f08 	tst.w	r3, #8
 8002638:	f000 808c 	beq.w	8002754 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800263c:	69a3      	ldr	r3, [r4, #24]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d060      	beq.n	8002704 <HAL_RCC_OscConfig+0x2f4>
 8002642:	2101      	movs	r1, #1
 8002644:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002648:	fab2 f282 	clz	r2, r2
 800264c:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <HAL_RCC_OscConfig+0x2f0>)
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002654:	f7ff fb0c 	bl	8001c70 <HAL_GetTick>
 8002658:	4605      	mov	r5, r0
 800265a:	2302      	movs	r3, #2
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	fa93 f2a3 	rbit	r2, r3
 8002664:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002668:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 800266a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800266c:	fa93 f3a3 	rbit	r3, r3
 8002670:	fab3 f383 	clz	r3, r3
 8002674:	f003 031f 	and.w	r3, r3, #31
 8002678:	2201      	movs	r2, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	420b      	tst	r3, r1
 8002680:	d168      	bne.n	8002754 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002682:	f7ff faf5 	bl	8001c70 <HAL_GetTick>
 8002686:	1b40      	subs	r0, r0, r5
 8002688:	2802      	cmp	r0, #2
 800268a:	d9e6      	bls.n	800265a <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 800268c:	2003      	movs	r0, #3
 800268e:	e1d8      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002690:	481a      	ldr	r0, [pc, #104]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 8002692:	6803      	ldr	r3, [r0, #0]
 8002694:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8002698:	6961      	ldr	r1, [r4, #20]
 800269a:	22f8      	movs	r2, #248	; 0xf8
 800269c:	fa92 f2a2 	rbit	r2, r2
 80026a0:	fab2 f282 	clz	r2, r2
 80026a4:	fa01 f202 	lsl.w	r2, r1, r2
 80026a8:	4313      	orrs	r3, r2
 80026aa:	6003      	str	r3, [r0, #0]
 80026ac:	e7c1      	b.n	8002632 <HAL_RCC_OscConfig+0x222>
 80026ae:	2301      	movs	r3, #1
 80026b0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80026b4:	fab3 f383 	clz	r3, r3
 80026b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80026c6:	f7ff fad3 	bl	8001c70 <HAL_GetTick>
 80026ca:	4605      	mov	r5, r0
 80026cc:	2302      	movs	r3, #2
 80026ce:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026d2:	4b0a      	ldr	r3, [pc, #40]	; (80026fc <HAL_RCC_OscConfig+0x2ec>)
 80026d4:	6819      	ldr	r1, [r3, #0]
 80026d6:	2302      	movs	r3, #2
 80026d8:	fa93 f3a3 	rbit	r3, r3
 80026dc:	fab3 f383 	clz	r3, r3
 80026e0:	f003 031f 	and.w	r3, r3, #31
 80026e4:	2201      	movs	r2, #1
 80026e6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ea:	420b      	tst	r3, r1
 80026ec:	d0a1      	beq.n	8002632 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ee:	f7ff fabf 	bl	8001c70 <HAL_GetTick>
 80026f2:	1b40      	subs	r0, r0, r5
 80026f4:	2802      	cmp	r0, #2
 80026f6:	d9e9      	bls.n	80026cc <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 80026f8:	2003      	movs	r0, #3
 80026fa:	e1a2      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
 80026fc:	40021000 	.word	0x40021000
 8002700:	10908120 	.word	0x10908120
 8002704:	2201      	movs	r2, #1
 8002706:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800270a:	fab2 f282 	clz	r2, r2
 800270e:	4bbc      	ldr	r3, [pc, #752]	; (8002a00 <HAL_RCC_OscConfig+0x5f0>)
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	2200      	movs	r2, #0
 8002716:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002718:	f7ff faaa 	bl	8001c70 <HAL_GetTick>
 800271c:	4605      	mov	r5, r0
 800271e:	2302      	movs	r3, #2
 8002720:	fa93 f2a3 	rbit	r2, r3
 8002724:	fa93 f2a3 	rbit	r2, r3
 8002728:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800272c:	4ab5      	ldr	r2, [pc, #724]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 800272e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8002730:	fa93 f3a3 	rbit	r3, r3
 8002734:	fab3 f383 	clz	r3, r3
 8002738:	f003 031f 	and.w	r3, r3, #31
 800273c:	2201      	movs	r2, #1
 800273e:	fa02 f303 	lsl.w	r3, r2, r3
 8002742:	420b      	tst	r3, r1
 8002744:	d006      	beq.n	8002754 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002746:	f7ff fa93 	bl	8001c70 <HAL_GetTick>
 800274a:	1b40      	subs	r0, r0, r5
 800274c:	2802      	cmp	r0, #2
 800274e:	d9e6      	bls.n	800271e <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8002750:	2003      	movs	r0, #3
 8002752:	e176      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002754:	6823      	ldr	r3, [r4, #0]
 8002756:	f013 0f04 	tst.w	r3, #4
 800275a:	f000 80b3 	beq.w	80028c4 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800275e:	4ba9      	ldr	r3, [pc, #676]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002766:	d120      	bne.n	80027aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002768:	4ba6      	ldr	r3, [pc, #664]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002770:	61da      	str	r2, [r3, #28]
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002778:	9301      	str	r3, [sp, #4]
 800277a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800277c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277e:	4ba2      	ldr	r3, [pc, #648]	; (8002a08 <HAL_RCC_OscConfig+0x5f8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002786:	d012      	beq.n	80027ae <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002788:	68e3      	ldr	r3, [r4, #12]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d023      	beq.n	80027d6 <HAL_RCC_OscConfig+0x3c6>
 800278e:	bb73      	cbnz	r3, 80027ee <HAL_RCC_OscConfig+0x3de>
 8002790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002794:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8002798:	6a1a      	ldr	r2, [r3, #32]
 800279a:	f022 0201 	bic.w	r2, r2, #1
 800279e:	621a      	str	r2, [r3, #32]
 80027a0:	6a1a      	ldr	r2, [r3, #32]
 80027a2:	f022 0204 	bic.w	r2, r2, #4
 80027a6:	621a      	str	r2, [r3, #32]
 80027a8:	e01a      	b.n	80027e0 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2500      	movs	r5, #0
 80027ac:	e7e7      	b.n	800277e <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027ae:	4a96      	ldr	r2, [pc, #600]	; (8002a08 <HAL_RCC_OscConfig+0x5f8>)
 80027b0:	6813      	ldr	r3, [r2, #0]
 80027b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80027b8:	f7ff fa5a 	bl	8001c70 <HAL_GetTick>
 80027bc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027be:	4b92      	ldr	r3, [pc, #584]	; (8002a08 <HAL_RCC_OscConfig+0x5f8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80027c6:	d1df      	bne.n	8002788 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027c8:	f7ff fa52 	bl	8001c70 <HAL_GetTick>
 80027cc:	1b80      	subs	r0, r0, r6
 80027ce:	2864      	cmp	r0, #100	; 0x64
 80027d0:	d9f5      	bls.n	80027be <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 80027d2:	2003      	movs	r0, #3
 80027d4:	e135      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027d6:	4a8b      	ldr	r2, [pc, #556]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 80027d8:	6a13      	ldr	r3, [r2, #32]
 80027da:	f043 0301 	orr.w	r3, r3, #1
 80027de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027e0:	68e3      	ldr	r3, [r4, #12]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d041      	beq.n	800286a <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e6:	f7ff fa43 	bl	8001c70 <HAL_GetTick>
 80027ea:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027ec:	e02b      	b.n	8002846 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ee:	2b05      	cmp	r3, #5
 80027f0:	d009      	beq.n	8002806 <HAL_RCC_OscConfig+0x3f6>
 80027f2:	4b84      	ldr	r3, [pc, #528]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 80027f4:	6a1a      	ldr	r2, [r3, #32]
 80027f6:	f022 0201 	bic.w	r2, r2, #1
 80027fa:	621a      	str	r2, [r3, #32]
 80027fc:	6a1a      	ldr	r2, [r3, #32]
 80027fe:	f022 0204 	bic.w	r2, r2, #4
 8002802:	621a      	str	r2, [r3, #32]
 8002804:	e7ec      	b.n	80027e0 <HAL_RCC_OscConfig+0x3d0>
 8002806:	4b7f      	ldr	r3, [pc, #508]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 8002808:	6a1a      	ldr	r2, [r3, #32]
 800280a:	f042 0204 	orr.w	r2, r2, #4
 800280e:	621a      	str	r2, [r3, #32]
 8002810:	6a1a      	ldr	r2, [r3, #32]
 8002812:	f042 0201 	orr.w	r2, r2, #1
 8002816:	621a      	str	r2, [r3, #32]
 8002818:	e7e2      	b.n	80027e0 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281a:	4b7a      	ldr	r3, [pc, #488]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 800281c:	6a19      	ldr	r1, [r3, #32]
 800281e:	2302      	movs	r3, #2
 8002820:	fa93 f3a3 	rbit	r3, r3
 8002824:	fab3 f383 	clz	r3, r3
 8002828:	f003 031f 	and.w	r3, r3, #31
 800282c:	2201      	movs	r2, #1
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	4219      	tst	r1, r3
 8002834:	d145      	bne.n	80028c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002836:	f7ff fa1b 	bl	8001c70 <HAL_GetTick>
 800283a:	1b80      	subs	r0, r0, r6
 800283c:	f241 3388 	movw	r3, #5000	; 0x1388
 8002840:	4298      	cmp	r0, r3
 8002842:	f200 80f9 	bhi.w	8002a38 <HAL_RCC_OscConfig+0x628>
 8002846:	2302      	movs	r3, #2
 8002848:	fa93 f2a3 	rbit	r2, r3
 800284c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002850:	fab3 f383 	clz	r3, r3
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	2b02      	cmp	r3, #2
 800285c:	d0dd      	beq.n	800281a <HAL_RCC_OscConfig+0x40a>
 800285e:	2302      	movs	r3, #2
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	4b67      	ldr	r3, [pc, #412]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 8002866:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002868:	e7d9      	b.n	800281e <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7ff fa01 	bl	8001c70 <HAL_GetTick>
 800286e:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002870:	e015      	b.n	800289e <HAL_RCC_OscConfig+0x48e>
 8002872:	4b64      	ldr	r3, [pc, #400]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 8002874:	6a19      	ldr	r1, [r3, #32]
 8002876:	2302      	movs	r3, #2
 8002878:	fa93 f3a3 	rbit	r3, r3
 800287c:	fab3 f383 	clz	r3, r3
 8002880:	f003 031f 	and.w	r3, r3, #31
 8002884:	2201      	movs	r2, #1
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	4219      	tst	r1, r3
 800288c:	d019      	beq.n	80028c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800288e:	f7ff f9ef 	bl	8001c70 <HAL_GetTick>
 8002892:	1b80      	subs	r0, r0, r6
 8002894:	f241 3388 	movw	r3, #5000	; 0x1388
 8002898:	4298      	cmp	r0, r3
 800289a:	f200 80cf 	bhi.w	8002a3c <HAL_RCC_OscConfig+0x62c>
 800289e:	2302      	movs	r3, #2
 80028a0:	fa93 f2a3 	rbit	r2, r3
 80028a4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	095b      	lsrs	r3, r3, #5
 80028ae:	f043 0302 	orr.w	r3, r3, #2
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d0dd      	beq.n	8002872 <HAL_RCC_OscConfig+0x462>
 80028b6:	2302      	movs	r3, #2
 80028b8:	fa93 f3a3 	rbit	r3, r3
 80028bc:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 80028be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028c0:	e7d9      	b.n	8002876 <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028c2:	bbb5      	cbnz	r5, 8002932 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028c4:	69e3      	ldr	r3, [r4, #28]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 80ba 	beq.w	8002a40 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028cc:	4a4d      	ldr	r2, [pc, #308]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 80028ce:	6852      	ldr	r2, [r2, #4]
 80028d0:	f002 020c 	and.w	r2, r2, #12
 80028d4:	2a08      	cmp	r2, #8
 80028d6:	f000 8099 	beq.w	8002a0c <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d02f      	beq.n	800293e <HAL_RCC_OscConfig+0x52e>
 80028de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028e2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028e6:	fab3 f383 	clz	r3, r3
 80028ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80028ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80028f2:	009b      	lsls	r3, r3, #2
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7ff f9ba 	bl	8001c70 <HAL_GetTick>
 80028fc:	4604      	mov	r4, r0
 80028fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002902:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 8002908:	6819      	ldr	r1, [r3, #0]
 800290a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800290e:	fa93 f3a3 	rbit	r3, r3
 8002912:	fab3 f383 	clz	r3, r3
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2201      	movs	r2, #1
 800291c:	fa02 f303 	lsl.w	r3, r2, r3
 8002920:	4219      	tst	r1, r3
 8002922:	d06b      	beq.n	80029fc <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002924:	f7ff f9a4 	bl	8001c70 <HAL_GetTick>
 8002928:	1b00      	subs	r0, r0, r4
 800292a:	2802      	cmp	r0, #2
 800292c:	d9e7      	bls.n	80028fe <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 800292e:	2003      	movs	r0, #3
 8002930:	e087      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002932:	4a34      	ldr	r2, [pc, #208]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 8002934:	69d3      	ldr	r3, [r2, #28]
 8002936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800293a:	61d3      	str	r3, [r2, #28]
 800293c:	e7c2      	b.n	80028c4 <HAL_RCC_OscConfig+0x4b4>
 800293e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002942:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8002946:	fab3 f383 	clz	r3, r3
 800294a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800294e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002958:	f7ff f98a 	bl	8001c70 <HAL_GetTick>
 800295c:	4605      	mov	r5, r0
 800295e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002962:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002966:	4b27      	ldr	r3, [pc, #156]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 8002968:	6819      	ldr	r1, [r3, #0]
 800296a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800296e:	fa93 f3a3 	rbit	r3, r3
 8002972:	fab3 f383 	clz	r3, r3
 8002976:	f003 031f 	and.w	r3, r3, #31
 800297a:	2201      	movs	r2, #1
 800297c:	fa02 f303 	lsl.w	r3, r2, r3
 8002980:	4219      	tst	r1, r3
 8002982:	d006      	beq.n	8002992 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002984:	f7ff f974 	bl	8001c70 <HAL_GetTick>
 8002988:	1b40      	subs	r0, r0, r5
 800298a:	2802      	cmp	r0, #2
 800298c:	d9e7      	bls.n	800295e <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 800298e:	2003      	movs	r0, #3
 8002990:	e057      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002992:	491c      	ldr	r1, [pc, #112]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 8002994:	684b      	ldr	r3, [r1, #4]
 8002996:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800299a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800299c:	6a20      	ldr	r0, [r4, #32]
 800299e:	4302      	orrs	r2, r0
 80029a0:	4313      	orrs	r3, r2
 80029a2:	604b      	str	r3, [r1, #4]
 80029a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80029ac:	fab3 f383 	clz	r3, r3
 80029b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	2201      	movs	r2, #1
 80029bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80029be:	f7ff f957 	bl	8001c70 <HAL_GetTick>
 80029c2:	4604      	mov	r4, r0
 80029c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029cc:	4b0d      	ldr	r3, [pc, #52]	; (8002a04 <HAL_RCC_OscConfig+0x5f4>)
 80029ce:	6819      	ldr	r1, [r3, #0]
 80029d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029d4:	fa93 f3a3 	rbit	r3, r3
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	2201      	movs	r2, #1
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	4219      	tst	r1, r3
 80029e8:	d106      	bne.n	80029f8 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ea:	f7ff f941 	bl	8001c70 <HAL_GetTick>
 80029ee:	1b00      	subs	r0, r0, r4
 80029f0:	2802      	cmp	r0, #2
 80029f2:	d9e7      	bls.n	80029c4 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 80029f4:	2003      	movs	r0, #3
 80029f6:	e024      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 80029f8:	2000      	movs	r0, #0
 80029fa:	e022      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
 80029fc:	2000      	movs	r0, #0
 80029fe:	e020      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
 8002a00:	10908120 	.word	0x10908120
 8002a04:	40021000 	.word	0x40021000
 8002a08:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d01a      	beq.n	8002a46 <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 8002a10:	4b0f      	ldr	r3, [pc, #60]	; (8002a50 <HAL_RCC_OscConfig+0x640>)
 8002a12:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a14:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002a18:	6a22      	ldr	r2, [r4, #32]
 8002a1a:	4291      	cmp	r1, r2
 8002a1c:	d001      	beq.n	8002a22 <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 8002a1e:	2001      	movs	r0, #1
 8002a20:	e00f      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002a22:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002a26:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d00e      	beq.n	8002a4a <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 8002a2c:	2001      	movs	r0, #1
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8002a30:	2001      	movs	r0, #1
}
 8002a32:	4770      	bx	lr
        return HAL_ERROR;
 8002a34:	2001      	movs	r0, #1
 8002a36:	e004      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8002a38:	2003      	movs	r0, #3
 8002a3a:	e002      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	e000      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8002a40:	2000      	movs	r0, #0
}
 8002a42:	b002      	add	sp, #8
 8002a44:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8002a46:	2001      	movs	r0, #1
 8002a48:	e7fb      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8002a4a:	2000      	movs	r0, #0
 8002a4c:	e7f9      	b.n	8002a42 <HAL_RCC_OscConfig+0x632>
 8002a4e:	bf00      	nop
 8002a50:	40021000 	.word	0x40021000

08002a54 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8002a54:	4b16      	ldr	r3, [pc, #88]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002a56:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a58:	f001 030c 	and.w	r3, r1, #12
 8002a5c:	2b08      	cmp	r3, #8
 8002a5e:	d124      	bne.n	8002aaa <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002a60:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8002a64:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	fab3 f383 	clz	r3, r3
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
 8002a74:	4a0f      	ldr	r2, [pc, #60]	; (8002ab4 <HAL_RCC_GetSysClockFreq+0x60>)
 8002a76:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002a78:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8002a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a7c:	f003 030f 	and.w	r3, r3, #15
 8002a80:	220f      	movs	r2, #15
 8002a82:	fa92 f2a2 	rbit	r2, r2
 8002a86:	fab2 f282 	clz	r2, r2
 8002a8a:	40d3      	lsrs	r3, r2
 8002a8c:	4a0a      	ldr	r2, [pc, #40]	; (8002ab8 <HAL_RCC_GetSysClockFreq+0x64>)
 8002a8e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002a90:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8002a94:	d103      	bne.n	8002a9e <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002a96:	4b09      	ldr	r3, [pc, #36]	; (8002abc <HAL_RCC_GetSysClockFreq+0x68>)
 8002a98:	fb03 f000 	mul.w	r0, r3, r0
 8002a9c:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x6c>)
 8002aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aa4:	fb00 f003 	mul.w	r0, r0, r3
 8002aa8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8002aaa:	4805      	ldr	r0, [pc, #20]	; (8002ac0 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08005c78 	.word	0x08005c78
 8002ab8:	08005c88 	.word	0x08005c88
 8002abc:	003d0900 	.word	0x003d0900
 8002ac0:	007a1200 	.word	0x007a1200

08002ac4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8002ac4:	2800      	cmp	r0, #0
 8002ac6:	f000 80c1 	beq.w	8002c4c <HAL_RCC_ClockConfig+0x188>
{
 8002aca:	b570      	push	{r4, r5, r6, lr}
 8002acc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ace:	4b61      	ldr	r3, [pc, #388]	; (8002c54 <HAL_RCC_ClockConfig+0x190>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	428b      	cmp	r3, r1
 8002ad8:	d20c      	bcs.n	8002af4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ada:	4a5e      	ldr	r2, [pc, #376]	; (8002c54 <HAL_RCC_ClockConfig+0x190>)
 8002adc:	6813      	ldr	r3, [r2, #0]
 8002ade:	f023 0307 	bic.w	r3, r3, #7
 8002ae2:	430b      	orrs	r3, r1
 8002ae4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	6813      	ldr	r3, [r2, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	428b      	cmp	r3, r1
 8002aee:	d001      	beq.n	8002af4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 8002af0:	2001      	movs	r0, #1
}
 8002af2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002af4:	6823      	ldr	r3, [r4, #0]
 8002af6:	f013 0f02 	tst.w	r3, #2
 8002afa:	d006      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002afc:	4a56      	ldr	r2, [pc, #344]	; (8002c58 <HAL_RCC_ClockConfig+0x194>)
 8002afe:	6853      	ldr	r3, [r2, #4]
 8002b00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b04:	68a0      	ldr	r0, [r4, #8]
 8002b06:	4303      	orrs	r3, r0
 8002b08:	6053      	str	r3, [r2, #4]
 8002b0a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b0c:	6823      	ldr	r3, [r4, #0]
 8002b0e:	f013 0f01 	tst.w	r3, #1
 8002b12:	d05a      	beq.n	8002bca <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b14:	6863      	ldr	r3, [r4, #4]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d02d      	beq.n	8002b76 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	d040      	beq.n	8002ba0 <HAL_RCC_ClockConfig+0xdc>
 8002b1e:	2202      	movs	r2, #2
 8002b20:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b24:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_RCC_ClockConfig+0x194>)
 8002b26:	6810      	ldr	r0, [r2, #0]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	fa92 f2a2 	rbit	r2, r2
 8002b2e:	fab2 f282 	clz	r2, r2
 8002b32:	f002 021f 	and.w	r2, r2, #31
 8002b36:	2101      	movs	r1, #1
 8002b38:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3c:	4210      	tst	r0, r2
 8002b3e:	f000 8087 	beq.w	8002c50 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b42:	4945      	ldr	r1, [pc, #276]	; (8002c58 <HAL_RCC_ClockConfig+0x194>)
 8002b44:	684a      	ldr	r2, [r1, #4]
 8002b46:	f022 0203 	bic.w	r2, r2, #3
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 8002b4e:	f7ff f88f 	bl	8001c70 <HAL_GetTick>
 8002b52:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b54:	4b40      	ldr	r3, [pc, #256]	; (8002c58 <HAL_RCC_ClockConfig+0x194>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f003 030c 	and.w	r3, r3, #12
 8002b5c:	6862      	ldr	r2, [r4, #4]
 8002b5e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002b62:	d032      	beq.n	8002bca <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b64:	f7ff f884 	bl	8001c70 <HAL_GetTick>
 8002b68:	1b80      	subs	r0, r0, r6
 8002b6a:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b6e:	4298      	cmp	r0, r3
 8002b70:	d9f0      	bls.n	8002b54 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8002b72:	2003      	movs	r0, #3
 8002b74:	e7bd      	b.n	8002af2 <HAL_RCC_ClockConfig+0x2e>
 8002b76:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b7a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b7e:	4a36      	ldr	r2, [pc, #216]	; (8002c58 <HAL_RCC_ClockConfig+0x194>)
 8002b80:	6810      	ldr	r0, [r2, #0]
 8002b82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b86:	fa92 f2a2 	rbit	r2, r2
 8002b8a:	fab2 f282 	clz	r2, r2
 8002b8e:	f002 021f 	and.w	r2, r2, #31
 8002b92:	2101      	movs	r1, #1
 8002b94:	fa01 f202 	lsl.w	r2, r1, r2
 8002b98:	4202      	tst	r2, r0
 8002b9a:	d1d2      	bne.n	8002b42 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	e7a8      	b.n	8002af2 <HAL_RCC_ClockConfig+0x2e>
 8002ba0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ba4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ba8:	4a2b      	ldr	r2, [pc, #172]	; (8002c58 <HAL_RCC_ClockConfig+0x194>)
 8002baa:	6810      	ldr	r0, [r2, #0]
 8002bac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb0:	fa92 f2a2 	rbit	r2, r2
 8002bb4:	fab2 f282 	clz	r2, r2
 8002bb8:	f002 021f 	and.w	r2, r2, #31
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	fa01 f202 	lsl.w	r2, r1, r2
 8002bc2:	4210      	tst	r0, r2
 8002bc4:	d1bd      	bne.n	8002b42 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	e793      	b.n	8002af2 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bca:	4b22      	ldr	r3, [pc, #136]	; (8002c54 <HAL_RCC_ClockConfig+0x190>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	42ab      	cmp	r3, r5
 8002bd4:	d90c      	bls.n	8002bf0 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bd6:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <HAL_RCC_ClockConfig+0x190>)
 8002bd8:	6813      	ldr	r3, [r2, #0]
 8002bda:	f023 0307 	bic.w	r3, r3, #7
 8002bde:	432b      	orrs	r3, r5
 8002be0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002be2:	6813      	ldr	r3, [r2, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	d001      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 8002bec:	2001      	movs	r0, #1
 8002bee:	e780      	b.n	8002af2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf0:	6823      	ldr	r3, [r4, #0]
 8002bf2:	f013 0f04 	tst.w	r3, #4
 8002bf6:	d006      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bf8:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_RCC_ClockConfig+0x194>)
 8002bfa:	6853      	ldr	r3, [r2, #4]
 8002bfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c00:	68e1      	ldr	r1, [r4, #12]
 8002c02:	430b      	orrs	r3, r1
 8002c04:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c06:	6823      	ldr	r3, [r4, #0]
 8002c08:	f013 0f08 	tst.w	r3, #8
 8002c0c:	d007      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c0e:	4a12      	ldr	r2, [pc, #72]	; (8002c58 <HAL_RCC_ClockConfig+0x194>)
 8002c10:	6853      	ldr	r3, [r2, #4]
 8002c12:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002c16:	6921      	ldr	r1, [r4, #16]
 8002c18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c1c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c1e:	f7ff ff19 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
 8002c22:	4b0d      	ldr	r3, [pc, #52]	; (8002c58 <HAL_RCC_ClockConfig+0x194>)
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c2a:	22f0      	movs	r2, #240	; 0xf0
 8002c2c:	fa92 f2a2 	rbit	r2, r2
 8002c30:	fab2 f282 	clz	r2, r2
 8002c34:	40d3      	lsrs	r3, r2
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <HAL_RCC_ClockConfig+0x198>)
 8002c38:	5cd3      	ldrb	r3, [r2, r3]
 8002c3a:	40d8      	lsrs	r0, r3
 8002c3c:	4b08      	ldr	r3, [pc, #32]	; (8002c60 <HAL_RCC_ClockConfig+0x19c>)
 8002c3e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8002c40:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_RCC_ClockConfig+0x1a0>)
 8002c42:	6818      	ldr	r0, [r3, #0]
 8002c44:	f7fe ffd0 	bl	8001be8 <HAL_InitTick>
  return HAL_OK;
 8002c48:	2000      	movs	r0, #0
 8002c4a:	e752      	b.n	8002af2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8002c4c:	2001      	movs	r0, #1
}
 8002c4e:	4770      	bx	lr
        return HAL_ERROR;
 8002c50:	2001      	movs	r0, #1
 8002c52:	e74e      	b.n	8002af2 <HAL_RCC_ClockConfig+0x2e>
 8002c54:	40022000 	.word	0x40022000
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08005c60 	.word	0x08005c60
 8002c60:	20000074 	.word	0x20000074
 8002c64:	200000a8 	.word	0x200000a8

08002c68 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8002c68:	4b01      	ldr	r3, [pc, #4]	; (8002c70 <HAL_RCC_GetHCLKFreq+0x8>)
 8002c6a:	6818      	ldr	r0, [r3, #0]
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20000074 	.word	0x20000074

08002c74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c74:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002c76:	f7ff fff7 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002c7a:	4b07      	ldr	r3, [pc, #28]	; (8002c98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002c82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002c86:	fa92 f2a2 	rbit	r2, r2
 8002c8a:	fab2 f282 	clz	r2, r2
 8002c8e:	40d3      	lsrs	r3, r2
 8002c90:	4a02      	ldr	r2, [pc, #8]	; (8002c9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c92:	5cd3      	ldrb	r3, [r2, r3]
}    
 8002c94:	40d8      	lsrs	r0, r3
 8002c96:	bd08      	pop	{r3, pc}
 8002c98:	40021000 	.word	0x40021000
 8002c9c:	08005c70 	.word	0x08005c70

08002ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ca0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002ca2:	f7ff ffe1 	bl	8002c68 <HAL_RCC_GetHCLKFreq>
 8002ca6:	4b07      	ldr	r3, [pc, #28]	; (8002cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002cae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002cb2:	fa92 f2a2 	rbit	r2, r2
 8002cb6:	fab2 f282 	clz	r2, r2
 8002cba:	40d3      	lsrs	r3, r2
 8002cbc:	4a02      	ldr	r2, [pc, #8]	; (8002cc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cbe:	5cd3      	ldrb	r3, [r2, r3]
} 
 8002cc0:	40d8      	lsrs	r0, r3
 8002cc2:	bd08      	pop	{r3, pc}
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	08005c70 	.word	0x08005c70

08002ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ccc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cce:	b083      	sub	sp, #12
 8002cd0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cd2:	6803      	ldr	r3, [r0, #0]
 8002cd4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8002cd8:	d044      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cda:	4b64      	ldr	r3, [pc, #400]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002cdc:	69db      	ldr	r3, [r3, #28]
 8002cde:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8002ce2:	d179      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce4:	4b61      	ldr	r3, [pc, #388]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002ce6:	69da      	ldr	r2, [r3, #28]
 8002ce8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002cec:	61da      	str	r2, [r3, #28]
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002cf8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfa:	4b5d      	ldr	r3, [pc, #372]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002d02:	d06b      	beq.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d04:	4b59      	ldr	r3, [pc, #356]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002d06:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d08:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002d0c:	d021      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8002d0e:	6862      	ldr	r2, [r4, #4]
 8002d10:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d01c      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d18:	4854      	ldr	r0, [pc, #336]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002d1a:	6a01      	ldr	r1, [r0, #32]
 8002d1c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8002d20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d24:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d28:	fab2 f282 	clz	r2, r2
 8002d2c:	4f51      	ldr	r7, [pc, #324]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002d2e:	443a      	add	r2, r7
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	f04f 0c01 	mov.w	ip, #1
 8002d36:	f8c2 c000 	str.w	ip, [r2]
 8002d3a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d3e:	fab3 f383 	clz	r3, r3
 8002d42:	443b      	add	r3, r7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002d4a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002d4c:	f011 0f01 	tst.w	r1, #1
 8002d50:	d158      	bne.n	8002e04 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002d52:	4a46      	ldr	r2, [pc, #280]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002d54:	6a13      	ldr	r3, [r2, #32]
 8002d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d5a:	6861      	ldr	r1, [r4, #4]
 8002d5c:	430b      	orrs	r3, r1
 8002d5e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d60:	2d00      	cmp	r5, #0
 8002d62:	d17a      	bne.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d64:	6823      	ldr	r3, [r4, #0]
 8002d66:	f013 0f01 	tst.w	r3, #1
 8002d6a:	d006      	beq.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d6c:	4a3f      	ldr	r2, [pc, #252]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002d6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d70:	f023 0303 	bic.w	r3, r3, #3
 8002d74:	68a1      	ldr	r1, [r4, #8]
 8002d76:	430b      	orrs	r3, r1
 8002d78:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d7a:	6823      	ldr	r3, [r4, #0]
 8002d7c:	f013 0f20 	tst.w	r3, #32
 8002d80:	d006      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d82:	4a3a      	ldr	r2, [pc, #232]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002d84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002d86:	f023 0310 	bic.w	r3, r3, #16
 8002d8a:	68e1      	ldr	r1, [r4, #12]
 8002d8c:	430b      	orrs	r3, r1
 8002d8e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d90:	6823      	ldr	r3, [r4, #0]
 8002d92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002d96:	d006      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d98:	4a34      	ldr	r2, [pc, #208]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002d9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8002d9c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8002da0:	6921      	ldr	r1, [r4, #16]
 8002da2:	430b      	orrs	r3, r1
 8002da4:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002da6:	6823      	ldr	r3, [r4, #0]
 8002da8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8002dac:	d006      	beq.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002dae:	4a2f      	ldr	r2, [pc, #188]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002db0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002db2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002db6:	6961      	ldr	r1, [r4, #20]
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8002dc2:	d051      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8002dc4:	4a29      	ldr	r2, [pc, #164]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002dc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002dc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002dcc:	69a1      	ldr	r1, [r4, #24]
 8002dce:	430b      	orrs	r3, r1
 8002dd0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002dd2:	2000      	movs	r0, #0
}
 8002dd4:	b003      	add	sp, #12
 8002dd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8002dd8:	2500      	movs	r5, #0
 8002dda:	e78e      	b.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ddc:	4a24      	ldr	r2, [pc, #144]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dde:	6813      	ldr	r3, [r2, #0]
 8002de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002de4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002de6:	f7fe ff43 	bl	8001c70 <HAL_GetTick>
 8002dea:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dec:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8002df4:	d186      	bne.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002df6:	f7fe ff3b 	bl	8001c70 <HAL_GetTick>
 8002dfa:	1b80      	subs	r0, r0, r6
 8002dfc:	2864      	cmp	r0, #100	; 0x64
 8002dfe:	d9f5      	bls.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8002e00:	2003      	movs	r0, #3
 8002e02:	e7e7      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002e04:	f7fe ff34 	bl	8001c70 <HAL_GetTick>
 8002e08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e0a:	e014      	b.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002e0e:	6a19      	ldr	r1, [r3, #32]
 8002e10:	2302      	movs	r3, #2
 8002e12:	fa93 f3a3 	rbit	r3, r3
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	2201      	movs	r2, #1
 8002e20:	fa02 f303 	lsl.w	r3, r2, r3
 8002e24:	420b      	tst	r3, r1
 8002e26:	d194      	bne.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e28:	f7fe ff22 	bl	8001c70 <HAL_GetTick>
 8002e2c:	1b80      	subs	r0, r0, r6
 8002e2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8002e32:	4298      	cmp	r0, r3
 8002e34:	d816      	bhi.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8002e36:	2302      	movs	r3, #2
 8002e38:	fa93 f2a3 	rbit	r2, r3
 8002e3c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e40:	fab3 f383 	clz	r3, r3
 8002e44:	095b      	lsrs	r3, r3, #5
 8002e46:	f043 0302 	orr.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	d0de      	beq.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8002e4e:	2302      	movs	r3, #2
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002e56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e58:	e7da      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	69d3      	ldr	r3, [r2, #28]
 8002e5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e60:	61d3      	str	r3, [r2, #28]
 8002e62:	e77f      	b.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8002e64:	2003      	movs	r0, #3
 8002e66:	e7b5      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8002e68:	2000      	movs	r0, #0
 8002e6a:	e7b3      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8002e6c:	40021000 	.word	0x40021000
 8002e70:	40007000 	.word	0x40007000
 8002e74:	10908100 	.word	0x10908100

08002e78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e78:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e7a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e7c:	6a04      	ldr	r4, [r0, #32]
 8002e7e:	f024 0401 	bic.w	r4, r4, #1
 8002e82:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e84:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e86:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e8a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e8e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8002e92:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e94:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002e96:	6203      	str	r3, [r0, #32]
}
 8002e98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e9e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ea0:	6a03      	ldr	r3, [r0, #32]
 8002ea2:	f023 0310 	bic.w	r3, r3, #16
 8002ea6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ea8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8002eaa:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eac:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb0:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eb8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ebc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002ebe:	6203      	str	r3, [r0, #32]
}
 8002ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ec6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ecc:	4319      	orrs	r1, r3
 8002ece:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed2:	6081      	str	r1, [r0, #8]
}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ed8:	6802      	ldr	r2, [r0, #0]
 8002eda:	68d3      	ldr	r3, [r2, #12]
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	60d3      	str	r3, [r2, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee2:	6802      	ldr	r2, [r0, #0]
 8002ee4:	6891      	ldr	r1, [r2, #8]
 8002ee6:	4b06      	ldr	r3, [pc, #24]	; (8002f00 <HAL_TIM_Base_Start_IT+0x28>)
 8002ee8:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d006      	beq.n	8002efc <HAL_TIM_Base_Start_IT+0x24>
 8002eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef2:	d003      	beq.n	8002efc <HAL_TIM_Base_Start_IT+0x24>
    __HAL_TIM_ENABLE(htim);
 8002ef4:	6813      	ldr	r3, [r2, #0]
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	6013      	str	r3, [r2, #0]
}
 8002efc:	2000      	movs	r0, #0
 8002efe:	4770      	bx	lr
 8002f00:	00010007 	.word	0x00010007

08002f04 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f04:	6802      	ldr	r2, [r0, #0]
 8002f06:	68d3      	ldr	r3, [r2, #12]
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	60d3      	str	r3, [r2, #12]
  __HAL_TIM_DISABLE(htim);
 8002f0e:	6803      	ldr	r3, [r0, #0]
 8002f10:	6a19      	ldr	r1, [r3, #32]
 8002f12:	f241 1211 	movw	r2, #4369	; 0x1111
 8002f16:	4211      	tst	r1, r2
 8002f18:	d108      	bne.n	8002f2c <HAL_TIM_Base_Stop_IT+0x28>
 8002f1a:	6a19      	ldr	r1, [r3, #32]
 8002f1c:	f240 4244 	movw	r2, #1092	; 0x444
 8002f20:	4211      	tst	r1, r2
 8002f22:	d103      	bne.n	8002f2c <HAL_TIM_Base_Stop_IT+0x28>
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	f022 0201 	bic.w	r2, r2, #1
 8002f2a:	601a      	str	r2, [r3, #0]
}
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	4770      	bx	lr

08002f30 <HAL_TIM_PeriodElapsedCallback>:
}
 8002f30:	4770      	bx	lr

08002f32 <HAL_TIM_OC_DelayElapsedCallback>:
}
 8002f32:	4770      	bx	lr

08002f34 <HAL_TIM_IC_CaptureCallback>:
}
 8002f34:	4770      	bx	lr

08002f36 <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8002f36:	4770      	bx	lr

08002f38 <HAL_TIM_TriggerCallback>:
}
 8002f38:	4770      	bx	lr

08002f3a <HAL_TIM_IRQHandler>:
{
 8002f3a:	b510      	push	{r4, lr}
 8002f3c:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002f3e:	6803      	ldr	r3, [r0, #0]
 8002f40:	691a      	ldr	r2, [r3, #16]
 8002f42:	f012 0f02 	tst.w	r2, #2
 8002f46:	d011      	beq.n	8002f6c <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	f012 0f02 	tst.w	r2, #2
 8002f4e:	d00d      	beq.n	8002f6c <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f50:	f06f 0202 	mvn.w	r2, #2
 8002f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f5a:	6803      	ldr	r3, [r0, #0]
 8002f5c:	699b      	ldr	r3, [r3, #24]
 8002f5e:	f013 0f03 	tst.w	r3, #3
 8002f62:	d079      	beq.n	8003058 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8002f64:	f7ff ffe6 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f6c:	6823      	ldr	r3, [r4, #0]
 8002f6e:	691a      	ldr	r2, [r3, #16]
 8002f70:	f012 0f04 	tst.w	r2, #4
 8002f74:	d012      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f76:	68da      	ldr	r2, [r3, #12]
 8002f78:	f012 0f04 	tst.w	r2, #4
 8002f7c:	d00e      	beq.n	8002f9c <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f7e:	f06f 0204 	mvn.w	r2, #4
 8002f82:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f84:	2302      	movs	r3, #2
 8002f86:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f88:	6823      	ldr	r3, [r4, #0]
 8002f8a:	699b      	ldr	r3, [r3, #24]
 8002f8c:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002f90:	d068      	beq.n	8003064 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	4620      	mov	r0, r4
 8002f94:	f7ff ffce 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f9c:	6823      	ldr	r3, [r4, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	f012 0f08 	tst.w	r2, #8
 8002fa4:	d012      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	f012 0f08 	tst.w	r2, #8
 8002fac:	d00e      	beq.n	8002fcc <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fae:	f06f 0208 	mvn.w	r2, #8
 8002fb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fb4:	2304      	movs	r3, #4
 8002fb6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fb8:	6823      	ldr	r3, [r4, #0]
 8002fba:	69db      	ldr	r3, [r3, #28]
 8002fbc:	f013 0f03 	tst.w	r3, #3
 8002fc0:	d057      	beq.n	8003072 <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc2:	4620      	mov	r0, r4
 8002fc4:	f7ff ffb6 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002fcc:	6823      	ldr	r3, [r4, #0]
 8002fce:	691a      	ldr	r2, [r3, #16]
 8002fd0:	f012 0f10 	tst.w	r2, #16
 8002fd4:	d012      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	f012 0f10 	tst.w	r2, #16
 8002fdc:	d00e      	beq.n	8002ffc <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002fde:	f06f 0210 	mvn.w	r2, #16
 8002fe2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002fe4:	2308      	movs	r3, #8
 8002fe6:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002fe8:	6823      	ldr	r3, [r4, #0]
 8002fea:	69db      	ldr	r3, [r3, #28]
 8002fec:	f413 7f40 	tst.w	r3, #768	; 0x300
 8002ff0:	d046      	beq.n	8003080 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8002ff2:	4620      	mov	r0, r4
 8002ff4:	f7ff ff9e 	bl	8002f34 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	691a      	ldr	r2, [r3, #16]
 8003000:	f012 0f01 	tst.w	r2, #1
 8003004:	d003      	beq.n	800300e <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003006:	68da      	ldr	r2, [r3, #12]
 8003008:	f012 0f01 	tst.w	r2, #1
 800300c:	d13f      	bne.n	800308e <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800300e:	6823      	ldr	r3, [r4, #0]
 8003010:	691a      	ldr	r2, [r3, #16]
 8003012:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003016:	d003      	beq.n	8003020 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003018:	68da      	ldr	r2, [r3, #12]
 800301a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800301e:	d13d      	bne.n	800309c <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003020:	6823      	ldr	r3, [r4, #0]
 8003022:	691a      	ldr	r2, [r3, #16]
 8003024:	f412 7f80 	tst.w	r2, #256	; 0x100
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	f012 0f80 	tst.w	r2, #128	; 0x80
 8003030:	d13b      	bne.n	80030aa <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003032:	6823      	ldr	r3, [r4, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	f012 0f40 	tst.w	r2, #64	; 0x40
 800303a:	d003      	beq.n	8003044 <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800303c:	68da      	ldr	r2, [r3, #12]
 800303e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003042:	d139      	bne.n	80030b8 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003044:	6823      	ldr	r3, [r4, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	f012 0f20 	tst.w	r2, #32
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800304e:	68da      	ldr	r2, [r3, #12]
 8003050:	f012 0f20 	tst.w	r2, #32
 8003054:	d137      	bne.n	80030c6 <HAL_TIM_IRQHandler+0x18c>
}
 8003056:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003058:	f7ff ff6b 	bl	8002f32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	4620      	mov	r0, r4
 800305e:	f7ff ff6a 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
 8003062:	e781      	b.n	8002f68 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003064:	4620      	mov	r0, r4
 8003066:	f7ff ff64 	bl	8002f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800306a:	4620      	mov	r0, r4
 800306c:	f7ff ff63 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
 8003070:	e792      	b.n	8002f98 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003072:	4620      	mov	r0, r4
 8003074:	f7ff ff5d 	bl	8002f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003078:	4620      	mov	r0, r4
 800307a:	f7ff ff5c 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
 800307e:	e7a3      	b.n	8002fc8 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003080:	4620      	mov	r0, r4
 8003082:	f7ff ff56 	bl	8002f32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003086:	4620      	mov	r0, r4
 8003088:	f7ff ff55 	bl	8002f36 <HAL_TIM_PWM_PulseFinishedCallback>
 800308c:	e7b4      	b.n	8002ff8 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800308e:	f06f 0201 	mvn.w	r2, #1
 8003092:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003094:	4620      	mov	r0, r4
 8003096:	f7ff ff4b 	bl	8002f30 <HAL_TIM_PeriodElapsedCallback>
 800309a:	e7b8      	b.n	800300e <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800309c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030a0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80030a2:	4620      	mov	r0, r4
 80030a4:	f000 f92f 	bl	8003306 <HAL_TIMEx_BreakCallback>
 80030a8:	e7ba      	b.n	8003020 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030aa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030ae:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80030b0:	4620      	mov	r0, r4
 80030b2:	f000 f929 	bl	8003308 <HAL_TIMEx_Break2Callback>
 80030b6:	e7bc      	b.n	8003032 <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030bc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80030be:	4620      	mov	r0, r4
 80030c0:	f7ff ff3a 	bl	8002f38 <HAL_TIM_TriggerCallback>
 80030c4:	e7be      	b.n	8003044 <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80030c6:	f06f 0220 	mvn.w	r2, #32
 80030ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80030cc:	4620      	mov	r0, r4
 80030ce:	f000 f919 	bl	8003304 <HAL_TIMEx_CommutCallback>
}
 80030d2:	e7c0      	b.n	8003056 <HAL_TIM_IRQHandler+0x11c>

080030d4 <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 80030d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030d6:	4a22      	ldr	r2, [pc, #136]	; (8003160 <TIM_Base_SetConfig+0x8c>)
 80030d8:	4290      	cmp	r0, r2
 80030da:	d006      	beq.n	80030ea <TIM_Base_SetConfig+0x16>
 80030dc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030e0:	d003      	beq.n	80030ea <TIM_Base_SetConfig+0x16>
 80030e2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80030e6:	4290      	cmp	r0, r2
 80030e8:	d103      	bne.n	80030f2 <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80030ee:	684a      	ldr	r2, [r1, #4]
 80030f0:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030f2:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <TIM_Base_SetConfig+0x8c>)
 80030f4:	4290      	cmp	r0, r2
 80030f6:	d012      	beq.n	800311e <TIM_Base_SetConfig+0x4a>
 80030f8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80030fc:	d00f      	beq.n	800311e <TIM_Base_SetConfig+0x4a>
 80030fe:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8003102:	4290      	cmp	r0, r2
 8003104:	d00b      	beq.n	800311e <TIM_Base_SetConfig+0x4a>
 8003106:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 800310a:	4290      	cmp	r0, r2
 800310c:	d007      	beq.n	800311e <TIM_Base_SetConfig+0x4a>
 800310e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003112:	4290      	cmp	r0, r2
 8003114:	d003      	beq.n	800311e <TIM_Base_SetConfig+0x4a>
 8003116:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800311a:	4290      	cmp	r0, r2
 800311c:	d103      	bne.n	8003126 <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 800311e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003122:	68ca      	ldr	r2, [r1, #12]
 8003124:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003126:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800312a:	694a      	ldr	r2, [r1, #20]
 800312c:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800312e:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003130:	688b      	ldr	r3, [r1, #8]
 8003132:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8003134:	680b      	ldr	r3, [r1, #0]
 8003136:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003138:	4b09      	ldr	r3, [pc, #36]	; (8003160 <TIM_Base_SetConfig+0x8c>)
 800313a:	4298      	cmp	r0, r3
 800313c:	d00b      	beq.n	8003156 <TIM_Base_SetConfig+0x82>
 800313e:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8003142:	4298      	cmp	r0, r3
 8003144:	d007      	beq.n	8003156 <TIM_Base_SetConfig+0x82>
 8003146:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800314a:	4298      	cmp	r0, r3
 800314c:	d003      	beq.n	8003156 <TIM_Base_SetConfig+0x82>
 800314e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003152:	4298      	cmp	r0, r3
 8003154:	d101      	bne.n	800315a <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8003156:	690b      	ldr	r3, [r1, #16]
 8003158:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800315a:	2301      	movs	r3, #1
 800315c:	6143      	str	r3, [r0, #20]
}
 800315e:	4770      	bx	lr
 8003160:	40012c00 	.word	0x40012c00

08003164 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8003164:	b1a8      	cbz	r0, 8003192 <HAL_TIM_Base_Init+0x2e>
{
 8003166:	b510      	push	{r4, lr}
 8003168:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 800316a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800316e:	b15b      	cbz	r3, 8003188 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	2302      	movs	r3, #2
 8003172:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003176:	1d21      	adds	r1, r4, #4
 8003178:	6820      	ldr	r0, [r4, #0]
 800317a:	f7ff ffab 	bl	80030d4 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800317e:	2301      	movs	r3, #1
 8003180:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8003184:	2000      	movs	r0, #0
}
 8003186:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8003188:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800318c:	f7fe fa66 	bl	800165c <HAL_TIM_Base_MspInit>
 8003190:	e7ee      	b.n	8003170 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8003192:	2001      	movs	r0, #1
}
 8003194:	4770      	bx	lr

08003196 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003196:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003198:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800319a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800319e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80031a2:	430b      	orrs	r3, r1
 80031a4:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80031a6:	6083      	str	r3, [r0, #8]
}
 80031a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80031ac:	4770      	bx	lr
	...

080031b0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80031b0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d064      	beq.n	8003282 <HAL_TIM_ConfigClockSource+0xd2>
{
 80031b8:	b510      	push	{r4, lr}
 80031ba:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80031bc:	2301      	movs	r3, #1
 80031be:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80031c2:	2302      	movs	r3, #2
 80031c4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80031c8:	6802      	ldr	r2, [r0, #0]
 80031ca:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031cc:	4b2e      	ldr	r3, [pc, #184]	; (8003288 <HAL_TIM_ConfigClockSource+0xd8>)
 80031ce:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 80031d0:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80031d2:	680b      	ldr	r3, [r1, #0]
 80031d4:	2b40      	cmp	r3, #64	; 0x40
 80031d6:	d04a      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xbe>
 80031d8:	d913      	bls.n	8003202 <HAL_TIM_ConfigClockSource+0x52>
 80031da:	2b60      	cmp	r3, #96	; 0x60
 80031dc:	d03d      	beq.n	800325a <HAL_TIM_ConfigClockSource+0xaa>
 80031de:	d91e      	bls.n	800321e <HAL_TIM_ConfigClockSource+0x6e>
 80031e0:	2b70      	cmp	r3, #112	; 0x70
 80031e2:	d028      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0x86>
 80031e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031e8:	d130      	bne.n	800324c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 80031ea:	68cb      	ldr	r3, [r1, #12]
 80031ec:	684a      	ldr	r2, [r1, #4]
 80031ee:	6889      	ldr	r1, [r1, #8]
 80031f0:	6820      	ldr	r0, [r4, #0]
 80031f2:	f7ff ffd0 	bl	8003196 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80031f6:	6822      	ldr	r2, [r4, #0]
 80031f8:	6893      	ldr	r3, [r2, #8]
 80031fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031fe:	6093      	str	r3, [r2, #8]
      break;
 8003200:	e024      	b.n	800324c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8003202:	2b10      	cmp	r3, #16
 8003204:	d006      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0x64>
 8003206:	d904      	bls.n	8003212 <HAL_TIM_ConfigClockSource+0x62>
 8003208:	2b20      	cmp	r3, #32
 800320a:	d003      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0x64>
 800320c:	2b30      	cmp	r3, #48	; 0x30
 800320e:	d001      	beq.n	8003214 <HAL_TIM_ConfigClockSource+0x64>
 8003210:	e01c      	b.n	800324c <HAL_TIM_ConfigClockSource+0x9c>
 8003212:	b9db      	cbnz	r3, 800324c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003214:	4619      	mov	r1, r3
 8003216:	6820      	ldr	r0, [r4, #0]
 8003218:	f7ff fe55 	bl	8002ec6 <TIM_ITRx_SetConfig>
      break;
 800321c:	e016      	b.n	800324c <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 800321e:	2b50      	cmp	r3, #80	; 0x50
 8003220:	d114      	bne.n	800324c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003222:	68ca      	ldr	r2, [r1, #12]
 8003224:	6849      	ldr	r1, [r1, #4]
 8003226:	6820      	ldr	r0, [r4, #0]
 8003228:	f7ff fe26 	bl	8002e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800322c:	2150      	movs	r1, #80	; 0x50
 800322e:	6820      	ldr	r0, [r4, #0]
 8003230:	f7ff fe49 	bl	8002ec6 <TIM_ITRx_SetConfig>
      break;
 8003234:	e00a      	b.n	800324c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8003236:	68cb      	ldr	r3, [r1, #12]
 8003238:	684a      	ldr	r2, [r1, #4]
 800323a:	6889      	ldr	r1, [r1, #8]
 800323c:	6820      	ldr	r0, [r4, #0]
 800323e:	f7ff ffaa 	bl	8003196 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003242:	6822      	ldr	r2, [r4, #0]
 8003244:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003246:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800324a:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 800324c:	2301      	movs	r3, #1
 800324e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8003252:	2000      	movs	r0, #0
 8003254:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8003258:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 800325a:	68ca      	ldr	r2, [r1, #12]
 800325c:	6849      	ldr	r1, [r1, #4]
 800325e:	6820      	ldr	r0, [r4, #0]
 8003260:	f7ff fe1d 	bl	8002e9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003264:	2160      	movs	r1, #96	; 0x60
 8003266:	6820      	ldr	r0, [r4, #0]
 8003268:	f7ff fe2d 	bl	8002ec6 <TIM_ITRx_SetConfig>
      break;
 800326c:	e7ee      	b.n	800324c <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800326e:	68ca      	ldr	r2, [r1, #12]
 8003270:	6849      	ldr	r1, [r1, #4]
 8003272:	6820      	ldr	r0, [r4, #0]
 8003274:	f7ff fe00 	bl	8002e78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003278:	2140      	movs	r1, #64	; 0x40
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	f7ff fe23 	bl	8002ec6 <TIM_ITRx_SetConfig>
      break;
 8003280:	e7e4      	b.n	800324c <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 8003282:	2002      	movs	r0, #2
}
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	fffe0088 	.word	0xfffe0088

0800328c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800328c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003290:	2b01      	cmp	r3, #1
 8003292:	d033      	beq.n	80032fc <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 8003294:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 8003296:	2301      	movs	r3, #1
 8003298:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800329c:	2302      	movs	r3, #2
 800329e:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032a2:	6802      	ldr	r2, [r0, #0]
 80032a4:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032a6:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80032a8:	4c15      	ldr	r4, [pc, #84]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80032aa:	42a2      	cmp	r2, r4
 80032ac:	d021      	beq.n	80032f2 <HAL_TIMEx_MasterConfigSynchronization+0x66>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032b2:	680c      	ldr	r4, [r1, #0]
 80032b4:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032b6:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	6803      	ldr	r3, [r0, #0]
 80032ba:	4a11      	ldr	r2, [pc, #68]	; (8003300 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d00a      	beq.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80032c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c4:	d007      	beq.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80032c6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d003      	beq.n	80032d6 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80032ce:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d104      	bne.n	80032e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80032d6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80032da:	688a      	ldr	r2, [r1, #8]
 80032dc:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80032de:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80032e0:	2301      	movs	r3, #1
 80032e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032e6:	2300      	movs	r3, #0
 80032e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80032ec:	4618      	mov	r0, r3
}
 80032ee:	bc30      	pop	{r4, r5}
 80032f0:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80032f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80032f6:	684c      	ldr	r4, [r1, #4]
 80032f8:	4323      	orrs	r3, r4
 80032fa:	e7d8      	b.n	80032ae <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80032fc:	2002      	movs	r0, #2
}
 80032fe:	4770      	bx	lr
 8003300:	40012c00 	.word	0x40012c00

08003304 <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003304:	4770      	bx	lr

08003306 <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003306:	4770      	bx	lr

08003308 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003308:	4770      	bx	lr

0800330a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800330a:	6802      	ldr	r2, [r0, #0]
 800330c:	6813      	ldr	r3, [r2, #0]
 800330e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003312:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003314:	6802      	ldr	r2, [r0, #0]
 8003316:	6893      	ldr	r3, [r2, #8]
 8003318:	f023 0301 	bic.w	r3, r3, #1
 800331c:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800331e:	2320      	movs	r3, #32
 8003320:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003322:	2300      	movs	r3, #0
 8003324:	6603      	str	r3, [r0, #96]	; 0x60
}
 8003326:	4770      	bx	lr

08003328 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003328:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800332a:	2b21      	cmp	r3, #33	; 0x21
 800332c:	d000      	beq.n	8003330 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800332e:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8003330:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003334:	b29b      	uxth	r3, r3
 8003336:	b16b      	cbz	r3, 8003354 <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003338:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 800333a:	6803      	ldr	r3, [r0, #0]
 800333c:	7812      	ldrb	r2, [r2, #0]
 800333e:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003340:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003342:	3301      	adds	r3, #1
 8003344:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8003346:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800334a:	3b01      	subs	r3, #1
 800334c:	b29b      	uxth	r3, r3
 800334e:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8003352:	e7ec      	b.n	800332e <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003354:	6802      	ldr	r2, [r0, #0]
 8003356:	6813      	ldr	r3, [r2, #0]
 8003358:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800335c:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800335e:	6802      	ldr	r2, [r0, #0]
 8003360:	6813      	ldr	r3, [r2, #0]
 8003362:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003366:	6013      	str	r3, [r2, #0]
 8003368:	4770      	bx	lr

0800336a <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800336a:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800336c:	2b21      	cmp	r3, #33	; 0x21
 800336e:	d000      	beq.n	8003372 <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003370:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8003372:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003376:	b29b      	uxth	r3, r3
 8003378:	b17b      	cbz	r3, 800339a <UART_TxISR_16BIT+0x30>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800337a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800337c:	881b      	ldrh	r3, [r3, #0]
 800337e:	6802      	ldr	r2, [r0, #0]
 8003380:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003384:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003386:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8003388:	3302      	adds	r3, #2
 800338a:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800338c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8003390:	3b01      	subs	r3, #1
 8003392:	b29b      	uxth	r3, r3
 8003394:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8003398:	e7ea      	b.n	8003370 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800339a:	6802      	ldr	r2, [r0, #0]
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033a2:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80033a4:	6802      	ldr	r2, [r0, #0]
 80033a6:	6813      	ldr	r3, [r2, #0]
 80033a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	4770      	bx	lr

080033b0 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 80033b0:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d128      	bne.n	8003408 <HAL_UART_Transmit_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 80033b6:	b349      	cbz	r1, 800340c <HAL_UART_Transmit_IT+0x5c>
 80033b8:	b352      	cbz	r2, 8003410 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 80033ba:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d028      	beq.n	8003414 <HAL_UART_Transmit_IT+0x64>
 80033c2:	2301      	movs	r3, #1
 80033c4:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 80033c8:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80033ca:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80033ce:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 80033d2:	2300      	movs	r3, #0
 80033d4:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033d6:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033d8:	2321      	movs	r3, #33	; 0x21
 80033da:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033dc:	6883      	ldr	r3, [r0, #8]
 80033de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e2:	d00b      	beq.n	80033fc <HAL_UART_Transmit_IT+0x4c>
      huart->TxISR = UART_TxISR_8BIT;
 80033e4:	4b0c      	ldr	r3, [pc, #48]	; (8003418 <HAL_UART_Transmit_IT+0x68>)
 80033e6:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 80033e8:	2300      	movs	r3, #0
 80033ea:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80033ee:	6801      	ldr	r1, [r0, #0]
 80033f0:	680a      	ldr	r2, [r1, #0]
 80033f2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033f6:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80033f8:	4618      	mov	r0, r3
 80033fa:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033fc:	6903      	ldr	r3, [r0, #16]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 8003402:	4b06      	ldr	r3, [pc, #24]	; (800341c <HAL_UART_Transmit_IT+0x6c>)
 8003404:	6643      	str	r3, [r0, #100]	; 0x64
 8003406:	e7ef      	b.n	80033e8 <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 8003408:	2002      	movs	r0, #2
 800340a:	4770      	bx	lr
      return HAL_ERROR;
 800340c:	2001      	movs	r0, #1
 800340e:	4770      	bx	lr
 8003410:	2001      	movs	r0, #1
 8003412:	4770      	bx	lr
    __HAL_LOCK(huart);
 8003414:	2002      	movs	r0, #2
}
 8003416:	4770      	bx	lr
 8003418:	08003329 	.word	0x08003329
 800341c:	0800336b 	.word	0x0800336b

08003420 <HAL_UART_TxCpltCallback>:
}
 8003420:	4770      	bx	lr

08003422 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003422:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003424:	6801      	ldr	r1, [r0, #0]
 8003426:	680a      	ldr	r2, [r1, #0]
 8003428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342c:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800342e:	2220      	movs	r2, #32
 8003430:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003432:	2200      	movs	r2, #0
 8003434:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003436:	f7ff fff3 	bl	8003420 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800343a:	bd08      	pop	{r3, pc}

0800343c <HAL_UART_ErrorCallback>:
}
 800343c:	4770      	bx	lr
	...

08003440 <HAL_UART_IRQHandler>:
{
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003444:	6801      	ldr	r1, [r0, #0]
 8003446:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003448:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800344a:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800344c:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8003450:	401a      	ands	r2, r3
 8003452:	d10c      	bne.n	800346e <HAL_UART_IRQHandler+0x2e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003454:	f013 0f20 	tst.w	r3, #32
 8003458:	d009      	beq.n	800346e <HAL_UART_IRQHandler+0x2e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800345a:	f010 0f20 	tst.w	r0, #32
 800345e:	d006      	beq.n	800346e <HAL_UART_IRQHandler+0x2e>
      if (huart->RxISR != NULL)
 8003460:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003462:	2b00      	cmp	r3, #0
 8003464:	f000 80a1 	beq.w	80035aa <HAL_UART_IRQHandler+0x16a>
        huart->RxISR(huart);
 8003468:	4620      	mov	r0, r4
 800346a:	4798      	blx	r3
 800346c:	e09d      	b.n	80035aa <HAL_UART_IRQHandler+0x16a>
  if ((errorflags != 0U)
 800346e:	2a00      	cmp	r2, #0
 8003470:	d07d      	beq.n	800356e <HAL_UART_IRQHandler+0x12e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003472:	f015 0201 	ands.w	r2, r5, #1
 8003476:	d102      	bne.n	800347e <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8003478:	f410 7f90 	tst.w	r0, #288	; 0x120
 800347c:	d077      	beq.n	800356e <HAL_UART_IRQHandler+0x12e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800347e:	f013 0f01 	tst.w	r3, #1
 8003482:	d007      	beq.n	8003494 <HAL_UART_IRQHandler+0x54>
 8003484:	f410 7f80 	tst.w	r0, #256	; 0x100
 8003488:	d004      	beq.n	8003494 <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800348a:	2501      	movs	r5, #1
 800348c:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800348e:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003490:	4329      	orrs	r1, r5
 8003492:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003494:	f013 0f02 	tst.w	r3, #2
 8003498:	d007      	beq.n	80034aa <HAL_UART_IRQHandler+0x6a>
 800349a:	b132      	cbz	r2, 80034aa <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800349c:	6821      	ldr	r1, [r4, #0]
 800349e:	2502      	movs	r5, #2
 80034a0:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034a2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80034a4:	f041 0104 	orr.w	r1, r1, #4
 80034a8:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80034aa:	f013 0f04 	tst.w	r3, #4
 80034ae:	d007      	beq.n	80034c0 <HAL_UART_IRQHandler+0x80>
 80034b0:	b132      	cbz	r2, 80034c0 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80034b2:	6821      	ldr	r1, [r4, #0]
 80034b4:	2504      	movs	r5, #4
 80034b6:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034b8:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 80034ba:	f041 0102 	orr.w	r1, r1, #2
 80034be:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 80034c0:	f013 0f08 	tst.w	r3, #8
 80034c4:	d009      	beq.n	80034da <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80034c6:	f010 0f20 	tst.w	r0, #32
 80034ca:	d100      	bne.n	80034ce <HAL_UART_IRQHandler+0x8e>
 80034cc:	b12a      	cbz	r2, 80034da <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034ce:	6822      	ldr	r2, [r4, #0]
 80034d0:	2108      	movs	r1, #8
 80034d2:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034d4:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80034d6:	430a      	orrs	r2, r1
 80034d8:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80034da:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80034de:	d00a      	beq.n	80034f6 <HAL_UART_IRQHandler+0xb6>
 80034e0:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80034e4:	d007      	beq.n	80034f6 <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034e6:	6822      	ldr	r2, [r4, #0]
 80034e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80034ec:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80034ee:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80034f0:	f042 0220 	orr.w	r2, r2, #32
 80034f4:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80034f6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80034f8:	2a00      	cmp	r2, #0
 80034fa:	d056      	beq.n	80035aa <HAL_UART_IRQHandler+0x16a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80034fc:	f013 0f20 	tst.w	r3, #32
 8003500:	d006      	beq.n	8003510 <HAL_UART_IRQHandler+0xd0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003502:	f010 0f20 	tst.w	r0, #32
 8003506:	d003      	beq.n	8003510 <HAL_UART_IRQHandler+0xd0>
        if (huart->RxISR != NULL)
 8003508:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800350a:	b10b      	cbz	r3, 8003510 <HAL_UART_IRQHandler+0xd0>
          huart->RxISR(huart);
 800350c:	4620      	mov	r0, r4
 800350e:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8003510:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003512:	6823      	ldr	r3, [r4, #0]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f013 0f40 	tst.w	r3, #64	; 0x40
 800351a:	d102      	bne.n	8003522 <HAL_UART_IRQHandler+0xe2>
 800351c:	f012 0f28 	tst.w	r2, #40	; 0x28
 8003520:	d01f      	beq.n	8003562 <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 8003522:	4620      	mov	r0, r4
 8003524:	f7ff fef1 	bl	800330a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	689a      	ldr	r2, [r3, #8]
 800352c:	f012 0f40 	tst.w	r2, #64	; 0x40
 8003530:	d013      	beq.n	800355a <HAL_UART_IRQHandler+0x11a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003538:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 800353a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800353c:	b14b      	cbz	r3, 8003552 <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_UART_IRQHandler+0x174>)
 8003540:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003542:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8003544:	f7fe fe0c 	bl	8002160 <HAL_DMA_Abort_IT>
 8003548:	b378      	cbz	r0, 80035aa <HAL_UART_IRQHandler+0x16a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800354a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800354c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800354e:	4798      	blx	r3
 8003550:	e02b      	b.n	80035aa <HAL_UART_IRQHandler+0x16a>
            HAL_UART_ErrorCallback(huart);
 8003552:	4620      	mov	r0, r4
 8003554:	f7ff ff72 	bl	800343c <HAL_UART_ErrorCallback>
 8003558:	e027      	b.n	80035aa <HAL_UART_IRQHandler+0x16a>
          HAL_UART_ErrorCallback(huart);
 800355a:	4620      	mov	r0, r4
 800355c:	f7ff ff6e 	bl	800343c <HAL_UART_ErrorCallback>
 8003560:	e023      	b.n	80035aa <HAL_UART_IRQHandler+0x16a>
        HAL_UART_ErrorCallback(huart);
 8003562:	4620      	mov	r0, r4
 8003564:	f7ff ff6a 	bl	800343c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003568:	2300      	movs	r3, #0
 800356a:	67e3      	str	r3, [r4, #124]	; 0x7c
 800356c:	e01d      	b.n	80035aa <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800356e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003572:	d002      	beq.n	800357a <HAL_UART_IRQHandler+0x13a>
 8003574:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8003578:	d10a      	bne.n	8003590 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_ISR_TXE) != 0U)
 800357a:	f013 0f80 	tst.w	r3, #128	; 0x80
 800357e:	d00e      	beq.n	800359e <HAL_UART_IRQHandler+0x15e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003580:	f010 0f80 	tst.w	r0, #128	; 0x80
 8003584:	d00b      	beq.n	800359e <HAL_UART_IRQHandler+0x15e>
    if (huart->TxISR != NULL)
 8003586:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003588:	b17b      	cbz	r3, 80035aa <HAL_UART_IRQHandler+0x16a>
      huart->TxISR(huart);
 800358a:	4620      	mov	r0, r4
 800358c:	4798      	blx	r3
 800358e:	e00c      	b.n	80035aa <HAL_UART_IRQHandler+0x16a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003590:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003594:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8003596:	4620      	mov	r0, r4
 8003598:	f000 fa1e 	bl	80039d8 <HAL_UARTEx_WakeupCallback>
    return;
 800359c:	e005      	b.n	80035aa <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800359e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80035a2:	d002      	beq.n	80035aa <HAL_UART_IRQHandler+0x16a>
 80035a4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80035a8:	d100      	bne.n	80035ac <HAL_UART_IRQHandler+0x16c>
}
 80035aa:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 80035ac:	4620      	mov	r0, r4
 80035ae:	f7ff ff38 	bl	8003422 <UART_EndTransmit_IT>
    return;
 80035b2:	e7fa      	b.n	80035aa <HAL_UART_IRQHandler+0x16a>
 80035b4:	080035b9 	.word	0x080035b9

080035b8 <UART_DMAAbortOnError>:
{
 80035b8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035ba:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80035bc:	2300      	movs	r3, #0
 80035be:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80035c2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80035c6:	f7ff ff39 	bl	800343c <HAL_UART_ErrorCallback>
}
 80035ca:	bd08      	pop	{r3, pc}

080035cc <UART_SetConfig>:
{
 80035cc:	b510      	push	{r4, lr}
 80035ce:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035d0:	6883      	ldr	r3, [r0, #8]
 80035d2:	6902      	ldr	r2, [r0, #16]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	6942      	ldr	r2, [r0, #20]
 80035d8:	4313      	orrs	r3, r2
 80035da:	69c2      	ldr	r2, [r0, #28]
 80035dc:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035de:	6801      	ldr	r1, [r0, #0]
 80035e0:	6808      	ldr	r0, [r1, #0]
 80035e2:	4a6c      	ldr	r2, [pc, #432]	; (8003794 <UART_SetConfig+0x1c8>)
 80035e4:	4002      	ands	r2, r0
 80035e6:	4313      	orrs	r3, r2
 80035e8:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035ea:	6822      	ldr	r2, [r4, #0]
 80035ec:	6853      	ldr	r3, [r2, #4]
 80035ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035f2:	68e1      	ldr	r1, [r4, #12]
 80035f4:	430b      	orrs	r3, r1
 80035f6:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035f8:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80035fa:	6a23      	ldr	r3, [r4, #32]
 80035fc:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035fe:	6821      	ldr	r1, [r4, #0]
 8003600:	688b      	ldr	r3, [r1, #8]
 8003602:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 800360a:	6823      	ldr	r3, [r4, #0]
 800360c:	4a62      	ldr	r2, [pc, #392]	; (8003798 <UART_SetConfig+0x1cc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d015      	beq.n	800363e <UART_SetConfig+0x72>
 8003612:	4a62      	ldr	r2, [pc, #392]	; (800379c <UART_SetConfig+0x1d0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d028      	beq.n	800366a <UART_SetConfig+0x9e>
 8003618:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800361c:	4293      	cmp	r3, r2
 800361e:	d020      	beq.n	8003662 <UART_SetConfig+0x96>
 8003620:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003622:	69e2      	ldr	r2, [r4, #28]
 8003624:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8003628:	d021      	beq.n	800366e <UART_SetConfig+0xa2>
    switch (clocksource)
 800362a:	2b08      	cmp	r3, #8
 800362c:	f200 80ab 	bhi.w	8003786 <UART_SetConfig+0x1ba>
 8003630:	e8df f003 	tbb	[pc, r3]
 8003634:	a98b816c 	.word	0xa98b816c
 8003638:	a9a9a996 	.word	0xa9a9a996
 800363c:	a0          	.byte	0xa0
 800363d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800363e:	4b58      	ldr	r3, [pc, #352]	; (80037a0 <UART_SetConfig+0x1d4>)
 8003640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	2b03      	cmp	r3, #3
 8003648:	d809      	bhi.n	800365e <UART_SetConfig+0x92>
 800364a:	e8df f003 	tbb	[pc, r3]
 800364e:	0402      	.short	0x0402
 8003650:	0c06      	.short	0x0c06
 8003652:	2300      	movs	r3, #0
 8003654:	e7e5      	b.n	8003622 <UART_SetConfig+0x56>
 8003656:	2304      	movs	r3, #4
 8003658:	e7e3      	b.n	8003622 <UART_SetConfig+0x56>
 800365a:	2308      	movs	r3, #8
 800365c:	e7e1      	b.n	8003622 <UART_SetConfig+0x56>
 800365e:	2310      	movs	r3, #16
 8003660:	e7df      	b.n	8003622 <UART_SetConfig+0x56>
 8003662:	2300      	movs	r3, #0
 8003664:	e7dd      	b.n	8003622 <UART_SetConfig+0x56>
 8003666:	2302      	movs	r3, #2
 8003668:	e7db      	b.n	8003622 <UART_SetConfig+0x56>
 800366a:	2300      	movs	r3, #0
 800366c:	e7d9      	b.n	8003622 <UART_SetConfig+0x56>
    switch (clocksource)
 800366e:	2b08      	cmp	r3, #8
 8003670:	d849      	bhi.n	8003706 <UART_SetConfig+0x13a>
 8003672:	e8df f003 	tbb	[pc, r3]
 8003676:	1e05      	.short	0x1e05
 8003678:	48344829 	.word	0x48344829
 800367c:	4848      	.short	0x4848
 800367e:	3f          	.byte	0x3f
 800367f:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8003680:	f7ff faf8 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003684:	6862      	ldr	r2, [r4, #4]
 8003686:	0853      	lsrs	r3, r2, #1
 8003688:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 800368c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003690:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003692:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003694:	f1a3 0110 	sub.w	r1, r3, #16
 8003698:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800369c:	4291      	cmp	r1, r2
 800369e:	d875      	bhi.n	800378c <UART_SetConfig+0x1c0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a6:	f3c3 0342 	ubfx	r3, r3, #1, #3
 80036aa:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 80036ac:	6822      	ldr	r2, [r4, #0]
 80036ae:	60d3      	str	r3, [r2, #12]
 80036b0:	e03d      	b.n	800372e <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetPCLK2Freq();
 80036b2:	f7ff faf5 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036b6:	6862      	ldr	r2, [r4, #4]
 80036b8:	0853      	lsrs	r3, r2, #1
 80036ba:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80036be:	fbb3 f3f2 	udiv	r3, r3, r2
 80036c2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80036c4:	2000      	movs	r0, #0
        break;
 80036c6:	e7e5      	b.n	8003694 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80036c8:	6862      	ldr	r2, [r4, #4]
 80036ca:	0853      	lsrs	r3, r2, #1
 80036cc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80036d0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80036d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80036d8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80036da:	2000      	movs	r0, #0
        break;
 80036dc:	e7da      	b.n	8003694 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetSysClockFreq();
 80036de:	f7ff f9b9 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80036e2:	6862      	ldr	r2, [r4, #4]
 80036e4:	0853      	lsrs	r3, r2, #1
 80036e6:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80036ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80036ee:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80036f0:	2000      	movs	r0, #0
        break;
 80036f2:	e7cf      	b.n	8003694 <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80036f4:	6862      	ldr	r2, [r4, #4]
 80036f6:	0853      	lsrs	r3, r2, #1
 80036f8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80036fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8003700:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003702:	2000      	movs	r0, #0
        break;
 8003704:	e7c6      	b.n	8003694 <UART_SetConfig+0xc8>
        ret = HAL_ERROR;
 8003706:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003708:	2300      	movs	r3, #0
 800370a:	e7c3      	b.n	8003694 <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 800370c:	f7ff fab2 	bl	8002c74 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003710:	6862      	ldr	r2, [r4, #4]
 8003712:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003716:	fbb3 f3f2 	udiv	r3, r3, r2
 800371a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800371c:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800371e:	f1a3 0110 	sub.w	r1, r3, #16
 8003722:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8003726:	4291      	cmp	r1, r2
 8003728:	d832      	bhi.n	8003790 <UART_SetConfig+0x1c4>
      huart->Instance->BRR = usartdiv;
 800372a:	6822      	ldr	r2, [r4, #0]
 800372c:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 8003732:	6663      	str	r3, [r4, #100]	; 0x64
}
 8003734:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8003736:	f7ff fab3 	bl	8002ca0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800373a:	6862      	ldr	r2, [r4, #4]
 800373c:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8003740:	fbb3 f3f2 	udiv	r3, r3, r2
 8003744:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003746:	2000      	movs	r0, #0
        break;
 8003748:	e7e9      	b.n	800371e <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800374a:	6862      	ldr	r2, [r4, #4]
 800374c:	0853      	lsrs	r3, r2, #1
 800374e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003752:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003756:	fbb3 f3f2 	udiv	r3, r3, r2
 800375a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800375c:	2000      	movs	r0, #0
        break;
 800375e:	e7de      	b.n	800371e <UART_SetConfig+0x152>
        pclk = HAL_RCC_GetSysClockFreq();
 8003760:	f7ff f978 	bl	8002a54 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003764:	6862      	ldr	r2, [r4, #4]
 8003766:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800376a:	fbb3 f3f2 	udiv	r3, r3, r2
 800376e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003770:	2000      	movs	r0, #0
        break;
 8003772:	e7d4      	b.n	800371e <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003774:	6862      	ldr	r2, [r4, #4]
 8003776:	0853      	lsrs	r3, r2, #1
 8003778:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800377c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003780:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8003782:	2000      	movs	r0, #0
        break;
 8003784:	e7cb      	b.n	800371e <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 8003786:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8003788:	2300      	movs	r3, #0
 800378a:	e7c8      	b.n	800371e <UART_SetConfig+0x152>
      ret = HAL_ERROR;
 800378c:	2001      	movs	r0, #1
 800378e:	e7ce      	b.n	800372e <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 8003790:	2001      	movs	r0, #1
 8003792:	e7cc      	b.n	800372e <UART_SetConfig+0x162>
 8003794:	efff69f3 	.word	0xefff69f3
 8003798:	40013800 	.word	0x40013800
 800379c:	40004400 	.word	0x40004400
 80037a0:	40021000 	.word	0x40021000

080037a4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037a6:	f013 0f01 	tst.w	r3, #1
 80037aa:	d006      	beq.n	80037ba <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037ac:	6802      	ldr	r2, [r0, #0]
 80037ae:	6853      	ldr	r3, [r2, #4]
 80037b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80037b4:	6a81      	ldr	r1, [r0, #40]	; 0x28
 80037b6:	430b      	orrs	r3, r1
 80037b8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037bc:	f013 0f02 	tst.w	r3, #2
 80037c0:	d006      	beq.n	80037d0 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037c2:	6802      	ldr	r2, [r0, #0]
 80037c4:	6853      	ldr	r3, [r2, #4]
 80037c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ca:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037d0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037d2:	f013 0f04 	tst.w	r3, #4
 80037d6:	d006      	beq.n	80037e6 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037d8:	6802      	ldr	r2, [r0, #0]
 80037da:	6853      	ldr	r3, [r2, #4]
 80037dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037e0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80037e2:	430b      	orrs	r3, r1
 80037e4:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037e6:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037e8:	f013 0f08 	tst.w	r3, #8
 80037ec:	d006      	beq.n	80037fc <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037ee:	6802      	ldr	r2, [r0, #0]
 80037f0:	6853      	ldr	r3, [r2, #4]
 80037f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80037f6:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80037f8:	430b      	orrs	r3, r1
 80037fa:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80037fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80037fe:	f013 0f10 	tst.w	r3, #16
 8003802:	d006      	beq.n	8003812 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003804:	6802      	ldr	r2, [r0, #0]
 8003806:	6893      	ldr	r3, [r2, #8]
 8003808:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800380c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800380e:	430b      	orrs	r3, r1
 8003810:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003812:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003814:	f013 0f20 	tst.w	r3, #32
 8003818:	d006      	beq.n	8003828 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800381a:	6802      	ldr	r2, [r0, #0]
 800381c:	6893      	ldr	r3, [r2, #8]
 800381e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003822:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8003824:	430b      	orrs	r3, r1
 8003826:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003828:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800382a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800382e:	d00a      	beq.n	8003846 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003830:	6802      	ldr	r2, [r0, #0]
 8003832:	6853      	ldr	r3, [r2, #4]
 8003834:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8003838:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800383a:	430b      	orrs	r3, r1
 800383c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800383e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003840:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003844:	d00b      	beq.n	800385e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003846:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003848:	f013 0f80 	tst.w	r3, #128	; 0x80
 800384c:	d006      	beq.n	800385c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800384e:	6802      	ldr	r2, [r0, #0]
 8003850:	6853      	ldr	r3, [r2, #4]
 8003852:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003856:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8003858:	430b      	orrs	r3, r1
 800385a:	6053      	str	r3, [r2, #4]
}
 800385c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800385e:	6802      	ldr	r2, [r0, #0]
 8003860:	6853      	ldr	r3, [r2, #4]
 8003862:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003866:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8003868:	430b      	orrs	r3, r1
 800386a:	6053      	str	r3, [r2, #4]
 800386c:	e7eb      	b.n	8003846 <UART_AdvFeatureConfig+0xa2>

0800386e <UART_WaitOnFlagUntilTimeout>:
{
 800386e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003872:	4604      	mov	r4, r0
 8003874:	460f      	mov	r7, r1
 8003876:	4616      	mov	r6, r2
 8003878:	4698      	mov	r8, r3
 800387a:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	69db      	ldr	r3, [r3, #28]
 8003880:	ea37 0303 	bics.w	r3, r7, r3
 8003884:	bf0c      	ite	eq
 8003886:	2301      	moveq	r3, #1
 8003888:	2300      	movne	r3, #0
 800388a:	42b3      	cmp	r3, r6
 800388c:	d13a      	bne.n	8003904 <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 800388e:	f1b5 3fff 	cmp.w	r5, #4294967295
 8003892:	d0f3      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003894:	f7fe f9ec 	bl	8001c70 <HAL_GetTick>
 8003898:	eba0 0008 	sub.w	r0, r0, r8
 800389c:	42a8      	cmp	r0, r5
 800389e:	d81f      	bhi.n	80038e0 <UART_WaitOnFlagUntilTimeout+0x72>
 80038a0:	b1f5      	cbz	r5, 80038e0 <UART_WaitOnFlagUntilTimeout+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038a2:	6823      	ldr	r3, [r4, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	f012 0f04 	tst.w	r2, #4
 80038aa:	d0e7      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038ac:	69da      	ldr	r2, [r3, #28]
 80038ae:	f412 6f00 	tst.w	r2, #2048	; 0x800
 80038b2:	d0e3      	beq.n	800387c <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038b8:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038ba:	6822      	ldr	r2, [r4, #0]
 80038bc:	6813      	ldr	r3, [r2, #0]
 80038be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038c2:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038c4:	6822      	ldr	r2, [r4, #0]
 80038c6:	6893      	ldr	r3, [r2, #8]
 80038c8:	f023 0301 	bic.w	r3, r3, #1
 80038cc:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80038ce:	2320      	movs	r3, #32
 80038d0:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80038d2:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038d4:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80038d6:	2300      	movs	r3, #0
 80038d8:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80038dc:	2003      	movs	r0, #3
 80038de:	e012      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80038e0:	6822      	ldr	r2, [r4, #0]
 80038e2:	6813      	ldr	r3, [r2, #0]
 80038e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80038e8:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ea:	6822      	ldr	r2, [r4, #0]
 80038ec:	6893      	ldr	r3, [r2, #8]
 80038ee:	f023 0301 	bic.w	r3, r3, #1
 80038f2:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80038f4:	2320      	movs	r3, #32
 80038f6:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80038f8:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80038fa:	2300      	movs	r3, #0
 80038fc:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 8003900:	2003      	movs	r0, #3
 8003902:	e000      	b.n	8003906 <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 8003904:	2000      	movs	r0, #0
}
 8003906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800390a <UART_CheckIdleState>:
{
 800390a:	b530      	push	{r4, r5, lr}
 800390c:	b083      	sub	sp, #12
 800390e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003910:	2300      	movs	r3, #0
 8003912:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8003914:	f7fe f9ac 	bl	8001c70 <HAL_GetTick>
 8003918:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f013 0f08 	tst.w	r3, #8
 8003922:	d10c      	bne.n	800393e <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003924:	6823      	ldr	r3, [r4, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f013 0f04 	tst.w	r3, #4
 800392c:	d115      	bne.n	800395a <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 800392e:	2320      	movs	r3, #32
 8003930:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003932:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 8003934:	2000      	movs	r0, #0
 8003936:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 800393a:	b003      	add	sp, #12
 800393c:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800393e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	4603      	mov	r3, r0
 8003946:	2200      	movs	r2, #0
 8003948:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800394c:	4620      	mov	r0, r4
 800394e:	f7ff ff8e 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 8003952:	2800      	cmp	r0, #0
 8003954:	d0e6      	beq.n	8003924 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003956:	2003      	movs	r0, #3
 8003958:	e7ef      	b.n	800393a <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800395a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	462b      	mov	r3, r5
 8003962:	2200      	movs	r2, #0
 8003964:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003968:	4620      	mov	r0, r4
 800396a:	f7ff ff80 	bl	800386e <UART_WaitOnFlagUntilTimeout>
 800396e:	2800      	cmp	r0, #0
 8003970:	d0dd      	beq.n	800392e <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 8003972:	2003      	movs	r0, #3
 8003974:	e7e1      	b.n	800393a <UART_CheckIdleState+0x30>

08003976 <HAL_UART_Init>:
  if (huart == NULL)
 8003976:	b368      	cbz	r0, 80039d4 <HAL_UART_Init+0x5e>
{
 8003978:	b510      	push	{r4, lr}
 800397a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 800397c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800397e:	b303      	cbz	r3, 80039c2 <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8003980:	2324      	movs	r3, #36	; 0x24
 8003982:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8003984:	6822      	ldr	r2, [r4, #0]
 8003986:	6813      	ldr	r3, [r2, #0]
 8003988:	f023 0301 	bic.w	r3, r3, #1
 800398c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800398e:	4620      	mov	r0, r4
 8003990:	f7ff fe1c 	bl	80035cc <UART_SetConfig>
 8003994:	2801      	cmp	r0, #1
 8003996:	d013      	beq.n	80039c0 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800399a:	b9bb      	cbnz	r3, 80039cc <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	6853      	ldr	r3, [r2, #4]
 80039a0:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 80039a4:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	6893      	ldr	r3, [r2, #8]
 80039aa:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 80039ae:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 80039b0:	6822      	ldr	r2, [r4, #0]
 80039b2:	6813      	ldr	r3, [r2, #0]
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 80039ba:	4620      	mov	r0, r4
 80039bc:	f7ff ffa5 	bl	800390a <UART_CheckIdleState>
}
 80039c0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 80039c2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 80039c6:	f7fd fe81 	bl	80016cc <HAL_UART_MspInit>
 80039ca:	e7d9      	b.n	8003980 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80039cc:	4620      	mov	r0, r4
 80039ce:	f7ff fee9 	bl	80037a4 <UART_AdvFeatureConfig>
 80039d2:	e7e3      	b.n	800399c <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80039d4:	2001      	movs	r0, #1
}
 80039d6:	4770      	bx	lr

080039d8 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80039d8:	4770      	bx	lr
	...

080039dc <__errno>:
 80039dc:	4b01      	ldr	r3, [pc, #4]	; (80039e4 <__errno+0x8>)
 80039de:	6818      	ldr	r0, [r3, #0]
 80039e0:	4770      	bx	lr
 80039e2:	bf00      	nop
 80039e4:	200000ac 	.word	0x200000ac

080039e8 <__libc_init_array>:
 80039e8:	b570      	push	{r4, r5, r6, lr}
 80039ea:	4e0d      	ldr	r6, [pc, #52]	; (8003a20 <__libc_init_array+0x38>)
 80039ec:	4c0d      	ldr	r4, [pc, #52]	; (8003a24 <__libc_init_array+0x3c>)
 80039ee:	1ba4      	subs	r4, r4, r6
 80039f0:	10a4      	asrs	r4, r4, #2
 80039f2:	2500      	movs	r5, #0
 80039f4:	42a5      	cmp	r5, r4
 80039f6:	d109      	bne.n	8003a0c <__libc_init_array+0x24>
 80039f8:	4e0b      	ldr	r6, [pc, #44]	; (8003a28 <__libc_init_array+0x40>)
 80039fa:	4c0c      	ldr	r4, [pc, #48]	; (8003a2c <__libc_init_array+0x44>)
 80039fc:	f002 f8c6 	bl	8005b8c <_init>
 8003a00:	1ba4      	subs	r4, r4, r6
 8003a02:	10a4      	asrs	r4, r4, #2
 8003a04:	2500      	movs	r5, #0
 8003a06:	42a5      	cmp	r5, r4
 8003a08:	d105      	bne.n	8003a16 <__libc_init_array+0x2e>
 8003a0a:	bd70      	pop	{r4, r5, r6, pc}
 8003a0c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a10:	4798      	blx	r3
 8003a12:	3501      	adds	r5, #1
 8003a14:	e7ee      	b.n	80039f4 <__libc_init_array+0xc>
 8003a16:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a1a:	4798      	blx	r3
 8003a1c:	3501      	adds	r5, #1
 8003a1e:	e7f2      	b.n	8003a06 <__libc_init_array+0x1e>
 8003a20:	08005eb8 	.word	0x08005eb8
 8003a24:	08005eb8 	.word	0x08005eb8
 8003a28:	08005eb8 	.word	0x08005eb8
 8003a2c:	08005ebc 	.word	0x08005ebc

08003a30 <malloc>:
 8003a30:	4b02      	ldr	r3, [pc, #8]	; (8003a3c <malloc+0xc>)
 8003a32:	4601      	mov	r1, r0
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	f000 b861 	b.w	8003afc <_malloc_r>
 8003a3a:	bf00      	nop
 8003a3c:	200000ac 	.word	0x200000ac

08003a40 <free>:
 8003a40:	4b02      	ldr	r3, [pc, #8]	; (8003a4c <free+0xc>)
 8003a42:	4601      	mov	r1, r0
 8003a44:	6818      	ldr	r0, [r3, #0]
 8003a46:	f000 b80b 	b.w	8003a60 <_free_r>
 8003a4a:	bf00      	nop
 8003a4c:	200000ac 	.word	0x200000ac

08003a50 <memset>:
 8003a50:	4402      	add	r2, r0
 8003a52:	4603      	mov	r3, r0
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d100      	bne.n	8003a5a <memset+0xa>
 8003a58:	4770      	bx	lr
 8003a5a:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5e:	e7f9      	b.n	8003a54 <memset+0x4>

08003a60 <_free_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4605      	mov	r5, r0
 8003a64:	2900      	cmp	r1, #0
 8003a66:	d045      	beq.n	8003af4 <_free_r+0x94>
 8003a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a6c:	1f0c      	subs	r4, r1, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfb8      	it	lt
 8003a72:	18e4      	addlt	r4, r4, r3
 8003a74:	f000 f8ac 	bl	8003bd0 <__malloc_lock>
 8003a78:	4a1f      	ldr	r2, [pc, #124]	; (8003af8 <_free_r+0x98>)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	b933      	cbnz	r3, 8003a8e <_free_r+0x2e>
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	6014      	str	r4, [r2, #0]
 8003a84:	4628      	mov	r0, r5
 8003a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a8a:	f000 b8a2 	b.w	8003bd2 <__malloc_unlock>
 8003a8e:	42a3      	cmp	r3, r4
 8003a90:	d90c      	bls.n	8003aac <_free_r+0x4c>
 8003a92:	6821      	ldr	r1, [r4, #0]
 8003a94:	1862      	adds	r2, r4, r1
 8003a96:	4293      	cmp	r3, r2
 8003a98:	bf04      	itt	eq
 8003a9a:	681a      	ldreq	r2, [r3, #0]
 8003a9c:	685b      	ldreq	r3, [r3, #4]
 8003a9e:	6063      	str	r3, [r4, #4]
 8003aa0:	bf04      	itt	eq
 8003aa2:	1852      	addeq	r2, r2, r1
 8003aa4:	6022      	streq	r2, [r4, #0]
 8003aa6:	6004      	str	r4, [r0, #0]
 8003aa8:	e7ec      	b.n	8003a84 <_free_r+0x24>
 8003aaa:	4613      	mov	r3, r2
 8003aac:	685a      	ldr	r2, [r3, #4]
 8003aae:	b10a      	cbz	r2, 8003ab4 <_free_r+0x54>
 8003ab0:	42a2      	cmp	r2, r4
 8003ab2:	d9fa      	bls.n	8003aaa <_free_r+0x4a>
 8003ab4:	6819      	ldr	r1, [r3, #0]
 8003ab6:	1858      	adds	r0, r3, r1
 8003ab8:	42a0      	cmp	r0, r4
 8003aba:	d10b      	bne.n	8003ad4 <_free_r+0x74>
 8003abc:	6820      	ldr	r0, [r4, #0]
 8003abe:	4401      	add	r1, r0
 8003ac0:	1858      	adds	r0, r3, r1
 8003ac2:	4282      	cmp	r2, r0
 8003ac4:	6019      	str	r1, [r3, #0]
 8003ac6:	d1dd      	bne.n	8003a84 <_free_r+0x24>
 8003ac8:	6810      	ldr	r0, [r2, #0]
 8003aca:	6852      	ldr	r2, [r2, #4]
 8003acc:	605a      	str	r2, [r3, #4]
 8003ace:	4401      	add	r1, r0
 8003ad0:	6019      	str	r1, [r3, #0]
 8003ad2:	e7d7      	b.n	8003a84 <_free_r+0x24>
 8003ad4:	d902      	bls.n	8003adc <_free_r+0x7c>
 8003ad6:	230c      	movs	r3, #12
 8003ad8:	602b      	str	r3, [r5, #0]
 8003ada:	e7d3      	b.n	8003a84 <_free_r+0x24>
 8003adc:	6820      	ldr	r0, [r4, #0]
 8003ade:	1821      	adds	r1, r4, r0
 8003ae0:	428a      	cmp	r2, r1
 8003ae2:	bf04      	itt	eq
 8003ae4:	6811      	ldreq	r1, [r2, #0]
 8003ae6:	6852      	ldreq	r2, [r2, #4]
 8003ae8:	6062      	str	r2, [r4, #4]
 8003aea:	bf04      	itt	eq
 8003aec:	1809      	addeq	r1, r1, r0
 8003aee:	6021      	streq	r1, [r4, #0]
 8003af0:	605c      	str	r4, [r3, #4]
 8003af2:	e7c7      	b.n	8003a84 <_free_r+0x24>
 8003af4:	bd38      	pop	{r3, r4, r5, pc}
 8003af6:	bf00      	nop
 8003af8:	2000018c 	.word	0x2000018c

08003afc <_malloc_r>:
 8003afc:	b570      	push	{r4, r5, r6, lr}
 8003afe:	1ccd      	adds	r5, r1, #3
 8003b00:	f025 0503 	bic.w	r5, r5, #3
 8003b04:	3508      	adds	r5, #8
 8003b06:	2d0c      	cmp	r5, #12
 8003b08:	bf38      	it	cc
 8003b0a:	250c      	movcc	r5, #12
 8003b0c:	2d00      	cmp	r5, #0
 8003b0e:	4606      	mov	r6, r0
 8003b10:	db01      	blt.n	8003b16 <_malloc_r+0x1a>
 8003b12:	42a9      	cmp	r1, r5
 8003b14:	d903      	bls.n	8003b1e <_malloc_r+0x22>
 8003b16:	230c      	movs	r3, #12
 8003b18:	6033      	str	r3, [r6, #0]
 8003b1a:	2000      	movs	r0, #0
 8003b1c:	bd70      	pop	{r4, r5, r6, pc}
 8003b1e:	f000 f857 	bl	8003bd0 <__malloc_lock>
 8003b22:	4a21      	ldr	r2, [pc, #132]	; (8003ba8 <_malloc_r+0xac>)
 8003b24:	6814      	ldr	r4, [r2, #0]
 8003b26:	4621      	mov	r1, r4
 8003b28:	b991      	cbnz	r1, 8003b50 <_malloc_r+0x54>
 8003b2a:	4c20      	ldr	r4, [pc, #128]	; (8003bac <_malloc_r+0xb0>)
 8003b2c:	6823      	ldr	r3, [r4, #0]
 8003b2e:	b91b      	cbnz	r3, 8003b38 <_malloc_r+0x3c>
 8003b30:	4630      	mov	r0, r6
 8003b32:	f000 f83d 	bl	8003bb0 <_sbrk_r>
 8003b36:	6020      	str	r0, [r4, #0]
 8003b38:	4629      	mov	r1, r5
 8003b3a:	4630      	mov	r0, r6
 8003b3c:	f000 f838 	bl	8003bb0 <_sbrk_r>
 8003b40:	1c43      	adds	r3, r0, #1
 8003b42:	d124      	bne.n	8003b8e <_malloc_r+0x92>
 8003b44:	230c      	movs	r3, #12
 8003b46:	6033      	str	r3, [r6, #0]
 8003b48:	4630      	mov	r0, r6
 8003b4a:	f000 f842 	bl	8003bd2 <__malloc_unlock>
 8003b4e:	e7e4      	b.n	8003b1a <_malloc_r+0x1e>
 8003b50:	680b      	ldr	r3, [r1, #0]
 8003b52:	1b5b      	subs	r3, r3, r5
 8003b54:	d418      	bmi.n	8003b88 <_malloc_r+0x8c>
 8003b56:	2b0b      	cmp	r3, #11
 8003b58:	d90f      	bls.n	8003b7a <_malloc_r+0x7e>
 8003b5a:	600b      	str	r3, [r1, #0]
 8003b5c:	50cd      	str	r5, [r1, r3]
 8003b5e:	18cc      	adds	r4, r1, r3
 8003b60:	4630      	mov	r0, r6
 8003b62:	f000 f836 	bl	8003bd2 <__malloc_unlock>
 8003b66:	f104 000b 	add.w	r0, r4, #11
 8003b6a:	1d23      	adds	r3, r4, #4
 8003b6c:	f020 0007 	bic.w	r0, r0, #7
 8003b70:	1ac3      	subs	r3, r0, r3
 8003b72:	d0d3      	beq.n	8003b1c <_malloc_r+0x20>
 8003b74:	425a      	negs	r2, r3
 8003b76:	50e2      	str	r2, [r4, r3]
 8003b78:	e7d0      	b.n	8003b1c <_malloc_r+0x20>
 8003b7a:	428c      	cmp	r4, r1
 8003b7c:	684b      	ldr	r3, [r1, #4]
 8003b7e:	bf16      	itet	ne
 8003b80:	6063      	strne	r3, [r4, #4]
 8003b82:	6013      	streq	r3, [r2, #0]
 8003b84:	460c      	movne	r4, r1
 8003b86:	e7eb      	b.n	8003b60 <_malloc_r+0x64>
 8003b88:	460c      	mov	r4, r1
 8003b8a:	6849      	ldr	r1, [r1, #4]
 8003b8c:	e7cc      	b.n	8003b28 <_malloc_r+0x2c>
 8003b8e:	1cc4      	adds	r4, r0, #3
 8003b90:	f024 0403 	bic.w	r4, r4, #3
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d005      	beq.n	8003ba4 <_malloc_r+0xa8>
 8003b98:	1a21      	subs	r1, r4, r0
 8003b9a:	4630      	mov	r0, r6
 8003b9c:	f000 f808 	bl	8003bb0 <_sbrk_r>
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d0cf      	beq.n	8003b44 <_malloc_r+0x48>
 8003ba4:	6025      	str	r5, [r4, #0]
 8003ba6:	e7db      	b.n	8003b60 <_malloc_r+0x64>
 8003ba8:	2000018c 	.word	0x2000018c
 8003bac:	20000190 	.word	0x20000190

08003bb0 <_sbrk_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4c06      	ldr	r4, [pc, #24]	; (8003bcc <_sbrk_r+0x1c>)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	f7fd fe62 	bl	8001884 <_sbrk>
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d102      	bne.n	8003bca <_sbrk_r+0x1a>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	b103      	cbz	r3, 8003bca <_sbrk_r+0x1a>
 8003bc8:	602b      	str	r3, [r5, #0]
 8003bca:	bd38      	pop	{r3, r4, r5, pc}
 8003bcc:	20000878 	.word	0x20000878

08003bd0 <__malloc_lock>:
 8003bd0:	4770      	bx	lr

08003bd2 <__malloc_unlock>:
 8003bd2:	4770      	bx	lr
 8003bd4:	0000      	movs	r0, r0
	...

08003bd8 <sin>:
 8003bd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003bda:	ec51 0b10 	vmov	r0, r1, d0
 8003bde:	4a20      	ldr	r2, [pc, #128]	; (8003c60 <sin+0x88>)
 8003be0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003be4:	4293      	cmp	r3, r2
 8003be6:	dc07      	bgt.n	8003bf8 <sin+0x20>
 8003be8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003c58 <sin+0x80>
 8003bec:	2000      	movs	r0, #0
 8003bee:	f001 fd67 	bl	80056c0 <__kernel_sin>
 8003bf2:	ec51 0b10 	vmov	r0, r1, d0
 8003bf6:	e007      	b.n	8003c08 <sin+0x30>
 8003bf8:	4a1a      	ldr	r2, [pc, #104]	; (8003c64 <sin+0x8c>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	dd09      	ble.n	8003c12 <sin+0x3a>
 8003bfe:	ee10 2a10 	vmov	r2, s0
 8003c02:	460b      	mov	r3, r1
 8003c04:	f7fc fae4 	bl	80001d0 <__aeabi_dsub>
 8003c08:	ec41 0b10 	vmov	d0, r0, r1
 8003c0c:	b005      	add	sp, #20
 8003c0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8003c12:	4668      	mov	r0, sp
 8003c14:	f000 fea8 	bl	8004968 <__ieee754_rem_pio2>
 8003c18:	f000 0003 	and.w	r0, r0, #3
 8003c1c:	2801      	cmp	r0, #1
 8003c1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003c22:	ed9d 0b00 	vldr	d0, [sp]
 8003c26:	d004      	beq.n	8003c32 <sin+0x5a>
 8003c28:	2802      	cmp	r0, #2
 8003c2a:	d005      	beq.n	8003c38 <sin+0x60>
 8003c2c:	b970      	cbnz	r0, 8003c4c <sin+0x74>
 8003c2e:	2001      	movs	r0, #1
 8003c30:	e7dd      	b.n	8003bee <sin+0x16>
 8003c32:	f001 f93d 	bl	8004eb0 <__kernel_cos>
 8003c36:	e7dc      	b.n	8003bf2 <sin+0x1a>
 8003c38:	2001      	movs	r0, #1
 8003c3a:	f001 fd41 	bl	80056c0 <__kernel_sin>
 8003c3e:	ec53 2b10 	vmov	r2, r3, d0
 8003c42:	ee10 0a10 	vmov	r0, s0
 8003c46:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003c4a:	e7dd      	b.n	8003c08 <sin+0x30>
 8003c4c:	f001 f930 	bl	8004eb0 <__kernel_cos>
 8003c50:	e7f5      	b.n	8003c3e <sin+0x66>
 8003c52:	bf00      	nop
 8003c54:	f3af 8000 	nop.w
	...
 8003c60:	3fe921fb 	.word	0x3fe921fb
 8003c64:	7fefffff 	.word	0x7fefffff

08003c68 <pow>:
 8003c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c6c:	ed2d 8b04 	vpush	{d8-d9}
 8003c70:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8003f44 <pow+0x2dc>
 8003c74:	b08d      	sub	sp, #52	; 0x34
 8003c76:	ec57 6b10 	vmov	r6, r7, d0
 8003c7a:	ec55 4b11 	vmov	r4, r5, d1
 8003c7e:	f000 f963 	bl	8003f48 <__ieee754_pow>
 8003c82:	f999 3000 	ldrsb.w	r3, [r9]
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	eeb0 8a40 	vmov.f32	s16, s0
 8003c8e:	eef0 8a60 	vmov.f32	s17, s1
 8003c92:	46c8      	mov	r8, r9
 8003c94:	d05f      	beq.n	8003d56 <pow+0xee>
 8003c96:	4622      	mov	r2, r4
 8003c98:	462b      	mov	r3, r5
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	4629      	mov	r1, r5
 8003c9e:	f7fc fee9 	bl	8000a74 <__aeabi_dcmpun>
 8003ca2:	4683      	mov	fp, r0
 8003ca4:	2800      	cmp	r0, #0
 8003ca6:	d156      	bne.n	8003d56 <pow+0xee>
 8003ca8:	4632      	mov	r2, r6
 8003caa:	463b      	mov	r3, r7
 8003cac:	4630      	mov	r0, r6
 8003cae:	4639      	mov	r1, r7
 8003cb0:	f7fc fee0 	bl	8000a74 <__aeabi_dcmpun>
 8003cb4:	9001      	str	r0, [sp, #4]
 8003cb6:	b1e8      	cbz	r0, 8003cf4 <pow+0x8c>
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2300      	movs	r3, #0
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc fea6 	bl	8000a10 <__aeabi_dcmpeq>
 8003cc4:	2800      	cmp	r0, #0
 8003cc6:	d046      	beq.n	8003d56 <pow+0xee>
 8003cc8:	2301      	movs	r3, #1
 8003cca:	9302      	str	r3, [sp, #8]
 8003ccc:	4b96      	ldr	r3, [pc, #600]	; (8003f28 <pow+0x2c0>)
 8003cce:	9303      	str	r3, [sp, #12]
 8003cd0:	4b96      	ldr	r3, [pc, #600]	; (8003f2c <pow+0x2c4>)
 8003cd2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003cdc:	9b00      	ldr	r3, [sp, #0]
 8003cde:	2b02      	cmp	r3, #2
 8003ce0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003ce4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003ce8:	d033      	beq.n	8003d52 <pow+0xea>
 8003cea:	a802      	add	r0, sp, #8
 8003cec:	f001 fe38 	bl	8005960 <matherr>
 8003cf0:	bb48      	cbnz	r0, 8003d46 <pow+0xde>
 8003cf2:	e05d      	b.n	8003db0 <pow+0x148>
 8003cf4:	f04f 0a00 	mov.w	sl, #0
 8003cf8:	f04f 0b00 	mov.w	fp, #0
 8003cfc:	4652      	mov	r2, sl
 8003cfe:	465b      	mov	r3, fp
 8003d00:	4630      	mov	r0, r6
 8003d02:	4639      	mov	r1, r7
 8003d04:	f7fc fe84 	bl	8000a10 <__aeabi_dcmpeq>
 8003d08:	ec4b ab19 	vmov	d9, sl, fp
 8003d0c:	2800      	cmp	r0, #0
 8003d0e:	d054      	beq.n	8003dba <pow+0x152>
 8003d10:	4652      	mov	r2, sl
 8003d12:	465b      	mov	r3, fp
 8003d14:	4620      	mov	r0, r4
 8003d16:	4629      	mov	r1, r5
 8003d18:	f7fc fe7a 	bl	8000a10 <__aeabi_dcmpeq>
 8003d1c:	4680      	mov	r8, r0
 8003d1e:	b318      	cbz	r0, 8003d68 <pow+0x100>
 8003d20:	2301      	movs	r3, #1
 8003d22:	9302      	str	r3, [sp, #8]
 8003d24:	4b80      	ldr	r3, [pc, #512]	; (8003f28 <pow+0x2c0>)
 8003d26:	9303      	str	r3, [sp, #12]
 8003d28:	9b01      	ldr	r3, [sp, #4]
 8003d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8003d2c:	9b00      	ldr	r3, [sp, #0]
 8003d2e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003d32:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003d36:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0d5      	beq.n	8003cea <pow+0x82>
 8003d3e:	4b7b      	ldr	r3, [pc, #492]	; (8003f2c <pow+0x2c4>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003d46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d48:	b11b      	cbz	r3, 8003d52 <pow+0xea>
 8003d4a:	f7ff fe47 	bl	80039dc <__errno>
 8003d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003d50:	6003      	str	r3, [r0, #0]
 8003d52:	ed9d 8b08 	vldr	d8, [sp, #32]
 8003d56:	eeb0 0a48 	vmov.f32	s0, s16
 8003d5a:	eef0 0a68 	vmov.f32	s1, s17
 8003d5e:	b00d      	add	sp, #52	; 0x34
 8003d60:	ecbd 8b04 	vpop	{d8-d9}
 8003d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003d68:	ec45 4b10 	vmov	d0, r4, r5
 8003d6c:	f001 fd6b 	bl	8005846 <finite>
 8003d70:	2800      	cmp	r0, #0
 8003d72:	d0f0      	beq.n	8003d56 <pow+0xee>
 8003d74:	4652      	mov	r2, sl
 8003d76:	465b      	mov	r3, fp
 8003d78:	4620      	mov	r0, r4
 8003d7a:	4629      	mov	r1, r5
 8003d7c:	f7fc fe52 	bl	8000a24 <__aeabi_dcmplt>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d0e8      	beq.n	8003d56 <pow+0xee>
 8003d84:	2301      	movs	r3, #1
 8003d86:	9302      	str	r3, [sp, #8]
 8003d88:	4b67      	ldr	r3, [pc, #412]	; (8003f28 <pow+0x2c0>)
 8003d8a:	9303      	str	r3, [sp, #12]
 8003d8c:	f999 3000 	ldrsb.w	r3, [r9]
 8003d90:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8003d94:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003d98:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003d9c:	b913      	cbnz	r3, 8003da4 <pow+0x13c>
 8003d9e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8003da2:	e7a2      	b.n	8003cea <pow+0x82>
 8003da4:	4962      	ldr	r1, [pc, #392]	; (8003f30 <pow+0x2c8>)
 8003da6:	2000      	movs	r0, #0
 8003da8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d19c      	bne.n	8003cea <pow+0x82>
 8003db0:	f7ff fe14 	bl	80039dc <__errno>
 8003db4:	2321      	movs	r3, #33	; 0x21
 8003db6:	6003      	str	r3, [r0, #0]
 8003db8:	e7c5      	b.n	8003d46 <pow+0xde>
 8003dba:	eeb0 0a48 	vmov.f32	s0, s16
 8003dbe:	eef0 0a68 	vmov.f32	s1, s17
 8003dc2:	f001 fd40 	bl	8005846 <finite>
 8003dc6:	9000      	str	r0, [sp, #0]
 8003dc8:	2800      	cmp	r0, #0
 8003dca:	f040 8081 	bne.w	8003ed0 <pow+0x268>
 8003dce:	ec47 6b10 	vmov	d0, r6, r7
 8003dd2:	f001 fd38 	bl	8005846 <finite>
 8003dd6:	2800      	cmp	r0, #0
 8003dd8:	d07a      	beq.n	8003ed0 <pow+0x268>
 8003dda:	ec45 4b10 	vmov	d0, r4, r5
 8003dde:	f001 fd32 	bl	8005846 <finite>
 8003de2:	2800      	cmp	r0, #0
 8003de4:	d074      	beq.n	8003ed0 <pow+0x268>
 8003de6:	ec53 2b18 	vmov	r2, r3, d8
 8003dea:	ee18 0a10 	vmov	r0, s16
 8003dee:	4619      	mov	r1, r3
 8003df0:	f7fc fe40 	bl	8000a74 <__aeabi_dcmpun>
 8003df4:	f999 9000 	ldrsb.w	r9, [r9]
 8003df8:	4b4b      	ldr	r3, [pc, #300]	; (8003f28 <pow+0x2c0>)
 8003dfa:	b1b0      	cbz	r0, 8003e2a <pow+0x1c2>
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e02:	9b00      	ldr	r3, [sp, #0]
 8003e04:	930a      	str	r3, [sp, #40]	; 0x28
 8003e06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e0a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003e0e:	f1b9 0f00 	cmp.w	r9, #0
 8003e12:	d0c4      	beq.n	8003d9e <pow+0x136>
 8003e14:	4652      	mov	r2, sl
 8003e16:	465b      	mov	r3, fp
 8003e18:	4650      	mov	r0, sl
 8003e1a:	4659      	mov	r1, fp
 8003e1c:	f7fc fcba 	bl	8000794 <__aeabi_ddiv>
 8003e20:	f1b9 0f02 	cmp.w	r9, #2
 8003e24:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8003e28:	e7c1      	b.n	8003dae <pow+0x146>
 8003e2a:	2203      	movs	r2, #3
 8003e2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003e30:	900a      	str	r0, [sp, #40]	; 0x28
 8003e32:	4629      	mov	r1, r5
 8003e34:	4620      	mov	r0, r4
 8003e36:	2200      	movs	r2, #0
 8003e38:	4b3e      	ldr	r3, [pc, #248]	; (8003f34 <pow+0x2cc>)
 8003e3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003e3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003e42:	f7fc fb7d 	bl	8000540 <__aeabi_dmul>
 8003e46:	4604      	mov	r4, r0
 8003e48:	460d      	mov	r5, r1
 8003e4a:	f1b9 0f00 	cmp.w	r9, #0
 8003e4e:	d124      	bne.n	8003e9a <pow+0x232>
 8003e50:	4b39      	ldr	r3, [pc, #228]	; (8003f38 <pow+0x2d0>)
 8003e52:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003e56:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e5a:	4630      	mov	r0, r6
 8003e5c:	4652      	mov	r2, sl
 8003e5e:	465b      	mov	r3, fp
 8003e60:	4639      	mov	r1, r7
 8003e62:	f7fc fddf 	bl	8000a24 <__aeabi_dcmplt>
 8003e66:	2800      	cmp	r0, #0
 8003e68:	d056      	beq.n	8003f18 <pow+0x2b0>
 8003e6a:	ec45 4b10 	vmov	d0, r4, r5
 8003e6e:	f001 fd83 	bl	8005978 <rint>
 8003e72:	4622      	mov	r2, r4
 8003e74:	462b      	mov	r3, r5
 8003e76:	ec51 0b10 	vmov	r0, r1, d0
 8003e7a:	f7fc fdc9 	bl	8000a10 <__aeabi_dcmpeq>
 8003e7e:	b920      	cbnz	r0, 8003e8a <pow+0x222>
 8003e80:	4b2e      	ldr	r3, [pc, #184]	; (8003f3c <pow+0x2d4>)
 8003e82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8003e86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e8a:	f998 3000 	ldrsb.w	r3, [r8]
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d142      	bne.n	8003f18 <pow+0x2b0>
 8003e92:	f7ff fda3 	bl	80039dc <__errno>
 8003e96:	2322      	movs	r3, #34	; 0x22
 8003e98:	e78d      	b.n	8003db6 <pow+0x14e>
 8003e9a:	4b29      	ldr	r3, [pc, #164]	; (8003f40 <pow+0x2d8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003ea2:	4630      	mov	r0, r6
 8003ea4:	4652      	mov	r2, sl
 8003ea6:	465b      	mov	r3, fp
 8003ea8:	4639      	mov	r1, r7
 8003eaa:	f7fc fdbb 	bl	8000a24 <__aeabi_dcmplt>
 8003eae:	2800      	cmp	r0, #0
 8003eb0:	d0eb      	beq.n	8003e8a <pow+0x222>
 8003eb2:	ec45 4b10 	vmov	d0, r4, r5
 8003eb6:	f001 fd5f 	bl	8005978 <rint>
 8003eba:	4622      	mov	r2, r4
 8003ebc:	462b      	mov	r3, r5
 8003ebe:	ec51 0b10 	vmov	r0, r1, d0
 8003ec2:	f7fc fda5 	bl	8000a10 <__aeabi_dcmpeq>
 8003ec6:	2800      	cmp	r0, #0
 8003ec8:	d1df      	bne.n	8003e8a <pow+0x222>
 8003eca:	2200      	movs	r2, #0
 8003ecc:	4b18      	ldr	r3, [pc, #96]	; (8003f30 <pow+0x2c8>)
 8003ece:	e7da      	b.n	8003e86 <pow+0x21e>
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	ec51 0b18 	vmov	r0, r1, d8
 8003ed8:	f7fc fd9a 	bl	8000a10 <__aeabi_dcmpeq>
 8003edc:	2800      	cmp	r0, #0
 8003ede:	f43f af3a 	beq.w	8003d56 <pow+0xee>
 8003ee2:	ec47 6b10 	vmov	d0, r6, r7
 8003ee6:	f001 fcae 	bl	8005846 <finite>
 8003eea:	2800      	cmp	r0, #0
 8003eec:	f43f af33 	beq.w	8003d56 <pow+0xee>
 8003ef0:	ec45 4b10 	vmov	d0, r4, r5
 8003ef4:	f001 fca7 	bl	8005846 <finite>
 8003ef8:	2800      	cmp	r0, #0
 8003efa:	f43f af2c 	beq.w	8003d56 <pow+0xee>
 8003efe:	2304      	movs	r3, #4
 8003f00:	9302      	str	r3, [sp, #8]
 8003f02:	4b09      	ldr	r3, [pc, #36]	; (8003f28 <pow+0x2c0>)
 8003f04:	9303      	str	r3, [sp, #12]
 8003f06:	2300      	movs	r3, #0
 8003f08:	930a      	str	r3, [sp, #40]	; 0x28
 8003f0a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8003f0e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8003f12:	ed8d 9b08 	vstr	d9, [sp, #32]
 8003f16:	e7b8      	b.n	8003e8a <pow+0x222>
 8003f18:	a802      	add	r0, sp, #8
 8003f1a:	f001 fd21 	bl	8005960 <matherr>
 8003f1e:	2800      	cmp	r0, #0
 8003f20:	f47f af11 	bne.w	8003d46 <pow+0xde>
 8003f24:	e7b5      	b.n	8003e92 <pow+0x22a>
 8003f26:	bf00      	nop
 8003f28:	08005c98 	.word	0x08005c98
 8003f2c:	3ff00000 	.word	0x3ff00000
 8003f30:	fff00000 	.word	0xfff00000
 8003f34:	3fe00000 	.word	0x3fe00000
 8003f38:	47efffff 	.word	0x47efffff
 8003f3c:	c7efffff 	.word	0xc7efffff
 8003f40:	7ff00000 	.word	0x7ff00000
 8003f44:	20000110 	.word	0x20000110

08003f48 <__ieee754_pow>:
 8003f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f4c:	b091      	sub	sp, #68	; 0x44
 8003f4e:	ed8d 1b00 	vstr	d1, [sp]
 8003f52:	e9dd 2900 	ldrd	r2, r9, [sp]
 8003f56:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8003f5a:	ea58 0302 	orrs.w	r3, r8, r2
 8003f5e:	ec57 6b10 	vmov	r6, r7, d0
 8003f62:	f000 84be 	beq.w	80048e2 <__ieee754_pow+0x99a>
 8003f66:	4b7a      	ldr	r3, [pc, #488]	; (8004150 <__ieee754_pow+0x208>)
 8003f68:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8003f6c:	429c      	cmp	r4, r3
 8003f6e:	463d      	mov	r5, r7
 8003f70:	ee10 aa10 	vmov	sl, s0
 8003f74:	dc09      	bgt.n	8003f8a <__ieee754_pow+0x42>
 8003f76:	d103      	bne.n	8003f80 <__ieee754_pow+0x38>
 8003f78:	b93e      	cbnz	r6, 8003f8a <__ieee754_pow+0x42>
 8003f7a:	45a0      	cmp	r8, r4
 8003f7c:	dc0d      	bgt.n	8003f9a <__ieee754_pow+0x52>
 8003f7e:	e001      	b.n	8003f84 <__ieee754_pow+0x3c>
 8003f80:	4598      	cmp	r8, r3
 8003f82:	dc02      	bgt.n	8003f8a <__ieee754_pow+0x42>
 8003f84:	4598      	cmp	r8, r3
 8003f86:	d10e      	bne.n	8003fa6 <__ieee754_pow+0x5e>
 8003f88:	b16a      	cbz	r2, 8003fa6 <__ieee754_pow+0x5e>
 8003f8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8003f8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8003f92:	ea54 030a 	orrs.w	r3, r4, sl
 8003f96:	f000 84a4 	beq.w	80048e2 <__ieee754_pow+0x99a>
 8003f9a:	486e      	ldr	r0, [pc, #440]	; (8004154 <__ieee754_pow+0x20c>)
 8003f9c:	b011      	add	sp, #68	; 0x44
 8003f9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fa2:	f001 bce1 	b.w	8005968 <nan>
 8003fa6:	2d00      	cmp	r5, #0
 8003fa8:	da53      	bge.n	8004052 <__ieee754_pow+0x10a>
 8003faa:	4b6b      	ldr	r3, [pc, #428]	; (8004158 <__ieee754_pow+0x210>)
 8003fac:	4598      	cmp	r8, r3
 8003fae:	dc4d      	bgt.n	800404c <__ieee754_pow+0x104>
 8003fb0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8003fb4:	4598      	cmp	r8, r3
 8003fb6:	dd4c      	ble.n	8004052 <__ieee754_pow+0x10a>
 8003fb8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003fbc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8003fc0:	2b14      	cmp	r3, #20
 8003fc2:	dd26      	ble.n	8004012 <__ieee754_pow+0xca>
 8003fc4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8003fc8:	fa22 f103 	lsr.w	r1, r2, r3
 8003fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d13e      	bne.n	8004052 <__ieee754_pow+0x10a>
 8003fd4:	f001 0101 	and.w	r1, r1, #1
 8003fd8:	f1c1 0b02 	rsb	fp, r1, #2
 8003fdc:	2a00      	cmp	r2, #0
 8003fde:	d15b      	bne.n	8004098 <__ieee754_pow+0x150>
 8003fe0:	4b5b      	ldr	r3, [pc, #364]	; (8004150 <__ieee754_pow+0x208>)
 8003fe2:	4598      	cmp	r8, r3
 8003fe4:	d124      	bne.n	8004030 <__ieee754_pow+0xe8>
 8003fe6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8003fea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8003fee:	ea53 030a 	orrs.w	r3, r3, sl
 8003ff2:	f000 8476 	beq.w	80048e2 <__ieee754_pow+0x99a>
 8003ff6:	4b59      	ldr	r3, [pc, #356]	; (800415c <__ieee754_pow+0x214>)
 8003ff8:	429c      	cmp	r4, r3
 8003ffa:	dd2d      	ble.n	8004058 <__ieee754_pow+0x110>
 8003ffc:	f1b9 0f00 	cmp.w	r9, #0
 8004000:	f280 8473 	bge.w	80048ea <__ieee754_pow+0x9a2>
 8004004:	2000      	movs	r0, #0
 8004006:	2100      	movs	r1, #0
 8004008:	ec41 0b10 	vmov	d0, r0, r1
 800400c:	b011      	add	sp, #68	; 0x44
 800400e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004012:	2a00      	cmp	r2, #0
 8004014:	d13e      	bne.n	8004094 <__ieee754_pow+0x14c>
 8004016:	f1c3 0314 	rsb	r3, r3, #20
 800401a:	fa48 f103 	asr.w	r1, r8, r3
 800401e:	fa01 f303 	lsl.w	r3, r1, r3
 8004022:	4543      	cmp	r3, r8
 8004024:	f040 8469 	bne.w	80048fa <__ieee754_pow+0x9b2>
 8004028:	f001 0101 	and.w	r1, r1, #1
 800402c:	f1c1 0b02 	rsb	fp, r1, #2
 8004030:	4b4b      	ldr	r3, [pc, #300]	; (8004160 <__ieee754_pow+0x218>)
 8004032:	4598      	cmp	r8, r3
 8004034:	d118      	bne.n	8004068 <__ieee754_pow+0x120>
 8004036:	f1b9 0f00 	cmp.w	r9, #0
 800403a:	f280 845a 	bge.w	80048f2 <__ieee754_pow+0x9aa>
 800403e:	4948      	ldr	r1, [pc, #288]	; (8004160 <__ieee754_pow+0x218>)
 8004040:	4632      	mov	r2, r6
 8004042:	463b      	mov	r3, r7
 8004044:	2000      	movs	r0, #0
 8004046:	f7fc fba5 	bl	8000794 <__aeabi_ddiv>
 800404a:	e7dd      	b.n	8004008 <__ieee754_pow+0xc0>
 800404c:	f04f 0b02 	mov.w	fp, #2
 8004050:	e7c4      	b.n	8003fdc <__ieee754_pow+0x94>
 8004052:	f04f 0b00 	mov.w	fp, #0
 8004056:	e7c1      	b.n	8003fdc <__ieee754_pow+0x94>
 8004058:	f1b9 0f00 	cmp.w	r9, #0
 800405c:	dad2      	bge.n	8004004 <__ieee754_pow+0xbc>
 800405e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004062:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004066:	e7cf      	b.n	8004008 <__ieee754_pow+0xc0>
 8004068:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800406c:	d106      	bne.n	800407c <__ieee754_pow+0x134>
 800406e:	4632      	mov	r2, r6
 8004070:	463b      	mov	r3, r7
 8004072:	4610      	mov	r0, r2
 8004074:	4619      	mov	r1, r3
 8004076:	f7fc fa63 	bl	8000540 <__aeabi_dmul>
 800407a:	e7c5      	b.n	8004008 <__ieee754_pow+0xc0>
 800407c:	4b39      	ldr	r3, [pc, #228]	; (8004164 <__ieee754_pow+0x21c>)
 800407e:	4599      	cmp	r9, r3
 8004080:	d10a      	bne.n	8004098 <__ieee754_pow+0x150>
 8004082:	2d00      	cmp	r5, #0
 8004084:	db08      	blt.n	8004098 <__ieee754_pow+0x150>
 8004086:	ec47 6b10 	vmov	d0, r6, r7
 800408a:	b011      	add	sp, #68	; 0x44
 800408c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004090:	f000 be5c 	b.w	8004d4c <__ieee754_sqrt>
 8004094:	f04f 0b00 	mov.w	fp, #0
 8004098:	ec47 6b10 	vmov	d0, r6, r7
 800409c:	f001 fbca 	bl	8005834 <fabs>
 80040a0:	ec51 0b10 	vmov	r0, r1, d0
 80040a4:	f1ba 0f00 	cmp.w	sl, #0
 80040a8:	d127      	bne.n	80040fa <__ieee754_pow+0x1b2>
 80040aa:	b124      	cbz	r4, 80040b6 <__ieee754_pow+0x16e>
 80040ac:	4b2c      	ldr	r3, [pc, #176]	; (8004160 <__ieee754_pow+0x218>)
 80040ae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d121      	bne.n	80040fa <__ieee754_pow+0x1b2>
 80040b6:	f1b9 0f00 	cmp.w	r9, #0
 80040ba:	da05      	bge.n	80040c8 <__ieee754_pow+0x180>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	2000      	movs	r0, #0
 80040c2:	4927      	ldr	r1, [pc, #156]	; (8004160 <__ieee754_pow+0x218>)
 80040c4:	f7fc fb66 	bl	8000794 <__aeabi_ddiv>
 80040c8:	2d00      	cmp	r5, #0
 80040ca:	da9d      	bge.n	8004008 <__ieee754_pow+0xc0>
 80040cc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80040d0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80040d4:	ea54 030b 	orrs.w	r3, r4, fp
 80040d8:	d108      	bne.n	80040ec <__ieee754_pow+0x1a4>
 80040da:	4602      	mov	r2, r0
 80040dc:	460b      	mov	r3, r1
 80040de:	4610      	mov	r0, r2
 80040e0:	4619      	mov	r1, r3
 80040e2:	f7fc f875 	bl	80001d0 <__aeabi_dsub>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	e7ac      	b.n	8004046 <__ieee754_pow+0xfe>
 80040ec:	f1bb 0f01 	cmp.w	fp, #1
 80040f0:	d18a      	bne.n	8004008 <__ieee754_pow+0xc0>
 80040f2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040f6:	4619      	mov	r1, r3
 80040f8:	e786      	b.n	8004008 <__ieee754_pow+0xc0>
 80040fa:	0fed      	lsrs	r5, r5, #31
 80040fc:	1e6b      	subs	r3, r5, #1
 80040fe:	930d      	str	r3, [sp, #52]	; 0x34
 8004100:	ea5b 0303 	orrs.w	r3, fp, r3
 8004104:	d102      	bne.n	800410c <__ieee754_pow+0x1c4>
 8004106:	4632      	mov	r2, r6
 8004108:	463b      	mov	r3, r7
 800410a:	e7e8      	b.n	80040de <__ieee754_pow+0x196>
 800410c:	4b16      	ldr	r3, [pc, #88]	; (8004168 <__ieee754_pow+0x220>)
 800410e:	4598      	cmp	r8, r3
 8004110:	f340 80fe 	ble.w	8004310 <__ieee754_pow+0x3c8>
 8004114:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004118:	4598      	cmp	r8, r3
 800411a:	dd0a      	ble.n	8004132 <__ieee754_pow+0x1ea>
 800411c:	4b0f      	ldr	r3, [pc, #60]	; (800415c <__ieee754_pow+0x214>)
 800411e:	429c      	cmp	r4, r3
 8004120:	dc0d      	bgt.n	800413e <__ieee754_pow+0x1f6>
 8004122:	f1b9 0f00 	cmp.w	r9, #0
 8004126:	f6bf af6d 	bge.w	8004004 <__ieee754_pow+0xbc>
 800412a:	a307      	add	r3, pc, #28	; (adr r3, 8004148 <__ieee754_pow+0x200>)
 800412c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004130:	e79f      	b.n	8004072 <__ieee754_pow+0x12a>
 8004132:	4b0e      	ldr	r3, [pc, #56]	; (800416c <__ieee754_pow+0x224>)
 8004134:	429c      	cmp	r4, r3
 8004136:	ddf4      	ble.n	8004122 <__ieee754_pow+0x1da>
 8004138:	4b09      	ldr	r3, [pc, #36]	; (8004160 <__ieee754_pow+0x218>)
 800413a:	429c      	cmp	r4, r3
 800413c:	dd18      	ble.n	8004170 <__ieee754_pow+0x228>
 800413e:	f1b9 0f00 	cmp.w	r9, #0
 8004142:	dcf2      	bgt.n	800412a <__ieee754_pow+0x1e2>
 8004144:	e75e      	b.n	8004004 <__ieee754_pow+0xbc>
 8004146:	bf00      	nop
 8004148:	8800759c 	.word	0x8800759c
 800414c:	7e37e43c 	.word	0x7e37e43c
 8004150:	7ff00000 	.word	0x7ff00000
 8004154:	08005c9b 	.word	0x08005c9b
 8004158:	433fffff 	.word	0x433fffff
 800415c:	3fefffff 	.word	0x3fefffff
 8004160:	3ff00000 	.word	0x3ff00000
 8004164:	3fe00000 	.word	0x3fe00000
 8004168:	41e00000 	.word	0x41e00000
 800416c:	3feffffe 	.word	0x3feffffe
 8004170:	2200      	movs	r2, #0
 8004172:	4b63      	ldr	r3, [pc, #396]	; (8004300 <__ieee754_pow+0x3b8>)
 8004174:	f7fc f82c 	bl	80001d0 <__aeabi_dsub>
 8004178:	a355      	add	r3, pc, #340	; (adr r3, 80042d0 <__ieee754_pow+0x388>)
 800417a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417e:	4604      	mov	r4, r0
 8004180:	460d      	mov	r5, r1
 8004182:	f7fc f9dd 	bl	8000540 <__aeabi_dmul>
 8004186:	a354      	add	r3, pc, #336	; (adr r3, 80042d8 <__ieee754_pow+0x390>)
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	4606      	mov	r6, r0
 800418e:	460f      	mov	r7, r1
 8004190:	4620      	mov	r0, r4
 8004192:	4629      	mov	r1, r5
 8004194:	f7fc f9d4 	bl	8000540 <__aeabi_dmul>
 8004198:	2200      	movs	r2, #0
 800419a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800419e:	4b59      	ldr	r3, [pc, #356]	; (8004304 <__ieee754_pow+0x3bc>)
 80041a0:	4620      	mov	r0, r4
 80041a2:	4629      	mov	r1, r5
 80041a4:	f7fc f9cc 	bl	8000540 <__aeabi_dmul>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	a14c      	add	r1, pc, #304	; (adr r1, 80042e0 <__ieee754_pow+0x398>)
 80041ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80041b2:	f7fc f80d 	bl	80001d0 <__aeabi_dsub>
 80041b6:	4622      	mov	r2, r4
 80041b8:	462b      	mov	r3, r5
 80041ba:	f7fc f9c1 	bl	8000540 <__aeabi_dmul>
 80041be:	4602      	mov	r2, r0
 80041c0:	460b      	mov	r3, r1
 80041c2:	2000      	movs	r0, #0
 80041c4:	4950      	ldr	r1, [pc, #320]	; (8004308 <__ieee754_pow+0x3c0>)
 80041c6:	f7fc f803 	bl	80001d0 <__aeabi_dsub>
 80041ca:	4622      	mov	r2, r4
 80041cc:	462b      	mov	r3, r5
 80041ce:	4680      	mov	r8, r0
 80041d0:	4689      	mov	r9, r1
 80041d2:	4620      	mov	r0, r4
 80041d4:	4629      	mov	r1, r5
 80041d6:	f7fc f9b3 	bl	8000540 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4640      	mov	r0, r8
 80041e0:	4649      	mov	r1, r9
 80041e2:	f7fc f9ad 	bl	8000540 <__aeabi_dmul>
 80041e6:	a340      	add	r3, pc, #256	; (adr r3, 80042e8 <__ieee754_pow+0x3a0>)
 80041e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ec:	f7fc f9a8 	bl	8000540 <__aeabi_dmul>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041f8:	f7fb ffea 	bl	80001d0 <__aeabi_dsub>
 80041fc:	4602      	mov	r2, r0
 80041fe:	460b      	mov	r3, r1
 8004200:	4604      	mov	r4, r0
 8004202:	460d      	mov	r5, r1
 8004204:	4630      	mov	r0, r6
 8004206:	4639      	mov	r1, r7
 8004208:	f7fb ffe4 	bl	80001d4 <__adddf3>
 800420c:	2000      	movs	r0, #0
 800420e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004212:	4632      	mov	r2, r6
 8004214:	463b      	mov	r3, r7
 8004216:	f7fb ffdb 	bl	80001d0 <__aeabi_dsub>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	4620      	mov	r0, r4
 8004220:	4629      	mov	r1, r5
 8004222:	f7fb ffd5 	bl	80001d0 <__aeabi_dsub>
 8004226:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004228:	f10b 33ff 	add.w	r3, fp, #4294967295
 800422c:	4313      	orrs	r3, r2
 800422e:	4606      	mov	r6, r0
 8004230:	460f      	mov	r7, r1
 8004232:	f040 81eb 	bne.w	800460c <__ieee754_pow+0x6c4>
 8004236:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80042f0 <__ieee754_pow+0x3a8>
 800423a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800423e:	2400      	movs	r4, #0
 8004240:	4622      	mov	r2, r4
 8004242:	462b      	mov	r3, r5
 8004244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004248:	ed8d 7b02 	vstr	d7, [sp, #8]
 800424c:	f7fb ffc0 	bl	80001d0 <__aeabi_dsub>
 8004250:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004254:	f7fc f974 	bl	8000540 <__aeabi_dmul>
 8004258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800425c:	4680      	mov	r8, r0
 800425e:	4689      	mov	r9, r1
 8004260:	4630      	mov	r0, r6
 8004262:	4639      	mov	r1, r7
 8004264:	f7fc f96c 	bl	8000540 <__aeabi_dmul>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4640      	mov	r0, r8
 800426e:	4649      	mov	r1, r9
 8004270:	f7fb ffb0 	bl	80001d4 <__adddf3>
 8004274:	4622      	mov	r2, r4
 8004276:	462b      	mov	r3, r5
 8004278:	4680      	mov	r8, r0
 800427a:	4689      	mov	r9, r1
 800427c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004280:	f7fc f95e 	bl	8000540 <__aeabi_dmul>
 8004284:	460b      	mov	r3, r1
 8004286:	4604      	mov	r4, r0
 8004288:	460d      	mov	r5, r1
 800428a:	4602      	mov	r2, r0
 800428c:	4649      	mov	r1, r9
 800428e:	4640      	mov	r0, r8
 8004290:	e9cd 4500 	strd	r4, r5, [sp]
 8004294:	f7fb ff9e 	bl	80001d4 <__adddf3>
 8004298:	4b1c      	ldr	r3, [pc, #112]	; (800430c <__ieee754_pow+0x3c4>)
 800429a:	4299      	cmp	r1, r3
 800429c:	4606      	mov	r6, r0
 800429e:	460f      	mov	r7, r1
 80042a0:	468b      	mov	fp, r1
 80042a2:	f340 82f7 	ble.w	8004894 <__ieee754_pow+0x94c>
 80042a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80042aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80042ae:	4303      	orrs	r3, r0
 80042b0:	f000 81ea 	beq.w	8004688 <__ieee754_pow+0x740>
 80042b4:	a310      	add	r3, pc, #64	; (adr r3, 80042f8 <__ieee754_pow+0x3b0>)
 80042b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042be:	f7fc f93f 	bl	8000540 <__aeabi_dmul>
 80042c2:	a30d      	add	r3, pc, #52	; (adr r3, 80042f8 <__ieee754_pow+0x3b0>)
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	e6d5      	b.n	8004076 <__ieee754_pow+0x12e>
 80042ca:	bf00      	nop
 80042cc:	f3af 8000 	nop.w
 80042d0:	60000000 	.word	0x60000000
 80042d4:	3ff71547 	.word	0x3ff71547
 80042d8:	f85ddf44 	.word	0xf85ddf44
 80042dc:	3e54ae0b 	.word	0x3e54ae0b
 80042e0:	55555555 	.word	0x55555555
 80042e4:	3fd55555 	.word	0x3fd55555
 80042e8:	652b82fe 	.word	0x652b82fe
 80042ec:	3ff71547 	.word	0x3ff71547
 80042f0:	00000000 	.word	0x00000000
 80042f4:	bff00000 	.word	0xbff00000
 80042f8:	8800759c 	.word	0x8800759c
 80042fc:	7e37e43c 	.word	0x7e37e43c
 8004300:	3ff00000 	.word	0x3ff00000
 8004304:	3fd00000 	.word	0x3fd00000
 8004308:	3fe00000 	.word	0x3fe00000
 800430c:	408fffff 	.word	0x408fffff
 8004310:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	da05      	bge.n	8004326 <__ieee754_pow+0x3de>
 800431a:	4bd3      	ldr	r3, [pc, #844]	; (8004668 <__ieee754_pow+0x720>)
 800431c:	f7fc f910 	bl	8000540 <__aeabi_dmul>
 8004320:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004324:	460c      	mov	r4, r1
 8004326:	1523      	asrs	r3, r4, #20
 8004328:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800432c:	4413      	add	r3, r2
 800432e:	9309      	str	r3, [sp, #36]	; 0x24
 8004330:	4bce      	ldr	r3, [pc, #824]	; (800466c <__ieee754_pow+0x724>)
 8004332:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004336:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800433a:	429c      	cmp	r4, r3
 800433c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004340:	dd08      	ble.n	8004354 <__ieee754_pow+0x40c>
 8004342:	4bcb      	ldr	r3, [pc, #812]	; (8004670 <__ieee754_pow+0x728>)
 8004344:	429c      	cmp	r4, r3
 8004346:	f340 815e 	ble.w	8004606 <__ieee754_pow+0x6be>
 800434a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800434c:	3301      	adds	r3, #1
 800434e:	9309      	str	r3, [sp, #36]	; 0x24
 8004350:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004354:	f04f 0a00 	mov.w	sl, #0
 8004358:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800435c:	930c      	str	r3, [sp, #48]	; 0x30
 800435e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004360:	4bc4      	ldr	r3, [pc, #784]	; (8004674 <__ieee754_pow+0x72c>)
 8004362:	4413      	add	r3, r2
 8004364:	ed93 7b00 	vldr	d7, [r3]
 8004368:	4629      	mov	r1, r5
 800436a:	ec53 2b17 	vmov	r2, r3, d7
 800436e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004372:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004376:	f7fb ff2b 	bl	80001d0 <__aeabi_dsub>
 800437a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800437e:	4606      	mov	r6, r0
 8004380:	460f      	mov	r7, r1
 8004382:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004386:	f7fb ff25 	bl	80001d4 <__adddf3>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	2000      	movs	r0, #0
 8004390:	49b9      	ldr	r1, [pc, #740]	; (8004678 <__ieee754_pow+0x730>)
 8004392:	f7fc f9ff 	bl	8000794 <__aeabi_ddiv>
 8004396:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800439a:	4602      	mov	r2, r0
 800439c:	460b      	mov	r3, r1
 800439e:	4630      	mov	r0, r6
 80043a0:	4639      	mov	r1, r7
 80043a2:	f7fc f8cd 	bl	8000540 <__aeabi_dmul>
 80043a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80043aa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80043ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80043b2:	2300      	movs	r3, #0
 80043b4:	9302      	str	r3, [sp, #8]
 80043b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80043ba:	106d      	asrs	r5, r5, #1
 80043bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80043c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80043c4:	2200      	movs	r2, #0
 80043c6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80043ca:	4640      	mov	r0, r8
 80043cc:	4649      	mov	r1, r9
 80043ce:	4614      	mov	r4, r2
 80043d0:	461d      	mov	r5, r3
 80043d2:	f7fc f8b5 	bl	8000540 <__aeabi_dmul>
 80043d6:	4602      	mov	r2, r0
 80043d8:	460b      	mov	r3, r1
 80043da:	4630      	mov	r0, r6
 80043dc:	4639      	mov	r1, r7
 80043de:	f7fb fef7 	bl	80001d0 <__aeabi_dsub>
 80043e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80043e6:	4606      	mov	r6, r0
 80043e8:	460f      	mov	r7, r1
 80043ea:	4620      	mov	r0, r4
 80043ec:	4629      	mov	r1, r5
 80043ee:	f7fb feef 	bl	80001d0 <__aeabi_dsub>
 80043f2:	4602      	mov	r2, r0
 80043f4:	460b      	mov	r3, r1
 80043f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80043fa:	f7fb fee9 	bl	80001d0 <__aeabi_dsub>
 80043fe:	4642      	mov	r2, r8
 8004400:	464b      	mov	r3, r9
 8004402:	f7fc f89d 	bl	8000540 <__aeabi_dmul>
 8004406:	4602      	mov	r2, r0
 8004408:	460b      	mov	r3, r1
 800440a:	4630      	mov	r0, r6
 800440c:	4639      	mov	r1, r7
 800440e:	f7fb fedf 	bl	80001d0 <__aeabi_dsub>
 8004412:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004416:	f7fc f893 	bl	8000540 <__aeabi_dmul>
 800441a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800441e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004422:	4610      	mov	r0, r2
 8004424:	4619      	mov	r1, r3
 8004426:	f7fc f88b 	bl	8000540 <__aeabi_dmul>
 800442a:	a37b      	add	r3, pc, #492	; (adr r3, 8004618 <__ieee754_pow+0x6d0>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	4604      	mov	r4, r0
 8004432:	460d      	mov	r5, r1
 8004434:	f7fc f884 	bl	8000540 <__aeabi_dmul>
 8004438:	a379      	add	r3, pc, #484	; (adr r3, 8004620 <__ieee754_pow+0x6d8>)
 800443a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800443e:	f7fb fec9 	bl	80001d4 <__adddf3>
 8004442:	4622      	mov	r2, r4
 8004444:	462b      	mov	r3, r5
 8004446:	f7fc f87b 	bl	8000540 <__aeabi_dmul>
 800444a:	a377      	add	r3, pc, #476	; (adr r3, 8004628 <__ieee754_pow+0x6e0>)
 800444c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004450:	f7fb fec0 	bl	80001d4 <__adddf3>
 8004454:	4622      	mov	r2, r4
 8004456:	462b      	mov	r3, r5
 8004458:	f7fc f872 	bl	8000540 <__aeabi_dmul>
 800445c:	a374      	add	r3, pc, #464	; (adr r3, 8004630 <__ieee754_pow+0x6e8>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fb feb7 	bl	80001d4 <__adddf3>
 8004466:	4622      	mov	r2, r4
 8004468:	462b      	mov	r3, r5
 800446a:	f7fc f869 	bl	8000540 <__aeabi_dmul>
 800446e:	a372      	add	r3, pc, #456	; (adr r3, 8004638 <__ieee754_pow+0x6f0>)
 8004470:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004474:	f7fb feae 	bl	80001d4 <__adddf3>
 8004478:	4622      	mov	r2, r4
 800447a:	462b      	mov	r3, r5
 800447c:	f7fc f860 	bl	8000540 <__aeabi_dmul>
 8004480:	a36f      	add	r3, pc, #444	; (adr r3, 8004640 <__ieee754_pow+0x6f8>)
 8004482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004486:	f7fb fea5 	bl	80001d4 <__adddf3>
 800448a:	4622      	mov	r2, r4
 800448c:	4606      	mov	r6, r0
 800448e:	460f      	mov	r7, r1
 8004490:	462b      	mov	r3, r5
 8004492:	4620      	mov	r0, r4
 8004494:	4629      	mov	r1, r5
 8004496:	f7fc f853 	bl	8000540 <__aeabi_dmul>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4630      	mov	r0, r6
 80044a0:	4639      	mov	r1, r7
 80044a2:	f7fc f84d 	bl	8000540 <__aeabi_dmul>
 80044a6:	4642      	mov	r2, r8
 80044a8:	4604      	mov	r4, r0
 80044aa:	460d      	mov	r5, r1
 80044ac:	464b      	mov	r3, r9
 80044ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80044b2:	f7fb fe8f 	bl	80001d4 <__adddf3>
 80044b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80044ba:	f7fc f841 	bl	8000540 <__aeabi_dmul>
 80044be:	4622      	mov	r2, r4
 80044c0:	462b      	mov	r3, r5
 80044c2:	f7fb fe87 	bl	80001d4 <__adddf3>
 80044c6:	4642      	mov	r2, r8
 80044c8:	4606      	mov	r6, r0
 80044ca:	460f      	mov	r7, r1
 80044cc:	464b      	mov	r3, r9
 80044ce:	4640      	mov	r0, r8
 80044d0:	4649      	mov	r1, r9
 80044d2:	f7fc f835 	bl	8000540 <__aeabi_dmul>
 80044d6:	2200      	movs	r2, #0
 80044d8:	4b68      	ldr	r3, [pc, #416]	; (800467c <__ieee754_pow+0x734>)
 80044da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80044de:	f7fb fe79 	bl	80001d4 <__adddf3>
 80044e2:	4632      	mov	r2, r6
 80044e4:	463b      	mov	r3, r7
 80044e6:	f7fb fe75 	bl	80001d4 <__adddf3>
 80044ea:	9802      	ldr	r0, [sp, #8]
 80044ec:	460d      	mov	r5, r1
 80044ee:	4604      	mov	r4, r0
 80044f0:	4602      	mov	r2, r0
 80044f2:	460b      	mov	r3, r1
 80044f4:	4640      	mov	r0, r8
 80044f6:	4649      	mov	r1, r9
 80044f8:	f7fc f822 	bl	8000540 <__aeabi_dmul>
 80044fc:	2200      	movs	r2, #0
 80044fe:	4680      	mov	r8, r0
 8004500:	4689      	mov	r9, r1
 8004502:	4b5e      	ldr	r3, [pc, #376]	; (800467c <__ieee754_pow+0x734>)
 8004504:	4620      	mov	r0, r4
 8004506:	4629      	mov	r1, r5
 8004508:	f7fb fe62 	bl	80001d0 <__aeabi_dsub>
 800450c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004510:	f7fb fe5e 	bl	80001d0 <__aeabi_dsub>
 8004514:	4602      	mov	r2, r0
 8004516:	460b      	mov	r3, r1
 8004518:	4630      	mov	r0, r6
 800451a:	4639      	mov	r1, r7
 800451c:	f7fb fe58 	bl	80001d0 <__aeabi_dsub>
 8004520:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004524:	f7fc f80c 	bl	8000540 <__aeabi_dmul>
 8004528:	4622      	mov	r2, r4
 800452a:	4606      	mov	r6, r0
 800452c:	460f      	mov	r7, r1
 800452e:	462b      	mov	r3, r5
 8004530:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004534:	f7fc f804 	bl	8000540 <__aeabi_dmul>
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	4630      	mov	r0, r6
 800453e:	4639      	mov	r1, r7
 8004540:	f7fb fe48 	bl	80001d4 <__adddf3>
 8004544:	4606      	mov	r6, r0
 8004546:	460f      	mov	r7, r1
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4640      	mov	r0, r8
 800454e:	4649      	mov	r1, r9
 8004550:	f7fb fe40 	bl	80001d4 <__adddf3>
 8004554:	9802      	ldr	r0, [sp, #8]
 8004556:	a33c      	add	r3, pc, #240	; (adr r3, 8004648 <__ieee754_pow+0x700>)
 8004558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800455c:	4604      	mov	r4, r0
 800455e:	460d      	mov	r5, r1
 8004560:	f7fb ffee 	bl	8000540 <__aeabi_dmul>
 8004564:	4642      	mov	r2, r8
 8004566:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800456a:	464b      	mov	r3, r9
 800456c:	4620      	mov	r0, r4
 800456e:	4629      	mov	r1, r5
 8004570:	f7fb fe2e 	bl	80001d0 <__aeabi_dsub>
 8004574:	4602      	mov	r2, r0
 8004576:	460b      	mov	r3, r1
 8004578:	4630      	mov	r0, r6
 800457a:	4639      	mov	r1, r7
 800457c:	f7fb fe28 	bl	80001d0 <__aeabi_dsub>
 8004580:	a333      	add	r3, pc, #204	; (adr r3, 8004650 <__ieee754_pow+0x708>)
 8004582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004586:	f7fb ffdb 	bl	8000540 <__aeabi_dmul>
 800458a:	a333      	add	r3, pc, #204	; (adr r3, 8004658 <__ieee754_pow+0x710>)
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	4606      	mov	r6, r0
 8004592:	460f      	mov	r7, r1
 8004594:	4620      	mov	r0, r4
 8004596:	4629      	mov	r1, r5
 8004598:	f7fb ffd2 	bl	8000540 <__aeabi_dmul>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4630      	mov	r0, r6
 80045a2:	4639      	mov	r1, r7
 80045a4:	f7fb fe16 	bl	80001d4 <__adddf3>
 80045a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045aa:	4b35      	ldr	r3, [pc, #212]	; (8004680 <__ieee754_pow+0x738>)
 80045ac:	4413      	add	r3, r2
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f7fb fe0f 	bl	80001d4 <__adddf3>
 80045b6:	4604      	mov	r4, r0
 80045b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80045ba:	460d      	mov	r5, r1
 80045bc:	f7fb ff56 	bl	800046c <__aeabi_i2d>
 80045c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045c2:	4b30      	ldr	r3, [pc, #192]	; (8004684 <__ieee754_pow+0x73c>)
 80045c4:	4413      	add	r3, r2
 80045c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80045ca:	4606      	mov	r6, r0
 80045cc:	460f      	mov	r7, r1
 80045ce:	4622      	mov	r2, r4
 80045d0:	462b      	mov	r3, r5
 80045d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80045d6:	f7fb fdfd 	bl	80001d4 <__adddf3>
 80045da:	4642      	mov	r2, r8
 80045dc:	464b      	mov	r3, r9
 80045de:	f7fb fdf9 	bl	80001d4 <__adddf3>
 80045e2:	4632      	mov	r2, r6
 80045e4:	463b      	mov	r3, r7
 80045e6:	f7fb fdf5 	bl	80001d4 <__adddf3>
 80045ea:	9802      	ldr	r0, [sp, #8]
 80045ec:	4632      	mov	r2, r6
 80045ee:	463b      	mov	r3, r7
 80045f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80045f4:	f7fb fdec 	bl	80001d0 <__aeabi_dsub>
 80045f8:	4642      	mov	r2, r8
 80045fa:	464b      	mov	r3, r9
 80045fc:	f7fb fde8 	bl	80001d0 <__aeabi_dsub>
 8004600:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004604:	e607      	b.n	8004216 <__ieee754_pow+0x2ce>
 8004606:	f04f 0a01 	mov.w	sl, #1
 800460a:	e6a5      	b.n	8004358 <__ieee754_pow+0x410>
 800460c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004660 <__ieee754_pow+0x718>
 8004610:	e613      	b.n	800423a <__ieee754_pow+0x2f2>
 8004612:	bf00      	nop
 8004614:	f3af 8000 	nop.w
 8004618:	4a454eef 	.word	0x4a454eef
 800461c:	3fca7e28 	.word	0x3fca7e28
 8004620:	93c9db65 	.word	0x93c9db65
 8004624:	3fcd864a 	.word	0x3fcd864a
 8004628:	a91d4101 	.word	0xa91d4101
 800462c:	3fd17460 	.word	0x3fd17460
 8004630:	518f264d 	.word	0x518f264d
 8004634:	3fd55555 	.word	0x3fd55555
 8004638:	db6fabff 	.word	0xdb6fabff
 800463c:	3fdb6db6 	.word	0x3fdb6db6
 8004640:	33333303 	.word	0x33333303
 8004644:	3fe33333 	.word	0x3fe33333
 8004648:	e0000000 	.word	0xe0000000
 800464c:	3feec709 	.word	0x3feec709
 8004650:	dc3a03fd 	.word	0xdc3a03fd
 8004654:	3feec709 	.word	0x3feec709
 8004658:	145b01f5 	.word	0x145b01f5
 800465c:	be3e2fe0 	.word	0xbe3e2fe0
 8004660:	00000000 	.word	0x00000000
 8004664:	3ff00000 	.word	0x3ff00000
 8004668:	43400000 	.word	0x43400000
 800466c:	0003988e 	.word	0x0003988e
 8004670:	000bb679 	.word	0x000bb679
 8004674:	08005ca0 	.word	0x08005ca0
 8004678:	3ff00000 	.word	0x3ff00000
 800467c:	40080000 	.word	0x40080000
 8004680:	08005cc0 	.word	0x08005cc0
 8004684:	08005cb0 	.word	0x08005cb0
 8004688:	a3b4      	add	r3, pc, #720	; (adr r3, 800495c <__ieee754_pow+0xa14>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	4640      	mov	r0, r8
 8004690:	4649      	mov	r1, r9
 8004692:	f7fb fd9f 	bl	80001d4 <__adddf3>
 8004696:	4622      	mov	r2, r4
 8004698:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800469c:	462b      	mov	r3, r5
 800469e:	4630      	mov	r0, r6
 80046a0:	4639      	mov	r1, r7
 80046a2:	f7fb fd95 	bl	80001d0 <__aeabi_dsub>
 80046a6:	4602      	mov	r2, r0
 80046a8:	460b      	mov	r3, r1
 80046aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80046ae:	f7fc f9d7 	bl	8000a60 <__aeabi_dcmpgt>
 80046b2:	2800      	cmp	r0, #0
 80046b4:	f47f adfe 	bne.w	80042b4 <__ieee754_pow+0x36c>
 80046b8:	4aa3      	ldr	r2, [pc, #652]	; (8004948 <__ieee754_pow+0xa00>)
 80046ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80046be:	4293      	cmp	r3, r2
 80046c0:	f340 810a 	ble.w	80048d8 <__ieee754_pow+0x990>
 80046c4:	151b      	asrs	r3, r3, #20
 80046c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80046ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80046ce:	fa4a f303 	asr.w	r3, sl, r3
 80046d2:	445b      	add	r3, fp
 80046d4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80046d8:	4e9c      	ldr	r6, [pc, #624]	; (800494c <__ieee754_pow+0xa04>)
 80046da:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80046de:	4116      	asrs	r6, r2
 80046e0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80046e4:	2000      	movs	r0, #0
 80046e6:	ea23 0106 	bic.w	r1, r3, r6
 80046ea:	f1c2 0214 	rsb	r2, r2, #20
 80046ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80046f2:	fa4a fa02 	asr.w	sl, sl, r2
 80046f6:	f1bb 0f00 	cmp.w	fp, #0
 80046fa:	4602      	mov	r2, r0
 80046fc:	460b      	mov	r3, r1
 80046fe:	4620      	mov	r0, r4
 8004700:	4629      	mov	r1, r5
 8004702:	bfb8      	it	lt
 8004704:	f1ca 0a00 	rsblt	sl, sl, #0
 8004708:	f7fb fd62 	bl	80001d0 <__aeabi_dsub>
 800470c:	e9cd 0100 	strd	r0, r1, [sp]
 8004710:	4642      	mov	r2, r8
 8004712:	464b      	mov	r3, r9
 8004714:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004718:	f7fb fd5c 	bl	80001d4 <__adddf3>
 800471c:	2000      	movs	r0, #0
 800471e:	a378      	add	r3, pc, #480	; (adr r3, 8004900 <__ieee754_pow+0x9b8>)
 8004720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	f7fb ff0a 	bl	8000540 <__aeabi_dmul>
 800472c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004730:	4606      	mov	r6, r0
 8004732:	460f      	mov	r7, r1
 8004734:	4620      	mov	r0, r4
 8004736:	4629      	mov	r1, r5
 8004738:	f7fb fd4a 	bl	80001d0 <__aeabi_dsub>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4640      	mov	r0, r8
 8004742:	4649      	mov	r1, r9
 8004744:	f7fb fd44 	bl	80001d0 <__aeabi_dsub>
 8004748:	a36f      	add	r3, pc, #444	; (adr r3, 8004908 <__ieee754_pow+0x9c0>)
 800474a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474e:	f7fb fef7 	bl	8000540 <__aeabi_dmul>
 8004752:	a36f      	add	r3, pc, #444	; (adr r3, 8004910 <__ieee754_pow+0x9c8>)
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	4680      	mov	r8, r0
 800475a:	4689      	mov	r9, r1
 800475c:	4620      	mov	r0, r4
 800475e:	4629      	mov	r1, r5
 8004760:	f7fb feee 	bl	8000540 <__aeabi_dmul>
 8004764:	4602      	mov	r2, r0
 8004766:	460b      	mov	r3, r1
 8004768:	4640      	mov	r0, r8
 800476a:	4649      	mov	r1, r9
 800476c:	f7fb fd32 	bl	80001d4 <__adddf3>
 8004770:	4604      	mov	r4, r0
 8004772:	460d      	mov	r5, r1
 8004774:	4602      	mov	r2, r0
 8004776:	460b      	mov	r3, r1
 8004778:	4630      	mov	r0, r6
 800477a:	4639      	mov	r1, r7
 800477c:	f7fb fd2a 	bl	80001d4 <__adddf3>
 8004780:	4632      	mov	r2, r6
 8004782:	463b      	mov	r3, r7
 8004784:	4680      	mov	r8, r0
 8004786:	4689      	mov	r9, r1
 8004788:	f7fb fd22 	bl	80001d0 <__aeabi_dsub>
 800478c:	4602      	mov	r2, r0
 800478e:	460b      	mov	r3, r1
 8004790:	4620      	mov	r0, r4
 8004792:	4629      	mov	r1, r5
 8004794:	f7fb fd1c 	bl	80001d0 <__aeabi_dsub>
 8004798:	4642      	mov	r2, r8
 800479a:	4606      	mov	r6, r0
 800479c:	460f      	mov	r7, r1
 800479e:	464b      	mov	r3, r9
 80047a0:	4640      	mov	r0, r8
 80047a2:	4649      	mov	r1, r9
 80047a4:	f7fb fecc 	bl	8000540 <__aeabi_dmul>
 80047a8:	a35b      	add	r3, pc, #364	; (adr r3, 8004918 <__ieee754_pow+0x9d0>)
 80047aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ae:	4604      	mov	r4, r0
 80047b0:	460d      	mov	r5, r1
 80047b2:	f7fb fec5 	bl	8000540 <__aeabi_dmul>
 80047b6:	a35a      	add	r3, pc, #360	; (adr r3, 8004920 <__ieee754_pow+0x9d8>)
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f7fb fd08 	bl	80001d0 <__aeabi_dsub>
 80047c0:	4622      	mov	r2, r4
 80047c2:	462b      	mov	r3, r5
 80047c4:	f7fb febc 	bl	8000540 <__aeabi_dmul>
 80047c8:	a357      	add	r3, pc, #348	; (adr r3, 8004928 <__ieee754_pow+0x9e0>)
 80047ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ce:	f7fb fd01 	bl	80001d4 <__adddf3>
 80047d2:	4622      	mov	r2, r4
 80047d4:	462b      	mov	r3, r5
 80047d6:	f7fb feb3 	bl	8000540 <__aeabi_dmul>
 80047da:	a355      	add	r3, pc, #340	; (adr r3, 8004930 <__ieee754_pow+0x9e8>)
 80047dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e0:	f7fb fcf6 	bl	80001d0 <__aeabi_dsub>
 80047e4:	4622      	mov	r2, r4
 80047e6:	462b      	mov	r3, r5
 80047e8:	f7fb feaa 	bl	8000540 <__aeabi_dmul>
 80047ec:	a352      	add	r3, pc, #328	; (adr r3, 8004938 <__ieee754_pow+0x9f0>)
 80047ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f2:	f7fb fcef 	bl	80001d4 <__adddf3>
 80047f6:	4622      	mov	r2, r4
 80047f8:	462b      	mov	r3, r5
 80047fa:	f7fb fea1 	bl	8000540 <__aeabi_dmul>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	4640      	mov	r0, r8
 8004804:	4649      	mov	r1, r9
 8004806:	f7fb fce3 	bl	80001d0 <__aeabi_dsub>
 800480a:	4604      	mov	r4, r0
 800480c:	460d      	mov	r5, r1
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4640      	mov	r0, r8
 8004814:	4649      	mov	r1, r9
 8004816:	f7fb fe93 	bl	8000540 <__aeabi_dmul>
 800481a:	2200      	movs	r2, #0
 800481c:	e9cd 0100 	strd	r0, r1, [sp]
 8004820:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004824:	4620      	mov	r0, r4
 8004826:	4629      	mov	r1, r5
 8004828:	f7fb fcd2 	bl	80001d0 <__aeabi_dsub>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004834:	f7fb ffae 	bl	8000794 <__aeabi_ddiv>
 8004838:	4632      	mov	r2, r6
 800483a:	4604      	mov	r4, r0
 800483c:	460d      	mov	r5, r1
 800483e:	463b      	mov	r3, r7
 8004840:	4640      	mov	r0, r8
 8004842:	4649      	mov	r1, r9
 8004844:	f7fb fe7c 	bl	8000540 <__aeabi_dmul>
 8004848:	4632      	mov	r2, r6
 800484a:	463b      	mov	r3, r7
 800484c:	f7fb fcc2 	bl	80001d4 <__adddf3>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4620      	mov	r0, r4
 8004856:	4629      	mov	r1, r5
 8004858:	f7fb fcba 	bl	80001d0 <__aeabi_dsub>
 800485c:	4642      	mov	r2, r8
 800485e:	464b      	mov	r3, r9
 8004860:	f7fb fcb6 	bl	80001d0 <__aeabi_dsub>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	2000      	movs	r0, #0
 800486a:	4939      	ldr	r1, [pc, #228]	; (8004950 <__ieee754_pow+0xa08>)
 800486c:	f7fb fcb0 	bl	80001d0 <__aeabi_dsub>
 8004870:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004874:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	da2f      	bge.n	80048de <__ieee754_pow+0x996>
 800487e:	4650      	mov	r0, sl
 8004880:	ec43 2b10 	vmov	d0, r2, r3
 8004884:	f001 f8fc 	bl	8005a80 <scalbn>
 8004888:	ec51 0b10 	vmov	r0, r1, d0
 800488c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004890:	f7ff bbf1 	b.w	8004076 <__ieee754_pow+0x12e>
 8004894:	4b2f      	ldr	r3, [pc, #188]	; (8004954 <__ieee754_pow+0xa0c>)
 8004896:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800489a:	429e      	cmp	r6, r3
 800489c:	f77f af0c 	ble.w	80046b8 <__ieee754_pow+0x770>
 80048a0:	4b2d      	ldr	r3, [pc, #180]	; (8004958 <__ieee754_pow+0xa10>)
 80048a2:	440b      	add	r3, r1
 80048a4:	4303      	orrs	r3, r0
 80048a6:	d00b      	beq.n	80048c0 <__ieee754_pow+0x978>
 80048a8:	a325      	add	r3, pc, #148	; (adr r3, 8004940 <__ieee754_pow+0x9f8>)
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048b2:	f7fb fe45 	bl	8000540 <__aeabi_dmul>
 80048b6:	a322      	add	r3, pc, #136	; (adr r3, 8004940 <__ieee754_pow+0x9f8>)
 80048b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048bc:	f7ff bbdb 	b.w	8004076 <__ieee754_pow+0x12e>
 80048c0:	4622      	mov	r2, r4
 80048c2:	462b      	mov	r3, r5
 80048c4:	f7fb fc84 	bl	80001d0 <__aeabi_dsub>
 80048c8:	4642      	mov	r2, r8
 80048ca:	464b      	mov	r3, r9
 80048cc:	f7fc f8be 	bl	8000a4c <__aeabi_dcmpge>
 80048d0:	2800      	cmp	r0, #0
 80048d2:	f43f aef1 	beq.w	80046b8 <__ieee754_pow+0x770>
 80048d6:	e7e7      	b.n	80048a8 <__ieee754_pow+0x960>
 80048d8:	f04f 0a00 	mov.w	sl, #0
 80048dc:	e718      	b.n	8004710 <__ieee754_pow+0x7c8>
 80048de:	4621      	mov	r1, r4
 80048e0:	e7d4      	b.n	800488c <__ieee754_pow+0x944>
 80048e2:	2000      	movs	r0, #0
 80048e4:	491a      	ldr	r1, [pc, #104]	; (8004950 <__ieee754_pow+0xa08>)
 80048e6:	f7ff bb8f 	b.w	8004008 <__ieee754_pow+0xc0>
 80048ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ee:	f7ff bb8b 	b.w	8004008 <__ieee754_pow+0xc0>
 80048f2:	4630      	mov	r0, r6
 80048f4:	4639      	mov	r1, r7
 80048f6:	f7ff bb87 	b.w	8004008 <__ieee754_pow+0xc0>
 80048fa:	4693      	mov	fp, r2
 80048fc:	f7ff bb98 	b.w	8004030 <__ieee754_pow+0xe8>
 8004900:	00000000 	.word	0x00000000
 8004904:	3fe62e43 	.word	0x3fe62e43
 8004908:	fefa39ef 	.word	0xfefa39ef
 800490c:	3fe62e42 	.word	0x3fe62e42
 8004910:	0ca86c39 	.word	0x0ca86c39
 8004914:	be205c61 	.word	0xbe205c61
 8004918:	72bea4d0 	.word	0x72bea4d0
 800491c:	3e663769 	.word	0x3e663769
 8004920:	c5d26bf1 	.word	0xc5d26bf1
 8004924:	3ebbbd41 	.word	0x3ebbbd41
 8004928:	af25de2c 	.word	0xaf25de2c
 800492c:	3f11566a 	.word	0x3f11566a
 8004930:	16bebd93 	.word	0x16bebd93
 8004934:	3f66c16c 	.word	0x3f66c16c
 8004938:	5555553e 	.word	0x5555553e
 800493c:	3fc55555 	.word	0x3fc55555
 8004940:	c2f8f359 	.word	0xc2f8f359
 8004944:	01a56e1f 	.word	0x01a56e1f
 8004948:	3fe00000 	.word	0x3fe00000
 800494c:	000fffff 	.word	0x000fffff
 8004950:	3ff00000 	.word	0x3ff00000
 8004954:	4090cbff 	.word	0x4090cbff
 8004958:	3f6f3400 	.word	0x3f6f3400
 800495c:	652b82fe 	.word	0x652b82fe
 8004960:	3c971547 	.word	0x3c971547
 8004964:	00000000 	.word	0x00000000

08004968 <__ieee754_rem_pio2>:
 8004968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800496c:	ec57 6b10 	vmov	r6, r7, d0
 8004970:	4bc3      	ldr	r3, [pc, #780]	; (8004c80 <__ieee754_rem_pio2+0x318>)
 8004972:	b08d      	sub	sp, #52	; 0x34
 8004974:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8004978:	4598      	cmp	r8, r3
 800497a:	4604      	mov	r4, r0
 800497c:	9704      	str	r7, [sp, #16]
 800497e:	dc07      	bgt.n	8004990 <__ieee754_rem_pio2+0x28>
 8004980:	2200      	movs	r2, #0
 8004982:	2300      	movs	r3, #0
 8004984:	ed84 0b00 	vstr	d0, [r4]
 8004988:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800498c:	2500      	movs	r5, #0
 800498e:	e027      	b.n	80049e0 <__ieee754_rem_pio2+0x78>
 8004990:	4bbc      	ldr	r3, [pc, #752]	; (8004c84 <__ieee754_rem_pio2+0x31c>)
 8004992:	4598      	cmp	r8, r3
 8004994:	dc75      	bgt.n	8004a82 <__ieee754_rem_pio2+0x11a>
 8004996:	9b04      	ldr	r3, [sp, #16]
 8004998:	4dbb      	ldr	r5, [pc, #748]	; (8004c88 <__ieee754_rem_pio2+0x320>)
 800499a:	2b00      	cmp	r3, #0
 800499c:	ee10 0a10 	vmov	r0, s0
 80049a0:	a3a9      	add	r3, pc, #676	; (adr r3, 8004c48 <__ieee754_rem_pio2+0x2e0>)
 80049a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a6:	4639      	mov	r1, r7
 80049a8:	dd36      	ble.n	8004a18 <__ieee754_rem_pio2+0xb0>
 80049aa:	f7fb fc11 	bl	80001d0 <__aeabi_dsub>
 80049ae:	45a8      	cmp	r8, r5
 80049b0:	4606      	mov	r6, r0
 80049b2:	460f      	mov	r7, r1
 80049b4:	d018      	beq.n	80049e8 <__ieee754_rem_pio2+0x80>
 80049b6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004c50 <__ieee754_rem_pio2+0x2e8>)
 80049b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049bc:	f7fb fc08 	bl	80001d0 <__aeabi_dsub>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	e9c4 2300 	strd	r2, r3, [r4]
 80049c8:	4630      	mov	r0, r6
 80049ca:	4639      	mov	r1, r7
 80049cc:	f7fb fc00 	bl	80001d0 <__aeabi_dsub>
 80049d0:	a39f      	add	r3, pc, #636	; (adr r3, 8004c50 <__ieee754_rem_pio2+0x2e8>)
 80049d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d6:	f7fb fbfb 	bl	80001d0 <__aeabi_dsub>
 80049da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80049de:	2501      	movs	r5, #1
 80049e0:	4628      	mov	r0, r5
 80049e2:	b00d      	add	sp, #52	; 0x34
 80049e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049e8:	a39b      	add	r3, pc, #620	; (adr r3, 8004c58 <__ieee754_rem_pio2+0x2f0>)
 80049ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ee:	f7fb fbef 	bl	80001d0 <__aeabi_dsub>
 80049f2:	a39b      	add	r3, pc, #620	; (adr r3, 8004c60 <__ieee754_rem_pio2+0x2f8>)
 80049f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049f8:	4606      	mov	r6, r0
 80049fa:	460f      	mov	r7, r1
 80049fc:	f7fb fbe8 	bl	80001d0 <__aeabi_dsub>
 8004a00:	4602      	mov	r2, r0
 8004a02:	460b      	mov	r3, r1
 8004a04:	e9c4 2300 	strd	r2, r3, [r4]
 8004a08:	4630      	mov	r0, r6
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	f7fb fbe0 	bl	80001d0 <__aeabi_dsub>
 8004a10:	a393      	add	r3, pc, #588	; (adr r3, 8004c60 <__ieee754_rem_pio2+0x2f8>)
 8004a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a16:	e7de      	b.n	80049d6 <__ieee754_rem_pio2+0x6e>
 8004a18:	f7fb fbdc 	bl	80001d4 <__adddf3>
 8004a1c:	45a8      	cmp	r8, r5
 8004a1e:	4606      	mov	r6, r0
 8004a20:	460f      	mov	r7, r1
 8004a22:	d016      	beq.n	8004a52 <__ieee754_rem_pio2+0xea>
 8004a24:	a38a      	add	r3, pc, #552	; (adr r3, 8004c50 <__ieee754_rem_pio2+0x2e8>)
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f7fb fbd3 	bl	80001d4 <__adddf3>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	e9c4 2300 	strd	r2, r3, [r4]
 8004a36:	4630      	mov	r0, r6
 8004a38:	4639      	mov	r1, r7
 8004a3a:	f7fb fbc9 	bl	80001d0 <__aeabi_dsub>
 8004a3e:	a384      	add	r3, pc, #528	; (adr r3, 8004c50 <__ieee754_rem_pio2+0x2e8>)
 8004a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a44:	f7fb fbc6 	bl	80001d4 <__adddf3>
 8004a48:	f04f 35ff 	mov.w	r5, #4294967295
 8004a4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004a50:	e7c6      	b.n	80049e0 <__ieee754_rem_pio2+0x78>
 8004a52:	a381      	add	r3, pc, #516	; (adr r3, 8004c58 <__ieee754_rem_pio2+0x2f0>)
 8004a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a58:	f7fb fbbc 	bl	80001d4 <__adddf3>
 8004a5c:	a380      	add	r3, pc, #512	; (adr r3, 8004c60 <__ieee754_rem_pio2+0x2f8>)
 8004a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a62:	4606      	mov	r6, r0
 8004a64:	460f      	mov	r7, r1
 8004a66:	f7fb fbb5 	bl	80001d4 <__adddf3>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	e9c4 2300 	strd	r2, r3, [r4]
 8004a72:	4630      	mov	r0, r6
 8004a74:	4639      	mov	r1, r7
 8004a76:	f7fb fbab 	bl	80001d0 <__aeabi_dsub>
 8004a7a:	a379      	add	r3, pc, #484	; (adr r3, 8004c60 <__ieee754_rem_pio2+0x2f8>)
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	e7e0      	b.n	8004a44 <__ieee754_rem_pio2+0xdc>
 8004a82:	4b82      	ldr	r3, [pc, #520]	; (8004c8c <__ieee754_rem_pio2+0x324>)
 8004a84:	4598      	cmp	r8, r3
 8004a86:	f300 80d0 	bgt.w	8004c2a <__ieee754_rem_pio2+0x2c2>
 8004a8a:	f000 fed3 	bl	8005834 <fabs>
 8004a8e:	ec57 6b10 	vmov	r6, r7, d0
 8004a92:	ee10 0a10 	vmov	r0, s0
 8004a96:	a374      	add	r3, pc, #464	; (adr r3, 8004c68 <__ieee754_rem_pio2+0x300>)
 8004a98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a9c:	4639      	mov	r1, r7
 8004a9e:	f7fb fd4f 	bl	8000540 <__aeabi_dmul>
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	4b7a      	ldr	r3, [pc, #488]	; (8004c90 <__ieee754_rem_pio2+0x328>)
 8004aa6:	f7fb fb95 	bl	80001d4 <__adddf3>
 8004aaa:	f7fb fff9 	bl	8000aa0 <__aeabi_d2iz>
 8004aae:	4605      	mov	r5, r0
 8004ab0:	f7fb fcdc 	bl	800046c <__aeabi_i2d>
 8004ab4:	a364      	add	r3, pc, #400	; (adr r3, 8004c48 <__ieee754_rem_pio2+0x2e0>)
 8004ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004abe:	f7fb fd3f 	bl	8000540 <__aeabi_dmul>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	4630      	mov	r0, r6
 8004ac8:	4639      	mov	r1, r7
 8004aca:	f7fb fb81 	bl	80001d0 <__aeabi_dsub>
 8004ace:	a360      	add	r3, pc, #384	; (adr r3, 8004c50 <__ieee754_rem_pio2+0x2e8>)
 8004ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad4:	4682      	mov	sl, r0
 8004ad6:	468b      	mov	fp, r1
 8004ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004adc:	f7fb fd30 	bl	8000540 <__aeabi_dmul>
 8004ae0:	2d1f      	cmp	r5, #31
 8004ae2:	4606      	mov	r6, r0
 8004ae4:	460f      	mov	r7, r1
 8004ae6:	dc0c      	bgt.n	8004b02 <__ieee754_rem_pio2+0x19a>
 8004ae8:	1e6a      	subs	r2, r5, #1
 8004aea:	4b6a      	ldr	r3, [pc, #424]	; (8004c94 <__ieee754_rem_pio2+0x32c>)
 8004aec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004af0:	4543      	cmp	r3, r8
 8004af2:	d006      	beq.n	8004b02 <__ieee754_rem_pio2+0x19a>
 8004af4:	4632      	mov	r2, r6
 8004af6:	463b      	mov	r3, r7
 8004af8:	4650      	mov	r0, sl
 8004afa:	4659      	mov	r1, fp
 8004afc:	f7fb fb68 	bl	80001d0 <__aeabi_dsub>
 8004b00:	e00e      	b.n	8004b20 <__ieee754_rem_pio2+0x1b8>
 8004b02:	4632      	mov	r2, r6
 8004b04:	463b      	mov	r3, r7
 8004b06:	4650      	mov	r0, sl
 8004b08:	4659      	mov	r1, fp
 8004b0a:	f7fb fb61 	bl	80001d0 <__aeabi_dsub>
 8004b0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004b12:	9305      	str	r3, [sp, #20]
 8004b14:	9a05      	ldr	r2, [sp, #20]
 8004b16:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	dc02      	bgt.n	8004b26 <__ieee754_rem_pio2+0x1be>
 8004b20:	e9c4 0100 	strd	r0, r1, [r4]
 8004b24:	e039      	b.n	8004b9a <__ieee754_rem_pio2+0x232>
 8004b26:	a34c      	add	r3, pc, #304	; (adr r3, 8004c58 <__ieee754_rem_pio2+0x2f0>)
 8004b28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b30:	f7fb fd06 	bl	8000540 <__aeabi_dmul>
 8004b34:	4606      	mov	r6, r0
 8004b36:	460f      	mov	r7, r1
 8004b38:	4602      	mov	r2, r0
 8004b3a:	460b      	mov	r3, r1
 8004b3c:	4650      	mov	r0, sl
 8004b3e:	4659      	mov	r1, fp
 8004b40:	f7fb fb46 	bl	80001d0 <__aeabi_dsub>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4680      	mov	r8, r0
 8004b4a:	4689      	mov	r9, r1
 8004b4c:	4650      	mov	r0, sl
 8004b4e:	4659      	mov	r1, fp
 8004b50:	f7fb fb3e 	bl	80001d0 <__aeabi_dsub>
 8004b54:	4632      	mov	r2, r6
 8004b56:	463b      	mov	r3, r7
 8004b58:	f7fb fb3a 	bl	80001d0 <__aeabi_dsub>
 8004b5c:	a340      	add	r3, pc, #256	; (adr r3, 8004c60 <__ieee754_rem_pio2+0x2f8>)
 8004b5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b62:	4606      	mov	r6, r0
 8004b64:	460f      	mov	r7, r1
 8004b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b6a:	f7fb fce9 	bl	8000540 <__aeabi_dmul>
 8004b6e:	4632      	mov	r2, r6
 8004b70:	463b      	mov	r3, r7
 8004b72:	f7fb fb2d 	bl	80001d0 <__aeabi_dsub>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	4606      	mov	r6, r0
 8004b7c:	460f      	mov	r7, r1
 8004b7e:	4640      	mov	r0, r8
 8004b80:	4649      	mov	r1, r9
 8004b82:	f7fb fb25 	bl	80001d0 <__aeabi_dsub>
 8004b86:	9a05      	ldr	r2, [sp, #20]
 8004b88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	2b31      	cmp	r3, #49	; 0x31
 8004b90:	dc20      	bgt.n	8004bd4 <__ieee754_rem_pio2+0x26c>
 8004b92:	e9c4 0100 	strd	r0, r1, [r4]
 8004b96:	46c2      	mov	sl, r8
 8004b98:	46cb      	mov	fp, r9
 8004b9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004b9e:	4650      	mov	r0, sl
 8004ba0:	4642      	mov	r2, r8
 8004ba2:	464b      	mov	r3, r9
 8004ba4:	4659      	mov	r1, fp
 8004ba6:	f7fb fb13 	bl	80001d0 <__aeabi_dsub>
 8004baa:	463b      	mov	r3, r7
 8004bac:	4632      	mov	r2, r6
 8004bae:	f7fb fb0f 	bl	80001d0 <__aeabi_dsub>
 8004bb2:	9b04      	ldr	r3, [sp, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004bba:	f6bf af11 	bge.w	80049e0 <__ieee754_rem_pio2+0x78>
 8004bbe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004bc2:	6063      	str	r3, [r4, #4]
 8004bc4:	f8c4 8000 	str.w	r8, [r4]
 8004bc8:	60a0      	str	r0, [r4, #8]
 8004bca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004bce:	60e3      	str	r3, [r4, #12]
 8004bd0:	426d      	negs	r5, r5
 8004bd2:	e705      	b.n	80049e0 <__ieee754_rem_pio2+0x78>
 8004bd4:	a326      	add	r3, pc, #152	; (adr r3, 8004c70 <__ieee754_rem_pio2+0x308>)
 8004bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bde:	f7fb fcaf 	bl	8000540 <__aeabi_dmul>
 8004be2:	4606      	mov	r6, r0
 8004be4:	460f      	mov	r7, r1
 8004be6:	4602      	mov	r2, r0
 8004be8:	460b      	mov	r3, r1
 8004bea:	4640      	mov	r0, r8
 8004bec:	4649      	mov	r1, r9
 8004bee:	f7fb faef 	bl	80001d0 <__aeabi_dsub>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	4682      	mov	sl, r0
 8004bf8:	468b      	mov	fp, r1
 8004bfa:	4640      	mov	r0, r8
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	f7fb fae7 	bl	80001d0 <__aeabi_dsub>
 8004c02:	4632      	mov	r2, r6
 8004c04:	463b      	mov	r3, r7
 8004c06:	f7fb fae3 	bl	80001d0 <__aeabi_dsub>
 8004c0a:	a31b      	add	r3, pc, #108	; (adr r3, 8004c78 <__ieee754_rem_pio2+0x310>)
 8004c0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c10:	4606      	mov	r6, r0
 8004c12:	460f      	mov	r7, r1
 8004c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c18:	f7fb fc92 	bl	8000540 <__aeabi_dmul>
 8004c1c:	4632      	mov	r2, r6
 8004c1e:	463b      	mov	r3, r7
 8004c20:	f7fb fad6 	bl	80001d0 <__aeabi_dsub>
 8004c24:	4606      	mov	r6, r0
 8004c26:	460f      	mov	r7, r1
 8004c28:	e764      	b.n	8004af4 <__ieee754_rem_pio2+0x18c>
 8004c2a:	4b1b      	ldr	r3, [pc, #108]	; (8004c98 <__ieee754_rem_pio2+0x330>)
 8004c2c:	4598      	cmp	r8, r3
 8004c2e:	dd35      	ble.n	8004c9c <__ieee754_rem_pio2+0x334>
 8004c30:	ee10 2a10 	vmov	r2, s0
 8004c34:	463b      	mov	r3, r7
 8004c36:	4630      	mov	r0, r6
 8004c38:	4639      	mov	r1, r7
 8004c3a:	f7fb fac9 	bl	80001d0 <__aeabi_dsub>
 8004c3e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004c42:	e9c4 0100 	strd	r0, r1, [r4]
 8004c46:	e6a1      	b.n	800498c <__ieee754_rem_pio2+0x24>
 8004c48:	54400000 	.word	0x54400000
 8004c4c:	3ff921fb 	.word	0x3ff921fb
 8004c50:	1a626331 	.word	0x1a626331
 8004c54:	3dd0b461 	.word	0x3dd0b461
 8004c58:	1a600000 	.word	0x1a600000
 8004c5c:	3dd0b461 	.word	0x3dd0b461
 8004c60:	2e037073 	.word	0x2e037073
 8004c64:	3ba3198a 	.word	0x3ba3198a
 8004c68:	6dc9c883 	.word	0x6dc9c883
 8004c6c:	3fe45f30 	.word	0x3fe45f30
 8004c70:	2e000000 	.word	0x2e000000
 8004c74:	3ba3198a 	.word	0x3ba3198a
 8004c78:	252049c1 	.word	0x252049c1
 8004c7c:	397b839a 	.word	0x397b839a
 8004c80:	3fe921fb 	.word	0x3fe921fb
 8004c84:	4002d97b 	.word	0x4002d97b
 8004c88:	3ff921fb 	.word	0x3ff921fb
 8004c8c:	413921fb 	.word	0x413921fb
 8004c90:	3fe00000 	.word	0x3fe00000
 8004c94:	08005cd0 	.word	0x08005cd0
 8004c98:	7fefffff 	.word	0x7fefffff
 8004c9c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004ca0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8004ca4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004ca8:	4630      	mov	r0, r6
 8004caa:	460f      	mov	r7, r1
 8004cac:	f7fb fef8 	bl	8000aa0 <__aeabi_d2iz>
 8004cb0:	f7fb fbdc 	bl	800046c <__aeabi_i2d>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	460b      	mov	r3, r1
 8004cb8:	4630      	mov	r0, r6
 8004cba:	4639      	mov	r1, r7
 8004cbc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004cc0:	f7fb fa86 	bl	80001d0 <__aeabi_dsub>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <__ieee754_rem_pio2+0x3dc>)
 8004cc8:	f7fb fc3a 	bl	8000540 <__aeabi_dmul>
 8004ccc:	460f      	mov	r7, r1
 8004cce:	4606      	mov	r6, r0
 8004cd0:	f7fb fee6 	bl	8000aa0 <__aeabi_d2iz>
 8004cd4:	f7fb fbca 	bl	800046c <__aeabi_i2d>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	460b      	mov	r3, r1
 8004cdc:	4630      	mov	r0, r6
 8004cde:	4639      	mov	r1, r7
 8004ce0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ce4:	f7fb fa74 	bl	80001d0 <__aeabi_dsub>
 8004ce8:	2200      	movs	r2, #0
 8004cea:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <__ieee754_rem_pio2+0x3dc>)
 8004cec:	f7fb fc28 	bl	8000540 <__aeabi_dmul>
 8004cf0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004cf4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8004cf8:	f04f 0803 	mov.w	r8, #3
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	2700      	movs	r7, #0
 8004d00:	4632      	mov	r2, r6
 8004d02:	463b      	mov	r3, r7
 8004d04:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004d08:	f108 3aff 	add.w	sl, r8, #4294967295
 8004d0c:	f7fb fe80 	bl	8000a10 <__aeabi_dcmpeq>
 8004d10:	b9b0      	cbnz	r0, 8004d40 <__ieee754_rem_pio2+0x3d8>
 8004d12:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <__ieee754_rem_pio2+0x3e0>)
 8004d14:	9301      	str	r3, [sp, #4]
 8004d16:	2302      	movs	r3, #2
 8004d18:	9300      	str	r3, [sp, #0]
 8004d1a:	462a      	mov	r2, r5
 8004d1c:	4643      	mov	r3, r8
 8004d1e:	4621      	mov	r1, r4
 8004d20:	a806      	add	r0, sp, #24
 8004d22:	f000 f98d 	bl	8005040 <__kernel_rem_pio2>
 8004d26:	9b04      	ldr	r3, [sp, #16]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	f6bf ae58 	bge.w	80049e0 <__ieee754_rem_pio2+0x78>
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d36:	6063      	str	r3, [r4, #4]
 8004d38:	68e3      	ldr	r3, [r4, #12]
 8004d3a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004d3e:	e746      	b.n	8004bce <__ieee754_rem_pio2+0x266>
 8004d40:	46d0      	mov	r8, sl
 8004d42:	e7dd      	b.n	8004d00 <__ieee754_rem_pio2+0x398>
 8004d44:	41700000 	.word	0x41700000
 8004d48:	08005d50 	.word	0x08005d50

08004d4c <__ieee754_sqrt>:
 8004d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d50:	4955      	ldr	r1, [pc, #340]	; (8004ea8 <__ieee754_sqrt+0x15c>)
 8004d52:	ec55 4b10 	vmov	r4, r5, d0
 8004d56:	43a9      	bics	r1, r5
 8004d58:	462b      	mov	r3, r5
 8004d5a:	462a      	mov	r2, r5
 8004d5c:	d112      	bne.n	8004d84 <__ieee754_sqrt+0x38>
 8004d5e:	ee10 2a10 	vmov	r2, s0
 8004d62:	ee10 0a10 	vmov	r0, s0
 8004d66:	4629      	mov	r1, r5
 8004d68:	f7fb fbea 	bl	8000540 <__aeabi_dmul>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4620      	mov	r0, r4
 8004d72:	4629      	mov	r1, r5
 8004d74:	f7fb fa2e 	bl	80001d4 <__adddf3>
 8004d78:	4604      	mov	r4, r0
 8004d7a:	460d      	mov	r5, r1
 8004d7c:	ec45 4b10 	vmov	d0, r4, r5
 8004d80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d84:	2d00      	cmp	r5, #0
 8004d86:	ee10 0a10 	vmov	r0, s0
 8004d8a:	4621      	mov	r1, r4
 8004d8c:	dc0f      	bgt.n	8004dae <__ieee754_sqrt+0x62>
 8004d8e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004d92:	4330      	orrs	r0, r6
 8004d94:	d0f2      	beq.n	8004d7c <__ieee754_sqrt+0x30>
 8004d96:	b155      	cbz	r5, 8004dae <__ieee754_sqrt+0x62>
 8004d98:	ee10 2a10 	vmov	r2, s0
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	4629      	mov	r1, r5
 8004da0:	f7fb fa16 	bl	80001d0 <__aeabi_dsub>
 8004da4:	4602      	mov	r2, r0
 8004da6:	460b      	mov	r3, r1
 8004da8:	f7fb fcf4 	bl	8000794 <__aeabi_ddiv>
 8004dac:	e7e4      	b.n	8004d78 <__ieee754_sqrt+0x2c>
 8004dae:	151b      	asrs	r3, r3, #20
 8004db0:	d073      	beq.n	8004e9a <__ieee754_sqrt+0x14e>
 8004db2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004db6:	07dd      	lsls	r5, r3, #31
 8004db8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8004dbc:	bf48      	it	mi
 8004dbe:	0fc8      	lsrmi	r0, r1, #31
 8004dc0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004dc4:	bf44      	itt	mi
 8004dc6:	0049      	lslmi	r1, r1, #1
 8004dc8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8004dcc:	2500      	movs	r5, #0
 8004dce:	1058      	asrs	r0, r3, #1
 8004dd0:	0fcb      	lsrs	r3, r1, #31
 8004dd2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8004dd6:	0049      	lsls	r1, r1, #1
 8004dd8:	2316      	movs	r3, #22
 8004dda:	462c      	mov	r4, r5
 8004ddc:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8004de0:	19a7      	adds	r7, r4, r6
 8004de2:	4297      	cmp	r7, r2
 8004de4:	bfde      	ittt	le
 8004de6:	19bc      	addle	r4, r7, r6
 8004de8:	1bd2      	suble	r2, r2, r7
 8004dea:	19ad      	addle	r5, r5, r6
 8004dec:	0fcf      	lsrs	r7, r1, #31
 8004dee:	3b01      	subs	r3, #1
 8004df0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8004df4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004df8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004dfc:	d1f0      	bne.n	8004de0 <__ieee754_sqrt+0x94>
 8004dfe:	f04f 0c20 	mov.w	ip, #32
 8004e02:	469e      	mov	lr, r3
 8004e04:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8004e08:	42a2      	cmp	r2, r4
 8004e0a:	eb06 070e 	add.w	r7, r6, lr
 8004e0e:	dc02      	bgt.n	8004e16 <__ieee754_sqrt+0xca>
 8004e10:	d112      	bne.n	8004e38 <__ieee754_sqrt+0xec>
 8004e12:	428f      	cmp	r7, r1
 8004e14:	d810      	bhi.n	8004e38 <__ieee754_sqrt+0xec>
 8004e16:	2f00      	cmp	r7, #0
 8004e18:	eb07 0e06 	add.w	lr, r7, r6
 8004e1c:	da42      	bge.n	8004ea4 <__ieee754_sqrt+0x158>
 8004e1e:	f1be 0f00 	cmp.w	lr, #0
 8004e22:	db3f      	blt.n	8004ea4 <__ieee754_sqrt+0x158>
 8004e24:	f104 0801 	add.w	r8, r4, #1
 8004e28:	1b12      	subs	r2, r2, r4
 8004e2a:	428f      	cmp	r7, r1
 8004e2c:	bf88      	it	hi
 8004e2e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8004e32:	1bc9      	subs	r1, r1, r7
 8004e34:	4433      	add	r3, r6
 8004e36:	4644      	mov	r4, r8
 8004e38:	0052      	lsls	r2, r2, #1
 8004e3a:	f1bc 0c01 	subs.w	ip, ip, #1
 8004e3e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8004e42:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8004e46:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8004e4a:	d1dd      	bne.n	8004e08 <__ieee754_sqrt+0xbc>
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	d006      	beq.n	8004e5e <__ieee754_sqrt+0x112>
 8004e50:	1c5c      	adds	r4, r3, #1
 8004e52:	bf13      	iteet	ne
 8004e54:	3301      	addne	r3, #1
 8004e56:	3501      	addeq	r5, #1
 8004e58:	4663      	moveq	r3, ip
 8004e5a:	f023 0301 	bicne.w	r3, r3, #1
 8004e5e:	106a      	asrs	r2, r5, #1
 8004e60:	085b      	lsrs	r3, r3, #1
 8004e62:	07e9      	lsls	r1, r5, #31
 8004e64:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8004e68:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8004e6c:	bf48      	it	mi
 8004e6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8004e72:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8004e76:	461c      	mov	r4, r3
 8004e78:	e780      	b.n	8004d7c <__ieee754_sqrt+0x30>
 8004e7a:	0aca      	lsrs	r2, r1, #11
 8004e7c:	3815      	subs	r0, #21
 8004e7e:	0549      	lsls	r1, r1, #21
 8004e80:	2a00      	cmp	r2, #0
 8004e82:	d0fa      	beq.n	8004e7a <__ieee754_sqrt+0x12e>
 8004e84:	02d6      	lsls	r6, r2, #11
 8004e86:	d50a      	bpl.n	8004e9e <__ieee754_sqrt+0x152>
 8004e88:	f1c3 0420 	rsb	r4, r3, #32
 8004e8c:	fa21 f404 	lsr.w	r4, r1, r4
 8004e90:	1e5d      	subs	r5, r3, #1
 8004e92:	4099      	lsls	r1, r3
 8004e94:	4322      	orrs	r2, r4
 8004e96:	1b43      	subs	r3, r0, r5
 8004e98:	e78b      	b.n	8004db2 <__ieee754_sqrt+0x66>
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	e7f0      	b.n	8004e80 <__ieee754_sqrt+0x134>
 8004e9e:	0052      	lsls	r2, r2, #1
 8004ea0:	3301      	adds	r3, #1
 8004ea2:	e7ef      	b.n	8004e84 <__ieee754_sqrt+0x138>
 8004ea4:	46a0      	mov	r8, r4
 8004ea6:	e7bf      	b.n	8004e28 <__ieee754_sqrt+0xdc>
 8004ea8:	7ff00000 	.word	0x7ff00000
 8004eac:	00000000 	.word	0x00000000

08004eb0 <__kernel_cos>:
 8004eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eb4:	ec59 8b10 	vmov	r8, r9, d0
 8004eb8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8004ebc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8004ec0:	ed2d 8b02 	vpush	{d8}
 8004ec4:	eeb0 8a41 	vmov.f32	s16, s2
 8004ec8:	eef0 8a61 	vmov.f32	s17, s3
 8004ecc:	da07      	bge.n	8004ede <__kernel_cos+0x2e>
 8004ece:	ee10 0a10 	vmov	r0, s0
 8004ed2:	4649      	mov	r1, r9
 8004ed4:	f7fb fde4 	bl	8000aa0 <__aeabi_d2iz>
 8004ed8:	2800      	cmp	r0, #0
 8004eda:	f000 8089 	beq.w	8004ff0 <__kernel_cos+0x140>
 8004ede:	4642      	mov	r2, r8
 8004ee0:	464b      	mov	r3, r9
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	f7fb fb2b 	bl	8000540 <__aeabi_dmul>
 8004eea:	2200      	movs	r2, #0
 8004eec:	4b4e      	ldr	r3, [pc, #312]	; (8005028 <__kernel_cos+0x178>)
 8004eee:	4604      	mov	r4, r0
 8004ef0:	460d      	mov	r5, r1
 8004ef2:	f7fb fb25 	bl	8000540 <__aeabi_dmul>
 8004ef6:	a340      	add	r3, pc, #256	; (adr r3, 8004ff8 <__kernel_cos+0x148>)
 8004ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efc:	4682      	mov	sl, r0
 8004efe:	468b      	mov	fp, r1
 8004f00:	4620      	mov	r0, r4
 8004f02:	4629      	mov	r1, r5
 8004f04:	f7fb fb1c 	bl	8000540 <__aeabi_dmul>
 8004f08:	a33d      	add	r3, pc, #244	; (adr r3, 8005000 <__kernel_cos+0x150>)
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f7fb f961 	bl	80001d4 <__adddf3>
 8004f12:	4622      	mov	r2, r4
 8004f14:	462b      	mov	r3, r5
 8004f16:	f7fb fb13 	bl	8000540 <__aeabi_dmul>
 8004f1a:	a33b      	add	r3, pc, #236	; (adr r3, 8005008 <__kernel_cos+0x158>)
 8004f1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f20:	f7fb f956 	bl	80001d0 <__aeabi_dsub>
 8004f24:	4622      	mov	r2, r4
 8004f26:	462b      	mov	r3, r5
 8004f28:	f7fb fb0a 	bl	8000540 <__aeabi_dmul>
 8004f2c:	a338      	add	r3, pc, #224	; (adr r3, 8005010 <__kernel_cos+0x160>)
 8004f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f32:	f7fb f94f 	bl	80001d4 <__adddf3>
 8004f36:	4622      	mov	r2, r4
 8004f38:	462b      	mov	r3, r5
 8004f3a:	f7fb fb01 	bl	8000540 <__aeabi_dmul>
 8004f3e:	a336      	add	r3, pc, #216	; (adr r3, 8005018 <__kernel_cos+0x168>)
 8004f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f44:	f7fb f944 	bl	80001d0 <__aeabi_dsub>
 8004f48:	4622      	mov	r2, r4
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	f7fb faf8 	bl	8000540 <__aeabi_dmul>
 8004f50:	a333      	add	r3, pc, #204	; (adr r3, 8005020 <__kernel_cos+0x170>)
 8004f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f56:	f7fb f93d 	bl	80001d4 <__adddf3>
 8004f5a:	4622      	mov	r2, r4
 8004f5c:	462b      	mov	r3, r5
 8004f5e:	f7fb faef 	bl	8000540 <__aeabi_dmul>
 8004f62:	4622      	mov	r2, r4
 8004f64:	462b      	mov	r3, r5
 8004f66:	f7fb faeb 	bl	8000540 <__aeabi_dmul>
 8004f6a:	ec53 2b18 	vmov	r2, r3, d8
 8004f6e:	4604      	mov	r4, r0
 8004f70:	460d      	mov	r5, r1
 8004f72:	4640      	mov	r0, r8
 8004f74:	4649      	mov	r1, r9
 8004f76:	f7fb fae3 	bl	8000540 <__aeabi_dmul>
 8004f7a:	460b      	mov	r3, r1
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	4629      	mov	r1, r5
 8004f80:	4620      	mov	r0, r4
 8004f82:	f7fb f925 	bl	80001d0 <__aeabi_dsub>
 8004f86:	4b29      	ldr	r3, [pc, #164]	; (800502c <__kernel_cos+0x17c>)
 8004f88:	429e      	cmp	r6, r3
 8004f8a:	4680      	mov	r8, r0
 8004f8c:	4689      	mov	r9, r1
 8004f8e:	dc11      	bgt.n	8004fb4 <__kernel_cos+0x104>
 8004f90:	4602      	mov	r2, r0
 8004f92:	460b      	mov	r3, r1
 8004f94:	4650      	mov	r0, sl
 8004f96:	4659      	mov	r1, fp
 8004f98:	f7fb f91a 	bl	80001d0 <__aeabi_dsub>
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	4924      	ldr	r1, [pc, #144]	; (8005030 <__kernel_cos+0x180>)
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	f7fb f914 	bl	80001d0 <__aeabi_dsub>
 8004fa8:	ecbd 8b02 	vpop	{d8}
 8004fac:	ec41 0b10 	vmov	d0, r0, r1
 8004fb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fb4:	4b1f      	ldr	r3, [pc, #124]	; (8005034 <__kernel_cos+0x184>)
 8004fb6:	491e      	ldr	r1, [pc, #120]	; (8005030 <__kernel_cos+0x180>)
 8004fb8:	429e      	cmp	r6, r3
 8004fba:	bfcc      	ite	gt
 8004fbc:	4d1e      	ldrgt	r5, [pc, #120]	; (8005038 <__kernel_cos+0x188>)
 8004fbe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004fc2:	2400      	movs	r4, #0
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	462b      	mov	r3, r5
 8004fc8:	2000      	movs	r0, #0
 8004fca:	f7fb f901 	bl	80001d0 <__aeabi_dsub>
 8004fce:	4622      	mov	r2, r4
 8004fd0:	4606      	mov	r6, r0
 8004fd2:	460f      	mov	r7, r1
 8004fd4:	462b      	mov	r3, r5
 8004fd6:	4650      	mov	r0, sl
 8004fd8:	4659      	mov	r1, fp
 8004fda:	f7fb f8f9 	bl	80001d0 <__aeabi_dsub>
 8004fde:	4642      	mov	r2, r8
 8004fe0:	464b      	mov	r3, r9
 8004fe2:	f7fb f8f5 	bl	80001d0 <__aeabi_dsub>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	4630      	mov	r0, r6
 8004fec:	4639      	mov	r1, r7
 8004fee:	e7d9      	b.n	8004fa4 <__kernel_cos+0xf4>
 8004ff0:	2000      	movs	r0, #0
 8004ff2:	490f      	ldr	r1, [pc, #60]	; (8005030 <__kernel_cos+0x180>)
 8004ff4:	e7d8      	b.n	8004fa8 <__kernel_cos+0xf8>
 8004ff6:	bf00      	nop
 8004ff8:	be8838d4 	.word	0xbe8838d4
 8004ffc:	bda8fae9 	.word	0xbda8fae9
 8005000:	bdb4b1c4 	.word	0xbdb4b1c4
 8005004:	3e21ee9e 	.word	0x3e21ee9e
 8005008:	809c52ad 	.word	0x809c52ad
 800500c:	3e927e4f 	.word	0x3e927e4f
 8005010:	19cb1590 	.word	0x19cb1590
 8005014:	3efa01a0 	.word	0x3efa01a0
 8005018:	16c15177 	.word	0x16c15177
 800501c:	3f56c16c 	.word	0x3f56c16c
 8005020:	5555554c 	.word	0x5555554c
 8005024:	3fa55555 	.word	0x3fa55555
 8005028:	3fe00000 	.word	0x3fe00000
 800502c:	3fd33332 	.word	0x3fd33332
 8005030:	3ff00000 	.word	0x3ff00000
 8005034:	3fe90000 	.word	0x3fe90000
 8005038:	3fd20000 	.word	0x3fd20000
 800503c:	00000000 	.word	0x00000000

08005040 <__kernel_rem_pio2>:
 8005040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005044:	ed2d 8b02 	vpush	{d8}
 8005048:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800504c:	1ed4      	subs	r4, r2, #3
 800504e:	9308      	str	r3, [sp, #32]
 8005050:	9101      	str	r1, [sp, #4]
 8005052:	4bc5      	ldr	r3, [pc, #788]	; (8005368 <__kernel_rem_pio2+0x328>)
 8005054:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005056:	9009      	str	r0, [sp, #36]	; 0x24
 8005058:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800505c:	9304      	str	r3, [sp, #16]
 800505e:	9b08      	ldr	r3, [sp, #32]
 8005060:	3b01      	subs	r3, #1
 8005062:	9307      	str	r3, [sp, #28]
 8005064:	2318      	movs	r3, #24
 8005066:	fb94 f4f3 	sdiv	r4, r4, r3
 800506a:	f06f 0317 	mvn.w	r3, #23
 800506e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005072:	fb04 3303 	mla	r3, r4, r3, r3
 8005076:	eb03 0a02 	add.w	sl, r3, r2
 800507a:	9b04      	ldr	r3, [sp, #16]
 800507c:	9a07      	ldr	r2, [sp, #28]
 800507e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005358 <__kernel_rem_pio2+0x318>
 8005082:	eb03 0802 	add.w	r8, r3, r2
 8005086:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005088:	1aa7      	subs	r7, r4, r2
 800508a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800508e:	ae22      	add	r6, sp, #136	; 0x88
 8005090:	2500      	movs	r5, #0
 8005092:	4545      	cmp	r5, r8
 8005094:	dd13      	ble.n	80050be <__kernel_rem_pio2+0x7e>
 8005096:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005358 <__kernel_rem_pio2+0x318>
 800509a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800509e:	2600      	movs	r6, #0
 80050a0:	9b04      	ldr	r3, [sp, #16]
 80050a2:	429e      	cmp	r6, r3
 80050a4:	dc32      	bgt.n	800510c <__kernel_rem_pio2+0xcc>
 80050a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050a8:	9302      	str	r3, [sp, #8]
 80050aa:	9b08      	ldr	r3, [sp, #32]
 80050ac:	199d      	adds	r5, r3, r6
 80050ae:	ab22      	add	r3, sp, #136	; 0x88
 80050b0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80050b4:	9306      	str	r3, [sp, #24]
 80050b6:	ec59 8b18 	vmov	r8, r9, d8
 80050ba:	2700      	movs	r7, #0
 80050bc:	e01f      	b.n	80050fe <__kernel_rem_pio2+0xbe>
 80050be:	42ef      	cmn	r7, r5
 80050c0:	d407      	bmi.n	80050d2 <__kernel_rem_pio2+0x92>
 80050c2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80050c6:	f7fb f9d1 	bl	800046c <__aeabi_i2d>
 80050ca:	e8e6 0102 	strd	r0, r1, [r6], #8
 80050ce:	3501      	adds	r5, #1
 80050d0:	e7df      	b.n	8005092 <__kernel_rem_pio2+0x52>
 80050d2:	ec51 0b18 	vmov	r0, r1, d8
 80050d6:	e7f8      	b.n	80050ca <__kernel_rem_pio2+0x8a>
 80050d8:	9906      	ldr	r1, [sp, #24]
 80050da:	9d02      	ldr	r5, [sp, #8]
 80050dc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80050e0:	9106      	str	r1, [sp, #24]
 80050e2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80050e6:	9502      	str	r5, [sp, #8]
 80050e8:	f7fb fa2a 	bl	8000540 <__aeabi_dmul>
 80050ec:	4602      	mov	r2, r0
 80050ee:	460b      	mov	r3, r1
 80050f0:	4640      	mov	r0, r8
 80050f2:	4649      	mov	r1, r9
 80050f4:	f7fb f86e 	bl	80001d4 <__adddf3>
 80050f8:	3701      	adds	r7, #1
 80050fa:	4680      	mov	r8, r0
 80050fc:	4689      	mov	r9, r1
 80050fe:	9b07      	ldr	r3, [sp, #28]
 8005100:	429f      	cmp	r7, r3
 8005102:	dde9      	ble.n	80050d8 <__kernel_rem_pio2+0x98>
 8005104:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005108:	3601      	adds	r6, #1
 800510a:	e7c9      	b.n	80050a0 <__kernel_rem_pio2+0x60>
 800510c:	9b04      	ldr	r3, [sp, #16]
 800510e:	aa0e      	add	r2, sp, #56	; 0x38
 8005110:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005114:	930c      	str	r3, [sp, #48]	; 0x30
 8005116:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005118:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800511c:	9c04      	ldr	r4, [sp, #16]
 800511e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005120:	ab9a      	add	r3, sp, #616	; 0x268
 8005122:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005126:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800512a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800512e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005132:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005136:	ab9a      	add	r3, sp, #616	; 0x268
 8005138:	445b      	add	r3, fp
 800513a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800513e:	2500      	movs	r5, #0
 8005140:	1b63      	subs	r3, r4, r5
 8005142:	2b00      	cmp	r3, #0
 8005144:	dc78      	bgt.n	8005238 <__kernel_rem_pio2+0x1f8>
 8005146:	4650      	mov	r0, sl
 8005148:	ec49 8b10 	vmov	d0, r8, r9
 800514c:	f000 fc98 	bl	8005a80 <scalbn>
 8005150:	ec57 6b10 	vmov	r6, r7, d0
 8005154:	2200      	movs	r2, #0
 8005156:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800515a:	ee10 0a10 	vmov	r0, s0
 800515e:	4639      	mov	r1, r7
 8005160:	f7fb f9ee 	bl	8000540 <__aeabi_dmul>
 8005164:	ec41 0b10 	vmov	d0, r0, r1
 8005168:	f000 fb76 	bl	8005858 <floor>
 800516c:	2200      	movs	r2, #0
 800516e:	ec51 0b10 	vmov	r0, r1, d0
 8005172:	4b7e      	ldr	r3, [pc, #504]	; (800536c <__kernel_rem_pio2+0x32c>)
 8005174:	f7fb f9e4 	bl	8000540 <__aeabi_dmul>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4630      	mov	r0, r6
 800517e:	4639      	mov	r1, r7
 8005180:	f7fb f826 	bl	80001d0 <__aeabi_dsub>
 8005184:	460f      	mov	r7, r1
 8005186:	4606      	mov	r6, r0
 8005188:	f7fb fc8a 	bl	8000aa0 <__aeabi_d2iz>
 800518c:	9006      	str	r0, [sp, #24]
 800518e:	f7fb f96d 	bl	800046c <__aeabi_i2d>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4630      	mov	r0, r6
 8005198:	4639      	mov	r1, r7
 800519a:	f7fb f819 	bl	80001d0 <__aeabi_dsub>
 800519e:	f1ba 0f00 	cmp.w	sl, #0
 80051a2:	4606      	mov	r6, r0
 80051a4:	460f      	mov	r7, r1
 80051a6:	dd6c      	ble.n	8005282 <__kernel_rem_pio2+0x242>
 80051a8:	1e62      	subs	r2, r4, #1
 80051aa:	ab0e      	add	r3, sp, #56	; 0x38
 80051ac:	f1ca 0118 	rsb	r1, sl, #24
 80051b0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80051b4:	9d06      	ldr	r5, [sp, #24]
 80051b6:	fa40 f301 	asr.w	r3, r0, r1
 80051ba:	441d      	add	r5, r3
 80051bc:	408b      	lsls	r3, r1
 80051be:	1ac0      	subs	r0, r0, r3
 80051c0:	ab0e      	add	r3, sp, #56	; 0x38
 80051c2:	9506      	str	r5, [sp, #24]
 80051c4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80051c8:	f1ca 0317 	rsb	r3, sl, #23
 80051cc:	fa40 f303 	asr.w	r3, r0, r3
 80051d0:	9302      	str	r3, [sp, #8]
 80051d2:	9b02      	ldr	r3, [sp, #8]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dd62      	ble.n	800529e <__kernel_rem_pio2+0x25e>
 80051d8:	9b06      	ldr	r3, [sp, #24]
 80051da:	2200      	movs	r2, #0
 80051dc:	3301      	adds	r3, #1
 80051de:	9306      	str	r3, [sp, #24]
 80051e0:	4615      	mov	r5, r2
 80051e2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80051e6:	4294      	cmp	r4, r2
 80051e8:	f300 8095 	bgt.w	8005316 <__kernel_rem_pio2+0x2d6>
 80051ec:	f1ba 0f00 	cmp.w	sl, #0
 80051f0:	dd07      	ble.n	8005202 <__kernel_rem_pio2+0x1c2>
 80051f2:	f1ba 0f01 	cmp.w	sl, #1
 80051f6:	f000 80a2 	beq.w	800533e <__kernel_rem_pio2+0x2fe>
 80051fa:	f1ba 0f02 	cmp.w	sl, #2
 80051fe:	f000 80c1 	beq.w	8005384 <__kernel_rem_pio2+0x344>
 8005202:	9b02      	ldr	r3, [sp, #8]
 8005204:	2b02      	cmp	r3, #2
 8005206:	d14a      	bne.n	800529e <__kernel_rem_pio2+0x25e>
 8005208:	4632      	mov	r2, r6
 800520a:	463b      	mov	r3, r7
 800520c:	2000      	movs	r0, #0
 800520e:	4958      	ldr	r1, [pc, #352]	; (8005370 <__kernel_rem_pio2+0x330>)
 8005210:	f7fa ffde 	bl	80001d0 <__aeabi_dsub>
 8005214:	4606      	mov	r6, r0
 8005216:	460f      	mov	r7, r1
 8005218:	2d00      	cmp	r5, #0
 800521a:	d040      	beq.n	800529e <__kernel_rem_pio2+0x25e>
 800521c:	4650      	mov	r0, sl
 800521e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005360 <__kernel_rem_pio2+0x320>
 8005222:	f000 fc2d 	bl	8005a80 <scalbn>
 8005226:	4630      	mov	r0, r6
 8005228:	4639      	mov	r1, r7
 800522a:	ec53 2b10 	vmov	r2, r3, d0
 800522e:	f7fa ffcf 	bl	80001d0 <__aeabi_dsub>
 8005232:	4606      	mov	r6, r0
 8005234:	460f      	mov	r7, r1
 8005236:	e032      	b.n	800529e <__kernel_rem_pio2+0x25e>
 8005238:	2200      	movs	r2, #0
 800523a:	4b4e      	ldr	r3, [pc, #312]	; (8005374 <__kernel_rem_pio2+0x334>)
 800523c:	4640      	mov	r0, r8
 800523e:	4649      	mov	r1, r9
 8005240:	f7fb f97e 	bl	8000540 <__aeabi_dmul>
 8005244:	f7fb fc2c 	bl	8000aa0 <__aeabi_d2iz>
 8005248:	f7fb f910 	bl	800046c <__aeabi_i2d>
 800524c:	2200      	movs	r2, #0
 800524e:	4b4a      	ldr	r3, [pc, #296]	; (8005378 <__kernel_rem_pio2+0x338>)
 8005250:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005254:	f7fb f974 	bl	8000540 <__aeabi_dmul>
 8005258:	4602      	mov	r2, r0
 800525a:	460b      	mov	r3, r1
 800525c:	4640      	mov	r0, r8
 800525e:	4649      	mov	r1, r9
 8005260:	f7fa ffb6 	bl	80001d0 <__aeabi_dsub>
 8005264:	f7fb fc1c 	bl	8000aa0 <__aeabi_d2iz>
 8005268:	ab0e      	add	r3, sp, #56	; 0x38
 800526a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800526e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005272:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005276:	f7fa ffad 	bl	80001d4 <__adddf3>
 800527a:	3501      	adds	r5, #1
 800527c:	4680      	mov	r8, r0
 800527e:	4689      	mov	r9, r1
 8005280:	e75e      	b.n	8005140 <__kernel_rem_pio2+0x100>
 8005282:	d105      	bne.n	8005290 <__kernel_rem_pio2+0x250>
 8005284:	1e63      	subs	r3, r4, #1
 8005286:	aa0e      	add	r2, sp, #56	; 0x38
 8005288:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800528c:	15c3      	asrs	r3, r0, #23
 800528e:	e79f      	b.n	80051d0 <__kernel_rem_pio2+0x190>
 8005290:	2200      	movs	r2, #0
 8005292:	4b3a      	ldr	r3, [pc, #232]	; (800537c <__kernel_rem_pio2+0x33c>)
 8005294:	f7fb fbda 	bl	8000a4c <__aeabi_dcmpge>
 8005298:	2800      	cmp	r0, #0
 800529a:	d139      	bne.n	8005310 <__kernel_rem_pio2+0x2d0>
 800529c:	9002      	str	r0, [sp, #8]
 800529e:	2200      	movs	r2, #0
 80052a0:	2300      	movs	r3, #0
 80052a2:	4630      	mov	r0, r6
 80052a4:	4639      	mov	r1, r7
 80052a6:	f7fb fbb3 	bl	8000a10 <__aeabi_dcmpeq>
 80052aa:	2800      	cmp	r0, #0
 80052ac:	f000 80c7 	beq.w	800543e <__kernel_rem_pio2+0x3fe>
 80052b0:	1e65      	subs	r5, r4, #1
 80052b2:	462b      	mov	r3, r5
 80052b4:	2200      	movs	r2, #0
 80052b6:	9904      	ldr	r1, [sp, #16]
 80052b8:	428b      	cmp	r3, r1
 80052ba:	da6a      	bge.n	8005392 <__kernel_rem_pio2+0x352>
 80052bc:	2a00      	cmp	r2, #0
 80052be:	f000 8088 	beq.w	80053d2 <__kernel_rem_pio2+0x392>
 80052c2:	ab0e      	add	r3, sp, #56	; 0x38
 80052c4:	f1aa 0a18 	sub.w	sl, sl, #24
 80052c8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80b4 	beq.w	800543a <__kernel_rem_pio2+0x3fa>
 80052d2:	4650      	mov	r0, sl
 80052d4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005360 <__kernel_rem_pio2+0x320>
 80052d8:	f000 fbd2 	bl	8005a80 <scalbn>
 80052dc:	00ec      	lsls	r4, r5, #3
 80052de:	ab72      	add	r3, sp, #456	; 0x1c8
 80052e0:	191e      	adds	r6, r3, r4
 80052e2:	ec59 8b10 	vmov	r8, r9, d0
 80052e6:	f106 0a08 	add.w	sl, r6, #8
 80052ea:	462f      	mov	r7, r5
 80052ec:	2f00      	cmp	r7, #0
 80052ee:	f280 80df 	bge.w	80054b0 <__kernel_rem_pio2+0x470>
 80052f2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005358 <__kernel_rem_pio2+0x318>
 80052f6:	f04f 0a00 	mov.w	sl, #0
 80052fa:	eba5 030a 	sub.w	r3, r5, sl
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f2c0 810a 	blt.w	8005518 <__kernel_rem_pio2+0x4d8>
 8005304:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005380 <__kernel_rem_pio2+0x340>
 8005308:	ec59 8b18 	vmov	r8, r9, d8
 800530c:	2700      	movs	r7, #0
 800530e:	e0f5      	b.n	80054fc <__kernel_rem_pio2+0x4bc>
 8005310:	2302      	movs	r3, #2
 8005312:	9302      	str	r3, [sp, #8]
 8005314:	e760      	b.n	80051d8 <__kernel_rem_pio2+0x198>
 8005316:	ab0e      	add	r3, sp, #56	; 0x38
 8005318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531c:	b94d      	cbnz	r5, 8005332 <__kernel_rem_pio2+0x2f2>
 800531e:	b12b      	cbz	r3, 800532c <__kernel_rem_pio2+0x2ec>
 8005320:	a80e      	add	r0, sp, #56	; 0x38
 8005322:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005326:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800532a:	2301      	movs	r3, #1
 800532c:	3201      	adds	r2, #1
 800532e:	461d      	mov	r5, r3
 8005330:	e759      	b.n	80051e6 <__kernel_rem_pio2+0x1a6>
 8005332:	a80e      	add	r0, sp, #56	; 0x38
 8005334:	1acb      	subs	r3, r1, r3
 8005336:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800533a:	462b      	mov	r3, r5
 800533c:	e7f6      	b.n	800532c <__kernel_rem_pio2+0x2ec>
 800533e:	1e62      	subs	r2, r4, #1
 8005340:	ab0e      	add	r3, sp, #56	; 0x38
 8005342:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005346:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800534a:	a90e      	add	r1, sp, #56	; 0x38
 800534c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005350:	e757      	b.n	8005202 <__kernel_rem_pio2+0x1c2>
 8005352:	bf00      	nop
 8005354:	f3af 8000 	nop.w
	...
 8005364:	3ff00000 	.word	0x3ff00000
 8005368:	08005e98 	.word	0x08005e98
 800536c:	40200000 	.word	0x40200000
 8005370:	3ff00000 	.word	0x3ff00000
 8005374:	3e700000 	.word	0x3e700000
 8005378:	41700000 	.word	0x41700000
 800537c:	3fe00000 	.word	0x3fe00000
 8005380:	08005e58 	.word	0x08005e58
 8005384:	1e62      	subs	r2, r4, #1
 8005386:	ab0e      	add	r3, sp, #56	; 0x38
 8005388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800538c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005390:	e7db      	b.n	800534a <__kernel_rem_pio2+0x30a>
 8005392:	a90e      	add	r1, sp, #56	; 0x38
 8005394:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005398:	3b01      	subs	r3, #1
 800539a:	430a      	orrs	r2, r1
 800539c:	e78b      	b.n	80052b6 <__kernel_rem_pio2+0x276>
 800539e:	3301      	adds	r3, #1
 80053a0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80053a4:	2900      	cmp	r1, #0
 80053a6:	d0fa      	beq.n	800539e <__kernel_rem_pio2+0x35e>
 80053a8:	9a08      	ldr	r2, [sp, #32]
 80053aa:	4422      	add	r2, r4
 80053ac:	00d2      	lsls	r2, r2, #3
 80053ae:	a922      	add	r1, sp, #136	; 0x88
 80053b0:	18e3      	adds	r3, r4, r3
 80053b2:	9206      	str	r2, [sp, #24]
 80053b4:	440a      	add	r2, r1
 80053b6:	9302      	str	r3, [sp, #8]
 80053b8:	f10b 0108 	add.w	r1, fp, #8
 80053bc:	f102 0308 	add.w	r3, r2, #8
 80053c0:	1c66      	adds	r6, r4, #1
 80053c2:	910a      	str	r1, [sp, #40]	; 0x28
 80053c4:	2500      	movs	r5, #0
 80053c6:	930d      	str	r3, [sp, #52]	; 0x34
 80053c8:	9b02      	ldr	r3, [sp, #8]
 80053ca:	42b3      	cmp	r3, r6
 80053cc:	da04      	bge.n	80053d8 <__kernel_rem_pio2+0x398>
 80053ce:	461c      	mov	r4, r3
 80053d0:	e6a6      	b.n	8005120 <__kernel_rem_pio2+0xe0>
 80053d2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053d4:	2301      	movs	r3, #1
 80053d6:	e7e3      	b.n	80053a0 <__kernel_rem_pio2+0x360>
 80053d8:	9b06      	ldr	r3, [sp, #24]
 80053da:	18ef      	adds	r7, r5, r3
 80053dc:	ab22      	add	r3, sp, #136	; 0x88
 80053de:	441f      	add	r7, r3
 80053e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053e2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80053e6:	f7fb f841 	bl	800046c <__aeabi_i2d>
 80053ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053ec:	461c      	mov	r4, r3
 80053ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80053f0:	e9c7 0100 	strd	r0, r1, [r7]
 80053f4:	eb03 0b05 	add.w	fp, r3, r5
 80053f8:	2700      	movs	r7, #0
 80053fa:	f04f 0800 	mov.w	r8, #0
 80053fe:	f04f 0900 	mov.w	r9, #0
 8005402:	9b07      	ldr	r3, [sp, #28]
 8005404:	429f      	cmp	r7, r3
 8005406:	dd08      	ble.n	800541a <__kernel_rem_pio2+0x3da>
 8005408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800540a:	aa72      	add	r2, sp, #456	; 0x1c8
 800540c:	18eb      	adds	r3, r5, r3
 800540e:	4413      	add	r3, r2
 8005410:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005414:	3601      	adds	r6, #1
 8005416:	3508      	adds	r5, #8
 8005418:	e7d6      	b.n	80053c8 <__kernel_rem_pio2+0x388>
 800541a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800541e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005422:	f7fb f88d 	bl	8000540 <__aeabi_dmul>
 8005426:	4602      	mov	r2, r0
 8005428:	460b      	mov	r3, r1
 800542a:	4640      	mov	r0, r8
 800542c:	4649      	mov	r1, r9
 800542e:	f7fa fed1 	bl	80001d4 <__adddf3>
 8005432:	3701      	adds	r7, #1
 8005434:	4680      	mov	r8, r0
 8005436:	4689      	mov	r9, r1
 8005438:	e7e3      	b.n	8005402 <__kernel_rem_pio2+0x3c2>
 800543a:	3d01      	subs	r5, #1
 800543c:	e741      	b.n	80052c2 <__kernel_rem_pio2+0x282>
 800543e:	f1ca 0000 	rsb	r0, sl, #0
 8005442:	ec47 6b10 	vmov	d0, r6, r7
 8005446:	f000 fb1b 	bl	8005a80 <scalbn>
 800544a:	ec57 6b10 	vmov	r6, r7, d0
 800544e:	2200      	movs	r2, #0
 8005450:	4b99      	ldr	r3, [pc, #612]	; (80056b8 <__kernel_rem_pio2+0x678>)
 8005452:	ee10 0a10 	vmov	r0, s0
 8005456:	4639      	mov	r1, r7
 8005458:	f7fb faf8 	bl	8000a4c <__aeabi_dcmpge>
 800545c:	b1f8      	cbz	r0, 800549e <__kernel_rem_pio2+0x45e>
 800545e:	2200      	movs	r2, #0
 8005460:	4b96      	ldr	r3, [pc, #600]	; (80056bc <__kernel_rem_pio2+0x67c>)
 8005462:	4630      	mov	r0, r6
 8005464:	4639      	mov	r1, r7
 8005466:	f7fb f86b 	bl	8000540 <__aeabi_dmul>
 800546a:	f7fb fb19 	bl	8000aa0 <__aeabi_d2iz>
 800546e:	4680      	mov	r8, r0
 8005470:	f7fa fffc 	bl	800046c <__aeabi_i2d>
 8005474:	2200      	movs	r2, #0
 8005476:	4b90      	ldr	r3, [pc, #576]	; (80056b8 <__kernel_rem_pio2+0x678>)
 8005478:	f7fb f862 	bl	8000540 <__aeabi_dmul>
 800547c:	460b      	mov	r3, r1
 800547e:	4602      	mov	r2, r0
 8005480:	4639      	mov	r1, r7
 8005482:	4630      	mov	r0, r6
 8005484:	f7fa fea4 	bl	80001d0 <__aeabi_dsub>
 8005488:	f7fb fb0a 	bl	8000aa0 <__aeabi_d2iz>
 800548c:	1c65      	adds	r5, r4, #1
 800548e:	ab0e      	add	r3, sp, #56	; 0x38
 8005490:	f10a 0a18 	add.w	sl, sl, #24
 8005494:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005498:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800549c:	e719      	b.n	80052d2 <__kernel_rem_pio2+0x292>
 800549e:	4630      	mov	r0, r6
 80054a0:	4639      	mov	r1, r7
 80054a2:	f7fb fafd 	bl	8000aa0 <__aeabi_d2iz>
 80054a6:	ab0e      	add	r3, sp, #56	; 0x38
 80054a8:	4625      	mov	r5, r4
 80054aa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80054ae:	e710      	b.n	80052d2 <__kernel_rem_pio2+0x292>
 80054b0:	ab0e      	add	r3, sp, #56	; 0x38
 80054b2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80054b6:	f7fa ffd9 	bl	800046c <__aeabi_i2d>
 80054ba:	4642      	mov	r2, r8
 80054bc:	464b      	mov	r3, r9
 80054be:	f7fb f83f 	bl	8000540 <__aeabi_dmul>
 80054c2:	2200      	movs	r2, #0
 80054c4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80054c8:	4b7c      	ldr	r3, [pc, #496]	; (80056bc <__kernel_rem_pio2+0x67c>)
 80054ca:	4640      	mov	r0, r8
 80054cc:	4649      	mov	r1, r9
 80054ce:	f7fb f837 	bl	8000540 <__aeabi_dmul>
 80054d2:	3f01      	subs	r7, #1
 80054d4:	4680      	mov	r8, r0
 80054d6:	4689      	mov	r9, r1
 80054d8:	e708      	b.n	80052ec <__kernel_rem_pio2+0x2ac>
 80054da:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80054e6:	f7fb f82b 	bl	8000540 <__aeabi_dmul>
 80054ea:	4602      	mov	r2, r0
 80054ec:	460b      	mov	r3, r1
 80054ee:	4640      	mov	r0, r8
 80054f0:	4649      	mov	r1, r9
 80054f2:	f7fa fe6f 	bl	80001d4 <__adddf3>
 80054f6:	3701      	adds	r7, #1
 80054f8:	4680      	mov	r8, r0
 80054fa:	4689      	mov	r9, r1
 80054fc:	9b04      	ldr	r3, [sp, #16]
 80054fe:	429f      	cmp	r7, r3
 8005500:	dc01      	bgt.n	8005506 <__kernel_rem_pio2+0x4c6>
 8005502:	45ba      	cmp	sl, r7
 8005504:	dae9      	bge.n	80054da <__kernel_rem_pio2+0x49a>
 8005506:	ab4a      	add	r3, sp, #296	; 0x128
 8005508:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800550c:	e9c3 8900 	strd	r8, r9, [r3]
 8005510:	f10a 0a01 	add.w	sl, sl, #1
 8005514:	3e08      	subs	r6, #8
 8005516:	e6f0      	b.n	80052fa <__kernel_rem_pio2+0x2ba>
 8005518:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800551a:	2b03      	cmp	r3, #3
 800551c:	d85b      	bhi.n	80055d6 <__kernel_rem_pio2+0x596>
 800551e:	e8df f003 	tbb	[pc, r3]
 8005522:	264a      	.short	0x264a
 8005524:	0226      	.short	0x0226
 8005526:	ab9a      	add	r3, sp, #616	; 0x268
 8005528:	441c      	add	r4, r3
 800552a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800552e:	46a2      	mov	sl, r4
 8005530:	46ab      	mov	fp, r5
 8005532:	f1bb 0f00 	cmp.w	fp, #0
 8005536:	dc6c      	bgt.n	8005612 <__kernel_rem_pio2+0x5d2>
 8005538:	46a2      	mov	sl, r4
 800553a:	46ab      	mov	fp, r5
 800553c:	f1bb 0f01 	cmp.w	fp, #1
 8005540:	f300 8086 	bgt.w	8005650 <__kernel_rem_pio2+0x610>
 8005544:	2000      	movs	r0, #0
 8005546:	2100      	movs	r1, #0
 8005548:	2d01      	cmp	r5, #1
 800554a:	f300 80a0 	bgt.w	800568e <__kernel_rem_pio2+0x64e>
 800554e:	9b02      	ldr	r3, [sp, #8]
 8005550:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005554:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005558:	2b00      	cmp	r3, #0
 800555a:	f040 809e 	bne.w	800569a <__kernel_rem_pio2+0x65a>
 800555e:	9b01      	ldr	r3, [sp, #4]
 8005560:	e9c3 7800 	strd	r7, r8, [r3]
 8005564:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005568:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800556c:	e033      	b.n	80055d6 <__kernel_rem_pio2+0x596>
 800556e:	3408      	adds	r4, #8
 8005570:	ab4a      	add	r3, sp, #296	; 0x128
 8005572:	441c      	add	r4, r3
 8005574:	462e      	mov	r6, r5
 8005576:	2000      	movs	r0, #0
 8005578:	2100      	movs	r1, #0
 800557a:	2e00      	cmp	r6, #0
 800557c:	da3a      	bge.n	80055f4 <__kernel_rem_pio2+0x5b4>
 800557e:	9b02      	ldr	r3, [sp, #8]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d03d      	beq.n	8005600 <__kernel_rem_pio2+0x5c0>
 8005584:	4602      	mov	r2, r0
 8005586:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800558a:	9c01      	ldr	r4, [sp, #4]
 800558c:	e9c4 2300 	strd	r2, r3, [r4]
 8005590:	4602      	mov	r2, r0
 8005592:	460b      	mov	r3, r1
 8005594:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005598:	f7fa fe1a 	bl	80001d0 <__aeabi_dsub>
 800559c:	ae4c      	add	r6, sp, #304	; 0x130
 800559e:	2401      	movs	r4, #1
 80055a0:	42a5      	cmp	r5, r4
 80055a2:	da30      	bge.n	8005606 <__kernel_rem_pio2+0x5c6>
 80055a4:	9b02      	ldr	r3, [sp, #8]
 80055a6:	b113      	cbz	r3, 80055ae <__kernel_rem_pio2+0x56e>
 80055a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055ac:	4619      	mov	r1, r3
 80055ae:	9b01      	ldr	r3, [sp, #4]
 80055b0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80055b4:	e00f      	b.n	80055d6 <__kernel_rem_pio2+0x596>
 80055b6:	ab9a      	add	r3, sp, #616	; 0x268
 80055b8:	441c      	add	r4, r3
 80055ba:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80055be:	2000      	movs	r0, #0
 80055c0:	2100      	movs	r1, #0
 80055c2:	2d00      	cmp	r5, #0
 80055c4:	da10      	bge.n	80055e8 <__kernel_rem_pio2+0x5a8>
 80055c6:	9b02      	ldr	r3, [sp, #8]
 80055c8:	b113      	cbz	r3, 80055d0 <__kernel_rem_pio2+0x590>
 80055ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80055ce:	4619      	mov	r1, r3
 80055d0:	9b01      	ldr	r3, [sp, #4]
 80055d2:	e9c3 0100 	strd	r0, r1, [r3]
 80055d6:	9b06      	ldr	r3, [sp, #24]
 80055d8:	f003 0007 	and.w	r0, r3, #7
 80055dc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80055e0:	ecbd 8b02 	vpop	{d8}
 80055e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055e8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80055ec:	f7fa fdf2 	bl	80001d4 <__adddf3>
 80055f0:	3d01      	subs	r5, #1
 80055f2:	e7e6      	b.n	80055c2 <__kernel_rem_pio2+0x582>
 80055f4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80055f8:	f7fa fdec 	bl	80001d4 <__adddf3>
 80055fc:	3e01      	subs	r6, #1
 80055fe:	e7bc      	b.n	800557a <__kernel_rem_pio2+0x53a>
 8005600:	4602      	mov	r2, r0
 8005602:	460b      	mov	r3, r1
 8005604:	e7c1      	b.n	800558a <__kernel_rem_pio2+0x54a>
 8005606:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800560a:	f7fa fde3 	bl	80001d4 <__adddf3>
 800560e:	3401      	adds	r4, #1
 8005610:	e7c6      	b.n	80055a0 <__kernel_rem_pio2+0x560>
 8005612:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005616:	ed3a 7b02 	vldmdb	sl!, {d7}
 800561a:	4640      	mov	r0, r8
 800561c:	ec53 2b17 	vmov	r2, r3, d7
 8005620:	4649      	mov	r1, r9
 8005622:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005626:	f7fa fdd5 	bl	80001d4 <__adddf3>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4606      	mov	r6, r0
 8005630:	460f      	mov	r7, r1
 8005632:	4640      	mov	r0, r8
 8005634:	4649      	mov	r1, r9
 8005636:	f7fa fdcb 	bl	80001d0 <__aeabi_dsub>
 800563a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800563e:	f7fa fdc9 	bl	80001d4 <__adddf3>
 8005642:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005646:	e9ca 0100 	strd	r0, r1, [sl]
 800564a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800564e:	e770      	b.n	8005532 <__kernel_rem_pio2+0x4f2>
 8005650:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005654:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005658:	4630      	mov	r0, r6
 800565a:	ec53 2b17 	vmov	r2, r3, d7
 800565e:	4639      	mov	r1, r7
 8005660:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005664:	f7fa fdb6 	bl	80001d4 <__adddf3>
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	4680      	mov	r8, r0
 800566e:	4689      	mov	r9, r1
 8005670:	4630      	mov	r0, r6
 8005672:	4639      	mov	r1, r7
 8005674:	f7fa fdac 	bl	80001d0 <__aeabi_dsub>
 8005678:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800567c:	f7fa fdaa 	bl	80001d4 <__adddf3>
 8005680:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005684:	e9ca 0100 	strd	r0, r1, [sl]
 8005688:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800568c:	e756      	b.n	800553c <__kernel_rem_pio2+0x4fc>
 800568e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005692:	f7fa fd9f 	bl	80001d4 <__adddf3>
 8005696:	3d01      	subs	r5, #1
 8005698:	e756      	b.n	8005548 <__kernel_rem_pio2+0x508>
 800569a:	9b01      	ldr	r3, [sp, #4]
 800569c:	9a01      	ldr	r2, [sp, #4]
 800569e:	601f      	str	r7, [r3, #0]
 80056a0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80056a4:	605c      	str	r4, [r3, #4]
 80056a6:	609d      	str	r5, [r3, #8]
 80056a8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80056ac:	60d3      	str	r3, [r2, #12]
 80056ae:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80056b2:	6110      	str	r0, [r2, #16]
 80056b4:	6153      	str	r3, [r2, #20]
 80056b6:	e78e      	b.n	80055d6 <__kernel_rem_pio2+0x596>
 80056b8:	41700000 	.word	0x41700000
 80056bc:	3e700000 	.word	0x3e700000

080056c0 <__kernel_sin>:
 80056c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c4:	ec55 4b10 	vmov	r4, r5, d0
 80056c8:	b085      	sub	sp, #20
 80056ca:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80056ce:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80056d2:	ed8d 1b00 	vstr	d1, [sp]
 80056d6:	9002      	str	r0, [sp, #8]
 80056d8:	da06      	bge.n	80056e8 <__kernel_sin+0x28>
 80056da:	ee10 0a10 	vmov	r0, s0
 80056de:	4629      	mov	r1, r5
 80056e0:	f7fb f9de 	bl	8000aa0 <__aeabi_d2iz>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d051      	beq.n	800578c <__kernel_sin+0xcc>
 80056e8:	4622      	mov	r2, r4
 80056ea:	462b      	mov	r3, r5
 80056ec:	4620      	mov	r0, r4
 80056ee:	4629      	mov	r1, r5
 80056f0:	f7fa ff26 	bl	8000540 <__aeabi_dmul>
 80056f4:	4682      	mov	sl, r0
 80056f6:	468b      	mov	fp, r1
 80056f8:	4602      	mov	r2, r0
 80056fa:	460b      	mov	r3, r1
 80056fc:	4620      	mov	r0, r4
 80056fe:	4629      	mov	r1, r5
 8005700:	f7fa ff1e 	bl	8000540 <__aeabi_dmul>
 8005704:	a341      	add	r3, pc, #260	; (adr r3, 800580c <__kernel_sin+0x14c>)
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	4680      	mov	r8, r0
 800570c:	4689      	mov	r9, r1
 800570e:	4650      	mov	r0, sl
 8005710:	4659      	mov	r1, fp
 8005712:	f7fa ff15 	bl	8000540 <__aeabi_dmul>
 8005716:	a33f      	add	r3, pc, #252	; (adr r3, 8005814 <__kernel_sin+0x154>)
 8005718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571c:	f7fa fd58 	bl	80001d0 <__aeabi_dsub>
 8005720:	4652      	mov	r2, sl
 8005722:	465b      	mov	r3, fp
 8005724:	f7fa ff0c 	bl	8000540 <__aeabi_dmul>
 8005728:	a33c      	add	r3, pc, #240	; (adr r3, 800581c <__kernel_sin+0x15c>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa fd51 	bl	80001d4 <__adddf3>
 8005732:	4652      	mov	r2, sl
 8005734:	465b      	mov	r3, fp
 8005736:	f7fa ff03 	bl	8000540 <__aeabi_dmul>
 800573a:	a33a      	add	r3, pc, #232	; (adr r3, 8005824 <__kernel_sin+0x164>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa fd46 	bl	80001d0 <__aeabi_dsub>
 8005744:	4652      	mov	r2, sl
 8005746:	465b      	mov	r3, fp
 8005748:	f7fa fefa 	bl	8000540 <__aeabi_dmul>
 800574c:	a337      	add	r3, pc, #220	; (adr r3, 800582c <__kernel_sin+0x16c>)
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa fd3f 	bl	80001d4 <__adddf3>
 8005756:	9b02      	ldr	r3, [sp, #8]
 8005758:	4606      	mov	r6, r0
 800575a:	460f      	mov	r7, r1
 800575c:	b9db      	cbnz	r3, 8005796 <__kernel_sin+0xd6>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4650      	mov	r0, sl
 8005764:	4659      	mov	r1, fp
 8005766:	f7fa feeb 	bl	8000540 <__aeabi_dmul>
 800576a:	a325      	add	r3, pc, #148	; (adr r3, 8005800 <__kernel_sin+0x140>)
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	f7fa fd2e 	bl	80001d0 <__aeabi_dsub>
 8005774:	4642      	mov	r2, r8
 8005776:	464b      	mov	r3, r9
 8005778:	f7fa fee2 	bl	8000540 <__aeabi_dmul>
 800577c:	4602      	mov	r2, r0
 800577e:	460b      	mov	r3, r1
 8005780:	4620      	mov	r0, r4
 8005782:	4629      	mov	r1, r5
 8005784:	f7fa fd26 	bl	80001d4 <__adddf3>
 8005788:	4604      	mov	r4, r0
 800578a:	460d      	mov	r5, r1
 800578c:	ec45 4b10 	vmov	d0, r4, r5
 8005790:	b005      	add	sp, #20
 8005792:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005796:	2200      	movs	r2, #0
 8005798:	4b1b      	ldr	r3, [pc, #108]	; (8005808 <__kernel_sin+0x148>)
 800579a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800579e:	f7fa fecf 	bl	8000540 <__aeabi_dmul>
 80057a2:	4632      	mov	r2, r6
 80057a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80057a8:	463b      	mov	r3, r7
 80057aa:	4640      	mov	r0, r8
 80057ac:	4649      	mov	r1, r9
 80057ae:	f7fa fec7 	bl	8000540 <__aeabi_dmul>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80057ba:	f7fa fd09 	bl	80001d0 <__aeabi_dsub>
 80057be:	4652      	mov	r2, sl
 80057c0:	465b      	mov	r3, fp
 80057c2:	f7fa febd 	bl	8000540 <__aeabi_dmul>
 80057c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057ca:	f7fa fd01 	bl	80001d0 <__aeabi_dsub>
 80057ce:	a30c      	add	r3, pc, #48	; (adr r3, 8005800 <__kernel_sin+0x140>)
 80057d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d4:	4606      	mov	r6, r0
 80057d6:	460f      	mov	r7, r1
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f7fa feb0 	bl	8000540 <__aeabi_dmul>
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4630      	mov	r0, r6
 80057e6:	4639      	mov	r1, r7
 80057e8:	f7fa fcf4 	bl	80001d4 <__adddf3>
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4620      	mov	r0, r4
 80057f2:	4629      	mov	r1, r5
 80057f4:	f7fa fcec 	bl	80001d0 <__aeabi_dsub>
 80057f8:	e7c6      	b.n	8005788 <__kernel_sin+0xc8>
 80057fa:	bf00      	nop
 80057fc:	f3af 8000 	nop.w
 8005800:	55555549 	.word	0x55555549
 8005804:	3fc55555 	.word	0x3fc55555
 8005808:	3fe00000 	.word	0x3fe00000
 800580c:	5acfd57c 	.word	0x5acfd57c
 8005810:	3de5d93a 	.word	0x3de5d93a
 8005814:	8a2b9ceb 	.word	0x8a2b9ceb
 8005818:	3e5ae5e6 	.word	0x3e5ae5e6
 800581c:	57b1fe7d 	.word	0x57b1fe7d
 8005820:	3ec71de3 	.word	0x3ec71de3
 8005824:	19c161d5 	.word	0x19c161d5
 8005828:	3f2a01a0 	.word	0x3f2a01a0
 800582c:	1110f8a6 	.word	0x1110f8a6
 8005830:	3f811111 	.word	0x3f811111

08005834 <fabs>:
 8005834:	ec51 0b10 	vmov	r0, r1, d0
 8005838:	ee10 2a10 	vmov	r2, s0
 800583c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005840:	ec43 2b10 	vmov	d0, r2, r3
 8005844:	4770      	bx	lr

08005846 <finite>:
 8005846:	ee10 3a90 	vmov	r3, s1
 800584a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800584e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005852:	0fc0      	lsrs	r0, r0, #31
 8005854:	4770      	bx	lr
	...

08005858 <floor>:
 8005858:	ec51 0b10 	vmov	r0, r1, d0
 800585c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005860:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005864:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005868:	2e13      	cmp	r6, #19
 800586a:	460c      	mov	r4, r1
 800586c:	ee10 5a10 	vmov	r5, s0
 8005870:	4680      	mov	r8, r0
 8005872:	dc34      	bgt.n	80058de <floor+0x86>
 8005874:	2e00      	cmp	r6, #0
 8005876:	da16      	bge.n	80058a6 <floor+0x4e>
 8005878:	a335      	add	r3, pc, #212	; (adr r3, 8005950 <floor+0xf8>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f7fa fca9 	bl	80001d4 <__adddf3>
 8005882:	2200      	movs	r2, #0
 8005884:	2300      	movs	r3, #0
 8005886:	f7fb f8eb 	bl	8000a60 <__aeabi_dcmpgt>
 800588a:	b148      	cbz	r0, 80058a0 <floor+0x48>
 800588c:	2c00      	cmp	r4, #0
 800588e:	da59      	bge.n	8005944 <floor+0xec>
 8005890:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005894:	4a30      	ldr	r2, [pc, #192]	; (8005958 <floor+0x100>)
 8005896:	432b      	orrs	r3, r5
 8005898:	2500      	movs	r5, #0
 800589a:	42ab      	cmp	r3, r5
 800589c:	bf18      	it	ne
 800589e:	4614      	movne	r4, r2
 80058a0:	4621      	mov	r1, r4
 80058a2:	4628      	mov	r0, r5
 80058a4:	e025      	b.n	80058f2 <floor+0x9a>
 80058a6:	4f2d      	ldr	r7, [pc, #180]	; (800595c <floor+0x104>)
 80058a8:	4137      	asrs	r7, r6
 80058aa:	ea01 0307 	and.w	r3, r1, r7
 80058ae:	4303      	orrs	r3, r0
 80058b0:	d01f      	beq.n	80058f2 <floor+0x9a>
 80058b2:	a327      	add	r3, pc, #156	; (adr r3, 8005950 <floor+0xf8>)
 80058b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058b8:	f7fa fc8c 	bl	80001d4 <__adddf3>
 80058bc:	2200      	movs	r2, #0
 80058be:	2300      	movs	r3, #0
 80058c0:	f7fb f8ce 	bl	8000a60 <__aeabi_dcmpgt>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d0eb      	beq.n	80058a0 <floor+0x48>
 80058c8:	2c00      	cmp	r4, #0
 80058ca:	bfbe      	ittt	lt
 80058cc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80058d0:	fa43 f606 	asrlt.w	r6, r3, r6
 80058d4:	19a4      	addlt	r4, r4, r6
 80058d6:	ea24 0407 	bic.w	r4, r4, r7
 80058da:	2500      	movs	r5, #0
 80058dc:	e7e0      	b.n	80058a0 <floor+0x48>
 80058de:	2e33      	cmp	r6, #51	; 0x33
 80058e0:	dd0b      	ble.n	80058fa <floor+0xa2>
 80058e2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80058e6:	d104      	bne.n	80058f2 <floor+0x9a>
 80058e8:	ee10 2a10 	vmov	r2, s0
 80058ec:	460b      	mov	r3, r1
 80058ee:	f7fa fc71 	bl	80001d4 <__adddf3>
 80058f2:	ec41 0b10 	vmov	d0, r0, r1
 80058f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80058fa:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80058fe:	f04f 33ff 	mov.w	r3, #4294967295
 8005902:	fa23 f707 	lsr.w	r7, r3, r7
 8005906:	4207      	tst	r7, r0
 8005908:	d0f3      	beq.n	80058f2 <floor+0x9a>
 800590a:	a311      	add	r3, pc, #68	; (adr r3, 8005950 <floor+0xf8>)
 800590c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005910:	f7fa fc60 	bl	80001d4 <__adddf3>
 8005914:	2200      	movs	r2, #0
 8005916:	2300      	movs	r3, #0
 8005918:	f7fb f8a2 	bl	8000a60 <__aeabi_dcmpgt>
 800591c:	2800      	cmp	r0, #0
 800591e:	d0bf      	beq.n	80058a0 <floor+0x48>
 8005920:	2c00      	cmp	r4, #0
 8005922:	da02      	bge.n	800592a <floor+0xd2>
 8005924:	2e14      	cmp	r6, #20
 8005926:	d103      	bne.n	8005930 <floor+0xd8>
 8005928:	3401      	adds	r4, #1
 800592a:	ea25 0507 	bic.w	r5, r5, r7
 800592e:	e7b7      	b.n	80058a0 <floor+0x48>
 8005930:	2301      	movs	r3, #1
 8005932:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005936:	fa03 f606 	lsl.w	r6, r3, r6
 800593a:	4435      	add	r5, r6
 800593c:	4545      	cmp	r5, r8
 800593e:	bf38      	it	cc
 8005940:	18e4      	addcc	r4, r4, r3
 8005942:	e7f2      	b.n	800592a <floor+0xd2>
 8005944:	2500      	movs	r5, #0
 8005946:	462c      	mov	r4, r5
 8005948:	e7aa      	b.n	80058a0 <floor+0x48>
 800594a:	bf00      	nop
 800594c:	f3af 8000 	nop.w
 8005950:	8800759c 	.word	0x8800759c
 8005954:	7e37e43c 	.word	0x7e37e43c
 8005958:	bff00000 	.word	0xbff00000
 800595c:	000fffff 	.word	0x000fffff

08005960 <matherr>:
 8005960:	2000      	movs	r0, #0
 8005962:	4770      	bx	lr
 8005964:	0000      	movs	r0, r0
	...

08005968 <nan>:
 8005968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005970 <nan+0x8>
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	00000000 	.word	0x00000000
 8005974:	7ff80000 	.word	0x7ff80000

08005978 <rint>:
 8005978:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800597a:	ec51 0b10 	vmov	r0, r1, d0
 800597e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005982:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005986:	2e13      	cmp	r6, #19
 8005988:	460b      	mov	r3, r1
 800598a:	ee10 4a10 	vmov	r4, s0
 800598e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005992:	dc56      	bgt.n	8005a42 <rint+0xca>
 8005994:	2e00      	cmp	r6, #0
 8005996:	da2b      	bge.n	80059f0 <rint+0x78>
 8005998:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800599c:	4302      	orrs	r2, r0
 800599e:	d023      	beq.n	80059e8 <rint+0x70>
 80059a0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80059a4:	4302      	orrs	r2, r0
 80059a6:	4254      	negs	r4, r2
 80059a8:	4314      	orrs	r4, r2
 80059aa:	0c4b      	lsrs	r3, r1, #17
 80059ac:	0b24      	lsrs	r4, r4, #12
 80059ae:	045b      	lsls	r3, r3, #17
 80059b0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80059b4:	ea44 0103 	orr.w	r1, r4, r3
 80059b8:	460b      	mov	r3, r1
 80059ba:	492f      	ldr	r1, [pc, #188]	; (8005a78 <rint+0x100>)
 80059bc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80059c0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80059c4:	4602      	mov	r2, r0
 80059c6:	4639      	mov	r1, r7
 80059c8:	4630      	mov	r0, r6
 80059ca:	f7fa fc03 	bl	80001d4 <__adddf3>
 80059ce:	e9cd 0100 	strd	r0, r1, [sp]
 80059d2:	463b      	mov	r3, r7
 80059d4:	4632      	mov	r2, r6
 80059d6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059da:	f7fa fbf9 	bl	80001d0 <__aeabi_dsub>
 80059de:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80059e2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80059e6:	4639      	mov	r1, r7
 80059e8:	ec41 0b10 	vmov	d0, r0, r1
 80059ec:	b003      	add	sp, #12
 80059ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059f0:	4a22      	ldr	r2, [pc, #136]	; (8005a7c <rint+0x104>)
 80059f2:	4132      	asrs	r2, r6
 80059f4:	ea01 0702 	and.w	r7, r1, r2
 80059f8:	4307      	orrs	r7, r0
 80059fa:	d0f5      	beq.n	80059e8 <rint+0x70>
 80059fc:	0852      	lsrs	r2, r2, #1
 80059fe:	4011      	ands	r1, r2
 8005a00:	430c      	orrs	r4, r1
 8005a02:	d00b      	beq.n	8005a1c <rint+0xa4>
 8005a04:	ea23 0202 	bic.w	r2, r3, r2
 8005a08:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005a0c:	2e13      	cmp	r6, #19
 8005a0e:	fa43 f306 	asr.w	r3, r3, r6
 8005a12:	bf0c      	ite	eq
 8005a14:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005a18:	2400      	movne	r4, #0
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	4916      	ldr	r1, [pc, #88]	; (8005a78 <rint+0x100>)
 8005a1e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005a22:	4622      	mov	r2, r4
 8005a24:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005a28:	4620      	mov	r0, r4
 8005a2a:	4629      	mov	r1, r5
 8005a2c:	f7fa fbd2 	bl	80001d4 <__adddf3>
 8005a30:	e9cd 0100 	strd	r0, r1, [sp]
 8005a34:	4622      	mov	r2, r4
 8005a36:	462b      	mov	r3, r5
 8005a38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005a3c:	f7fa fbc8 	bl	80001d0 <__aeabi_dsub>
 8005a40:	e7d2      	b.n	80059e8 <rint+0x70>
 8005a42:	2e33      	cmp	r6, #51	; 0x33
 8005a44:	dd07      	ble.n	8005a56 <rint+0xde>
 8005a46:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005a4a:	d1cd      	bne.n	80059e8 <rint+0x70>
 8005a4c:	ee10 2a10 	vmov	r2, s0
 8005a50:	f7fa fbc0 	bl	80001d4 <__adddf3>
 8005a54:	e7c8      	b.n	80059e8 <rint+0x70>
 8005a56:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8005a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5e:	40f2      	lsrs	r2, r6
 8005a60:	4210      	tst	r0, r2
 8005a62:	d0c1      	beq.n	80059e8 <rint+0x70>
 8005a64:	0852      	lsrs	r2, r2, #1
 8005a66:	4210      	tst	r0, r2
 8005a68:	bf1f      	itttt	ne
 8005a6a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005a6e:	ea20 0202 	bicne.w	r2, r0, r2
 8005a72:	4134      	asrne	r4, r6
 8005a74:	4314      	orrne	r4, r2
 8005a76:	e7d1      	b.n	8005a1c <rint+0xa4>
 8005a78:	08005ea8 	.word	0x08005ea8
 8005a7c:	000fffff 	.word	0x000fffff

08005a80 <scalbn>:
 8005a80:	b570      	push	{r4, r5, r6, lr}
 8005a82:	ec55 4b10 	vmov	r4, r5, d0
 8005a86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005a8a:	4606      	mov	r6, r0
 8005a8c:	462b      	mov	r3, r5
 8005a8e:	b9aa      	cbnz	r2, 8005abc <scalbn+0x3c>
 8005a90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005a94:	4323      	orrs	r3, r4
 8005a96:	d03b      	beq.n	8005b10 <scalbn+0x90>
 8005a98:	4b31      	ldr	r3, [pc, #196]	; (8005b60 <scalbn+0xe0>)
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	ee10 0a10 	vmov	r0, s0
 8005aa2:	f7fa fd4d 	bl	8000540 <__aeabi_dmul>
 8005aa6:	4b2f      	ldr	r3, [pc, #188]	; (8005b64 <scalbn+0xe4>)
 8005aa8:	429e      	cmp	r6, r3
 8005aaa:	4604      	mov	r4, r0
 8005aac:	460d      	mov	r5, r1
 8005aae:	da12      	bge.n	8005ad6 <scalbn+0x56>
 8005ab0:	a327      	add	r3, pc, #156	; (adr r3, 8005b50 <scalbn+0xd0>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa fd43 	bl	8000540 <__aeabi_dmul>
 8005aba:	e009      	b.n	8005ad0 <scalbn+0x50>
 8005abc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005ac0:	428a      	cmp	r2, r1
 8005ac2:	d10c      	bne.n	8005ade <scalbn+0x5e>
 8005ac4:	ee10 2a10 	vmov	r2, s0
 8005ac8:	4620      	mov	r0, r4
 8005aca:	4629      	mov	r1, r5
 8005acc:	f7fa fb82 	bl	80001d4 <__adddf3>
 8005ad0:	4604      	mov	r4, r0
 8005ad2:	460d      	mov	r5, r1
 8005ad4:	e01c      	b.n	8005b10 <scalbn+0x90>
 8005ad6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005ada:	460b      	mov	r3, r1
 8005adc:	3a36      	subs	r2, #54	; 0x36
 8005ade:	4432      	add	r2, r6
 8005ae0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005ae4:	428a      	cmp	r2, r1
 8005ae6:	dd0b      	ble.n	8005b00 <scalbn+0x80>
 8005ae8:	ec45 4b11 	vmov	d1, r4, r5
 8005aec:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005b58 <scalbn+0xd8>
 8005af0:	f000 f83c 	bl	8005b6c <copysign>
 8005af4:	a318      	add	r3, pc, #96	; (adr r3, 8005b58 <scalbn+0xd8>)
 8005af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afa:	ec51 0b10 	vmov	r0, r1, d0
 8005afe:	e7da      	b.n	8005ab6 <scalbn+0x36>
 8005b00:	2a00      	cmp	r2, #0
 8005b02:	dd08      	ble.n	8005b16 <scalbn+0x96>
 8005b04:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b08:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b0c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b10:	ec45 4b10 	vmov	d0, r4, r5
 8005b14:	bd70      	pop	{r4, r5, r6, pc}
 8005b16:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005b1a:	da0d      	bge.n	8005b38 <scalbn+0xb8>
 8005b1c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005b20:	429e      	cmp	r6, r3
 8005b22:	ec45 4b11 	vmov	d1, r4, r5
 8005b26:	dce1      	bgt.n	8005aec <scalbn+0x6c>
 8005b28:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005b50 <scalbn+0xd0>
 8005b2c:	f000 f81e 	bl	8005b6c <copysign>
 8005b30:	a307      	add	r3, pc, #28	; (adr r3, 8005b50 <scalbn+0xd0>)
 8005b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b36:	e7e0      	b.n	8005afa <scalbn+0x7a>
 8005b38:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005b3c:	3236      	adds	r2, #54	; 0x36
 8005b3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005b42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005b46:	4620      	mov	r0, r4
 8005b48:	4629      	mov	r1, r5
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4b06      	ldr	r3, [pc, #24]	; (8005b68 <scalbn+0xe8>)
 8005b4e:	e7b2      	b.n	8005ab6 <scalbn+0x36>
 8005b50:	c2f8f359 	.word	0xc2f8f359
 8005b54:	01a56e1f 	.word	0x01a56e1f
 8005b58:	8800759c 	.word	0x8800759c
 8005b5c:	7e37e43c 	.word	0x7e37e43c
 8005b60:	43500000 	.word	0x43500000
 8005b64:	ffff3cb0 	.word	0xffff3cb0
 8005b68:	3c900000 	.word	0x3c900000

08005b6c <copysign>:
 8005b6c:	ec51 0b10 	vmov	r0, r1, d0
 8005b70:	ee11 0a90 	vmov	r0, s3
 8005b74:	ee10 2a10 	vmov	r2, s0
 8005b78:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005b7c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005b80:	ea41 0300 	orr.w	r3, r1, r0
 8005b84:	ec43 2b10 	vmov	d0, r2, r3
 8005b88:	4770      	bx	lr
	...

08005b8c <_init>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr

08005b98 <_fini>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr
