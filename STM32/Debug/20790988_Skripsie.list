
20790988_Skripsie.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000269c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08002824  08002824  00012824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002904  08002904  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002904  08002904  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002904  08002904  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002904  08002904  00012904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002908  08002908  00012908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800290c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000334  2000000c  08002918  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08002918  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010bbe  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002460  00000000  00000000  00030bfa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dc8  00000000  00000000  00033060  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d68  00000000  00000000  00033e28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001cfe2  00000000  00000000  00034b90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000af72  00000000  00000000  00051b72  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a99df  00000000  00000000  0005cae4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001064c3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023d8  00000000  00000000  00106540  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    00009aa2  00000000  00000000  00108918  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800280c 	.word	0x0800280c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800280c 	.word	0x0800280c

080001c8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80001c8:	b082      	sub	sp, #8

    /* DMA controller clock enable */
    __HAL_RCC_DMA1_CLK_ENABLE();
 80001ca:	4b06      	ldr	r3, [pc, #24]	; (80001e4 <MX_DMA_Init+0x1c>)
 80001cc:	695a      	ldr	r2, [r3, #20]
 80001ce:	f042 0201 	orr.w	r2, r2, #1
 80001d2:	615a      	str	r2, [r3, #20]
 80001d4:	695b      	ldr	r3, [r3, #20]
 80001d6:	f003 0301 	and.w	r3, r3, #1
 80001da:	9301      	str	r3, [sp, #4]
 80001dc:	9b01      	ldr	r3, [sp, #4]

}
 80001de:	b002      	add	sp, #8
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000

080001e8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80001e8:	b570      	push	{r4, r5, r6, lr}
 80001ea:	b08a      	sub	sp, #40	; 0x28
    GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80001ec:	2400      	movs	r4, #0
 80001ee:	9405      	str	r4, [sp, #20]
 80001f0:	9406      	str	r4, [sp, #24]
 80001f2:	9407      	str	r4, [sp, #28]
 80001f4:	9408      	str	r4, [sp, #32]
 80001f6:	9409      	str	r4, [sp, #36]	; 0x24

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80001f8:	4b20      	ldr	r3, [pc, #128]	; (800027c <MX_GPIO_Init+0x94>)
 80001fa:	695a      	ldr	r2, [r3, #20]
 80001fc:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000200:	615a      	str	r2, [r3, #20]
 8000202:	695a      	ldr	r2, [r3, #20]
 8000204:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000208:	9201      	str	r2, [sp, #4]
 800020a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800020c:	695a      	ldr	r2, [r3, #20]
 800020e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000212:	615a      	str	r2, [r3, #20]
 8000214:	695a      	ldr	r2, [r3, #20]
 8000216:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800021a:	9202      	str	r2, [sp, #8]
 800021c:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800021e:	695a      	ldr	r2, [r3, #20]
 8000220:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000224:	615a      	str	r2, [r3, #20]
 8000226:	695a      	ldr	r2, [r3, #20]
 8000228:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 800022c:	9203      	str	r2, [sp, #12]
 800022e:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000230:	695a      	ldr	r2, [r3, #20]
 8000232:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000236:	615a      	str	r2, [r3, #20]
 8000238:	695b      	ldr	r3, [r3, #20]
 800023a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800023e:	9304      	str	r3, [sp, #16]
 8000240:	9b04      	ldr	r3, [sp, #16]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8000242:	4d0f      	ldr	r5, [pc, #60]	; (8000280 <MX_GPIO_Init+0x98>)
 8000244:	4622      	mov	r2, r4
 8000246:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800024a:	4628      	mov	r0, r5
 800024c:	f000 ffcc 	bl	80011e8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PB0 */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000250:	2601      	movs	r6, #1
 8000252:	9605      	str	r6, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000254:	4b0b      	ldr	r3, [pc, #44]	; (8000284 <MX_GPIO_Init+0x9c>)
 8000256:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000258:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800025a:	a905      	add	r1, sp, #20
 800025c:	4628      	mov	r0, r5
 800025e:	f000 feff 	bl	8001060 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB13 */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000262:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000266:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000268:	9606      	str	r6, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800026a:	9407      	str	r4, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800026c:	9408      	str	r4, [sp, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800026e:	a905      	add	r1, sp, #20
 8000270:	4628      	mov	r0, r5
 8000272:	f000 fef5 	bl	8001060 <HAL_GPIO_Init>

}
 8000276:	b00a      	add	sp, #40	; 0x28
 8000278:	bd70      	pop	{r4, r5, r6, pc}
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000
 8000280:	48000400 	.word	0x48000400
 8000284:	10110000 	.word	0x10110000

08000288 <MX_USART2_UART_Init>:
{
 8000288:	b510      	push	{r4, lr}
    huart2.Instance = USART2;
 800028a:	4c0f      	ldr	r4, [pc, #60]	; (80002c8 <MX_USART2_UART_Init+0x40>)
 800028c:	4b0f      	ldr	r3, [pc, #60]	; (80002cc <MX_USART2_UART_Init+0x44>)
 800028e:	6023      	str	r3, [r4, #0]
    huart2.Init.BaudRate = 9600;
 8000290:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8000294:	6063      	str	r3, [r4, #4]
    huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000296:	2300      	movs	r3, #0
 8000298:	60a3      	str	r3, [r4, #8]
    huart2.Init.StopBits = UART_STOPBITS_1;
 800029a:	60e3      	str	r3, [r4, #12]
    huart2.Init.Parity = UART_PARITY_NONE;
 800029c:	6123      	str	r3, [r4, #16]
    huart2.Init.Mode = UART_MODE_TX_RX;
 800029e:	220c      	movs	r2, #12
 80002a0:	6162      	str	r2, [r4, #20]
    huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002a2:	61a3      	str	r3, [r4, #24]
    huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002a4:	61e3      	str	r3, [r4, #28]
    huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002a6:	6223      	str	r3, [r4, #32]
    huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002a8:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_UART_Init(&huart2) != HAL_OK)
 80002aa:	4620      	mov	r0, r4
 80002ac:	f002 fa4f 	bl	800274e <HAL_UART_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_RXNE);
 80002b0:	6822      	ldr	r2, [r4, #0]
 80002b2:	6813      	ldr	r3, [r2, #0]
 80002b4:	f043 0301 	orr.w	r3, r3, #1
 80002b8:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_FLAG_TC);
 80002ba:	6822      	ldr	r2, [r4, #0]
 80002bc:	6853      	ldr	r3, [r2, #4]
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	6053      	str	r3, [r2, #4]
}
 80002c4:	bd10      	pop	{r4, pc}
 80002c6:	bf00      	nop
 80002c8:	20000198 	.word	0x20000198
 80002cc:	40004400 	.word	0x40004400

080002d0 <MX_USART1_UART_Init>:
{
 80002d0:	b508      	push	{r3, lr}
    huart1.Instance = USART1;
 80002d2:	4809      	ldr	r0, [pc, #36]	; (80002f8 <MX_USART1_UART_Init+0x28>)
 80002d4:	4b09      	ldr	r3, [pc, #36]	; (80002fc <MX_USART1_UART_Init+0x2c>)
 80002d6:	6003      	str	r3, [r0, #0]
    huart1.Init.BaudRate = 9600;
 80002d8:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 80002dc:	6043      	str	r3, [r0, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002de:	2300      	movs	r3, #0
 80002e0:	6083      	str	r3, [r0, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80002e2:	60c3      	str	r3, [r0, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80002e4:	6103      	str	r3, [r0, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80002e6:	220c      	movs	r2, #12
 80002e8:	6142      	str	r2, [r0, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ea:	6183      	str	r3, [r0, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002ec:	61c3      	str	r3, [r0, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80002ee:	6203      	str	r3, [r0, #32]
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80002f0:	6243      	str	r3, [r0, #36]	; 0x24
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80002f2:	f002 fa2c 	bl	800274e <HAL_UART_Init>
}
 80002f6:	bd08      	pop	{r3, pc}
 80002f8:	20000098 	.word	0x20000098
 80002fc:	40013800 	.word	0x40013800

08000300 <MX_DAC1_Init>:
{
 8000300:	b530      	push	{r4, r5, lr}
 8000302:	b085      	sub	sp, #20
    DAC_ChannelConfTypeDef sConfig = { 0 };
 8000304:	2400      	movs	r4, #0
 8000306:	9401      	str	r4, [sp, #4]
 8000308:	9402      	str	r4, [sp, #8]
 800030a:	9403      	str	r4, [sp, #12]
    hdac1.Instance = DAC1;
 800030c:	4d08      	ldr	r5, [pc, #32]	; (8000330 <MX_DAC1_Init+0x30>)
 800030e:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_DAC1_Init+0x34>)
 8000310:	602b      	str	r3, [r5, #0]
    if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000312:	4628      	mov	r0, r5
 8000314:	f000 fc74 	bl	8000c00 <HAL_DAC_Init>
    sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8000318:	2304      	movs	r3, #4
 800031a:	9301      	str	r3, [sp, #4]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800031c:	9402      	str	r4, [sp, #8]
    if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800031e:	4622      	mov	r2, r4
 8000320:	eb0d 0103 	add.w	r1, sp, r3
 8000324:	4628      	mov	r0, r5
 8000326:	f000 fd3d 	bl	8000da4 <HAL_DAC_ConfigChannel>
}
 800032a:	b005      	add	sp, #20
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	bf00      	nop
 8000330:	20000040 	.word	0x20000040
 8000334:	40007400 	.word	0x40007400

08000338 <MX_TIM2_Init>:
{
 8000338:	b530      	push	{r4, r5, lr}
 800033a:	b089      	sub	sp, #36	; 0x24
    TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800033c:	2400      	movs	r4, #0
 800033e:	9404      	str	r4, [sp, #16]
 8000340:	9405      	str	r4, [sp, #20]
 8000342:	9406      	str	r4, [sp, #24]
 8000344:	9407      	str	r4, [sp, #28]
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000346:	9401      	str	r4, [sp, #4]
 8000348:	9402      	str	r4, [sp, #8]
 800034a:	9403      	str	r4, [sp, #12]
    htim2.Instance = TIM2;
 800034c:	4d0e      	ldr	r5, [pc, #56]	; (8000388 <MX_TIM2_Init+0x50>)
 800034e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000352:	602b      	str	r3, [r5, #0]
    htim2.Init.Prescaler = 90 - 1;
 8000354:	2359      	movs	r3, #89	; 0x59
 8000356:	606b      	str	r3, [r5, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000358:	60ac      	str	r4, [r5, #8]
    htim2.Init.Period = 100 - 1;
 800035a:	2363      	movs	r3, #99	; 0x63
 800035c:	60eb      	str	r3, [r5, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800035e:	612c      	str	r4, [r5, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000360:	61ac      	str	r4, [r5, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000362:	4628      	mov	r0, r5
 8000364:	f001 fdea 	bl	8001f3c <HAL_TIM_Base_Init>
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000368:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800036c:	9304      	str	r3, [sp, #16]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800036e:	a904      	add	r1, sp, #16
 8000370:	4628      	mov	r0, r5
 8000372:	f001 fe09 	bl	8001f88 <HAL_TIM_ConfigClockSource>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000376:	2320      	movs	r3, #32
 8000378:	9301      	str	r3, [sp, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800037a:	9403      	str	r4, [sp, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800037c:	a901      	add	r1, sp, #4
 800037e:	4628      	mov	r0, r5
 8000380:	f001 fe70 	bl	8002064 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000384:	b009      	add	sp, #36	; 0x24
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	20000158 	.word	0x20000158

0800038c <MX_TIM6_Init>:
{
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	b085      	sub	sp, #20
    TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000390:	2500      	movs	r5, #0
 8000392:	9501      	str	r5, [sp, #4]
 8000394:	9502      	str	r5, [sp, #8]
 8000396:	9503      	str	r5, [sp, #12]
    htim6.Instance = TIM6;
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <MX_TIM6_Init+0x38>)
 800039a:	4b0b      	ldr	r3, [pc, #44]	; (80003c8 <MX_TIM6_Init+0x3c>)
 800039c:	6023      	str	r3, [r4, #0]
    htim6.Init.Prescaler = 90;
 800039e:	235a      	movs	r3, #90	; 0x5a
 80003a0:	6063      	str	r3, [r4, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003a2:	60a5      	str	r5, [r4, #8]
    htim6.Init.Period = 100;
 80003a4:	2364      	movs	r3, #100	; 0x64
 80003a6:	60e3      	str	r3, [r4, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a8:	61a5      	str	r5, [r4, #24]
    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80003aa:	4620      	mov	r0, r4
 80003ac:	f001 fdc6 	bl	8001f3c <HAL_TIM_Base_Init>
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003b0:	2320      	movs	r3, #32
 80003b2:	9301      	str	r3, [sp, #4]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003b4:	9503      	str	r5, [sp, #12]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80003b6:	a901      	add	r1, sp, #4
 80003b8:	4620      	mov	r0, r4
 80003ba:	f001 fe53 	bl	8002064 <HAL_TIMEx_MasterConfigSynchronization>
}
 80003be:	b005      	add	sp, #20
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	bf00      	nop
 80003c4:	20000118 	.word	0x20000118
 80003c8:	40001000 	.word	0x40001000

080003cc <MX_NVIC_Init>:
{
 80003cc:	b508      	push	{r3, lr}
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80003ce:	2200      	movs	r2, #0
 80003d0:	4611      	mov	r1, r2
 80003d2:	2025      	movs	r0, #37	; 0x25
 80003d4:	f000 fbbc 	bl	8000b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80003d8:	2025      	movs	r0, #37	; 0x25
 80003da:	f000 fbed 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80003de:	2200      	movs	r2, #0
 80003e0:	4611      	mov	r1, r2
 80003e2:	2026      	movs	r0, #38	; 0x26
 80003e4:	f000 fbb4 	bl	8000b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80003e8:	2026      	movs	r0, #38	; 0x26
 80003ea:	f000 fbe5 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003ee:	2200      	movs	r2, #0
 80003f0:	4611      	mov	r1, r2
 80003f2:	2006      	movs	r0, #6
 80003f4:	f000 fbac 	bl	8000b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003f8:	2006      	movs	r0, #6
 80003fa:	f000 fbdd 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
}
 80003fe:	bd08      	pop	{r3, pc}

08000400 <SystemClock_Config>:
{
 8000400:	b530      	push	{r4, r5, lr}
 8000402:	b097      	sub	sp, #92	; 0x5c
    RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000404:	2224      	movs	r2, #36	; 0x24
 8000406:	2100      	movs	r1, #0
 8000408:	a80d      	add	r0, sp, #52	; 0x34
 800040a:	f002 f9f7 	bl	80027fc <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800040e:	2400      	movs	r4, #0
 8000410:	9407      	str	r4, [sp, #28]
 8000412:	9408      	str	r4, [sp, #32]
 8000414:	9409      	str	r4, [sp, #36]	; 0x24
 8000416:	940a      	str	r4, [sp, #40]	; 0x28
 8000418:	940b      	str	r4, [sp, #44]	; 0x2c
    RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 800041a:	9400      	str	r4, [sp, #0]
 800041c:	9401      	str	r4, [sp, #4]
 800041e:	9402      	str	r4, [sp, #8]
 8000420:	9403      	str	r4, [sp, #12]
 8000422:	9404      	str	r4, [sp, #16]
 8000424:	9405      	str	r4, [sp, #20]
 8000426:	9406      	str	r4, [sp, #24]
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000428:	2302      	movs	r3, #2
 800042a:	930c      	str	r3, [sp, #48]	; 0x30
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042c:	2501      	movs	r5, #1
 800042e:	9510      	str	r5, [sp, #64]	; 0x40
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000430:	2310      	movs	r3, #16
 8000432:	9311      	str	r3, [sp, #68]	; 0x44
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000434:	a80c      	add	r0, sp, #48	; 0x30
 8000436:	f000 feeb 	bl	8001210 <HAL_RCC_OscConfig>
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800043a:	230f      	movs	r3, #15
 800043c:	9307      	str	r3, [sp, #28]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800043e:	9408      	str	r4, [sp, #32]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000440:	9409      	str	r4, [sp, #36]	; 0x24
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000442:	940a      	str	r4, [sp, #40]	; 0x28
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000444:	940b      	str	r4, [sp, #44]	; 0x2c
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000446:	4621      	mov	r1, r4
 8000448:	a807      	add	r0, sp, #28
 800044a:	f001 fa3b 	bl	80018c4 <HAL_RCC_ClockConfig>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800044e:	9500      	str	r5, [sp, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000450:	9402      	str	r4, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000452:	4668      	mov	r0, sp
 8000454:	f001 fb3a 	bl	8001acc <HAL_RCCEx_PeriphCLKConfig>
}
 8000458:	b017      	add	sp, #92	; 0x5c
 800045a:	bd30      	pop	{r4, r5, pc}

0800045c <main>:
{
 800045c:	b500      	push	{lr}
 800045e:	b08b      	sub	sp, #44	; 0x2c
    concat_timecode();
 8000460:	f000 faa0 	bl	80009a4 <concat_timecode>
    HAL_Init();
 8000464:	f000 fb3e 	bl	8000ae4 <HAL_Init>
    SystemClock_Config();
 8000468:	f7ff ffca 	bl	8000400 <SystemClock_Config>
    MX_GPIO_Init();
 800046c:	f7ff febc 	bl	80001e8 <MX_GPIO_Init>
    MX_DMA_Init();
 8000470:	f7ff feaa 	bl	80001c8 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8000474:	f7ff ff08 	bl	8000288 <MX_USART2_UART_Init>
    MX_USART1_UART_Init();
 8000478:	f7ff ff2a 	bl	80002d0 <MX_USART1_UART_Init>
    MX_DAC1_Init();
 800047c:	f7ff ff40 	bl	8000300 <MX_DAC1_Init>
    MX_TIM2_Init();
 8000480:	f7ff ff5a 	bl	8000338 <MX_TIM2_Init>
    MX_TIM6_Init();
 8000484:	f7ff ff82 	bl	800038c <MX_TIM6_Init>
    MX_NVIC_Init();
 8000488:	f7ff ffa0 	bl	80003cc <MX_NVIC_Init>
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_RXNE);
 800048c:	4a41      	ldr	r2, [pc, #260]	; (8000594 <main+0x138>)
 800048e:	6811      	ldr	r1, [r2, #0]
 8000490:	680b      	ldr	r3, [r1, #0]
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	600b      	str	r3, [r1, #0]
    __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8000498:	6812      	ldr	r2, [r2, #0]
 800049a:	6813      	ldr	r3, [r2, #0]
 800049c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004a0:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 80004a2:	4a3d      	ldr	r2, [pc, #244]	; (8000598 <main+0x13c>)
 80004a4:	6811      	ldr	r1, [r2, #0]
 80004a6:	680b      	ldr	r3, [r1, #0]
 80004a8:	f043 0320 	orr.w	r3, r3, #32
 80004ac:	600b      	str	r3, [r1, #0]
    __HAL_UART_ENABLE_IT(&huart1, UART_IT_TC);
 80004ae:	6812      	ldr	r2, [r2, #0]
 80004b0:	6813      	ldr	r3, [r2, #0]
 80004b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004b6:	6013      	str	r3, [r2, #0]
    HAL_TIM_Base_Start(&htim6);
 80004b8:	4838      	ldr	r0, [pc, #224]	; (800059c <main+0x140>)
 80004ba:	f001 fc0d 	bl	8001cd8 <HAL_TIM_Base_Start>
 80004be:	e033      	b.n	8000528 <main+0xcc>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "pong\n", 5);
 80004c0:	2205      	movs	r2, #5
 80004c2:	4937      	ldr	r1, [pc, #220]	; (80005a0 <main+0x144>)
 80004c4:	4833      	ldr	r0, [pc, #204]	; (8000594 <main+0x138>)
 80004c6:	f001 fe5f 	bl	8002188 <HAL_UART_Transmit_IT>
 80004ca:	e039      	b.n	8000540 <main+0xe4>
                HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80004cc:	4e35      	ldr	r6, [pc, #212]	; (80005a4 <main+0x148>)
 80004ce:	2100      	movs	r1, #0
 80004d0:	4630      	mov	r0, r6
 80004d2:	f000 fba7 	bl	8000c24 <HAL_DAC_Stop_DMA>
                uint32_t pulse[] = { 0xFFF, 0xFFF, 0, 0, 0xFFF, 0, 0xFFF, 0 };
 80004d6:	ac02      	add	r4, sp, #8
 80004d8:	4d33      	ldr	r5, [pc, #204]	; (80005a8 <main+0x14c>)
 80004da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80004de:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80004e2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, pulse, 8,
 80004e6:	2100      	movs	r1, #0
 80004e8:	9100      	str	r1, [sp, #0]
 80004ea:	2308      	movs	r3, #8
 80004ec:	eb0d 0203 	add.w	r2, sp, r3
 80004f0:	4630      	mov	r0, r6
 80004f2:	f000 fbdf 	bl	8000cb4 <HAL_DAC_Start_DMA>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "high\n", 5);
 80004f6:	2205      	movs	r2, #5
 80004f8:	492c      	ldr	r1, [pc, #176]	; (80005ac <main+0x150>)
 80004fa:	4826      	ldr	r0, [pc, #152]	; (8000594 <main+0x138>)
 80004fc:	f001 fe44 	bl	8002188 <HAL_UART_Transmit_IT>
 8000500:	e025      	b.n	800054e <main+0xf2>
                HAL_UART_Transmit_IT(&huart2, (uint8_t*) "query\n", 6);
 8000502:	2206      	movs	r2, #6
 8000504:	492a      	ldr	r1, [pc, #168]	; (80005b0 <main+0x154>)
 8000506:	4823      	ldr	r0, [pc, #140]	; (8000594 <main+0x138>)
 8000508:	f001 fe3e 	bl	8002188 <HAL_UART_Transmit_IT>
                HAL_UART_Transmit_IT(&huart1, (uint8_t*) "$PMTK414*33\r\n", 13);
 800050c:	220d      	movs	r2, #13
 800050e:	4929      	ldr	r1, [pc, #164]	; (80005b4 <main+0x158>)
 8000510:	4821      	ldr	r0, [pc, #132]	; (8000598 <main+0x13c>)
 8000512:	f001 fe39 	bl	8002188 <HAL_UART_Transmit_IT>
 8000516:	e021      	b.n	800055c <main+0x100>
            PC_UART = IDLE;
 8000518:	4b27      	ldr	r3, [pc, #156]	; (80005b8 <main+0x15c>)
 800051a:	2200      	movs	r2, #0
 800051c:	701a      	strb	r2, [r3, #0]
        if (GPS_UART == DONE)
 800051e:	4b27      	ldr	r3, [pc, #156]	; (80005bc <main+0x160>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	2b02      	cmp	r3, #2
 8000526:	d026      	beq.n	8000576 <main+0x11a>
        if (PC_UART == DONE)
 8000528:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <main+0x15c>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b2db      	uxtb	r3, r3
 800052e:	2b02      	cmp	r3, #2
 8000530:	d1f5      	bne.n	800051e <main+0xc2>
            if (is_same_string("ping", pc_message, 4))
 8000532:	2204      	movs	r2, #4
 8000534:	4922      	ldr	r1, [pc, #136]	; (80005c0 <main+0x164>)
 8000536:	4823      	ldr	r0, [pc, #140]	; (80005c4 <main+0x168>)
 8000538:	f000 fa72 	bl	8000a20 <is_same_string>
 800053c:	2800      	cmp	r0, #0
 800053e:	d1bf      	bne.n	80004c0 <main+0x64>
            if (is_same_string("pulse", pc_message, 5))
 8000540:	2205      	movs	r2, #5
 8000542:	491f      	ldr	r1, [pc, #124]	; (80005c0 <main+0x164>)
 8000544:	4820      	ldr	r0, [pc, #128]	; (80005c8 <main+0x16c>)
 8000546:	f000 fa6b 	bl	8000a20 <is_same_string>
 800054a:	2800      	cmp	r0, #0
 800054c:	d1be      	bne.n	80004cc <main+0x70>
            if (is_same_string("NMEAquery", pc_message, 9))
 800054e:	2209      	movs	r2, #9
 8000550:	491b      	ldr	r1, [pc, #108]	; (80005c0 <main+0x164>)
 8000552:	481e      	ldr	r0, [pc, #120]	; (80005cc <main+0x170>)
 8000554:	f000 fa64 	bl	8000a20 <is_same_string>
 8000558:	2800      	cmp	r0, #0
 800055a:	d1d2      	bne.n	8000502 <main+0xa6>
            if (is_same_string("NMEAset", pc_message, 7))
 800055c:	2207      	movs	r2, #7
 800055e:	4918      	ldr	r1, [pc, #96]	; (80005c0 <main+0x164>)
 8000560:	481b      	ldr	r0, [pc, #108]	; (80005d0 <main+0x174>)
 8000562:	f000 fa5d 	bl	8000a20 <is_same_string>
 8000566:	2800      	cmp	r0, #0
 8000568:	d0d6      	beq.n	8000518 <main+0xbc>
                HAL_UART_Transmit_IT(&huart1,
 800056a:	2233      	movs	r2, #51	; 0x33
 800056c:	4919      	ldr	r1, [pc, #100]	; (80005d4 <main+0x178>)
 800056e:	480a      	ldr	r0, [pc, #40]	; (8000598 <main+0x13c>)
 8000570:	f001 fe0a 	bl	8002188 <HAL_UART_Transmit_IT>
 8000574:	e7d0      	b.n	8000518 <main+0xbc>
            gps_message[gps_message_length] = '\n';
 8000576:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <main+0x17c>)
 8000578:	681a      	ldr	r2, [r3, #0]
 800057a:	4918      	ldr	r1, [pc, #96]	; (80005dc <main+0x180>)
 800057c:	200a      	movs	r0, #10
 800057e:	5488      	strb	r0, [r1, r2]
            HAL_UART_Transmit_IT(&huart2, (uint8_t*) gps_message,
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	3201      	adds	r2, #1
 8000584:	b292      	uxth	r2, r2
 8000586:	4803      	ldr	r0, [pc, #12]	; (8000594 <main+0x138>)
 8000588:	f001 fdfe 	bl	8002188 <HAL_UART_Transmit_IT>
            GPS_UART = IDLE;
 800058c:	4b0b      	ldr	r3, [pc, #44]	; (80005bc <main+0x160>)
 800058e:	2200      	movs	r2, #0
 8000590:	701a      	strb	r2, [r3, #0]
 8000592:	e7c9      	b.n	8000528 <main+0xcc>
 8000594:	20000198 	.word	0x20000198
 8000598:	20000098 	.word	0x20000098
 800059c:	20000118 	.word	0x20000118
 80005a0:	0800284c 	.word	0x0800284c
 80005a4:	20000040 	.word	0x20000040
 80005a8:	08002824 	.word	0x08002824
 80005ac:	0800285c 	.word	0x0800285c
 80005b0:	08002870 	.word	0x08002870
 80005b4:	08002878 	.word	0x08002878
 80005b8:	20000029 	.word	0x20000029
 80005bc:	20000028 	.word	0x20000028
 80005c0:	20000218 	.word	0x20000218
 80005c4:	08002844 	.word	0x08002844
 80005c8:	08002854 	.word	0x08002854
 80005cc:	08002864 	.word	0x08002864
 80005d0:	08002888 	.word	0x08002888
 80005d4:	08002890 	.word	0x08002890
 80005d8:	20000034 	.word	0x20000034
 80005dc:	2000027c 	.word	0x2000027c

080005e0 <Error_Handler>:
{
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */

    /* USER CODE END Error_Handler_Debug */
}
 80005e0:	4770      	bx	lr
	...

080005e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005e4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <HAL_MspInit+0x2c>)
 80005e8:	699a      	ldr	r2, [r3, #24]
 80005ea:	f042 0201 	orr.w	r2, r2, #1
 80005ee:	619a      	str	r2, [r3, #24]
 80005f0:	699a      	ldr	r2, [r3, #24]
 80005f2:	f002 0201 	and.w	r2, r2, #1
 80005f6:	9200      	str	r2, [sp, #0]
 80005f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fa:	69da      	ldr	r2, [r3, #28]
 80005fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000600:	61da      	str	r2, [r3, #28]
 8000602:	69db      	ldr	r3, [r3, #28]
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	9301      	str	r3, [sp, #4]
 800060a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800060c:	b002      	add	sp, #8
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000

08000614 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000618:	2300      	movs	r3, #0
 800061a:	9303      	str	r3, [sp, #12]
 800061c:	9304      	str	r3, [sp, #16]
 800061e:	9305      	str	r3, [sp, #20]
 8000620:	9306      	str	r3, [sp, #24]
 8000622:	9307      	str	r3, [sp, #28]
  if(hdac->Instance==DAC1)
 8000624:	6802      	ldr	r2, [r0, #0]
 8000626:	4b25      	ldr	r3, [pc, #148]	; (80006bc <HAL_DAC_MspInit+0xa8>)
 8000628:	429a      	cmp	r2, r3
 800062a:	d001      	beq.n	8000630 <HAL_DAC_MspInit+0x1c>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800062c:	b009      	add	sp, #36	; 0x24
 800062e:	bd30      	pop	{r4, r5, pc}
 8000630:	4604      	mov	r4, r0
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000632:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
 8000636:	69da      	ldr	r2, [r3, #28]
 8000638:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800063c:	61da      	str	r2, [r3, #28]
 800063e:	69da      	ldr	r2, [r3, #28]
 8000640:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8000644:	9201      	str	r2, [sp, #4]
 8000646:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000648:	695a      	ldr	r2, [r3, #20]
 800064a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	695b      	ldr	r3, [r3, #20]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	9302      	str	r3, [sp, #8]
 8000658:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800065a:	2510      	movs	r5, #16
 800065c:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800065e:	2303      	movs	r3, #3
 8000660:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000662:	a903      	add	r1, sp, #12
 8000664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000668:	f000 fcfa 	bl	8001060 <HAL_GPIO_Init>
    hdma_dac1_ch1.Instance = DMA1_Channel3;
 800066c:	4814      	ldr	r0, [pc, #80]	; (80006c0 <HAL_DAC_MspInit+0xac>)
 800066e:	4b15      	ldr	r3, [pc, #84]	; (80006c4 <HAL_DAC_MspInit+0xb0>)
 8000670:	6003      	str	r3, [r0, #0]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000672:	6045      	str	r5, [r0, #4]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000674:	2300      	movs	r3, #0
 8000676:	6083      	str	r3, [r0, #8]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000678:	2280      	movs	r2, #128	; 0x80
 800067a:	60c2      	str	r2, [r0, #12]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800067c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000680:	6102      	str	r2, [r0, #16]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000682:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000686:	6142      	str	r2, [r0, #20]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8000688:	6183      	str	r3, [r0, #24]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800068a:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800068c:	f000 fc3e 	bl	8000f0c <HAL_DMA_Init>
 8000690:	b980      	cbnz	r0, 80006b4 <HAL_DAC_MspInit+0xa0>
    __HAL_DMA_REMAP_CHANNEL_ENABLE(HAL_REMAPDMA_TIM6_DAC1_CH1_DMA1_CH3);
 8000692:	4a0d      	ldr	r2, [pc, #52]	; (80006c8 <HAL_DAC_MspInit+0xb4>)
 8000694:	6813      	ldr	r3, [r2, #0]
 8000696:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800069a:	6013      	str	r3, [r2, #0]
    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800069c:	4b08      	ldr	r3, [pc, #32]	; (80006c0 <HAL_DAC_MspInit+0xac>)
 800069e:	60a3      	str	r3, [r4, #8]
 80006a0:	625c      	str	r4, [r3, #36]	; 0x24
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 80006a2:	2200      	movs	r2, #0
 80006a4:	4611      	mov	r1, r2
 80006a6:	2036      	movs	r0, #54	; 0x36
 80006a8:	f000 fa52 	bl	8000b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 80006ac:	2036      	movs	r0, #54	; 0x36
 80006ae:	f000 fa83 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
}
 80006b2:	e7bb      	b.n	800062c <HAL_DAC_MspInit+0x18>
      Error_Handler();
 80006b4:	f7ff ff94 	bl	80005e0 <Error_Handler>
 80006b8:	e7eb      	b.n	8000692 <HAL_DAC_MspInit+0x7e>
 80006ba:	bf00      	nop
 80006bc:	40007400 	.word	0x40007400
 80006c0:	20000054 	.word	0x20000054
 80006c4:	40020030 	.word	0x40020030
 80006c8:	40010000 	.word	0x40010000

080006cc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006cc:	b500      	push	{lr}
 80006ce:	b083      	sub	sp, #12
  if(htim_base->Instance==TIM2)
 80006d0:	6803      	ldr	r3, [r0, #0]
 80006d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006d6:	d005      	beq.n	80006e4 <HAL_TIM_Base_MspInit+0x18>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
  else if(htim_base->Instance==TIM6)
 80006d8:	4a16      	ldr	r2, [pc, #88]	; (8000734 <HAL_TIM_Base_MspInit+0x68>)
 80006da:	4293      	cmp	r3, r2
 80006dc:	d016      	beq.n	800070c <HAL_TIM_Base_MspInit+0x40>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 80006de:	b003      	add	sp, #12
 80006e0:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_TIM2_CLK_ENABLE();
 80006e4:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80006e8:	69da      	ldr	r2, [r3, #28]
 80006ea:	f042 0201 	orr.w	r2, r2, #1
 80006ee:	61da      	str	r2, [r3, #28]
 80006f0:	69db      	ldr	r3, [r3, #28]
 80006f2:	f003 0301 	and.w	r3, r3, #1
 80006f6:	9300      	str	r3, [sp, #0]
 80006f8:	9b00      	ldr	r3, [sp, #0]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	4611      	mov	r1, r2
 80006fe:	201c      	movs	r0, #28
 8000700:	f000 fa26 	bl	8000b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000704:	201c      	movs	r0, #28
 8000706:	f000 fa57 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
 800070a:	e7e8      	b.n	80006de <HAL_TIM_Base_MspInit+0x12>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800070c:	4b0a      	ldr	r3, [pc, #40]	; (8000738 <HAL_TIM_Base_MspInit+0x6c>)
 800070e:	69da      	ldr	r2, [r3, #28]
 8000710:	f042 0210 	orr.w	r2, r2, #16
 8000714:	61da      	str	r2, [r3, #28]
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	f003 0310 	and.w	r3, r3, #16
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM6_DAC1_IRQn, 0, 0);
 8000720:	2200      	movs	r2, #0
 8000722:	4611      	mov	r1, r2
 8000724:	2036      	movs	r0, #54	; 0x36
 8000726:	f000 fa13 	bl	8000b50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC1_IRQn);
 800072a:	2036      	movs	r0, #54	; 0x36
 800072c:	f000 fa44 	bl	8000bb8 <HAL_NVIC_EnableIRQ>
}
 8000730:	e7d5      	b.n	80006de <HAL_TIM_Base_MspInit+0x12>
 8000732:	bf00      	nop
 8000734:	40001000 	.word	0x40001000
 8000738:	40021000 	.word	0x40021000

0800073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800073c:	b500      	push	{lr}
 800073e:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	2300      	movs	r3, #0
 8000742:	9305      	str	r3, [sp, #20]
 8000744:	9306      	str	r3, [sp, #24]
 8000746:	9307      	str	r3, [sp, #28]
 8000748:	9308      	str	r3, [sp, #32]
 800074a:	9309      	str	r3, [sp, #36]	; 0x24
  if(huart->Instance==USART1)
 800074c:	6803      	ldr	r3, [r0, #0]
 800074e:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <HAL_UART_MspInit+0xa8>)
 8000750:	4293      	cmp	r3, r2
 8000752:	d005      	beq.n	8000760 <HAL_UART_MspInit+0x24>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8000754:	4a24      	ldr	r2, [pc, #144]	; (80007e8 <HAL_UART_MspInit+0xac>)
 8000756:	4293      	cmp	r3, r2
 8000758:	d022      	beq.n	80007a0 <HAL_UART_MspInit+0x64>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800075a:	b00b      	add	sp, #44	; 0x2c
 800075c:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_USART1_CLK_ENABLE();
 8000760:	4b22      	ldr	r3, [pc, #136]	; (80007ec <HAL_UART_MspInit+0xb0>)
 8000762:	699a      	ldr	r2, [r3, #24]
 8000764:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000768:	619a      	str	r2, [r3, #24]
 800076a:	699a      	ldr	r2, [r3, #24]
 800076c:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8000770:	9201      	str	r2, [sp, #4]
 8000772:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000774:	695a      	ldr	r2, [r3, #20]
 8000776:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800077a:	615a      	str	r2, [r3, #20]
 800077c:	695b      	ldr	r3, [r3, #20]
 800077e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000782:	9302      	str	r3, [sp, #8]
 8000784:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000786:	2330      	movs	r3, #48	; 0x30
 8000788:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078e:	2303      	movs	r3, #3
 8000790:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000792:	2307      	movs	r3, #7
 8000794:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000796:	a905      	add	r1, sp, #20
 8000798:	4815      	ldr	r0, [pc, #84]	; (80007f0 <HAL_UART_MspInit+0xb4>)
 800079a:	f000 fc61 	bl	8001060 <HAL_GPIO_Init>
 800079e:	e7dc      	b.n	800075a <HAL_UART_MspInit+0x1e>
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_UART_MspInit+0xb0>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80007a8:	61da      	str	r2, [r3, #28]
 80007aa:	69da      	ldr	r2, [r3, #28]
 80007ac:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80007b0:	9203      	str	r2, [sp, #12]
 80007b2:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	695a      	ldr	r2, [r3, #20]
 80007b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80007ba:	615a      	str	r2, [r3, #20]
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007c2:	9304      	str	r3, [sp, #16]
 80007c4:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007c6:	230c      	movs	r3, #12
 80007c8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ca:	2302      	movs	r3, #2
 80007cc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007ce:	2303      	movs	r3, #3
 80007d0:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007d2:	2307      	movs	r3, #7
 80007d4:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d6:	a905      	add	r1, sp, #20
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f000 fc40 	bl	8001060 <HAL_GPIO_Init>
}
 80007e0:	e7bb      	b.n	800075a <HAL_UART_MspInit+0x1e>
 80007e2:	bf00      	nop
 80007e4:	40013800 	.word	0x40013800
 80007e8:	40004400 	.word	0x40004400
 80007ec:	40021000 	.word	0x40021000
 80007f0:	48000800 	.word	0x48000800

080007f4 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007f4:	4770      	bx	lr

080007f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f6:	e7fe      	b.n	80007f6 <HardFault_Handler>

080007f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007f8:	e7fe      	b.n	80007f8 <MemManage_Handler>

080007fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007fa:	e7fe      	b.n	80007fa <BusFault_Handler>

080007fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007fc:	e7fe      	b.n	80007fc <UsageFault_Handler>

080007fe <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fe:	4770      	bx	lr

08000800 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000800:	4770      	bx	lr

08000802 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000802:	4770      	bx	lr

08000804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000804:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000806:	f000 f97f 	bl	8000b08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800080a:	bd08      	pop	{r3, pc}

0800080c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800080c:	b510      	push	{r4, lr}
 800080e:	b082      	sub	sp, #8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000810:	2001      	movs	r0, #1
 8000812:	f000 fcef 	bl	80011f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8000816:	4c08      	ldr	r4, [pc, #32]	; (8000838 <EXTI0_IRQHandler+0x2c>)
 8000818:	2100      	movs	r1, #0
 800081a:	4620      	mov	r0, r4
 800081c:	f000 fa02 	bl	8000c24 <HAL_DAC_Stop_DMA>
  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)timecode_pulse, TIMECODE_LENGTH, DAC_ALIGN_12B_R);
 8000820:	2100      	movs	r1, #0
 8000822:	9100      	str	r1, [sp, #0]
 8000824:	2312      	movs	r3, #18
 8000826:	4a05      	ldr	r2, [pc, #20]	; (800083c <EXTI0_IRQHandler+0x30>)
 8000828:	4620      	mov	r0, r4
 800082a:	f000 fa43 	bl	8000cb4 <HAL_DAC_Start_DMA>

  concat_timecode();
 800082e:	f000 f8b9 	bl	80009a4 <concat_timecode>

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000832:	b002      	add	sp, #8
 8000834:	bd10      	pop	{r4, pc}
 8000836:	bf00      	nop
 8000838:	20000040 	.word	0x20000040
 800083c:	200002e0 	.word	0x200002e0

08000840 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000840:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000842:	4802      	ldr	r0, [pc, #8]	; (800084c <TIM2_IRQHandler+0xc>)
 8000844:	f001 fa65 	bl	8001d12 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000848:	bd08      	pop	{r3, pc}
 800084a:	bf00      	nop
 800084c:	20000158 	.word	0x20000158

08000850 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8000850:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
  int  flag = __HAL_UART_GET_FLAG(&huart1,UART_FLAG_RXNE);
 8000852:	4808      	ldr	r0, [pc, #32]	; (8000874 <USART1_IRQHandler+0x24>)
 8000854:	6803      	ldr	r3, [r0, #0]
 8000856:	69dc      	ldr	r4, [r3, #28]
 8000858:	f004 0420 	and.w	r4, r4, #32
  char  inchar;
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800085c:	f001 fcdc 	bl	8002218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (flag == 1)
 8000860:	b904      	cbnz	r4, 8000864 <USART1_IRQHandler+0x14>
    {
      inchar = (uint8_t)huart1.Instance->RDR;
      handle_uart_interrupt_gps(inchar);
    }
  /* USER CODE END USART1_IRQn 1 */
}
 8000862:	bd10      	pop	{r4, pc}
      inchar = (uint8_t)huart1.Instance->RDR;
 8000864:	4b03      	ldr	r3, [pc, #12]	; (8000874 <USART1_IRQHandler+0x24>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	8c98      	ldrh	r0, [r3, #36]	; 0x24
      handle_uart_interrupt_gps(inchar);
 800086a:	b2c0      	uxtb	r0, r0
 800086c:	f000 f86e 	bl	800094c <handle_uart_interrupt_gps>
}
 8000870:	e7f7      	b.n	8000862 <USART1_IRQHandler+0x12>
 8000872:	bf00      	nop
 8000874:	20000098 	.word	0x20000098

08000878 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 8000878:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  int  flag = __HAL_UART_GET_FLAG(&huart2,UART_FLAG_RXNE);
 800087a:	4808      	ldr	r0, [pc, #32]	; (800089c <USART2_IRQHandler+0x24>)
 800087c:	6803      	ldr	r3, [r0, #0]
 800087e:	69dc      	ldr	r4, [r3, #28]
 8000880:	f004 0420 	and.w	r4, r4, #32
  char  inchar;
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000884:	f001 fcc8 	bl	8002218 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  if (flag == 1)
 8000888:	b904      	cbnz	r4, 800088c <USART2_IRQHandler+0x14>
  {
    inchar = (uint8_t)huart2.Instance->RDR;
    handle_uart_interrupt_pc(inchar);
  }
  /* USER CODE END USART2_IRQn 1 */
}
 800088a:	bd10      	pop	{r4, pc}
    inchar = (uint8_t)huart2.Instance->RDR;
 800088c:	4b03      	ldr	r3, [pc, #12]	; (800089c <USART2_IRQHandler+0x24>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	8c98      	ldrh	r0, [r3, #36]	; 0x24
    handle_uart_interrupt_pc(inchar);
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	f000 f82e 	bl	80008f4 <handle_uart_interrupt_pc>
}
 8000898:	e7f7      	b.n	800088a <USART2_IRQHandler+0x12>
 800089a:	bf00      	nop
 800089c:	20000198 	.word	0x20000198

080008a0 <TIM6_DAC1_IRQHandler>:

/**
  * @brief This function handles TIM6 global and DAC1 underrun error interrupts.
  */
void TIM6_DAC1_IRQHandler(void)
{
 80008a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM6_DAC1_IRQn 0 */


  /* USER CODE END TIM6_DAC1_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008a2:	4809      	ldr	r0, [pc, #36]	; (80008c8 <TIM6_DAC1_IRQHandler+0x28>)
 80008a4:	f001 fa35 	bl	8001d12 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 80008a8:	4c08      	ldr	r4, [pc, #32]	; (80008cc <TIM6_DAC1_IRQHandler+0x2c>)
 80008aa:	4620      	mov	r0, r4
 80008ac:	f000 facd 	bl	8000e4a <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC1_IRQn 1 */
  int flag = __HAL_DAC_GET_FLAG(&hdac1,DAC_FLAG_DMAUDR1);
 80008b0:	6823      	ldr	r3, [r4, #0]
 80008b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if (flag)
 80008b4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
 80008b8:	d100      	bne.n	80008bc <TIM6_DAC1_IRQHandler+0x1c>
  {
    HAL_UART_Transmit_IT(&huart2, (uint8_t*)"oof\n", 4);
  }
  /* USER CODE END TIM6_DAC1_IRQn 1 */
}
 80008ba:	bd10      	pop	{r4, pc}
    HAL_UART_Transmit_IT(&huart2, (uint8_t*)"oof\n", 4);
 80008bc:	2204      	movs	r2, #4
 80008be:	4904      	ldr	r1, [pc, #16]	; (80008d0 <TIM6_DAC1_IRQHandler+0x30>)
 80008c0:	4804      	ldr	r0, [pc, #16]	; (80008d4 <TIM6_DAC1_IRQHandler+0x34>)
 80008c2:	f001 fc61 	bl	8002188 <HAL_UART_Transmit_IT>
}
 80008c6:	e7f8      	b.n	80008ba <TIM6_DAC1_IRQHandler+0x1a>
 80008c8:	20000118 	.word	0x20000118
 80008cc:	20000040 	.word	0x20000040
 80008d0:	080028c4 	.word	0x080028c4
 80008d4:	20000198 	.word	0x20000198

080008d8 <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008d8:	4b05      	ldr	r3, [pc, #20]	; (80008f0 <SystemInit+0x18>)
 80008da:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80008de:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80008e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80008e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80008ea:	609a      	str	r2, [r3, #8]
#endif
}
 80008ec:	4770      	bx	lr
 80008ee:	bf00      	nop
 80008f0:	e000ed00 	.word	0xe000ed00

080008f4 <handle_uart_interrupt_pc>:

void handle_uart_interrupt_pc(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 80008f4:	2824      	cmp	r0, #36	; 0x24
 80008f6:	d007      	beq.n	8000908 <handle_uart_interrupt_pc+0x14>
    {
        current_index = 0;
        PC_UART = RECEIVING;
    }
    else if (inchar == '*')
 80008f8:	282a      	cmp	r0, #42	; 0x2a
 80008fa:	d00c      	beq.n	8000916 <handle_uart_interrupt_pc+0x22>
    {
        pc_message_length = current_index;
        PC_UART = DONE;
    }
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 80008fc:	4b0f      	ldr	r3, [pc, #60]	; (800093c <handle_uart_interrupt_pc+0x48>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	2b01      	cmp	r3, #1
 8000904:	d00f      	beq.n	8000926 <handle_uart_interrupt_pc+0x32>
    {
        pc_message[current_index] = inchar;
        current_index++;
    }
}
 8000906:	4770      	bx	lr
        current_index = 0;
 8000908:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <handle_uart_interrupt_pc+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
        PC_UART = RECEIVING;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <handle_uart_interrupt_pc+0x48>)
 8000910:	2201      	movs	r2, #1
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	4770      	bx	lr
        pc_message_length = current_index;
 8000916:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <handle_uart_interrupt_pc+0x4c>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <handle_uart_interrupt_pc+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
        PC_UART = DONE;
 800091e:	4b07      	ldr	r3, [pc, #28]	; (800093c <handle_uart_interrupt_pc+0x48>)
 8000920:	2202      	movs	r2, #2
 8000922:	701a      	strb	r2, [r3, #0]
 8000924:	4770      	bx	lr
    else if (PC_UART == RECEIVING && current_index < INPUT_LENGTH)
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <handle_uart_interrupt_pc+0x4c>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	2b63      	cmp	r3, #99	; 0x63
 800092c:	dceb      	bgt.n	8000906 <handle_uart_interrupt_pc+0x12>
        pc_message[current_index] = inchar;
 800092e:	4a06      	ldr	r2, [pc, #24]	; (8000948 <handle_uart_interrupt_pc+0x54>)
 8000930:	54d0      	strb	r0, [r2, r3]
        current_index++;
 8000932:	3301      	adds	r3, #1
 8000934:	4a02      	ldr	r2, [pc, #8]	; (8000940 <handle_uart_interrupt_pc+0x4c>)
 8000936:	6013      	str	r3, [r2, #0]
}
 8000938:	e7e5      	b.n	8000906 <handle_uart_interrupt_pc+0x12>
 800093a:	bf00      	nop
 800093c:	20000029 	.word	0x20000029
 8000940:	2000002c 	.word	0x2000002c
 8000944:	20000038 	.word	0x20000038
 8000948:	20000218 	.word	0x20000218

0800094c <handle_uart_interrupt_gps>:

void handle_uart_interrupt_gps(char inchar)
{
    static int current_index = 0;

    if (inchar == '$')
 800094c:	2824      	cmp	r0, #36	; 0x24
 800094e:	d007      	beq.n	8000960 <handle_uart_interrupt_gps+0x14>
    {
        current_index = 0;
       GPS_UART = RECEIVING;
    }
    else if (inchar == '*')
 8000950:	282a      	cmp	r0, #42	; 0x2a
 8000952:	d00c      	beq.n	800096e <handle_uart_interrupt_gps+0x22>
    {
        gps_message_length = current_index;
        GPS_UART = DONE;
    }
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <handle_uart_interrupt_gps+0x48>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	b2db      	uxtb	r3, r3
 800095a:	2b01      	cmp	r3, #1
 800095c:	d00f      	beq.n	800097e <handle_uart_interrupt_gps+0x32>
    {
        gps_message[current_index] = inchar;
        current_index++;
    }
}
 800095e:	4770      	bx	lr
        current_index = 0;
 8000960:	4b0d      	ldr	r3, [pc, #52]	; (8000998 <handle_uart_interrupt_gps+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
       GPS_UART = RECEIVING;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <handle_uart_interrupt_gps+0x48>)
 8000968:	2201      	movs	r2, #1
 800096a:	701a      	strb	r2, [r3, #0]
 800096c:	4770      	bx	lr
        gps_message_length = current_index;
 800096e:	4b0a      	ldr	r3, [pc, #40]	; (8000998 <handle_uart_interrupt_gps+0x4c>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	4b0a      	ldr	r3, [pc, #40]	; (800099c <handle_uart_interrupt_gps+0x50>)
 8000974:	601a      	str	r2, [r3, #0]
        GPS_UART = DONE;
 8000976:	4b07      	ldr	r3, [pc, #28]	; (8000994 <handle_uart_interrupt_gps+0x48>)
 8000978:	2202      	movs	r2, #2
 800097a:	701a      	strb	r2, [r3, #0]
 800097c:	4770      	bx	lr
    else if (GPS_UART == RECEIVING && current_index < INPUT_LENGTH)
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <handle_uart_interrupt_gps+0x4c>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	2b63      	cmp	r3, #99	; 0x63
 8000984:	dceb      	bgt.n	800095e <handle_uart_interrupt_gps+0x12>
        gps_message[current_index] = inchar;
 8000986:	4a06      	ldr	r2, [pc, #24]	; (80009a0 <handle_uart_interrupt_gps+0x54>)
 8000988:	54d0      	strb	r0, [r2, r3]
        current_index++;
 800098a:	3301      	adds	r3, #1
 800098c:	4a02      	ldr	r2, [pc, #8]	; (8000998 <handle_uart_interrupt_gps+0x4c>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	e7e5      	b.n	800095e <handle_uart_interrupt_gps+0x12>
 8000992:	bf00      	nop
 8000994:	20000028 	.word	0x20000028
 8000998:	20000030 	.word	0x20000030
 800099c:	20000034 	.word	0x20000034
 80009a0:	2000027c 	.word	0x2000027c

080009a4 <concat_timecode>:

void concat_timecode()
{
    static uint16_t seconds = 0;

    timecode[0] = 'P';
 80009a4:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <concat_timecode+0x70>)
 80009a6:	2250      	movs	r2, #80	; 0x50
 80009a8:	701a      	strb	r2, [r3, #0]

    for (int i = 0; i<TIMECODE_LENGTH-1; i++)
 80009aa:	2200      	movs	r2, #0
 80009ac:	e008      	b.n	80009c0 <concat_timecode+0x1c>
    {
        timecode[i+1] = '0' + (seconds>>i & 1);
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <concat_timecode+0x74>)
 80009b0:	881b      	ldrh	r3, [r3, #0]
 80009b2:	4113      	asrs	r3, r2
 80009b4:	f003 0301 	and.w	r3, r3, #1
 80009b8:	3201      	adds	r2, #1
 80009ba:	3330      	adds	r3, #48	; 0x30
 80009bc:	4915      	ldr	r1, [pc, #84]	; (8000a14 <concat_timecode+0x70>)
 80009be:	548b      	strb	r3, [r1, r2]
    for (int i = 0; i<TIMECODE_LENGTH-1; i++)
 80009c0:	2a10      	cmp	r2, #16
 80009c2:	ddf4      	ble.n	80009ae <concat_timecode+0xa>
    }

    for (int i = 0; i<TIMECODE_LENGTH;i++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	e005      	b.n	80009d4 <concat_timecode+0x30>
    {
        switch(timecode[i])
        {
        case 'P':
            timecode_pulse[i] = 0x800;
 80009c8:	4a14      	ldr	r2, [pc, #80]	; (8000a1c <concat_timecode+0x78>)
 80009ca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ce:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i<TIMECODE_LENGTH;i++)
 80009d2:	3301      	adds	r3, #1
 80009d4:	2b11      	cmp	r3, #17
 80009d6:	dc17      	bgt.n	8000a08 <concat_timecode+0x64>
        switch(timecode[i])
 80009d8:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <concat_timecode+0x70>)
 80009da:	5cd2      	ldrb	r2, [r2, r3]
 80009dc:	2a31      	cmp	r2, #49	; 0x31
 80009de:	d00d      	beq.n	80009fc <concat_timecode+0x58>
 80009e0:	2a50      	cmp	r2, #80	; 0x50
 80009e2:	d0f1      	beq.n	80009c8 <concat_timecode+0x24>
 80009e4:	2a30      	cmp	r2, #48	; 0x30
 80009e6:	d004      	beq.n	80009f2 <concat_timecode+0x4e>
            break;
        case '1':
            timecode_pulse[i] = 0xFFF;
            break;
        default:
            timecode_pulse[i] = 0x000;
 80009e8:	4a0c      	ldr	r2, [pc, #48]	; (8000a1c <concat_timecode+0x78>)
 80009ea:	2100      	movs	r1, #0
 80009ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80009f0:	e7ef      	b.n	80009d2 <concat_timecode+0x2e>
            timecode_pulse[i] = 0x000;
 80009f2:	4a0a      	ldr	r2, [pc, #40]	; (8000a1c <concat_timecode+0x78>)
 80009f4:	2100      	movs	r1, #0
 80009f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 80009fa:	e7ea      	b.n	80009d2 <concat_timecode+0x2e>
            timecode_pulse[i] = 0xFFF;
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <concat_timecode+0x78>)
 80009fe:	f640 71ff 	movw	r1, #4095	; 0xfff
 8000a02:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            break;
 8000a06:	e7e4      	b.n	80009d2 <concat_timecode+0x2e>
        }
    }

    seconds++;
 8000a08:	4a03      	ldr	r2, [pc, #12]	; (8000a18 <concat_timecode+0x74>)
 8000a0a:	8813      	ldrh	r3, [r2, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	8013      	strh	r3, [r2, #0]
}
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	20000328 	.word	0x20000328
 8000a18:	2000003c 	.word	0x2000003c
 8000a1c:	200002e0 	.word	0x200002e0

08000a20 <is_same_string>:


bool is_same_string(const char str1[], const char str2[], int length)
{
    bool isSame = true;
    for (int i = 0; i < length; i++)
 8000a20:	2300      	movs	r3, #0
 8000a22:	4293      	cmp	r3, r2
 8000a24:	da0c      	bge.n	8000a40 <is_same_string+0x20>
{
 8000a26:	b430      	push	{r4, r5}
    {
        if (str1[i] != str2[i])
 8000a28:	5cc5      	ldrb	r5, [r0, r3]
 8000a2a:	5ccc      	ldrb	r4, [r1, r3]
 8000a2c:	42a5      	cmp	r5, r4
 8000a2e:	d105      	bne.n	8000a3c <is_same_string+0x1c>
    for (int i = 0; i < length; i++)
 8000a30:	3301      	adds	r3, #1
 8000a32:	4293      	cmp	r3, r2
 8000a34:	dbf8      	blt.n	8000a28 <is_same_string+0x8>
    bool isSame = true;
 8000a36:	2001      	movs	r0, #1
            isSame = false;
            break;
        }
    }
    return isSame;
}
 8000a38:	bc30      	pop	{r4, r5}
 8000a3a:	4770      	bx	lr
            isSame = false;
 8000a3c:	2000      	movs	r0, #0
 8000a3e:	e7fb      	b.n	8000a38 <is_same_string+0x18>
    bool isSame = true;
 8000a40:	2001      	movs	r0, #1
}
 8000a42:	4770      	bx	lr

08000a44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a7c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000a48:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000a4a:	e003      	b.n	8000a54 <LoopCopyDataInit>

08000a4c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000a4c:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000a4e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000a50:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000a52:	3104      	adds	r1, #4

08000a54 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000a54:	480b      	ldr	r0, [pc, #44]	; (8000a84 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000a56:	4b0c      	ldr	r3, [pc, #48]	; (8000a88 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000a58:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000a5a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000a5c:	d3f6      	bcc.n	8000a4c <CopyDataInit>
	ldr	r2, =_sbss
 8000a5e:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000a60:	e002      	b.n	8000a68 <LoopFillZerobss>

08000a62 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000a62:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000a64:	f842 3b04 	str.w	r3, [r2], #4

08000a68 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <LoopForever+0x16>)
	cmp	r2, r3
 8000a6a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000a6c:	d3f9      	bcc.n	8000a62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a6e:	f7ff ff33 	bl	80008d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a72:	f001 fe9f 	bl	80027b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a76:	f7ff fcf1 	bl	800045c <main>

08000a7a <LoopForever>:

LoopForever:
    b LoopForever
 8000a7a:	e7fe      	b.n	8000a7a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000a7c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000a80:	0800290c 	.word	0x0800290c
	ldr	r0, =_sdata
 8000a84:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000a88:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000a8c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000a90:	20000340 	.word	0x20000340

08000a94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a94:	e7fe      	b.n	8000a94 <ADC1_2_IRQHandler>
	...

08000a98 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a98:	b510      	push	{r4, lr}
 8000a9a:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <HAL_InitTick+0x40>)
 8000a9e:	7818      	ldrb	r0, [r3, #0]
 8000aa0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aa4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000aa8:	4a0c      	ldr	r2, [pc, #48]	; (8000adc <HAL_InitTick+0x44>)
 8000aaa:	6810      	ldr	r0, [r2, #0]
 8000aac:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ab0:	f000 f890 	bl	8000bd4 <HAL_SYSTICK_Config>
 8000ab4:	b968      	cbnz	r0, 8000ad2 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ab6:	2c0f      	cmp	r4, #15
 8000ab8:	d901      	bls.n	8000abe <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 8000aba:	2001      	movs	r0, #1
 8000abc:	e00a      	b.n	8000ad4 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000abe:	2200      	movs	r2, #0
 8000ac0:	4621      	mov	r1, r4
 8000ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac6:	f000 f843 	bl	8000b50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_InitTick+0x48>)
 8000acc:	601c      	str	r4, [r3, #0]
  }
   /* Return function status */
  return HAL_OK;
 8000ace:	2000      	movs	r0, #0
 8000ad0:	e000      	b.n	8000ad4 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 8000ad2:	2001      	movs	r0, #1
}
 8000ad4:	bd10      	pop	{r4, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000004 	.word	0x20000004
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000008 	.word	0x20000008

08000ae4 <HAL_Init>:
{
 8000ae4:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <HAL_Init+0x20>)
 8000ae8:	6813      	ldr	r3, [r2, #0]
 8000aea:	f043 0310 	orr.w	r3, r3, #16
 8000aee:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 f81b 	bl	8000b2c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f7ff ffce 	bl	8000a98 <HAL_InitTick>
  HAL_MspInit();
 8000afc:	f7ff fd72 	bl	80005e4 <HAL_MspInit>
}
 8000b00:	2000      	movs	r0, #0
 8000b02:	bd08      	pop	{r3, pc}
 8000b04:	40022000 	.word	0x40022000

08000b08 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b08:	4a03      	ldr	r2, [pc, #12]	; (8000b18 <HAL_IncTick+0x10>)
 8000b0a:	6811      	ldr	r1, [r2, #0]
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_IncTick+0x14>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	440b      	add	r3, r1
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop
 8000b18:	2000033c 	.word	0x2000033c
 8000b1c:	20000004 	.word	0x20000004

08000b20 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000b20:	4b01      	ldr	r3, [pc, #4]	; (8000b28 <HAL_GetTick+0x8>)
 8000b22:	6818      	ldr	r0, [r3, #0]
}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	2000033c 	.word	0x2000033c

08000b2c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b2c:	4a07      	ldr	r2, [pc, #28]	; (8000b4c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b2e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b30:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b34:	041b      	lsls	r3, r3, #16
 8000b36:	0c1b      	lsrs	r3, r3, #16
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b38:	0200      	lsls	r0, r0, #8
 8000b3a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b3e:	4318      	orrs	r0, r3
  reg_value  =  (reg_value                                   |
 8000b40:	f040 60bf 	orr.w	r0, r0, #100139008	; 0x5f80000
 8000b44:	f440 3000 	orr.w	r0, r0, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8000b48:	60d0      	str	r0, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000b4a:	4770      	bx	lr
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b430      	push	{r4, r5}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_NVIC_SetPriority+0x60>)
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b5a:	f1c3 0407 	rsb	r4, r3, #7
 8000b5e:	2c04      	cmp	r4, #4
 8000b60:	bf28      	it	cs
 8000b62:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b64:	1d1d      	adds	r5, r3, #4
 8000b66:	2d06      	cmp	r5, #6
 8000b68:	d918      	bls.n	8000b9c <HAL_NVIC_SetPriority+0x4c>
 8000b6a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	f04f 35ff 	mov.w	r5, #4294967295
 8000b70:	fa05 f404 	lsl.w	r4, r5, r4
 8000b74:	ea21 0104 	bic.w	r1, r1, r4
 8000b78:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b7a:	fa05 f303 	lsl.w	r3, r5, r3
 8000b7e:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b82:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8000b84:	2800      	cmp	r0, #0
 8000b86:	db0b      	blt.n	8000ba0 <HAL_NVIC_SetPriority+0x50>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b88:	0109      	lsls	r1, r1, #4
 8000b8a:	b2c9      	uxtb	r1, r1
 8000b8c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8000b90:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8000b94:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000b98:	bc30      	pop	{r4, r5}
 8000b9a:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	e7e5      	b.n	8000b6c <HAL_NVIC_SetPriority+0x1c>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ba0:	f000 000f 	and.w	r0, r0, #15
 8000ba4:	0109      	lsls	r1, r1, #4
 8000ba6:	b2c9      	uxtb	r1, r1
 8000ba8:	4b02      	ldr	r3, [pc, #8]	; (8000bb4 <HAL_NVIC_SetPriority+0x64>)
 8000baa:	5419      	strb	r1, [r3, r0]
 8000bac:	e7f4      	b.n	8000b98 <HAL_NVIC_SetPriority+0x48>
 8000bae:	bf00      	nop
 8000bb0:	e000ed00 	.word	0xe000ed00
 8000bb4:	e000ed14 	.word	0xe000ed14

08000bb8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000bb8:	2800      	cmp	r0, #0
 8000bba:	db07      	blt.n	8000bcc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bbc:	f000 021f 	and.w	r2, r0, #31
 8000bc0:	0940      	lsrs	r0, r0, #5
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	4093      	lsls	r3, r2
 8000bc6:	4a02      	ldr	r2, [pc, #8]	; (8000bd0 <HAL_NVIC_EnableIRQ+0x18>)
 8000bc8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop
 8000bd0:	e000e100 	.word	0xe000e100

08000bd4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	3801      	subs	r0, #1
 8000bd6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bda:	d20a      	bcs.n	8000bf2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <HAL_SYSTICK_Config+0x24>)
 8000bde:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_SYSTICK_Config+0x28>)
 8000be2:	21f0      	movs	r1, #240	; 0xf0
 8000be4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000be8:	2000      	movs	r0, #0
 8000bea:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bec:	2207      	movs	r2, #7
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000bf2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
  /* Check DAC handle */
  if(hdac == NULL)
 8000c00:	b170      	cbz	r0, 8000c20 <HAL_DAC_Init+0x20>
{ 
 8000c02:	b510      	push	{r4, lr}
 8000c04:	4604      	mov	r4, r0
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000c06:	7903      	ldrb	r3, [r0, #4]
 8000c08:	b133      	cbz	r3, 8000c18 <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000c0e:	2000      	movs	r0, #0
 8000c10:	6120      	str	r0, [r4, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000c12:	2301      	movs	r3, #1
 8000c14:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8000c16:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8000c18:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8000c1a:	f7ff fcfb 	bl	8000614 <HAL_DAC_MspInit>
 8000c1e:	e7f4      	b.n	8000c0a <HAL_DAC_Init+0xa>
     return HAL_ERROR;
 8000c20:	2001      	movs	r0, #1
}
 8000c22:	4770      	bx	lr

08000c24 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected  
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected    
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000c24:	b510      	push	{r4, lr}
 8000c26:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Disable the selected DAC channel DMA request */
    hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << Channel);
 8000c28:	6800      	ldr	r0, [r0, #0]
 8000c2a:	6803      	ldr	r3, [r0, #0]
 8000c2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c30:	408a      	lsls	r2, r1
 8000c32:	ea23 0302 	bic.w	r3, r3, r2
 8000c36:	6003      	str	r3, [r0, #0]
    
  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000c38:	6820      	ldr	r0, [r4, #0]
 8000c3a:	6803      	ldr	r3, [r0, #0]
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	408a      	lsls	r2, r1
 8000c40:	ea23 0302 	bic.w	r3, r3, r2
 8000c44:	6003      	str	r3, [r0, #0]
  
  /* Disable the DMA channel */
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000c46:	b959      	cbnz	r1, 8000c60 <HAL_DAC_Stop_DMA+0x3c>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);   
 8000c48:	68a0      	ldr	r0, [r4, #8]
 8000c4a:	f000 f9c1 	bl	8000fd0 <HAL_DMA_Abort>
    
    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000c4e:	6822      	ldr	r2, [r4, #0]
 8000c50:	6813      	ldr	r3, [r2, #0]
 8000c52:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c56:	6013      	str	r3, [r2, #0]
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
  }
#endif /* DAC_CHANNEL2_SUPPORT */
    
  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8000c58:	b958      	cbnz	r0, 8000c72 <HAL_DAC_Stop_DMA+0x4e>
    hdac->State = HAL_DAC_STATE_ERROR;      
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	7123      	strb	r3, [r4, #4]
  }
  
  /* Return function status */
  return status;
}
 8000c5e:	bd10      	pop	{r4, pc}
    status = HAL_DMA_Abort(hdac->DMA_Handle2);   
 8000c60:	68e0      	ldr	r0, [r4, #12]
 8000c62:	f000 f9b5 	bl	8000fd0 <HAL_DMA_Abort>
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000c66:	6822      	ldr	r2, [r4, #0]
 8000c68:	6813      	ldr	r3, [r2, #0]
 8000c6a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000c6e:	6013      	str	r3, [r2, #0]
 8000c70:	e7f2      	b.n	8000c58 <HAL_DAC_Stop_DMA+0x34>
    hdac->State = HAL_DAC_STATE_ERROR;      
 8000c72:	2304      	movs	r3, #4
 8000c74:	7123      	strb	r3, [r4, #4]
 8000c76:	e7f2      	b.n	8000c5e <HAL_DAC_Stop_DMA+0x3a>

08000c78 <HAL_DAC_ConvCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallback1 could be implemented in the user file
   */
}
 8000c78:	4770      	bx	lr

08000c7a <HAL_DAC_ConvHalfCpltCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000c7a:	4770      	bx	lr

08000c7c <HAL_DAC_ErrorCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallback could be implemented in the user file
   */
}
 8000c7c:	4770      	bx	lr

08000c7e <HAL_DAC_DMAUnderrunCallbackCh1>:
  UNUSED(hdac);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000c7e:	4770      	bx	lr

08000c80 <DAC_DMAErrorCh1>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)   
{
 8000c80:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000c82:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000c84:	6923      	ldr	r3, [r4, #16]
 8000c86:	f043 0304 	orr.w	r3, r3, #4
 8000c8a:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else  
  HAL_DAC_ErrorCallbackCh1(hdac); 
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f7ff fff5 	bl	8000c7c <HAL_DAC_ErrorCallbackCh1>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8000c92:	2301      	movs	r3, #1
 8000c94:	7123      	strb	r3, [r4, #4]
}
 8000c96:	bd10      	pop	{r4, pc}

08000c98 <DAC_DMAHalfConvCpltCh1>:
{
 8000c98:	b508      	push	{r3, lr}
    HAL_DAC_ConvHalfCpltCallbackCh1(hdac); 
 8000c9a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000c9c:	f7ff ffed 	bl	8000c7a <HAL_DAC_ConvHalfCpltCallbackCh1>
}
 8000ca0:	bd08      	pop	{r3, pc}

08000ca2 <DAC_DMAConvCpltCh1>:
{
 8000ca2:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000ca4:	6a44      	ldr	r4, [r0, #36]	; 0x24
  HAL_DAC_ConvCpltCallbackCh1(hdac); 
 8000ca6:	4620      	mov	r0, r4
 8000ca8:	f7ff ffe6 	bl	8000c78 <HAL_DAC_ConvCpltCallbackCh1>
  hdac->State= HAL_DAC_STATE_READY;
 8000cac:	2301      	movs	r3, #1
 8000cae:	7123      	strb	r3, [r4, #4]
}
 8000cb0:	bd10      	pop	{r4, pc}
	...

08000cb4 <HAL_DAC_Start_DMA>:
{
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdac);
 8000cb8:	7946      	ldrb	r6, [r0, #5]
 8000cba:	2e01      	cmp	r6, #1
 8000cbc:	d064      	beq.n	8000d88 <HAL_DAC_Start_DMA+0xd4>
 8000cbe:	2501      	movs	r5, #1
 8000cc0:	7145      	strb	r5, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000cc2:	2502      	movs	r5, #2
 8000cc4:	7105      	strb	r5, [r0, #4]
  if(Channel == DAC_CHANNEL_1)
 8000cc6:	2900      	cmp	r1, #0
 8000cc8:	d135      	bne.n	8000d36 <HAL_DAC_Start_DMA+0x82>
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8000cca:	6885      	ldr	r5, [r0, #8]
 8000ccc:	4e2f      	ldr	r6, [pc, #188]	; (8000d8c <HAL_DAC_Start_DMA+0xd8>)
 8000cce:	62ae      	str	r6, [r5, #40]	; 0x28
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000cd0:	6885      	ldr	r5, [r0, #8]
 8000cd2:	4e2f      	ldr	r6, [pc, #188]	; (8000d90 <HAL_DAC_Start_DMA+0xdc>)
 8000cd4:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8000cd6:	6885      	ldr	r5, [r0, #8]
 8000cd8:	4e2e      	ldr	r6, [pc, #184]	; (8000d94 <HAL_DAC_Start_DMA+0xe0>)
 8000cda:	632e      	str	r6, [r5, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);   
 8000cdc:	6806      	ldr	r6, [r0, #0]
 8000cde:	6835      	ldr	r5, [r6, #0]
 8000ce0:	f445 5580 	orr.w	r5, r5, #4096	; 0x1000
 8000ce4:	6035      	str	r5, [r6, #0]
    switch(Alignment)
 8000ce6:	2c04      	cmp	r4, #4
 8000ce8:	d01f      	beq.n	8000d2a <HAL_DAC_Start_DMA+0x76>
 8000cea:	2c08      	cmp	r4, #8
 8000cec:	d020      	beq.n	8000d30 <HAL_DAC_Start_DMA+0x7c>
 8000cee:	b10c      	cbz	r4, 8000cf4 <HAL_DAC_Start_DMA+0x40>
  uint32_t tmpreg = 0U;
 8000cf0:	460e      	mov	r6, r1
 8000cf2:	e001      	b.n	8000cf8 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000cf4:	6806      	ldr	r6, [r0, #0]
 8000cf6:	3608      	adds	r6, #8
 8000cf8:	4617      	mov	r7, r2
 8000cfa:	460d      	mov	r5, r1
 8000cfc:	4604      	mov	r4, r0
  if(Channel == DAC_CHANNEL_1)
 8000cfe:	2900      	cmp	r1, #0
 8000d00:	d137      	bne.n	8000d72 <HAL_DAC_Start_DMA+0xbe>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000d02:	6801      	ldr	r1, [r0, #0]
 8000d04:	680a      	ldr	r2, [r1, #0]
 8000d06:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000d0a:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000d0c:	4632      	mov	r2, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	6880      	ldr	r0, [r0, #8]
 8000d12:	f000 f923 	bl	8000f5c <HAL_DMA_Start_IT>
  __HAL_UNLOCK(hdac);
 8000d16:	2000      	movs	r0, #0
 8000d18:	7160      	strb	r0, [r4, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8000d1a:	6822      	ldr	r2, [r4, #0]
 8000d1c:	6813      	ldr	r3, [r2, #0]
 8000d1e:	2101      	movs	r1, #1
 8000d20:	fa01 f505 	lsl.w	r5, r1, r5
 8000d24:	431d      	orrs	r5, r3
 8000d26:	6015      	str	r5, [r2, #0]
}
 8000d28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000d2a:	6806      	ldr	r6, [r0, #0]
 8000d2c:	360c      	adds	r6, #12
        break;
 8000d2e:	e7e3      	b.n	8000cf8 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000d30:	6806      	ldr	r6, [r0, #0]
 8000d32:	3610      	adds	r6, #16
        break;
 8000d34:	e7e0      	b.n	8000cf8 <HAL_DAC_Start_DMA+0x44>
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000d36:	68c5      	ldr	r5, [r0, #12]
 8000d38:	4e17      	ldr	r6, [pc, #92]	; (8000d98 <HAL_DAC_Start_DMA+0xe4>)
 8000d3a:	62ae      	str	r6, [r5, #40]	; 0x28
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000d3c:	68c5      	ldr	r5, [r0, #12]
 8000d3e:	4e17      	ldr	r6, [pc, #92]	; (8000d9c <HAL_DAC_Start_DMA+0xe8>)
 8000d40:	62ee      	str	r6, [r5, #44]	; 0x2c
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000d42:	68c5      	ldr	r5, [r0, #12]
 8000d44:	4e16      	ldr	r6, [pc, #88]	; (8000da0 <HAL_DAC_Start_DMA+0xec>)
 8000d46:	632e      	str	r6, [r5, #48]	; 0x30
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2); 
 8000d48:	6806      	ldr	r6, [r0, #0]
 8000d4a:	6835      	ldr	r5, [r6, #0]
 8000d4c:	f045 5580 	orr.w	r5, r5, #268435456	; 0x10000000
 8000d50:	6035      	str	r5, [r6, #0]
    switch(Alignment)
 8000d52:	2c04      	cmp	r4, #4
 8000d54:	d007      	beq.n	8000d66 <HAL_DAC_Start_DMA+0xb2>
 8000d56:	2c08      	cmp	r4, #8
 8000d58:	d008      	beq.n	8000d6c <HAL_DAC_Start_DMA+0xb8>
 8000d5a:	b10c      	cbz	r4, 8000d60 <HAL_DAC_Start_DMA+0xac>
  uint32_t tmpreg = 0U;
 8000d5c:	2600      	movs	r6, #0
 8000d5e:	e7cb      	b.n	8000cf8 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000d60:	6806      	ldr	r6, [r0, #0]
 8000d62:	3614      	adds	r6, #20
        break;
 8000d64:	e7c8      	b.n	8000cf8 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000d66:	6806      	ldr	r6, [r0, #0]
 8000d68:	3618      	adds	r6, #24
        break;
 8000d6a:	e7c5      	b.n	8000cf8 <HAL_DAC_Start_DMA+0x44>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000d6c:	6806      	ldr	r6, [r0, #0]
 8000d6e:	361c      	adds	r6, #28
        break;
 8000d70:	e7c2      	b.n	8000cf8 <HAL_DAC_Start_DMA+0x44>
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000d72:	6801      	ldr	r1, [r0, #0]
 8000d74:	680a      	ldr	r2, [r1, #0]
 8000d76:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000d7a:	600a      	str	r2, [r1, #0]
    HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000d7c:	4632      	mov	r2, r6
 8000d7e:	4639      	mov	r1, r7
 8000d80:	68c0      	ldr	r0, [r0, #12]
 8000d82:	f000 f8eb 	bl	8000f5c <HAL_DMA_Start_IT>
 8000d86:	e7c6      	b.n	8000d16 <HAL_DAC_Start_DMA+0x62>
  __HAL_LOCK(hdac);
 8000d88:	2002      	movs	r0, #2
 8000d8a:	e7cd      	b.n	8000d28 <HAL_DAC_Start_DMA+0x74>
 8000d8c:	08000ca3 	.word	0x08000ca3
 8000d90:	08000c99 	.word	0x08000c99
 8000d94:	08000c81 	.word	0x08000c81
 8000d98:	08000e13 	.word	0x08000e13
 8000d9c:	08000e25 	.word	0x08000e25
 8000da0:	08000e31 	.word	0x08000e31

08000da4 <HAL_DAC_ConfigChannel>:
{
 8000da4:	b430      	push	{r4, r5}
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000da6:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hdac);
 8000da8:	7943      	ldrb	r3, [r0, #5]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d02c      	beq.n	8000e08 <HAL_DAC_ConfigChannel+0x64>
 8000dae:	2301      	movs	r3, #1
 8000db0:	7143      	strb	r3, [r0, #5]
  hdac->State = HAL_DAC_STATE_BUSY;
 8000db2:	2302      	movs	r3, #2
 8000db4:	7103      	strb	r3, [r0, #4]
  tmpreg1 = hdac->Instance->CR;
 8000db6:	6823      	ldr	r3, [r4, #0]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000db8:	4d14      	ldr	r5, [pc, #80]	; (8000e0c <HAL_DAC_ConfigChannel+0x68>)
 8000dba:	42ac      	cmp	r4, r5
 8000dbc:	d019      	beq.n	8000df2 <HAL_DAC_ConfigChannel+0x4e>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000dbe:	f640 75fe 	movw	r5, #4094	; 0xffe
 8000dc2:	4095      	lsls	r5, r2
 8000dc4:	ea23 0505 	bic.w	r5, r3, r5
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000dc8:	680b      	ldr	r3, [r1, #0]
 8000dca:	6889      	ldr	r1, [r1, #8]
 8000dcc:	430b      	orrs	r3, r1
  tmpreg1 |= tmpreg2 << Channel;
 8000dce:	4093      	lsls	r3, r2
 8000dd0:	432b      	orrs	r3, r5
  hdac->Instance->CR = tmpreg1;
 8000dd2:	6023      	str	r3, [r4, #0]
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000dd4:	6804      	ldr	r4, [r0, #0]
 8000dd6:	6823      	ldr	r3, [r4, #0]
 8000dd8:	21c0      	movs	r1, #192	; 0xc0
 8000dda:	fa01 f202 	lsl.w	r2, r1, r2
 8000dde:	ea23 0202 	bic.w	r2, r3, r2
 8000de2:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000de4:	2301      	movs	r3, #1
 8000de6:	7103      	strb	r3, [r0, #4]
  __HAL_UNLOCK(hdac);
 8000de8:	2300      	movs	r3, #0
 8000dea:	7143      	strb	r3, [r0, #5]
  return HAL_OK;
 8000dec:	4618      	mov	r0, r3
}
 8000dee:	bc30      	pop	{r4, r5}
 8000df0:	4770      	bx	lr
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d1e3      	bne.n	8000dbe <HAL_DAC_ConfigChannel+0x1a>
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000df6:	f640 75fe 	movw	r5, #4094	; 0xffe
 8000dfa:	4095      	lsls	r5, r2
 8000dfc:	ea23 0505 	bic.w	r5, r3, r5
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8000e00:	680b      	ldr	r3, [r1, #0]
 8000e02:	6849      	ldr	r1, [r1, #4]
 8000e04:	430b      	orrs	r3, r1
 8000e06:	e7e2      	b.n	8000dce <HAL_DAC_ConfigChannel+0x2a>
  __HAL_LOCK(hdac);
 8000e08:	2002      	movs	r0, #2
 8000e0a:	e7f0      	b.n	8000dee <HAL_DAC_ConfigChannel+0x4a>
 8000e0c:	40007400 	.word	0x40007400

08000e10 <HAL_DACEx_ConvCpltCallbackCh2>:
}
 8000e10:	4770      	bx	lr

08000e12 <DAC_DMAConvCpltCh2>:
  * @brief  DMA conversion complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000e12:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e14:	6a44      	ldr	r4, [r0, #36]	; 0x24
  
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac); 
 8000e16:	4620      	mov	r0, r4
 8000e18:	f7ff fffa 	bl	8000e10 <HAL_DACEx_ConvCpltCallbackCh2>
#endif
  
  hdac->State= HAL_DAC_STATE_READY;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	7123      	strb	r3, [r4, #4]
}
 8000e20:	bd10      	pop	{r4, pc}

08000e22 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
}
 8000e22:	4770      	bx	lr

08000e24 <DAC_DMAHalfConvCpltCh2>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)   
{
 8000e24:	b508      	push	{r3, lr}

    /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)  
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
    HAL_DACEx_ConvHalfCpltCallbackCh2(hdac); 
 8000e26:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8000e28:	f7ff fffb 	bl	8000e22 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif
}
 8000e2c:	bd08      	pop	{r3, pc}

08000e2e <HAL_DACEx_ErrorCallbackCh2>:
}
 8000e2e:	4770      	bx	lr

08000e30 <DAC_DMAErrorCh2>:
  * @brief  DMA error callback 
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)   
{
 8000e30:	b510      	push	{r4, lr}
  DAC_HandleTypeDef* hdac = ( DAC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000e32:	6a44      	ldr	r4, [r0, #36]	; 0x24
    
  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e34:	6923      	ldr	r3, [r4, #16]
 8000e36:	f043 0304 	orr.w	r3, r3, #4
 8000e3a:	6123      	str	r3, [r4, #16]
    
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else 
  HAL_DACEx_ErrorCallbackCh2(hdac); 
 8000e3c:	4620      	mov	r0, r4
 8000e3e:	f7ff fff6 	bl	8000e2e <HAL_DACEx_ErrorCallbackCh2>
#endif
    
  hdac->State= HAL_DAC_STATE_READY;
 8000e42:	2301      	movs	r3, #1
 8000e44:	7123      	strb	r3, [r4, #4]
}
 8000e46:	bd10      	pop	{r4, pc}

08000e48 <HAL_DACEx_DMAUnderrunCallbackCh2>:
}
 8000e48:	4770      	bx	lr

08000e4a <HAL_DAC_IRQHandler>:
{
 8000e4a:	b510      	push	{r4, lr}
 8000e4c:	4604      	mov	r4, r0
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8000e4e:	6803      	ldr	r3, [r0, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000e56:	d003      	beq.n	8000e60 <HAL_DAC_IRQHandler+0x16>
    if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8000e58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e5a:	f412 5f00 	tst.w	r2, #8192	; 0x2000
 8000e5e:	d109      	bne.n	8000e74 <HAL_DAC_IRQHandler+0x2a>
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8000e60:	6823      	ldr	r3, [r4, #0]
 8000e62:	681a      	ldr	r2, [r3, #0]
 8000e64:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000e68:	d003      	beq.n	8000e72 <HAL_DAC_IRQHandler+0x28>
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8000e6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e6c:	f012 5f00 	tst.w	r2, #536870912	; 0x20000000
 8000e70:	d111      	bne.n	8000e96 <HAL_DAC_IRQHandler+0x4c>
}
 8000e72:	bd10      	pop	{r4, pc}
      hdac->State = HAL_DAC_STATE_ERROR;
 8000e74:	2204      	movs	r2, #4
 8000e76:	7102      	strb	r2, [r0, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000e78:	6902      	ldr	r2, [r0, #16]
 8000e7a:	f042 0201 	orr.w	r2, r2, #1
 8000e7e:	6102      	str	r2, [r0, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8000e80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e84:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000e86:	6802      	ldr	r2, [r0, #0]
 8000e88:	6813      	ldr	r3, [r2, #0]
 8000e8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000e8e:	6013      	str	r3, [r2, #0]
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000e90:	f7ff fef5 	bl	8000c7e <HAL_DAC_DMAUnderrunCallbackCh1>
 8000e94:	e7e4      	b.n	8000e60 <HAL_DAC_IRQHandler+0x16>
      hdac->State = HAL_DAC_STATE_ERROR;
 8000e96:	2204      	movs	r2, #4
 8000e98:	7122      	strb	r2, [r4, #4]
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000e9a:	6922      	ldr	r2, [r4, #16]
 8000e9c:	f042 0202 	orr.w	r2, r2, #2
 8000ea0:	6122      	str	r2, [r4, #16]
      __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8000ea2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8000ea6:	635a      	str	r2, [r3, #52]	; 0x34
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000ea8:	6822      	ldr	r2, [r4, #0]
 8000eaa:	6813      	ldr	r3, [r2, #0]
 8000eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000eb0:	6013      	str	r3, [r2, #0]
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	f7ff ffc8 	bl	8000e48 <HAL_DACEx_DMAUnderrunCallbackCh2>
}
 8000eb8:	e7db      	b.n	8000e72 <HAL_DAC_IRQHandler+0x28>

08000eba <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000eba:	b470      	push	{r4, r5, r6}
	/* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ebc:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000ebe:	6bc5      	ldr	r5, [r0, #60]	; 0x3c
 8000ec0:	2401      	movs	r4, #1
 8000ec2:	40b4      	lsls	r4, r6
 8000ec4:	606c      	str	r4, [r5, #4]
  
  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ec6:	6804      	ldr	r4, [r0, #0]
 8000ec8:	6063      	str	r3, [r4, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000eca:	6843      	ldr	r3, [r0, #4]
 8000ecc:	2b10      	cmp	r3, #16
 8000ece:	d005      	beq.n	8000edc <DMA_SetConfig+0x22>
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000ed0:	6803      	ldr	r3, [r0, #0]
 8000ed2:	6099      	str	r1, [r3, #8]
    
    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000ed4:	6803      	ldr	r3, [r0, #0]
 8000ed6:	60da      	str	r2, [r3, #12]
  }
}
 8000ed8:	bc70      	pop	{r4, r5, r6}
 8000eda:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8000edc:	6803      	ldr	r3, [r0, #0]
 8000ede:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000ee0:	6803      	ldr	r3, [r0, #0]
 8000ee2:	60d9      	str	r1, [r3, #12]
 8000ee4:	e7f8      	b.n	8000ed8 <DMA_SetConfig+0x1e>
	...

08000ee8 <DMA_CalcBaseAndBitshift>:
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ee8:	6802      	ldr	r2, [r0, #0]
 8000eea:	4b05      	ldr	r3, [pc, #20]	; (8000f00 <DMA_CalcBaseAndBitshift+0x18>)
 8000eec:	4413      	add	r3, r2
 8000eee:	4a05      	ldr	r2, [pc, #20]	; (8000f04 <DMA_CalcBaseAndBitshift+0x1c>)
 8000ef0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef4:	091b      	lsrs	r3, r3, #4
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000efa:	4b03      	ldr	r3, [pc, #12]	; (8000f08 <DMA_CalcBaseAndBitshift+0x20>)
 8000efc:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif
}
 8000efe:	4770      	bx	lr
 8000f00:	bffdfff8 	.word	0xbffdfff8
 8000f04:	cccccccd 	.word	0xcccccccd
 8000f08:	40020000 	.word	0x40020000

08000f0c <HAL_DMA_Init>:
  if(NULL == hdma)
 8000f0c:	b320      	cbz	r0, 8000f58 <HAL_DMA_Init+0x4c>
{ 
 8000f0e:	b510      	push	{r4, lr}
 8000f10:	4604      	mov	r4, r0
  hdma->State = HAL_DMA_STATE_BUSY;
 8000f12:	2302      	movs	r3, #2
 8000f14:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp = hdma->Instance->CCR;
 8000f18:	6801      	ldr	r1, [r0, #0]
 8000f1a:	680a      	ldr	r2, [r1, #0]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000f1c:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 8000f20:	f022 0230 	bic.w	r2, r2, #48	; 0x30
  tmp |=  hdma->Init.Direction        |
 8000f24:	6843      	ldr	r3, [r0, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f26:	6880      	ldr	r0, [r0, #8]
  tmp |=  hdma->Init.Direction        |
 8000f28:	4303      	orrs	r3, r0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f2a:	68e0      	ldr	r0, [r4, #12]
 8000f2c:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f2e:	6920      	ldr	r0, [r4, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f30:	4303      	orrs	r3, r0
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f32:	6960      	ldr	r0, [r4, #20]
 8000f34:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f36:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f38:	4303      	orrs	r3, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f3a:	69e0      	ldr	r0, [r4, #28]
 8000f3c:	4303      	orrs	r3, r0
  tmp |=  hdma->Init.Direction        |
 8000f3e:	4313      	orrs	r3, r2
  hdma->Instance->CCR = tmp;  
 8000f40:	600b      	str	r3, [r1, #0]
  DMA_CalcBaseAndBitshift(hdma);
 8000f42:	4620      	mov	r0, r4
 8000f44:	f7ff ffd0 	bl	8000ee8 <DMA_CalcBaseAndBitshift>
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f48:	2000      	movs	r0, #0
 8000f4a:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->State = HAL_DMA_STATE_READY;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
  hdma->Lock = HAL_UNLOCKED;
 8000f52:	f884 0020 	strb.w	r0, [r4, #32]
}  
 8000f56:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000f58:	2001      	movs	r0, #1
}  
 8000f5a:	4770      	bx	lr

08000f5c <HAL_DMA_Start_IT>:
{
 8000f5c:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(hdma);
 8000f5e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8000f62:	2c01      	cmp	r4, #1
 8000f64:	d032      	beq.n	8000fcc <HAL_DMA_Start_IT+0x70>
 8000f66:	2401      	movs	r4, #1
 8000f68:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f6c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8000f70:	2c01      	cmp	r4, #1
 8000f72:	d004      	beq.n	8000f7e <HAL_DMA_Start_IT+0x22>
    __HAL_UNLOCK(hdma); 
 8000f74:	2300      	movs	r3, #0
 8000f76:	f880 3020 	strb.w	r3, [r0, #32]
    status = HAL_BUSY;
 8000f7a:	2002      	movs	r0, #2
} 
 8000f7c:	bd38      	pop	{r3, r4, r5, pc}
 8000f7e:	4604      	mov	r4, r0
  	hdma->State = HAL_DMA_STATE_BUSY;
 8000f80:	2002      	movs	r0, #2
 8000f82:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
  	hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f86:	2000      	movs	r0, #0
 8000f88:	63a0      	str	r0, [r4, #56]	; 0x38
  	hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000f8a:	6825      	ldr	r5, [r4, #0]
 8000f8c:	6828      	ldr	r0, [r5, #0]
 8000f8e:	f020 0001 	bic.w	r0, r0, #1
 8000f92:	6028      	str	r0, [r5, #0]
  	DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f94:	4620      	mov	r0, r4
 8000f96:	f7ff ff90 	bl	8000eba <DMA_SetConfig>
    if(NULL != hdma->XferHalfCpltCallback )
 8000f9a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f9c:	b15b      	cbz	r3, 8000fb6 <HAL_DMA_Start_IT+0x5a>
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000f9e:	6822      	ldr	r2, [r4, #0]
 8000fa0:	6813      	ldr	r3, [r2, #0]
 8000fa2:	f043 030e 	orr.w	r3, r3, #14
 8000fa6:	6013      	str	r3, [r2, #0]
  	hdma->Instance->CCR |= DMA_CCR_EN;
 8000fa8:	6822      	ldr	r2, [r4, #0]
 8000faa:	6813      	ldr	r3, [r2, #0]
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6013      	str	r3, [r2, #0]
	HAL_StatusTypeDef status = HAL_OK;
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	e7e2      	b.n	8000f7c <HAL_DMA_Start_IT+0x20>
  		hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000fb6:	6822      	ldr	r2, [r4, #0]
 8000fb8:	6813      	ldr	r3, [r2, #0]
 8000fba:	f043 030a 	orr.w	r3, r3, #10
 8000fbe:	6013      	str	r3, [r2, #0]
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 8000fc0:	6822      	ldr	r2, [r4, #0]
 8000fc2:	6813      	ldr	r3, [r2, #0]
 8000fc4:	f023 0304 	bic.w	r3, r3, #4
 8000fc8:	6013      	str	r3, [r2, #0]
 8000fca:	e7ed      	b.n	8000fa8 <HAL_DMA_Start_IT+0x4c>
  __HAL_LOCK(hdma);
 8000fcc:	2002      	movs	r0, #2
 8000fce:	e7d5      	b.n	8000f7c <HAL_DMA_Start_IT+0x20>

08000fd0 <HAL_DMA_Abort>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fd0:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000fd4:	2b02      	cmp	r3, #2
 8000fd6:	d006      	beq.n	8000fe6 <HAL_DMA_Abort+0x16>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fd8:	2304      	movs	r3, #4
 8000fda:	6383      	str	r3, [r0, #56]	; 0x38
    __HAL_UNLOCK(hdma);
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f880 3020 	strb.w	r3, [r0, #32]
    return HAL_ERROR;
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	4770      	bx	lr
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000fe6:	6802      	ldr	r2, [r0, #0]
 8000fe8:	6813      	ldr	r3, [r2, #0]
 8000fea:	f023 030e 	bic.w	r3, r3, #14
 8000fee:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000ff0:	6802      	ldr	r2, [r0, #0]
 8000ff2:	6813      	ldr	r3, [r2, #0]
 8000ff4:	f023 0301 	bic.w	r3, r3, #1
 8000ff8:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000ffa:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000ffc:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000ffe:	2201      	movs	r2, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	604b      	str	r3, [r1, #4]
  hdma->State = HAL_DMA_STATE_READY; 
 8001006:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  __HAL_UNLOCK(hdma);
 800100a:	2300      	movs	r3, #0
 800100c:	f880 3020 	strb.w	r3, [r0, #32]
  return HAL_OK;
 8001010:	4618      	mov	r0, r3
}
 8001012:	4770      	bx	lr

08001014 <HAL_DMA_Abort_IT>:
{  
 8001014:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001016:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 800101a:	2b02      	cmp	r3, #2
 800101c:	d003      	beq.n	8001026 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800101e:	2304      	movs	r3, #4
 8001020:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8001022:	2001      	movs	r0, #1
}
 8001024:	bd08      	pop	{r3, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001026:	6802      	ldr	r2, [r0, #0]
 8001028:	6813      	ldr	r3, [r2, #0]
 800102a:	f023 030e 	bic.w	r3, r3, #14
 800102e:	6013      	str	r3, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001030:	6802      	ldr	r2, [r0, #0]
 8001032:	6813      	ldr	r3, [r2, #0]
 8001034:	f023 0301 	bic.w	r3, r3, #1
 8001038:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800103a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800103c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800103e:	2201      	movs	r2, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	604b      	str	r3, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001046:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 800104a:	2300      	movs	r3, #0
 800104c:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001050:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001052:	b113      	cbz	r3, 800105a <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 8001054:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001056:	2000      	movs	r0, #0
 8001058:	e7e4      	b.n	8001024 <HAL_DMA_Abort_IT+0x10>
 800105a:	2000      	movs	r0, #0
 800105c:	e7e2      	b.n	8001024 <HAL_DMA_Abort_IT+0x10>
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b4f0      	push	{r4, r5, r6, r7}
 8001062:	b082      	sub	sp, #8
  uint32_t position = 0x00u;
 8001064:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001066:	e036      	b.n	80010d6 <HAL_GPIO_Init+0x76>
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001068:	2403      	movs	r4, #3
 800106a:	e000      	b.n	800106e <HAL_GPIO_Init+0xe>
 800106c:	2400      	movs	r4, #0
 800106e:	40b4      	lsls	r4, r6
 8001070:	433c      	orrs	r4, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001072:	3502      	adds	r5, #2
 8001074:	4e58      	ldr	r6, [pc, #352]	; (80011d8 <HAL_GPIO_Init+0x178>)
 8001076:	f846 4025 	str.w	r4, [r6, r5, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107a:	4c58      	ldr	r4, [pc, #352]	; (80011dc <HAL_GPIO_Init+0x17c>)
 800107c:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800107e:	43d4      	mvns	r4, r2
 8001080:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001084:	684f      	ldr	r7, [r1, #4]
 8001086:	f417 3f80 	tst.w	r7, #65536	; 0x10000
 800108a:	d001      	beq.n	8001090 <HAL_GPIO_Init+0x30>
        {
          temp |= iocurrent;
 800108c:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->IMR = temp;
 8001090:	4d52      	ldr	r5, [pc, #328]	; (80011dc <HAL_GPIO_Init+0x17c>)
 8001092:	602e      	str	r6, [r5, #0]

        temp = EXTI->EMR;
 8001094:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 8001096:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800109a:	684f      	ldr	r7, [r1, #4]
 800109c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
 80010a0:	d001      	beq.n	80010a6 <HAL_GPIO_Init+0x46>
        {
          temp |= iocurrent;
 80010a2:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->EMR = temp;
 80010a6:	4d4d      	ldr	r5, [pc, #308]	; (80011dc <HAL_GPIO_Init+0x17c>)
 80010a8:	606e      	str	r6, [r5, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010aa:	68ad      	ldr	r5, [r5, #8]
        temp &= ~(iocurrent);
 80010ac:	ea04 0605 	and.w	r6, r4, r5
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010b0:	684f      	ldr	r7, [r1, #4]
 80010b2:	f417 1f80 	tst.w	r7, #1048576	; 0x100000
 80010b6:	d001      	beq.n	80010bc <HAL_GPIO_Init+0x5c>
        {
          temp |= iocurrent;
 80010b8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR = temp;
 80010bc:	4d47      	ldr	r5, [pc, #284]	; (80011dc <HAL_GPIO_Init+0x17c>)
 80010be:	60ae      	str	r6, [r5, #8]

        temp = EXTI->FTSR;
 80010c0:	68ed      	ldr	r5, [r5, #12]
        temp &= ~(iocurrent);
 80010c2:	402c      	ands	r4, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010c4:	684e      	ldr	r6, [r1, #4]
 80010c6:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
 80010ca:	d001      	beq.n	80010d0 <HAL_GPIO_Init+0x70>
        {
          temp |= iocurrent;
 80010cc:	ea42 0405 	orr.w	r4, r2, r5
        }
        EXTI->FTSR = temp;
 80010d0:	4a42      	ldr	r2, [pc, #264]	; (80011dc <HAL_GPIO_Init+0x17c>)
 80010d2:	60d4      	str	r4, [r2, #12]
      }
    }

    position++;
 80010d4:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010d6:	680a      	ldr	r2, [r1, #0]
 80010d8:	fa32 f403 	lsrs.w	r4, r2, r3
 80010dc:	d078      	beq.n	80011d0 <HAL_GPIO_Init+0x170>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80010de:	2401      	movs	r4, #1
 80010e0:	409c      	lsls	r4, r3
    if (iocurrent != 0x00u)
 80010e2:	4022      	ands	r2, r4
 80010e4:	d0f6      	beq.n	80010d4 <HAL_GPIO_Init+0x74>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010e6:	684d      	ldr	r5, [r1, #4]
 80010e8:	2d02      	cmp	r5, #2
 80010ea:	d001      	beq.n	80010f0 <HAL_GPIO_Init+0x90>
 80010ec:	2d12      	cmp	r5, #18
 80010ee:	d110      	bne.n	8001112 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3u];
 80010f0:	08de      	lsrs	r6, r3, #3
 80010f2:	3608      	adds	r6, #8
 80010f4:	f850 c026 	ldr.w	ip, [r0, r6, lsl #2]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010f8:	f003 0507 	and.w	r5, r3, #7
 80010fc:	00af      	lsls	r7, r5, #2
 80010fe:	250f      	movs	r5, #15
 8001100:	40bd      	lsls	r5, r7
 8001102:	ea2c 0c05 	bic.w	ip, ip, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001106:	690d      	ldr	r5, [r1, #16]
 8001108:	40bd      	lsls	r5, r7
 800110a:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3u] = temp;
 800110e:	f840 5026 	str.w	r5, [r0, r6, lsl #2]
      temp = GPIOx->MODER;
 8001112:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001114:	005f      	lsls	r7, r3, #1
 8001116:	2503      	movs	r5, #3
 8001118:	40bd      	lsls	r5, r7
 800111a:	43ed      	mvns	r5, r5
 800111c:	ea05 0c06 	and.w	ip, r5, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001120:	684e      	ldr	r6, [r1, #4]
 8001122:	f006 0603 	and.w	r6, r6, #3
 8001126:	40be      	lsls	r6, r7
 8001128:	ea46 060c 	orr.w	r6, r6, ip
      GPIOx->MODER = temp;
 800112c:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800112e:	684e      	ldr	r6, [r1, #4]
 8001130:	f106 3cff 	add.w	ip, r6, #4294967295
 8001134:	f1bc 0f01 	cmp.w	ip, #1
 8001138:	d903      	bls.n	8001142 <HAL_GPIO_Init+0xe2>
 800113a:	2e11      	cmp	r6, #17
 800113c:	d001      	beq.n	8001142 <HAL_GPIO_Init+0xe2>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800113e:	2e12      	cmp	r6, #18
 8001140:	d110      	bne.n	8001164 <HAL_GPIO_Init+0x104>
        temp = GPIOx->OSPEEDR;
 8001142:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001144:	ea05 0c06 	and.w	ip, r5, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001148:	68ce      	ldr	r6, [r1, #12]
 800114a:	40be      	lsls	r6, r7
 800114c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->OSPEEDR = temp;
 8001150:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8001152:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001154:	ea26 0404 	bic.w	r4, r6, r4
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001158:	684e      	ldr	r6, [r1, #4]
 800115a:	f3c6 1600 	ubfx	r6, r6, #4, #1
 800115e:	409e      	lsls	r6, r3
 8001160:	4326      	orrs	r6, r4
        GPIOx->OTYPER = temp;
 8001162:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8001164:	68c4      	ldr	r4, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001166:	4025      	ands	r5, r4
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001168:	688c      	ldr	r4, [r1, #8]
 800116a:	40bc      	lsls	r4, r7
 800116c:	432c      	orrs	r4, r5
      GPIOx->PUPDR = temp;
 800116e:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001170:	684c      	ldr	r4, [r1, #4]
 8001172:	f014 5f80 	tst.w	r4, #268435456	; 0x10000000
 8001176:	d0ad      	beq.n	80010d4 <HAL_GPIO_Init+0x74>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001178:	4c19      	ldr	r4, [pc, #100]	; (80011e0 <HAL_GPIO_Init+0x180>)
 800117a:	69a5      	ldr	r5, [r4, #24]
 800117c:	f045 0501 	orr.w	r5, r5, #1
 8001180:	61a5      	str	r5, [r4, #24]
 8001182:	69a4      	ldr	r4, [r4, #24]
 8001184:	f004 0401 	and.w	r4, r4, #1
 8001188:	9401      	str	r4, [sp, #4]
 800118a:	9c01      	ldr	r4, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 800118c:	089d      	lsrs	r5, r3, #2
 800118e:	1cae      	adds	r6, r5, #2
 8001190:	4c11      	ldr	r4, [pc, #68]	; (80011d8 <HAL_GPIO_Init+0x178>)
 8001192:	f854 7026 	ldr.w	r7, [r4, r6, lsl #2]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001196:	f003 0403 	and.w	r4, r3, #3
 800119a:	00a6      	lsls	r6, r4, #2
 800119c:	240f      	movs	r4, #15
 800119e:	40b4      	lsls	r4, r6
 80011a0:	ea27 0704 	bic.w	r7, r7, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011a4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80011a8:	f43f af60 	beq.w	800106c <HAL_GPIO_Init+0xc>
 80011ac:	4c0d      	ldr	r4, [pc, #52]	; (80011e4 <HAL_GPIO_Init+0x184>)
 80011ae:	42a0      	cmp	r0, r4
 80011b0:	d00a      	beq.n	80011c8 <HAL_GPIO_Init+0x168>
 80011b2:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011b6:	42a0      	cmp	r0, r4
 80011b8:	d008      	beq.n	80011cc <HAL_GPIO_Init+0x16c>
 80011ba:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80011be:	42a0      	cmp	r0, r4
 80011c0:	f43f af52 	beq.w	8001068 <HAL_GPIO_Init+0x8>
 80011c4:	2405      	movs	r4, #5
 80011c6:	e752      	b.n	800106e <HAL_GPIO_Init+0xe>
 80011c8:	2401      	movs	r4, #1
 80011ca:	e750      	b.n	800106e <HAL_GPIO_Init+0xe>
 80011cc:	2402      	movs	r4, #2
 80011ce:	e74e      	b.n	800106e <HAL_GPIO_Init+0xe>
  }
}
 80011d0:	b002      	add	sp, #8
 80011d2:	bcf0      	pop	{r4, r5, r6, r7}
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	40010000 	.word	0x40010000
 80011dc:	40010400 	.word	0x40010400
 80011e0:	40021000 	.word	0x40021000
 80011e4:	48000400 	.word	0x48000400

080011e8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e8:	b90a      	cbnz	r2, 80011ee <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ea:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 80011ec:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011ee:	6181      	str	r1, [r0, #24]
 80011f0:	4770      	bx	lr

080011f2 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011f2:	4770      	bx	lr

080011f4 <HAL_GPIO_EXTI_IRQHandler>:
{
 80011f4:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011f6:	4b05      	ldr	r3, [pc, #20]	; (800120c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	4203      	tst	r3, r0
 80011fc:	d100      	bne.n	8001200 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 80011fe:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001200:	4b02      	ldr	r3, [pc, #8]	; (800120c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8001202:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001204:	f7ff fff5 	bl	80011f2 <HAL_GPIO_EXTI_Callback>
}
 8001208:	e7f9      	b.n	80011fe <HAL_GPIO_EXTI_IRQHandler+0xa>
 800120a:	bf00      	nop
 800120c:	40010400 	.word	0x40010400

08001210 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001210:	2800      	cmp	r0, #0
 8001212:	f000 830d 	beq.w	8001830 <HAL_RCC_OscConfig+0x620>
{
 8001216:	b570      	push	{r4, r5, r6, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800121c:	6803      	ldr	r3, [r0, #0]
 800121e:	f013 0f01 	tst.w	r3, #1
 8001222:	d03b      	beq.n	800129c <HAL_RCC_OscConfig+0x8c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001224:	4bb5      	ldr	r3, [pc, #724]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f003 030c 	and.w	r3, r3, #12
 800122c:	2b04      	cmp	r3, #4
 800122e:	d01e      	beq.n	800126e <HAL_RCC_OscConfig+0x5e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001230:	4bb2      	ldr	r3, [pc, #712]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f003 030c 	and.w	r3, r3, #12
 8001238:	2b08      	cmp	r3, #8
 800123a:	d013      	beq.n	8001264 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800123c:	6863      	ldr	r3, [r4, #4]
 800123e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001242:	d068      	beq.n	8001316 <HAL_RCC_OscConfig+0x106>
 8001244:	2b00      	cmp	r3, #0
 8001246:	f040 8092 	bne.w	800136e <HAL_RCC_OscConfig+0x15e>
 800124a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800124e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	e05d      	b.n	8001320 <HAL_RCC_OscConfig+0x110>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001264:	4ba5      	ldr	r3, [pc, #660]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800126c:	d0e6      	beq.n	800123c <HAL_RCC_OscConfig+0x2c>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800126e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001272:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001276:	4ba1      	ldr	r3, [pc, #644]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	fab3 f383 	clz	r3, r3
 8001286:	f003 031f 	and.w	r3, r3, #31
 800128a:	2201      	movs	r2, #1
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	420b      	tst	r3, r1
 8001292:	d003      	beq.n	800129c <HAL_RCC_OscConfig+0x8c>
 8001294:	6863      	ldr	r3, [r4, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	f000 82cc 	beq.w	8001834 <HAL_RCC_OscConfig+0x624>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800129c:	6823      	ldr	r3, [r4, #0]
 800129e:	f013 0f02 	tst.w	r3, #2
 80012a2:	f000 80c6 	beq.w	8001432 <HAL_RCC_OscConfig+0x222>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012a6:	4b95      	ldr	r3, [pc, #596]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f013 0f0c 	tst.w	r3, #12
 80012ae:	f000 809c 	beq.w	80013ea <HAL_RCC_OscConfig+0x1da>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012b2:	4b92      	ldr	r3, [pc, #584]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	f000 808f 	beq.w	80013de <HAL_RCC_OscConfig+0x1ce>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012c0:	6923      	ldr	r3, [r4, #16]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	f000 80f3 	beq.w	80014ae <HAL_RCC_OscConfig+0x29e>
 80012c8:	2201      	movs	r2, #1
 80012ca:	fa92 f3a2 	rbit	r3, r2
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012ce:	fab3 f383 	clz	r3, r3
 80012d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012da:	009b      	lsls	r3, r3, #2
 80012dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012de:	f7ff fc1f 	bl	8000b20 <HAL_GetTick>
 80012e2:	4605      	mov	r5, r0
 80012e4:	2302      	movs	r3, #2
 80012e6:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ea:	4b84      	ldr	r3, [pc, #528]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 80012ec:	6819      	ldr	r1, [r3, #0]
 80012ee:	2302      	movs	r3, #2
 80012f0:	fa93 f3a3 	rbit	r3, r3
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	2201      	movs	r2, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	420b      	tst	r3, r1
 8001304:	f040 80c4 	bne.w	8001490 <HAL_RCC_OscConfig+0x280>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001308:	f7ff fc0a 	bl	8000b20 <HAL_GetTick>
 800130c:	1b40      	subs	r0, r0, r5
 800130e:	2802      	cmp	r0, #2
 8001310:	d9e8      	bls.n	80012e4 <HAL_RCC_OscConfig+0xd4>
          {
            return HAL_TIMEOUT;
 8001312:	2003      	movs	r0, #3
 8001314:	e295      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001316:	4a79      	ldr	r2, [pc, #484]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001318:	6813      	ldr	r3, [r2, #0]
 800131a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800131e:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001320:	4a76      	ldr	r2, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001322:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001324:	f023 030f 	bic.w	r3, r3, #15
 8001328:	68a1      	ldr	r1, [r4, #8]
 800132a:	430b      	orrs	r3, r1
 800132c:	62d3      	str	r3, [r2, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800132e:	6863      	ldr	r3, [r4, #4]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d036      	beq.n	80013a2 <HAL_RCC_OscConfig+0x192>
        tickstart = HAL_GetTick();
 8001334:	f7ff fbf4 	bl	8000b20 <HAL_GetTick>
 8001338:	4605      	mov	r5, r0
 800133a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800133e:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001342:	4b6e      	ldr	r3, [pc, #440]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001344:	6819      	ldr	r1, [r3, #0]
 8001346:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	fab3 f383 	clz	r3, r3
 8001352:	f003 031f 	and.w	r3, r3, #31
 8001356:	2201      	movs	r2, #1
 8001358:	fa02 f303 	lsl.w	r3, r2, r3
 800135c:	420b      	tst	r3, r1
 800135e:	d19d      	bne.n	800129c <HAL_RCC_OscConfig+0x8c>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fbde 	bl	8000b20 <HAL_GetTick>
 8001364:	1b40      	subs	r0, r0, r5
 8001366:	2864      	cmp	r0, #100	; 0x64
 8001368:	d9e7      	bls.n	800133a <HAL_RCC_OscConfig+0x12a>
            return HAL_TIMEOUT;
 800136a:	2003      	movs	r0, #3
 800136c:	e269      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800136e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001372:	d009      	beq.n	8001388 <HAL_RCC_OscConfig+0x178>
 8001374:	4b61      	ldr	r3, [pc, #388]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	e7cb      	b.n	8001320 <HAL_RCC_OscConfig+0x110>
 8001388:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800138c:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800139e:	601a      	str	r2, [r3, #0]
 80013a0:	e7be      	b.n	8001320 <HAL_RCC_OscConfig+0x110>
        tickstart = HAL_GetTick();
 80013a2:	f7ff fbbd 	bl	8000b20 <HAL_GetTick>
 80013a6:	4605      	mov	r5, r0
 80013a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ac:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b0:	4b52      	ldr	r3, [pc, #328]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 80013b2:	6819      	ldr	r1, [r3, #0]
 80013b4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013b8:	fa93 f3a3 	rbit	r3, r3
 80013bc:	fab3 f383 	clz	r3, r3
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	2201      	movs	r2, #1
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	420b      	tst	r3, r1
 80013cc:	f43f af66 	beq.w	800129c <HAL_RCC_OscConfig+0x8c>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fba6 	bl	8000b20 <HAL_GetTick>
 80013d4:	1b40      	subs	r0, r0, r5
 80013d6:	2864      	cmp	r0, #100	; 0x64
 80013d8:	d9e6      	bls.n	80013a8 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
 80013da:	2003      	movs	r0, #3
 80013dc:	e231      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80013e6:	f47f af6b 	bne.w	80012c0 <HAL_RCC_OscConfig+0xb0>
 80013ea:	2302      	movs	r3, #2
 80013ec:	fa93 f3a3 	rbit	r3, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f0:	4b42      	ldr	r3, [pc, #264]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 80013f2:	6819      	ldr	r1, [r3, #0]
 80013f4:	2302      	movs	r3, #2
 80013f6:	fa93 f3a3 	rbit	r3, r3
 80013fa:	fab3 f383 	clz	r3, r3
 80013fe:	f003 031f 	and.w	r3, r3, #31
 8001402:	2201      	movs	r2, #1
 8001404:	fa02 f303 	lsl.w	r3, r2, r3
 8001408:	420b      	tst	r3, r1
 800140a:	d004      	beq.n	8001416 <HAL_RCC_OscConfig+0x206>
 800140c:	6923      	ldr	r3, [r4, #16]
 800140e:	4293      	cmp	r3, r2
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x206>
        return HAL_ERROR;
 8001412:	2001      	movs	r0, #1
 8001414:	e215      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4839      	ldr	r0, [pc, #228]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001418:	6803      	ldr	r3, [r0, #0]
 800141a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800141e:	6961      	ldr	r1, [r4, #20]
 8001420:	22f8      	movs	r2, #248	; 0xf8
 8001422:	fa92 f2a2 	rbit	r2, r2
 8001426:	fab2 f282 	clz	r2, r2
 800142a:	fa01 f202 	lsl.w	r2, r1, r2
 800142e:	4313      	orrs	r3, r2
 8001430:	6003      	str	r3, [r0, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001432:	6823      	ldr	r3, [r4, #0]
 8001434:	f013 0f08 	tst.w	r3, #8
 8001438:	f000 808c 	beq.w	8001554 <HAL_RCC_OscConfig+0x344>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800143c:	69a3      	ldr	r3, [r4, #24]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d060      	beq.n	8001504 <HAL_RCC_OscConfig+0x2f4>
 8001442:	2101      	movs	r1, #1
 8001444:	fa91 f2a1 	rbit	r2, r1
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001448:	fab2 f282 	clz	r2, r2
 800144c:	4b2c      	ldr	r3, [pc, #176]	; (8001500 <HAL_RCC_OscConfig+0x2f0>)
 800144e:	4413      	add	r3, r2
 8001450:	009b      	lsls	r3, r3, #2
 8001452:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001454:	f7ff fb64 	bl	8000b20 <HAL_GetTick>
 8001458:	4605      	mov	r5, r0
 800145a:	2302      	movs	r3, #2
 800145c:	fa93 f2a3 	rbit	r2, r3
 8001460:	fa93 f2a3 	rbit	r2, r3
 8001464:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001468:	4a24      	ldr	r2, [pc, #144]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 800146a:	6a51      	ldr	r1, [r2, #36]	; 0x24
 800146c:	fa93 f3a3 	rbit	r3, r3
 8001470:	fab3 f383 	clz	r3, r3
 8001474:	f003 031f 	and.w	r3, r3, #31
 8001478:	2201      	movs	r2, #1
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	420b      	tst	r3, r1
 8001480:	d168      	bne.n	8001554 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001482:	f7ff fb4d 	bl	8000b20 <HAL_GetTick>
 8001486:	1b40      	subs	r0, r0, r5
 8001488:	2802      	cmp	r0, #2
 800148a:	d9e6      	bls.n	800145a <HAL_RCC_OscConfig+0x24a>
        {
          return HAL_TIMEOUT;
 800148c:	2003      	movs	r0, #3
 800148e:	e1d8      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001490:	481a      	ldr	r0, [pc, #104]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 8001492:	6803      	ldr	r3, [r0, #0]
 8001494:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001498:	6961      	ldr	r1, [r4, #20]
 800149a:	22f8      	movs	r2, #248	; 0xf8
 800149c:	fa92 f2a2 	rbit	r2, r2
 80014a0:	fab2 f282 	clz	r2, r2
 80014a4:	fa01 f202 	lsl.w	r2, r1, r2
 80014a8:	4313      	orrs	r3, r2
 80014aa:	6003      	str	r3, [r0, #0]
 80014ac:	e7c1      	b.n	8001432 <HAL_RCC_OscConfig+0x222>
 80014ae:	2301      	movs	r3, #1
 80014b0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_HSI_DISABLE();
 80014b4:	fab3 f383 	clz	r3, r3
 80014b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014c0:	009b      	lsls	r3, r3, #2
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80014c6:	f7ff fb2b 	bl	8000b20 <HAL_GetTick>
 80014ca:	4605      	mov	r5, r0
 80014cc:	2302      	movs	r3, #2
 80014ce:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_RCC_OscConfig+0x2ec>)
 80014d4:	6819      	ldr	r1, [r3, #0]
 80014d6:	2302      	movs	r3, #2
 80014d8:	fa93 f3a3 	rbit	r3, r3
 80014dc:	fab3 f383 	clz	r3, r3
 80014e0:	f003 031f 	and.w	r3, r3, #31
 80014e4:	2201      	movs	r2, #1
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	420b      	tst	r3, r1
 80014ec:	d0a1      	beq.n	8001432 <HAL_RCC_OscConfig+0x222>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014ee:	f7ff fb17 	bl	8000b20 <HAL_GetTick>
 80014f2:	1b40      	subs	r0, r0, r5
 80014f4:	2802      	cmp	r0, #2
 80014f6:	d9e9      	bls.n	80014cc <HAL_RCC_OscConfig+0x2bc>
            return HAL_TIMEOUT;
 80014f8:	2003      	movs	r0, #3
 80014fa:	e1a2      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
 80014fc:	40021000 	.word	0x40021000
 8001500:	10908120 	.word	0x10908120
 8001504:	2201      	movs	r2, #1
 8001506:	fa92 f2a2 	rbit	r2, r2
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150a:	fab2 f282 	clz	r2, r2
 800150e:	4bbc      	ldr	r3, [pc, #752]	; (8001800 <HAL_RCC_OscConfig+0x5f0>)
 8001510:	4413      	add	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	2200      	movs	r2, #0
 8001516:	601a      	str	r2, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff fb02 	bl	8000b20 <HAL_GetTick>
 800151c:	4605      	mov	r5, r0
 800151e:	2302      	movs	r3, #2
 8001520:	fa93 f2a3 	rbit	r2, r3
 8001524:	fa93 f2a3 	rbit	r2, r3
 8001528:	fa93 f2a3 	rbit	r2, r3
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152c:	4ab5      	ldr	r2, [pc, #724]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 800152e:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8001530:	fa93 f3a3 	rbit	r3, r3
 8001534:	fab3 f383 	clz	r3, r3
 8001538:	f003 031f 	and.w	r3, r3, #31
 800153c:	2201      	movs	r2, #1
 800153e:	fa02 f303 	lsl.w	r3, r2, r3
 8001542:	420b      	tst	r3, r1
 8001544:	d006      	beq.n	8001554 <HAL_RCC_OscConfig+0x344>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001546:	f7ff faeb 	bl	8000b20 <HAL_GetTick>
 800154a:	1b40      	subs	r0, r0, r5
 800154c:	2802      	cmp	r0, #2
 800154e:	d9e6      	bls.n	800151e <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8001550:	2003      	movs	r0, #3
 8001552:	e176      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001554:	6823      	ldr	r3, [r4, #0]
 8001556:	f013 0f04 	tst.w	r3, #4
 800155a:	f000 80b3 	beq.w	80016c4 <HAL_RCC_OscConfig+0x4b4>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155e:	4ba9      	ldr	r3, [pc, #676]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001566:	d120      	bne.n	80015aa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	4ba6      	ldr	r3, [pc, #664]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 800156a:	69da      	ldr	r2, [r3, #28]
 800156c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001570:	61da      	str	r2, [r3, #28]
 8001572:	69db      	ldr	r3, [r3, #28]
 8001574:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001578:	9301      	str	r3, [sp, #4]
 800157a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800157c:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	4ba2      	ldr	r3, [pc, #648]	; (8001808 <HAL_RCC_OscConfig+0x5f8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001586:	d012      	beq.n	80015ae <HAL_RCC_OscConfig+0x39e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001588:	68e3      	ldr	r3, [r4, #12]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d023      	beq.n	80015d6 <HAL_RCC_OscConfig+0x3c6>
 800158e:	bb73      	cbnz	r3, 80015ee <HAL_RCC_OscConfig+0x3de>
 8001590:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001594:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001598:	6a1a      	ldr	r2, [r3, #32]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	621a      	str	r2, [r3, #32]
 80015a0:	6a1a      	ldr	r2, [r3, #32]
 80015a2:	f022 0204 	bic.w	r2, r2, #4
 80015a6:	621a      	str	r2, [r3, #32]
 80015a8:	e01a      	b.n	80015e0 <HAL_RCC_OscConfig+0x3d0>
    FlagStatus       pwrclkchanged = RESET;
 80015aa:	2500      	movs	r5, #0
 80015ac:	e7e7      	b.n	800157e <HAL_RCC_OscConfig+0x36e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ae:	4a96      	ldr	r2, [pc, #600]	; (8001808 <HAL_RCC_OscConfig+0x5f8>)
 80015b0:	6813      	ldr	r3, [r2, #0]
 80015b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015b6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 80015b8:	f7ff fab2 	bl	8000b20 <HAL_GetTick>
 80015bc:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015be:	4b92      	ldr	r3, [pc, #584]	; (8001808 <HAL_RCC_OscConfig+0x5f8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f413 7f80 	tst.w	r3, #256	; 0x100
 80015c6:	d1df      	bne.n	8001588 <HAL_RCC_OscConfig+0x378>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015c8:	f7ff faaa 	bl	8000b20 <HAL_GetTick>
 80015cc:	1b80      	subs	r0, r0, r6
 80015ce:	2864      	cmp	r0, #100	; 0x64
 80015d0:	d9f5      	bls.n	80015be <HAL_RCC_OscConfig+0x3ae>
          return HAL_TIMEOUT;
 80015d2:	2003      	movs	r0, #3
 80015d4:	e135      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d6:	4a8b      	ldr	r2, [pc, #556]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 80015d8:	6a13      	ldr	r3, [r2, #32]
 80015da:	f043 0301 	orr.w	r3, r3, #1
 80015de:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e0:	68e3      	ldr	r3, [r4, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d041      	beq.n	800166a <HAL_RCC_OscConfig+0x45a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e6:	f7ff fa9b 	bl	8000b20 <HAL_GetTick>
 80015ea:	4606      	mov	r6, r0
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ec:	e02b      	b.n	8001646 <HAL_RCC_OscConfig+0x436>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015ee:	2b05      	cmp	r3, #5
 80015f0:	d009      	beq.n	8001606 <HAL_RCC_OscConfig+0x3f6>
 80015f2:	4b84      	ldr	r3, [pc, #528]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 80015f4:	6a1a      	ldr	r2, [r3, #32]
 80015f6:	f022 0201 	bic.w	r2, r2, #1
 80015fa:	621a      	str	r2, [r3, #32]
 80015fc:	6a1a      	ldr	r2, [r3, #32]
 80015fe:	f022 0204 	bic.w	r2, r2, #4
 8001602:	621a      	str	r2, [r3, #32]
 8001604:	e7ec      	b.n	80015e0 <HAL_RCC_OscConfig+0x3d0>
 8001606:	4b7f      	ldr	r3, [pc, #508]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 8001608:	6a1a      	ldr	r2, [r3, #32]
 800160a:	f042 0204 	orr.w	r2, r2, #4
 800160e:	621a      	str	r2, [r3, #32]
 8001610:	6a1a      	ldr	r2, [r3, #32]
 8001612:	f042 0201 	orr.w	r2, r2, #1
 8001616:	621a      	str	r2, [r3, #32]
 8001618:	e7e2      	b.n	80015e0 <HAL_RCC_OscConfig+0x3d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	4b7a      	ldr	r3, [pc, #488]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 800161c:	6a19      	ldr	r1, [r3, #32]
 800161e:	2302      	movs	r3, #2
 8001620:	fa93 f3a3 	rbit	r3, r3
 8001624:	fab3 f383 	clz	r3, r3
 8001628:	f003 031f 	and.w	r3, r3, #31
 800162c:	2201      	movs	r2, #1
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	4219      	tst	r1, r3
 8001634:	d145      	bne.n	80016c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001636:	f7ff fa73 	bl	8000b20 <HAL_GetTick>
 800163a:	1b80      	subs	r0, r0, r6
 800163c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001640:	4298      	cmp	r0, r3
 8001642:	f200 80f9 	bhi.w	8001838 <HAL_RCC_OscConfig+0x628>
 8001646:	2302      	movs	r3, #2
 8001648:	fa93 f2a3 	rbit	r2, r3
 800164c:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001650:	fab3 f383 	clz	r3, r3
 8001654:	095b      	lsrs	r3, r3, #5
 8001656:	f043 0302 	orr.w	r3, r3, #2
 800165a:	2b02      	cmp	r3, #2
 800165c:	d0dd      	beq.n	800161a <HAL_RCC_OscConfig+0x40a>
 800165e:	2302      	movs	r3, #2
 8001660:	fa93 f3a3 	rbit	r3, r3
 8001664:	4b67      	ldr	r3, [pc, #412]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 8001666:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001668:	e7d9      	b.n	800161e <HAL_RCC_OscConfig+0x40e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fa59 	bl	8000b20 <HAL_GetTick>
 800166e:	4606      	mov	r6, r0
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001670:	e015      	b.n	800169e <HAL_RCC_OscConfig+0x48e>
 8001672:	4b64      	ldr	r3, [pc, #400]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 8001674:	6a19      	ldr	r1, [r3, #32]
 8001676:	2302      	movs	r3, #2
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	fab3 f383 	clz	r3, r3
 8001680:	f003 031f 	and.w	r3, r3, #31
 8001684:	2201      	movs	r2, #1
 8001686:	fa02 f303 	lsl.w	r3, r2, r3
 800168a:	4219      	tst	r1, r3
 800168c:	d019      	beq.n	80016c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168e:	f7ff fa47 	bl	8000b20 <HAL_GetTick>
 8001692:	1b80      	subs	r0, r0, r6
 8001694:	f241 3388 	movw	r3, #5000	; 0x1388
 8001698:	4298      	cmp	r0, r3
 800169a:	f200 80cf 	bhi.w	800183c <HAL_RCC_OscConfig+0x62c>
 800169e:	2302      	movs	r3, #2
 80016a0:	fa93 f2a3 	rbit	r2, r3
 80016a4:	fa93 f3a3 	rbit	r3, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	fab3 f383 	clz	r3, r3
 80016ac:	095b      	lsrs	r3, r3, #5
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d0dd      	beq.n	8001672 <HAL_RCC_OscConfig+0x462>
 80016b6:	2302      	movs	r3, #2
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	4b51      	ldr	r3, [pc, #324]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 80016be:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80016c0:	e7d9      	b.n	8001676 <HAL_RCC_OscConfig+0x466>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80016c2:	bbb5      	cbnz	r5, 8001732 <HAL_RCC_OscConfig+0x522>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c4:	69e3      	ldr	r3, [r4, #28]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 80ba 	beq.w	8001840 <HAL_RCC_OscConfig+0x630>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016cc:	4a4d      	ldr	r2, [pc, #308]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 80016ce:	6852      	ldr	r2, [r2, #4]
 80016d0:	f002 020c 	and.w	r2, r2, #12
 80016d4:	2a08      	cmp	r2, #8
 80016d6:	f000 8099 	beq.w	800180c <HAL_RCC_OscConfig+0x5fc>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d02f      	beq.n	800173e <HAL_RCC_OscConfig+0x52e>
 80016de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80016e2:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80016ee:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80016f2:	009b      	lsls	r3, r3, #2
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fa12 	bl	8000b20 <HAL_GetTick>
 80016fc:	4604      	mov	r4, r0
 80016fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001702:	fa93 f3a3 	rbit	r3, r3
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001706:	4b3f      	ldr	r3, [pc, #252]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 8001708:	6819      	ldr	r1, [r3, #0]
 800170a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	fab3 f383 	clz	r3, r3
 8001716:	f003 031f 	and.w	r3, r3, #31
 800171a:	2201      	movs	r2, #1
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	4219      	tst	r1, r3
 8001722:	d06b      	beq.n	80017fc <HAL_RCC_OscConfig+0x5ec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff f9fc 	bl	8000b20 <HAL_GetTick>
 8001728:	1b00      	subs	r0, r0, r4
 800172a:	2802      	cmp	r0, #2
 800172c:	d9e7      	bls.n	80016fe <HAL_RCC_OscConfig+0x4ee>
          {
            return HAL_TIMEOUT;
 800172e:	2003      	movs	r0, #3
 8001730:	e087      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001732:	4a34      	ldr	r2, [pc, #208]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 8001734:	69d3      	ldr	r3, [r2, #28]
 8001736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800173a:	61d3      	str	r3, [r2, #28]
 800173c:	e7c2      	b.n	80016c4 <HAL_RCC_OscConfig+0x4b4>
 800173e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001742:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001746:	fab3 f383 	clz	r3, r3
 800174a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800174e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001758:	f7ff f9e2 	bl	8000b20 <HAL_GetTick>
 800175c:	4605      	mov	r5, r0
 800175e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001762:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001766:	4b27      	ldr	r3, [pc, #156]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 8001768:	6819      	ldr	r1, [r3, #0]
 800176a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800176e:	fa93 f3a3 	rbit	r3, r3
 8001772:	fab3 f383 	clz	r3, r3
 8001776:	f003 031f 	and.w	r3, r3, #31
 800177a:	2201      	movs	r2, #1
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	4219      	tst	r1, r3
 8001782:	d006      	beq.n	8001792 <HAL_RCC_OscConfig+0x582>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001784:	f7ff f9cc 	bl	8000b20 <HAL_GetTick>
 8001788:	1b40      	subs	r0, r0, r5
 800178a:	2802      	cmp	r0, #2
 800178c:	d9e7      	bls.n	800175e <HAL_RCC_OscConfig+0x54e>
            return HAL_TIMEOUT;
 800178e:	2003      	movs	r0, #3
 8001790:	e057      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001792:	491c      	ldr	r1, [pc, #112]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 8001794:	684b      	ldr	r3, [r1, #4]
 8001796:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 800179a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800179c:	6a20      	ldr	r0, [r4, #32]
 800179e:	4302      	orrs	r2, r0
 80017a0:	4313      	orrs	r3, r2
 80017a2:	604b      	str	r3, [r1, #4]
 80017a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80017ac:	fab3 f383 	clz	r3, r3
 80017b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80017b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	2201      	movs	r2, #1
 80017bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017be:	f7ff f9af 	bl	8000b20 <HAL_GetTick>
 80017c2:	4604      	mov	r4, r0
 80017c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017c8:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017cc:	4b0d      	ldr	r3, [pc, #52]	; (8001804 <HAL_RCC_OscConfig+0x5f4>)
 80017ce:	6819      	ldr	r1, [r3, #0]
 80017d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80017d4:	fa93 f3a3 	rbit	r3, r3
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	2201      	movs	r2, #1
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	4219      	tst	r1, r3
 80017e8:	d106      	bne.n	80017f8 <HAL_RCC_OscConfig+0x5e8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ea:	f7ff f999 	bl	8000b20 <HAL_GetTick>
 80017ee:	1b00      	subs	r0, r0, r4
 80017f0:	2802      	cmp	r0, #2
 80017f2:	d9e7      	bls.n	80017c4 <HAL_RCC_OscConfig+0x5b4>
            return HAL_TIMEOUT;
 80017f4:	2003      	movs	r0, #3
 80017f6:	e024      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
        }
      }
    }
  }

  return HAL_OK;
 80017f8:	2000      	movs	r0, #0
 80017fa:	e022      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
 80017fc:	2000      	movs	r0, #0
 80017fe:	e020      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
 8001800:	10908120 	.word	0x10908120
 8001804:	40021000 	.word	0x40021000
 8001808:	40007000 	.word	0x40007000
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800180c:	2b01      	cmp	r3, #1
 800180e:	d01a      	beq.n	8001846 <HAL_RCC_OscConfig+0x636>
        pll_config = RCC->CFGR;
 8001810:	4b0f      	ldr	r3, [pc, #60]	; (8001850 <HAL_RCC_OscConfig+0x640>)
 8001812:	685b      	ldr	r3, [r3, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001814:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8001818:	6a22      	ldr	r2, [r4, #32]
 800181a:	4291      	cmp	r1, r2
 800181c:	d001      	beq.n	8001822 <HAL_RCC_OscConfig+0x612>
          return HAL_ERROR;
 800181e:	2001      	movs	r0, #1
 8001820:	e00f      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8001822:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001826:	6a62      	ldr	r2, [r4, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001828:	4293      	cmp	r3, r2
 800182a:	d00e      	beq.n	800184a <HAL_RCC_OscConfig+0x63a>
          return HAL_ERROR;
 800182c:	2001      	movs	r0, #1
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
    return HAL_ERROR;
 8001830:	2001      	movs	r0, #1
}
 8001832:	4770      	bx	lr
        return HAL_ERROR;
 8001834:	2001      	movs	r0, #1
 8001836:	e004      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 8001838:	2003      	movs	r0, #3
 800183a:	e002      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
          return HAL_TIMEOUT;
 800183c:	2003      	movs	r0, #3
 800183e:	e000      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 8001840:	2000      	movs	r0, #0
}
 8001842:	b002      	add	sp, #8
 8001844:	bd70      	pop	{r4, r5, r6, pc}
        return HAL_ERROR;
 8001846:	2001      	movs	r0, #1
 8001848:	e7fb      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
  return HAL_OK;
 800184a:	2000      	movs	r0, #0
 800184c:	e7f9      	b.n	8001842 <HAL_RCC_OscConfig+0x632>
 800184e:	bf00      	nop
 8001850:	40021000 	.word	0x40021000

08001854 <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x5c>)
 8001856:	6859      	ldr	r1, [r3, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001858:	f001 030c 	and.w	r3, r1, #12
 800185c:	2b08      	cmp	r3, #8
 800185e:	d124      	bne.n	80018aa <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001860:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8001864:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001868:	fa93 f3a3 	rbit	r3, r3
 800186c:	fab3 f383 	clz	r3, r3
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
 8001874:	4a0f      	ldr	r2, [pc, #60]	; (80018b4 <HAL_RCC_GetSysClockFreq+0x60>)
 8001876:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001878:	4b0d      	ldr	r3, [pc, #52]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x5c>)
 800187a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	220f      	movs	r2, #15
 8001882:	fa92 f2a2 	rbit	r2, r2
 8001886:	fab2 f282 	clz	r2, r2
 800188a:	40d3      	lsrs	r3, r2
 800188c:	4a0a      	ldr	r2, [pc, #40]	; (80018b8 <HAL_RCC_GetSysClockFreq+0x64>)
 800188e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001890:	f411 3f80 	tst.w	r1, #65536	; 0x10000
 8001894:	d103      	bne.n	800189e <HAL_RCC_GetSysClockFreq+0x4a>
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001896:	4b09      	ldr	r3, [pc, #36]	; (80018bc <HAL_RCC_GetSysClockFreq+0x68>)
 8001898:	fb03 f000 	mul.w	r0, r3, r0
 800189c:	4770      	bx	lr
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x6c>)
 80018a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80018a4:	fb00 f003 	mul.w	r0, r0, r3
 80018a8:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80018aa:	4805      	ldr	r0, [pc, #20]	; (80018c0 <HAL_RCC_GetSysClockFreq+0x6c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	080028e4 	.word	0x080028e4
 80018b8:	080028f4 	.word	0x080028f4
 80018bc:	003d0900 	.word	0x003d0900
 80018c0:	007a1200 	.word	0x007a1200

080018c4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80018c4:	2800      	cmp	r0, #0
 80018c6:	f000 80c1 	beq.w	8001a4c <HAL_RCC_ClockConfig+0x188>
{
 80018ca:	b570      	push	{r4, r5, r6, lr}
 80018cc:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018ce:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <HAL_RCC_ClockConfig+0x190>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	428b      	cmp	r3, r1
 80018d8:	d20c      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x30>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4a5e      	ldr	r2, [pc, #376]	; (8001a54 <HAL_RCC_ClockConfig+0x190>)
 80018dc:	6813      	ldr	r3, [r2, #0]
 80018de:	f023 0307 	bic.w	r3, r3, #7
 80018e2:	430b      	orrs	r3, r1
 80018e4:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e6:	6813      	ldr	r3, [r2, #0]
 80018e8:	f003 0307 	and.w	r3, r3, #7
 80018ec:	428b      	cmp	r3, r1
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x30>
      return HAL_ERROR;
 80018f0:	2001      	movs	r0, #1
}
 80018f2:	bd70      	pop	{r4, r5, r6, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018f4:	6823      	ldr	r3, [r4, #0]
 80018f6:	f013 0f02 	tst.w	r3, #2
 80018fa:	d006      	beq.n	800190a <HAL_RCC_ClockConfig+0x46>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018fc:	4a56      	ldr	r2, [pc, #344]	; (8001a58 <HAL_RCC_ClockConfig+0x194>)
 80018fe:	6853      	ldr	r3, [r2, #4]
 8001900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001904:	68a0      	ldr	r0, [r4, #8]
 8001906:	4303      	orrs	r3, r0
 8001908:	6053      	str	r3, [r2, #4]
 800190a:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800190c:	6823      	ldr	r3, [r4, #0]
 800190e:	f013 0f01 	tst.w	r3, #1
 8001912:	d05a      	beq.n	80019ca <HAL_RCC_ClockConfig+0x106>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001914:	6863      	ldr	r3, [r4, #4]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d02d      	beq.n	8001976 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800191a:	2b02      	cmp	r3, #2
 800191c:	d040      	beq.n	80019a0 <HAL_RCC_ClockConfig+0xdc>
 800191e:	2202      	movs	r2, #2
 8001920:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001924:	4a4c      	ldr	r2, [pc, #304]	; (8001a58 <HAL_RCC_ClockConfig+0x194>)
 8001926:	6810      	ldr	r0, [r2, #0]
 8001928:	2202      	movs	r2, #2
 800192a:	fa92 f2a2 	rbit	r2, r2
 800192e:	fab2 f282 	clz	r2, r2
 8001932:	f002 021f 	and.w	r2, r2, #31
 8001936:	2101      	movs	r1, #1
 8001938:	fa01 f202 	lsl.w	r2, r1, r2
 800193c:	4210      	tst	r0, r2
 800193e:	f000 8087 	beq.w	8001a50 <HAL_RCC_ClockConfig+0x18c>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001942:	4945      	ldr	r1, [pc, #276]	; (8001a58 <HAL_RCC_ClockConfig+0x194>)
 8001944:	684a      	ldr	r2, [r1, #4]
 8001946:	f022 0203 	bic.w	r2, r2, #3
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 800194e:	f7ff f8e7 	bl	8000b20 <HAL_GetTick>
 8001952:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001954:	4b40      	ldr	r3, [pc, #256]	; (8001a58 <HAL_RCC_ClockConfig+0x194>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 030c 	and.w	r3, r3, #12
 800195c:	6862      	ldr	r2, [r4, #4]
 800195e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001962:	d032      	beq.n	80019ca <HAL_RCC_ClockConfig+0x106>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001964:	f7ff f8dc 	bl	8000b20 <HAL_GetTick>
 8001968:	1b80      	subs	r0, r0, r6
 800196a:	f241 3388 	movw	r3, #5000	; 0x1388
 800196e:	4298      	cmp	r0, r3
 8001970:	d9f0      	bls.n	8001954 <HAL_RCC_ClockConfig+0x90>
        return HAL_TIMEOUT;
 8001972:	2003      	movs	r0, #3
 8001974:	e7bd      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e>
 8001976:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800197a:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197e:	4a36      	ldr	r2, [pc, #216]	; (8001a58 <HAL_RCC_ClockConfig+0x194>)
 8001980:	6810      	ldr	r0, [r2, #0]
 8001982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001986:	fa92 f2a2 	rbit	r2, r2
 800198a:	fab2 f282 	clz	r2, r2
 800198e:	f002 021f 	and.w	r2, r2, #31
 8001992:	2101      	movs	r1, #1
 8001994:	fa01 f202 	lsl.w	r2, r1, r2
 8001998:	4202      	tst	r2, r0
 800199a:	d1d2      	bne.n	8001942 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 800199c:	2001      	movs	r0, #1
 800199e:	e7a8      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e>
 80019a0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019a4:	fa92 f2a2 	rbit	r2, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a8:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <HAL_RCC_ClockConfig+0x194>)
 80019aa:	6810      	ldr	r0, [r2, #0]
 80019ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b0:	fa92 f2a2 	rbit	r2, r2
 80019b4:	fab2 f282 	clz	r2, r2
 80019b8:	f002 021f 	and.w	r2, r2, #31
 80019bc:	2101      	movs	r1, #1
 80019be:	fa01 f202 	lsl.w	r2, r1, r2
 80019c2:	4210      	tst	r0, r2
 80019c4:	d1bd      	bne.n	8001942 <HAL_RCC_ClockConfig+0x7e>
        return HAL_ERROR;
 80019c6:	2001      	movs	r0, #1
 80019c8:	e793      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019ca:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <HAL_RCC_ClockConfig+0x190>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	42ab      	cmp	r3, r5
 80019d4:	d90c      	bls.n	80019f0 <HAL_RCC_ClockConfig+0x12c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019d6:	4a1f      	ldr	r2, [pc, #124]	; (8001a54 <HAL_RCC_ClockConfig+0x190>)
 80019d8:	6813      	ldr	r3, [r2, #0]
 80019da:	f023 0307 	bic.w	r3, r3, #7
 80019de:	432b      	orrs	r3, r5
 80019e0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	42ab      	cmp	r3, r5
 80019ea:	d001      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x12c>
      return HAL_ERROR;
 80019ec:	2001      	movs	r0, #1
 80019ee:	e780      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f0:	6823      	ldr	r3, [r4, #0]
 80019f2:	f013 0f04 	tst.w	r3, #4
 80019f6:	d006      	beq.n	8001a06 <HAL_RCC_ClockConfig+0x142>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019f8:	4a17      	ldr	r2, [pc, #92]	; (8001a58 <HAL_RCC_ClockConfig+0x194>)
 80019fa:	6853      	ldr	r3, [r2, #4]
 80019fc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a00:	68e1      	ldr	r1, [r4, #12]
 8001a02:	430b      	orrs	r3, r1
 8001a04:	6053      	str	r3, [r2, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	f013 0f08 	tst.w	r3, #8
 8001a0c:	d007      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x15a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <HAL_RCC_ClockConfig+0x194>)
 8001a10:	6853      	ldr	r3, [r2, #4]
 8001a12:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001a16:	6921      	ldr	r1, [r4, #16]
 8001a18:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a1c:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001a1e:	f7ff ff19 	bl	8001854 <HAL_RCC_GetSysClockFreq>
 8001a22:	4b0d      	ldr	r3, [pc, #52]	; (8001a58 <HAL_RCC_ClockConfig+0x194>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a2a:	22f0      	movs	r2, #240	; 0xf0
 8001a2c:	fa92 f2a2 	rbit	r2, r2
 8001a30:	fab2 f282 	clz	r2, r2
 8001a34:	40d3      	lsrs	r3, r2
 8001a36:	4a09      	ldr	r2, [pc, #36]	; (8001a5c <HAL_RCC_ClockConfig+0x198>)
 8001a38:	5cd3      	ldrb	r3, [r2, r3]
 8001a3a:	40d8      	lsrs	r0, r3
 8001a3c:	4b08      	ldr	r3, [pc, #32]	; (8001a60 <HAL_RCC_ClockConfig+0x19c>)
 8001a3e:	6018      	str	r0, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <HAL_RCC_ClockConfig+0x1a0>)
 8001a42:	6818      	ldr	r0, [r3, #0]
 8001a44:	f7ff f828 	bl	8000a98 <HAL_InitTick>
  return HAL_OK;
 8001a48:	2000      	movs	r0, #0
 8001a4a:	e752      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8001a4c:	2001      	movs	r0, #1
}
 8001a4e:	4770      	bx	lr
        return HAL_ERROR;
 8001a50:	2001      	movs	r0, #1
 8001a52:	e74e      	b.n	80018f2 <HAL_RCC_ClockConfig+0x2e>
 8001a54:	40022000 	.word	0x40022000
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	080028cc 	.word	0x080028cc
 8001a60:	20000000 	.word	0x20000000
 8001a64:	20000008 	.word	0x20000008

08001a68 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001a68:	4b01      	ldr	r3, [pc, #4]	; (8001a70 <HAL_RCC_GetHCLKFreq+0x8>)
 8001a6a:	6818      	ldr	r0, [r3, #0]
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000000 	.word	0x20000000

08001a74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a74:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001a76:	f7ff fff7 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001a82:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a86:	fa92 f2a2 	rbit	r2, r2
 8001a8a:	fab2 f282 	clz	r2, r2
 8001a8e:	40d3      	lsrs	r3, r2
 8001a90:	4a02      	ldr	r2, [pc, #8]	; (8001a9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a92:	5cd3      	ldrb	r3, [r2, r3]
}    
 8001a94:	40d8      	lsrs	r0, r3
 8001a96:	bd08      	pop	{r3, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	080028dc 	.word	0x080028dc

08001aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001aa0:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001aa2:	f7ff ffe1 	bl	8001a68 <HAL_RCC_GetHCLKFreq>
 8001aa6:	4b07      	ldr	r3, [pc, #28]	; (8001ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001aae:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001ab2:	fa92 f2a2 	rbit	r2, r2
 8001ab6:	fab2 f282 	clz	r2, r2
 8001aba:	40d3      	lsrs	r3, r2
 8001abc:	4a02      	ldr	r2, [pc, #8]	; (8001ac8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
} 
 8001ac0:	40d8      	lsrs	r0, r3
 8001ac2:	bd08      	pop	{r3, pc}
 8001ac4:	40021000 	.word	0x40021000
 8001ac8:	080028dc 	.word	0x080028dc

08001acc <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001acc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad2:	6803      	ldr	r3, [r0, #0]
 8001ad4:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8001ad8:	d044      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ada:	4b64      	ldr	r3, [pc, #400]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001adc:	69db      	ldr	r3, [r3, #28]
 8001ade:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 8001ae2:	d179      	bne.n	8001bd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ae4:	4b61      	ldr	r3, [pc, #388]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001ae6:	69da      	ldr	r2, [r3, #28]
 8001ae8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001aec:	61da      	str	r2, [r3, #28]
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001af8:	2501      	movs	r5, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	4b5d      	ldr	r3, [pc, #372]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001b02:	d06b      	beq.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x110>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b04:	4b59      	ldr	r3, [pc, #356]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b06:	6a1b      	ldr	r3, [r3, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b08:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001b0c:	d021      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x86>
 8001b0e:	6862      	ldr	r2, [r4, #4]
 8001b10:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d01c      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b18:	4854      	ldr	r0, [pc, #336]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b1a:	6a01      	ldr	r1, [r0, #32]
 8001b1c:	f421 7640 	bic.w	r6, r1, #768	; 0x300
 8001b20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b24:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b28:	fab2 f282 	clz	r2, r2
 8001b2c:	4f51      	ldr	r7, [pc, #324]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8001b2e:	443a      	add	r2, r7
 8001b30:	0092      	lsls	r2, r2, #2
 8001b32:	f04f 0c01 	mov.w	ip, #1
 8001b36:	f8c2 c000 	str.w	ip, [r2]
 8001b3a:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	443b      	add	r3, r7
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	2200      	movs	r2, #0
 8001b48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b4a:	6206      	str	r6, [r0, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b4c:	f011 0f01 	tst.w	r1, #1
 8001b50:	d158      	bne.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x138>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001b52:	4a46      	ldr	r2, [pc, #280]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b54:	6a13      	ldr	r3, [r2, #32]
 8001b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b5a:	6861      	ldr	r1, [r4, #4]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b60:	2d00      	cmp	r5, #0
 8001b62:	d17a      	bne.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x18e>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b64:	6823      	ldr	r3, [r4, #0]
 8001b66:	f013 0f01 	tst.w	r3, #1
 8001b6a:	d006      	beq.n	8001b7a <HAL_RCCEx_PeriphCLKConfig+0xae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001b6c:	4a3f      	ldr	r2, [pc, #252]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b6e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b70:	f023 0303 	bic.w	r3, r3, #3
 8001b74:	68a1      	ldr	r1, [r4, #8]
 8001b76:	430b      	orrs	r3, r1
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001b7a:	6823      	ldr	r3, [r4, #0]
 8001b7c:	f013 0f20 	tst.w	r3, #32
 8001b80:	d006      	beq.n	8001b90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001b82:	4a3a      	ldr	r2, [pc, #232]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b84:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001b86:	f023 0310 	bic.w	r3, r3, #16
 8001b8a:	68e1      	ldr	r1, [r4, #12]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001b90:	6823      	ldr	r3, [r4, #0]
 8001b92:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001b96:	d006      	beq.n	8001ba6 <HAL_RCCEx_PeriphCLKConfig+0xda>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001b98:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001b9a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b9c:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001ba0:	6921      	ldr	r1, [r4, #16]
 8001ba2:	430b      	orrs	r3, r1
 8001ba4:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ba6:	6823      	ldr	r3, [r4, #0]
 8001ba8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
 8001bac:	d006      	beq.n	8001bbc <HAL_RCCEx_PeriphCLKConfig+0xf0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001bae:	4a2f      	ldr	r2, [pc, #188]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bb0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bb6:	6961      	ldr	r1, [r4, #20]
 8001bb8:	430b      	orrs	r3, r1
 8001bba:	6313      	str	r3, [r2, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8001bbc:	6823      	ldr	r3, [r4, #0]
 8001bbe:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8001bc2:	d051      	beq.n	8001c68 <HAL_RCCEx_PeriphCLKConfig+0x19c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8001bc4:	4a29      	ldr	r2, [pc, #164]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001bc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001bc8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001bcc:	69a1      	ldr	r1, [r4, #24]
 8001bce:	430b      	orrs	r3, r1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001bd2:	2000      	movs	r0, #0
}
 8001bd4:	b003      	add	sp, #12
 8001bd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    FlagStatus       pwrclkchanged = RESET;
 8001bd8:	2500      	movs	r5, #0
 8001bda:	e78e      	b.n	8001afa <HAL_RCCEx_PeriphCLKConfig+0x2e>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001bdc:	4a24      	ldr	r2, [pc, #144]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001bde:	6813      	ldr	r3, [r2, #0]
 8001be0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be4:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8001be6:	f7fe ff9b 	bl	8000b20 <HAL_GetTick>
 8001bea:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bec:	4b20      	ldr	r3, [pc, #128]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8001bf4:	d186      	bne.n	8001b04 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf6:	f7fe ff93 	bl	8000b20 <HAL_GetTick>
 8001bfa:	1b80      	subs	r0, r0, r6
 8001bfc:	2864      	cmp	r0, #100	; 0x64
 8001bfe:	d9f5      	bls.n	8001bec <HAL_RCCEx_PeriphCLKConfig+0x120>
          return HAL_TIMEOUT;
 8001c00:	2003      	movs	r0, #3
 8001c02:	e7e7      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8001c04:	f7fe ff8c 	bl	8000b20 <HAL_GetTick>
 8001c08:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0a:	e014      	b.n	8001c36 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8001c0c:	4b17      	ldr	r3, [pc, #92]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c0e:	6a19      	ldr	r1, [r3, #32]
 8001c10:	2302      	movs	r3, #2
 8001c12:	fa93 f3a3 	rbit	r3, r3
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	f003 031f 	and.w	r3, r3, #31
 8001c1e:	2201      	movs	r2, #1
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	420b      	tst	r3, r1
 8001c26:	d194      	bne.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x86>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7fe ff7a 	bl	8000b20 <HAL_GetTick>
 8001c2c:	1b80      	subs	r0, r0, r6
 8001c2e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001c32:	4298      	cmp	r0, r3
 8001c34:	d816      	bhi.n	8001c64 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8001c36:	2302      	movs	r3, #2
 8001c38:	fa93 f2a3 	rbit	r2, r3
 8001c3c:	fa93 f3a3 	rbit	r3, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c40:	fab3 f383 	clz	r3, r3
 8001c44:	095b      	lsrs	r3, r3, #5
 8001c46:	f043 0302 	orr.w	r3, r3, #2
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d0de      	beq.n	8001c0c <HAL_RCCEx_PeriphCLKConfig+0x140>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	fa93 f3a3 	rbit	r3, r3
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8001c56:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001c58:	e7da      	b.n	8001c10 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5a:	69d3      	ldr	r3, [r2, #28]
 8001c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c60:	61d3      	str	r3, [r2, #28]
 8001c62:	e77f      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
 8001c64:	2003      	movs	r0, #3
 8001c66:	e7b5      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
  return HAL_OK;
 8001c68:	2000      	movs	r0, #0
 8001c6a:	e7b3      	b.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x108>
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	40007000 	.word	0x40007000
 8001c74:	10908100 	.word	0x10908100

08001c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c78:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001c7a:	6a03      	ldr	r3, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001c7c:	6a04      	ldr	r4, [r0, #32]
 8001c7e:	f024 0401 	bic.w	r4, r4, #1
 8001c82:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c84:	6984      	ldr	r4, [r0, #24]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001c86:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001c8a:	ea44 1202 	orr.w	r2, r4, r2, lsl #4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001c8e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer |= TIM_ICPolarity;
 8001c92:	430b      	orrs	r3, r1

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001c94:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001c96:	6203      	str	r3, [r0, #32]
}
 8001c98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c9e:	b410      	push	{r4}
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001ca0:	6a03      	ldr	r3, [r0, #32]
 8001ca2:	f023 0310 	bic.w	r3, r3, #16
 8001ca6:	6203      	str	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001ca8:	6984      	ldr	r4, [r0, #24]
  tmpccer = TIMx->CCER;
 8001caa:	6a03      	ldr	r3, [r0, #32]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001cac:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001cb0:	ea44 3202 	orr.w	r2, r4, r2, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001cb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001cb8:	ea43 1301 	orr.w	r3, r3, r1, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001cbc:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001cbe:	6203      	str	r3, [r0, #32]
}
 8001cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <TIM_ITRx_SetConfig>:
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001cc6:	6883      	ldr	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001cc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001ccc:	4319      	orrs	r1, r3
 8001cce:	f041 0107 	orr.w	r1, r1, #7
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cd2:	6081      	str	r1, [r0, #8]
}
 8001cd4:	4770      	bx	lr
	...

08001cd8 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cde:	6802      	ldr	r2, [r0, #0]
 8001ce0:	6891      	ldr	r1, [r2, #8]
 8001ce2:	4b08      	ldr	r3, [pc, #32]	; (8001d04 <HAL_TIM_Base_Start+0x2c>)
 8001ce4:	400b      	ands	r3, r1
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ce6:	2b06      	cmp	r3, #6
 8001ce8:	d006      	beq.n	8001cf8 <HAL_TIM_Base_Start+0x20>
 8001cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cee:	d003      	beq.n	8001cf8 <HAL_TIM_Base_Start+0x20>
    __HAL_TIM_ENABLE(htim);
 8001cf0:	6813      	ldr	r3, [r2, #0]
 8001cf2:	f043 0301 	orr.w	r3, r3, #1
 8001cf6:	6013      	str	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_READY;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
}
 8001cfe:	2000      	movs	r0, #0
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	00010007 	.word	0x00010007

08001d08 <HAL_TIM_PeriodElapsedCallback>:
}
 8001d08:	4770      	bx	lr

08001d0a <HAL_TIM_OC_DelayElapsedCallback>:
}
 8001d0a:	4770      	bx	lr

08001d0c <HAL_TIM_IC_CaptureCallback>:
}
 8001d0c:	4770      	bx	lr

08001d0e <HAL_TIM_PWM_PulseFinishedCallback>:
}
 8001d0e:	4770      	bx	lr

08001d10 <HAL_TIM_TriggerCallback>:
}
 8001d10:	4770      	bx	lr

08001d12 <HAL_TIM_IRQHandler>:
{
 8001d12:	b510      	push	{r4, lr}
 8001d14:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d16:	6803      	ldr	r3, [r0, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	f012 0f02 	tst.w	r2, #2
 8001d1e:	d011      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x32>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	f012 0f02 	tst.w	r2, #2
 8001d26:	d00d      	beq.n	8001d44 <HAL_TIM_IRQHandler+0x32>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d28:	f06f 0202 	mvn.w	r2, #2
 8001d2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	7703      	strb	r3, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d32:	6803      	ldr	r3, [r0, #0]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	f013 0f03 	tst.w	r3, #3
 8001d3a:	d079      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x11e>
          HAL_TIM_IC_CaptureCallback(htim);
 8001d3c:	f7ff ffe6 	bl	8001d0c <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d40:	2300      	movs	r3, #0
 8001d42:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d44:	6823      	ldr	r3, [r4, #0]
 8001d46:	691a      	ldr	r2, [r3, #16]
 8001d48:	f012 0f04 	tst.w	r2, #4
 8001d4c:	d012      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x62>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d4e:	68da      	ldr	r2, [r3, #12]
 8001d50:	f012 0f04 	tst.w	r2, #4
 8001d54:	d00e      	beq.n	8001d74 <HAL_TIM_IRQHandler+0x62>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d56:	f06f 0204 	mvn.w	r2, #4
 8001d5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d5c:	2302      	movs	r3, #2
 8001d5e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d60:	6823      	ldr	r3, [r4, #0]
 8001d62:	699b      	ldr	r3, [r3, #24]
 8001d64:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001d68:	d068      	beq.n	8001e3c <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d6a:	4620      	mov	r0, r4
 8001d6c:	f7ff ffce 	bl	8001d0c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d70:	2300      	movs	r3, #0
 8001d72:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	691a      	ldr	r2, [r3, #16]
 8001d78:	f012 0f08 	tst.w	r2, #8
 8001d7c:	d012      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x92>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	f012 0f08 	tst.w	r2, #8
 8001d84:	d00e      	beq.n	8001da4 <HAL_TIM_IRQHandler+0x92>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d86:	f06f 0208 	mvn.w	r2, #8
 8001d8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d8c:	2304      	movs	r3, #4
 8001d8e:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d90:	6823      	ldr	r3, [r4, #0]
 8001d92:	69db      	ldr	r3, [r3, #28]
 8001d94:	f013 0f03 	tst.w	r3, #3
 8001d98:	d057      	beq.n	8001e4a <HAL_TIM_IRQHandler+0x138>
        HAL_TIM_IC_CaptureCallback(htim);
 8001d9a:	4620      	mov	r0, r4
 8001d9c:	f7ff ffb6 	bl	8001d0c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da0:	2300      	movs	r3, #0
 8001da2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da4:	6823      	ldr	r3, [r4, #0]
 8001da6:	691a      	ldr	r2, [r3, #16]
 8001da8:	f012 0f10 	tst.w	r2, #16
 8001dac:	d012      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0xc2>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	f012 0f10 	tst.w	r2, #16
 8001db4:	d00e      	beq.n	8001dd4 <HAL_TIM_IRQHandler+0xc2>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001db6:	f06f 0210 	mvn.w	r2, #16
 8001dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dbc:	2308      	movs	r3, #8
 8001dbe:	7723      	strb	r3, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dc0:	6823      	ldr	r3, [r4, #0]
 8001dc2:	69db      	ldr	r3, [r3, #28]
 8001dc4:	f413 7f40 	tst.w	r3, #768	; 0x300
 8001dc8:	d046      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8001dca:	4620      	mov	r0, r4
 8001dcc:	f7ff ff9e 	bl	8001d0c <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dd4:	6823      	ldr	r3, [r4, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	f012 0f01 	tst.w	r2, #1
 8001ddc:	d003      	beq.n	8001de6 <HAL_TIM_IRQHandler+0xd4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dde:	68da      	ldr	r2, [r3, #12]
 8001de0:	f012 0f01 	tst.w	r2, #1
 8001de4:	d13f      	bne.n	8001e66 <HAL_TIM_IRQHandler+0x154>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001de6:	6823      	ldr	r3, [r4, #0]
 8001de8:	691a      	ldr	r2, [r3, #16]
 8001dea:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001dee:	d003      	beq.n	8001df8 <HAL_TIM_IRQHandler+0xe6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001df6:	d13d      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x162>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8001df8:	6823      	ldr	r3, [r4, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	f412 7f80 	tst.w	r2, #256	; 0x100
 8001e00:	d003      	beq.n	8001e0a <HAL_TIM_IRQHandler+0xf8>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e02:	68da      	ldr	r2, [r3, #12]
 8001e04:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001e08:	d13b      	bne.n	8001e82 <HAL_TIM_IRQHandler+0x170>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e0a:	6823      	ldr	r3, [r4, #0]
 8001e0c:	691a      	ldr	r2, [r3, #16]
 8001e0e:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e12:	d003      	beq.n	8001e1c <HAL_TIM_IRQHandler+0x10a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e14:	68da      	ldr	r2, [r3, #12]
 8001e16:	f012 0f40 	tst.w	r2, #64	; 0x40
 8001e1a:	d139      	bne.n	8001e90 <HAL_TIM_IRQHandler+0x17e>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e1c:	6823      	ldr	r3, [r4, #0]
 8001e1e:	691a      	ldr	r2, [r3, #16]
 8001e20:	f012 0f20 	tst.w	r2, #32
 8001e24:	d003      	beq.n	8001e2e <HAL_TIM_IRQHandler+0x11c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	f012 0f20 	tst.w	r2, #32
 8001e2c:	d137      	bne.n	8001e9e <HAL_TIM_IRQHandler+0x18c>
}
 8001e2e:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e30:	f7ff ff6b 	bl	8001d0a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff ff6a 	bl	8001d0e <HAL_TIM_PWM_PulseFinishedCallback>
 8001e3a:	e781      	b.n	8001d40 <HAL_TIM_IRQHandler+0x2e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e3c:	4620      	mov	r0, r4
 8001e3e:	f7ff ff64 	bl	8001d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e42:	4620      	mov	r0, r4
 8001e44:	f7ff ff63 	bl	8001d0e <HAL_TIM_PWM_PulseFinishedCallback>
 8001e48:	e792      	b.n	8001d70 <HAL_TIM_IRQHandler+0x5e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4a:	4620      	mov	r0, r4
 8001e4c:	f7ff ff5d 	bl	8001d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e50:	4620      	mov	r0, r4
 8001e52:	f7ff ff5c 	bl	8001d0e <HAL_TIM_PWM_PulseFinishedCallback>
 8001e56:	e7a3      	b.n	8001da0 <HAL_TIM_IRQHandler+0x8e>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e58:	4620      	mov	r0, r4
 8001e5a:	f7ff ff56 	bl	8001d0a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e5e:	4620      	mov	r0, r4
 8001e60:	f7ff ff55 	bl	8001d0e <HAL_TIM_PWM_PulseFinishedCallback>
 8001e64:	e7b4      	b.n	8001dd0 <HAL_TIM_IRQHandler+0xbe>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e66:	f06f 0201 	mvn.w	r2, #1
 8001e6a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f7ff ff4b 	bl	8001d08 <HAL_TIM_PeriodElapsedCallback>
 8001e72:	e7b8      	b.n	8001de6 <HAL_TIM_IRQHandler+0xd4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e78:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001e7a:	4620      	mov	r0, r4
 8001e7c:	f000 f92f 	bl	80020de <HAL_TIMEx_BreakCallback>
 8001e80:	e7ba      	b.n	8001df8 <HAL_TIM_IRQHandler+0xe6>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001e82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001e86:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8001e88:	4620      	mov	r0, r4
 8001e8a:	f000 f929 	bl	80020e0 <HAL_TIMEx_Break2Callback>
 8001e8e:	e7bc      	b.n	8001e0a <HAL_TIM_IRQHandler+0xf8>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e94:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001e96:	4620      	mov	r0, r4
 8001e98:	f7ff ff3a 	bl	8001d10 <HAL_TIM_TriggerCallback>
 8001e9c:	e7be      	b.n	8001e1c <HAL_TIM_IRQHandler+0x10a>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e9e:	f06f 0220 	mvn.w	r2, #32
 8001ea2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8001ea4:	4620      	mov	r0, r4
 8001ea6:	f000 f919 	bl	80020dc <HAL_TIMEx_CommutCallback>
}
 8001eaa:	e7c0      	b.n	8001e2e <HAL_TIM_IRQHandler+0x11c>

08001eac <TIM_Base_SetConfig>:
  tmpcr1 = TIMx->CR1;
 8001eac:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001eae:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <TIM_Base_SetConfig+0x8c>)
 8001eb0:	4290      	cmp	r0, r2
 8001eb2:	d006      	beq.n	8001ec2 <TIM_Base_SetConfig+0x16>
 8001eb4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001eb8:	d003      	beq.n	8001ec2 <TIM_Base_SetConfig+0x16>
 8001eba:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ebe:	4290      	cmp	r0, r2
 8001ec0:	d103      	bne.n	8001eca <TIM_Base_SetConfig+0x1e>
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001ec6:	684a      	ldr	r2, [r1, #4]
 8001ec8:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001eca:	4a1b      	ldr	r2, [pc, #108]	; (8001f38 <TIM_Base_SetConfig+0x8c>)
 8001ecc:	4290      	cmp	r0, r2
 8001ece:	d012      	beq.n	8001ef6 <TIM_Base_SetConfig+0x4a>
 8001ed0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001ed4:	d00f      	beq.n	8001ef6 <TIM_Base_SetConfig+0x4a>
 8001ed6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001eda:	4290      	cmp	r0, r2
 8001edc:	d00b      	beq.n	8001ef6 <TIM_Base_SetConfig+0x4a>
 8001ede:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 8001ee2:	4290      	cmp	r0, r2
 8001ee4:	d007      	beq.n	8001ef6 <TIM_Base_SetConfig+0x4a>
 8001ee6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001eea:	4290      	cmp	r0, r2
 8001eec:	d003      	beq.n	8001ef6 <TIM_Base_SetConfig+0x4a>
 8001eee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001ef2:	4290      	cmp	r0, r2
 8001ef4:	d103      	bne.n	8001efe <TIM_Base_SetConfig+0x52>
    tmpcr1 &= ~TIM_CR1_CKD;
 8001ef6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001efa:	68ca      	ldr	r2, [r1, #12]
 8001efc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001efe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001f02:	694a      	ldr	r2, [r1, #20]
 8001f04:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001f06:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f08:	688b      	ldr	r3, [r1, #8]
 8001f0a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8001f0c:	680b      	ldr	r3, [r1, #0]
 8001f0e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <TIM_Base_SetConfig+0x8c>)
 8001f12:	4298      	cmp	r0, r3
 8001f14:	d00b      	beq.n	8001f2e <TIM_Base_SetConfig+0x82>
 8001f16:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8001f1a:	4298      	cmp	r0, r3
 8001f1c:	d007      	beq.n	8001f2e <TIM_Base_SetConfig+0x82>
 8001f1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f22:	4298      	cmp	r0, r3
 8001f24:	d003      	beq.n	8001f2e <TIM_Base_SetConfig+0x82>
 8001f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f2a:	4298      	cmp	r0, r3
 8001f2c:	d101      	bne.n	8001f32 <TIM_Base_SetConfig+0x86>
    TIMx->RCR = Structure->RepetitionCounter;
 8001f2e:	690b      	ldr	r3, [r1, #16]
 8001f30:	6303      	str	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8001f32:	2301      	movs	r3, #1
 8001f34:	6143      	str	r3, [r0, #20]
}
 8001f36:	4770      	bx	lr
 8001f38:	40012c00 	.word	0x40012c00

08001f3c <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8001f3c:	b1a8      	cbz	r0, 8001f6a <HAL_TIM_Base_Init+0x2e>
{
 8001f3e:	b510      	push	{r4, lr}
 8001f40:	4604      	mov	r4, r0
  if (htim->State == HAL_TIM_STATE_RESET)
 8001f42:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001f46:	b15b      	cbz	r3, 8001f60 <HAL_TIM_Base_Init+0x24>
  htim->State = HAL_TIM_STATE_BUSY;
 8001f48:	2302      	movs	r3, #2
 8001f4a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f4e:	1d21      	adds	r1, r4, #4
 8001f50:	6820      	ldr	r0, [r4, #0]
 8001f52:	f7ff ffab 	bl	8001eac <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8001f56:	2301      	movs	r3, #1
 8001f58:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001f5c:	2000      	movs	r0, #0
}
 8001f5e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001f60:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001f64:	f7fe fbb2 	bl	80006cc <HAL_TIM_Base_MspInit>
 8001f68:	e7ee      	b.n	8001f48 <HAL_TIM_Base_Init+0xc>
    return HAL_ERROR;
 8001f6a:	2001      	movs	r0, #1
}
 8001f6c:	4770      	bx	lr

08001f6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f6e:	b410      	push	{r4}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f70:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f72:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f76:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001f7a:	430b      	orrs	r3, r1
 8001f7c:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f7e:	6083      	str	r3, [r0, #8]
}
 8001f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001f88:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d064      	beq.n	800205a <HAL_TIM_ConfigClockSource+0xd2>
{
 8001f90:	b510      	push	{r4, lr}
 8001f92:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001f94:	2301      	movs	r3, #1
 8001f96:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8001fa0:	6802      	ldr	r2, [r0, #0]
 8001fa2:	6890      	ldr	r0, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fa4:	4b2e      	ldr	r3, [pc, #184]	; (8002060 <HAL_TIM_ConfigClockSource+0xd8>)
 8001fa6:	4003      	ands	r3, r0
  htim->Instance->SMCR = tmpsmcr;
 8001fa8:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001faa:	680b      	ldr	r3, [r1, #0]
 8001fac:	2b40      	cmp	r3, #64	; 0x40
 8001fae:	d04a      	beq.n	8002046 <HAL_TIM_ConfigClockSource+0xbe>
 8001fb0:	d913      	bls.n	8001fda <HAL_TIM_ConfigClockSource+0x52>
 8001fb2:	2b60      	cmp	r3, #96	; 0x60
 8001fb4:	d03d      	beq.n	8002032 <HAL_TIM_ConfigClockSource+0xaa>
 8001fb6:	d91e      	bls.n	8001ff6 <HAL_TIM_ConfigClockSource+0x6e>
 8001fb8:	2b70      	cmp	r3, #112	; 0x70
 8001fba:	d028      	beq.n	800200e <HAL_TIM_ConfigClockSource+0x86>
 8001fbc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fc0:	d130      	bne.n	8002024 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 8001fc2:	68cb      	ldr	r3, [r1, #12]
 8001fc4:	684a      	ldr	r2, [r1, #4]
 8001fc6:	6889      	ldr	r1, [r1, #8]
 8001fc8:	6820      	ldr	r0, [r4, #0]
 8001fca:	f7ff ffd0 	bl	8001f6e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001fce:	6822      	ldr	r2, [r4, #0]
 8001fd0:	6893      	ldr	r3, [r2, #8]
 8001fd2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd6:	6093      	str	r3, [r2, #8]
      break;
 8001fd8:	e024      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8001fda:	2b10      	cmp	r3, #16
 8001fdc:	d006      	beq.n	8001fec <HAL_TIM_ConfigClockSource+0x64>
 8001fde:	d904      	bls.n	8001fea <HAL_TIM_ConfigClockSource+0x62>
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d003      	beq.n	8001fec <HAL_TIM_ConfigClockSource+0x64>
 8001fe4:	2b30      	cmp	r3, #48	; 0x30
 8001fe6:	d001      	beq.n	8001fec <HAL_TIM_ConfigClockSource+0x64>
 8001fe8:	e01c      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x9c>
 8001fea:	b9db      	cbnz	r3, 8002024 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001fec:	4619      	mov	r1, r3
 8001fee:	6820      	ldr	r0, [r4, #0]
 8001ff0:	f7ff fe69 	bl	8001cc6 <TIM_ITRx_SetConfig>
      break;
 8001ff4:	e016      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x9c>
  switch (sClockSourceConfig->ClockSource)
 8001ff6:	2b50      	cmp	r3, #80	; 0x50
 8001ff8:	d114      	bne.n	8002024 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ffa:	68ca      	ldr	r2, [r1, #12]
 8001ffc:	6849      	ldr	r1, [r1, #4]
 8001ffe:	6820      	ldr	r0, [r4, #0]
 8002000:	f7ff fe3a 	bl	8001c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002004:	2150      	movs	r1, #80	; 0x50
 8002006:	6820      	ldr	r0, [r4, #0]
 8002008:	f7ff fe5d 	bl	8001cc6 <TIM_ITRx_SetConfig>
      break;
 800200c:	e00a      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_ETR_SetConfig(htim->Instance,
 800200e:	68cb      	ldr	r3, [r1, #12]
 8002010:	684a      	ldr	r2, [r1, #4]
 8002012:	6889      	ldr	r1, [r1, #8]
 8002014:	6820      	ldr	r0, [r4, #0]
 8002016:	f7ff ffaa 	bl	8001f6e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800201a:	6822      	ldr	r2, [r4, #0]
 800201c:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800201e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 8002022:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8002024:	2301      	movs	r3, #1
 8002026:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800202a:	2000      	movs	r0, #0
 800202c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8002030:	bd10      	pop	{r4, pc}
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002032:	68ca      	ldr	r2, [r1, #12]
 8002034:	6849      	ldr	r1, [r1, #4]
 8002036:	6820      	ldr	r0, [r4, #0]
 8002038:	f7ff fe31 	bl	8001c9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800203c:	2160      	movs	r1, #96	; 0x60
 800203e:	6820      	ldr	r0, [r4, #0]
 8002040:	f7ff fe41 	bl	8001cc6 <TIM_ITRx_SetConfig>
      break;
 8002044:	e7ee      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x9c>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002046:	68ca      	ldr	r2, [r1, #12]
 8002048:	6849      	ldr	r1, [r1, #4]
 800204a:	6820      	ldr	r0, [r4, #0]
 800204c:	f7ff fe14 	bl	8001c78 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002050:	2140      	movs	r1, #64	; 0x40
 8002052:	6820      	ldr	r0, [r4, #0]
 8002054:	f7ff fe37 	bl	8001cc6 <TIM_ITRx_SetConfig>
      break;
 8002058:	e7e4      	b.n	8002024 <HAL_TIM_ConfigClockSource+0x9c>
  __HAL_LOCK(htim);
 800205a:	2002      	movs	r0, #2
}
 800205c:	4770      	bx	lr
 800205e:	bf00      	nop
 8002060:	fffe0088 	.word	0xfffe0088

08002064 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002064:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d033      	beq.n	80020d4 <HAL_TIMEx_MasterConfigSynchronization+0x70>
{
 800206c:	b430      	push	{r4, r5}
  __HAL_LOCK(htim);
 800206e:	2301      	movs	r3, #1
 8002070:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002074:	2302      	movs	r3, #2
 8002076:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800207a:	6802      	ldr	r2, [r0, #0]
 800207c:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800207e:	6895      	ldr	r5, [r2, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002080:	4c15      	ldr	r4, [pc, #84]	; (80020d8 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8002082:	42a2      	cmp	r2, r4
 8002084:	d021      	beq.n	80020ca <HAL_TIMEx_MasterConfigSynchronization+0x66>
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800208a:	680c      	ldr	r4, [r1, #0]
 800208c:	4323      	orrs	r3, r4

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800208e:	6053      	str	r3, [r2, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002090:	6803      	ldr	r3, [r0, #0]
 8002092:	4a11      	ldr	r2, [pc, #68]	; (80020d8 <HAL_TIMEx_MasterConfigSynchronization+0x74>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d00a      	beq.n	80020ae <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 8002098:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800209c:	d007      	beq.n	80020ae <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 800209e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d003      	beq.n	80020ae <HAL_TIMEx_MasterConfigSynchronization+0x4a>
 80020a6:	f502 329e 	add.w	r2, r2, #80896	; 0x13c00
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d104      	bne.n	80020b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80020ae:	f025 0580 	bic.w	r5, r5, #128	; 0x80
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80020b2:	688a      	ldr	r2, [r1, #8]
 80020b4:	4315      	orrs	r5, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80020b6:	609d      	str	r5, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80020b8:	2301      	movs	r3, #1
 80020ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80020be:	2300      	movs	r3, #0
 80020c0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80020c4:	4618      	mov	r0, r3
}
 80020c6:	bc30      	pop	{r4, r5}
 80020c8:	4770      	bx	lr
    tmpcr2 &= ~TIM_CR2_MMS2;
 80020ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80020ce:	684c      	ldr	r4, [r1, #4]
 80020d0:	4323      	orrs	r3, r4
 80020d2:	e7d8      	b.n	8002086 <HAL_TIMEx_MasterConfigSynchronization+0x22>
  __HAL_LOCK(htim);
 80020d4:	2002      	movs	r0, #2
}
 80020d6:	4770      	bx	lr
 80020d8:	40012c00 	.word	0x40012c00

080020dc <HAL_TIMEx_CommutCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020dc:	4770      	bx	lr

080020de <HAL_TIMEx_BreakCallback>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020de:	4770      	bx	lr

080020e0 <HAL_TIMEx_Break2Callback>:
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020e0:	4770      	bx	lr

080020e2 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80020e2:	6802      	ldr	r2, [r0, #0]
 80020e4:	6813      	ldr	r3, [r2, #0]
 80020e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80020ea:	6013      	str	r3, [r2, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020ec:	6802      	ldr	r2, [r0, #0]
 80020ee:	6893      	ldr	r3, [r2, #8]
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020f6:	2320      	movs	r3, #32
 80020f8:	6783      	str	r3, [r0, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80020fa:	2300      	movs	r3, #0
 80020fc:	6603      	str	r3, [r0, #96]	; 0x60
}
 80020fe:	4770      	bx	lr

08002100 <UART_TxISR_8BIT>:
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002100:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002102:	2b21      	cmp	r3, #33	; 0x21
 8002104:	d000      	beq.n	8002108 <UART_TxISR_8BIT+0x8>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8002106:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 8002108:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800210c:	b29b      	uxth	r3, r3
 800210e:	b16b      	cbz	r3, 800212c <UART_TxISR_8BIT+0x2c>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8002110:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
 8002112:	6803      	ldr	r3, [r0, #0]
 8002114:	7812      	ldrb	r2, [r2, #0]
 8002116:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8002118:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800211a:	3301      	adds	r3, #1
 800211c:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 800211e:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002122:	3b01      	subs	r3, #1
 8002124:	b29b      	uxth	r3, r3
 8002126:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 800212a:	e7ec      	b.n	8002106 <UART_TxISR_8BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800212c:	6802      	ldr	r2, [r0, #0]
 800212e:	6813      	ldr	r3, [r2, #0]
 8002130:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002134:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002136:	6802      	ldr	r2, [r0, #0]
 8002138:	6813      	ldr	r3, [r2, #0]
 800213a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800213e:	6013      	str	r3, [r2, #0]
 8002140:	4770      	bx	lr

08002142 <UART_TxISR_16BIT>:
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002142:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002144:	2b21      	cmp	r3, #33	; 0x21
 8002146:	d000      	beq.n	800214a <UART_TxISR_16BIT+0x8>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8002148:	4770      	bx	lr
    if (huart->TxXferCount == 0U)
 800214a:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 800214e:	b29b      	uxth	r3, r3
 8002150:	b17b      	cbz	r3, 8002172 <UART_TxISR_16BIT+0x30>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002152:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	6802      	ldr	r2, [r0, #0]
 8002158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215c:	8513      	strh	r3, [r2, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800215e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8002160:	3302      	adds	r3, #2
 8002162:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8002164:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002168:	3b01      	subs	r3, #1
 800216a:	b29b      	uxth	r3, r3
 800216c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
}
 8002170:	e7ea      	b.n	8002148 <UART_TxISR_16BIT+0x6>
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002172:	6802      	ldr	r2, [r0, #0]
 8002174:	6813      	ldr	r3, [r2, #0]
 8002176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800217a:	6013      	str	r3, [r2, #0]
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800217c:	6802      	ldr	r2, [r0, #0]
 800217e:	6813      	ldr	r3, [r2, #0]
 8002180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002184:	6013      	str	r3, [r2, #0]
 8002186:	4770      	bx	lr

08002188 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8002188:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800218a:	2b20      	cmp	r3, #32
 800218c:	d128      	bne.n	80021e0 <HAL_UART_Transmit_IT+0x58>
    if ((pData == NULL) || (Size == 0U))
 800218e:	b349      	cbz	r1, 80021e4 <HAL_UART_Transmit_IT+0x5c>
 8002190:	b352      	cbz	r2, 80021e8 <HAL_UART_Transmit_IT+0x60>
    __HAL_LOCK(huart);
 8002192:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002196:	2b01      	cmp	r3, #1
 8002198:	d028      	beq.n	80021ec <HAL_UART_Transmit_IT+0x64>
 800219a:	2301      	movs	r3, #1
 800219c:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->pTxBuffPtr  = pData;
 80021a0:	64c1      	str	r1, [r0, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80021a2:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
    huart->TxXferCount = Size;
 80021a6:	f8a0 2052 	strh.w	r2, [r0, #82]	; 0x52
    huart->TxISR       = NULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	6643      	str	r3, [r0, #100]	; 0x64
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ae:	67c3      	str	r3, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021b0:	2321      	movs	r3, #33	; 0x21
 80021b2:	6743      	str	r3, [r0, #116]	; 0x74
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021b4:	6883      	ldr	r3, [r0, #8]
 80021b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021ba:	d00b      	beq.n	80021d4 <HAL_UART_Transmit_IT+0x4c>
      huart->TxISR = UART_TxISR_8BIT;
 80021bc:	4b0c      	ldr	r3, [pc, #48]	; (80021f0 <HAL_UART_Transmit_IT+0x68>)
 80021be:	6643      	str	r3, [r0, #100]	; 0x64
    __HAL_UNLOCK(huart);
 80021c0:	2300      	movs	r3, #0
 80021c2:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80021c6:	6801      	ldr	r1, [r0, #0]
 80021c8:	680a      	ldr	r2, [r1, #0]
 80021ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021ce:	600a      	str	r2, [r1, #0]
    return HAL_OK;
 80021d0:	4618      	mov	r0, r3
 80021d2:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021d4:	6903      	ldr	r3, [r0, #16]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_UART_Transmit_IT+0x34>
      huart->TxISR = UART_TxISR_16BIT;
 80021da:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_UART_Transmit_IT+0x6c>)
 80021dc:	6643      	str	r3, [r0, #100]	; 0x64
 80021de:	e7ef      	b.n	80021c0 <HAL_UART_Transmit_IT+0x38>
    return HAL_BUSY;
 80021e0:	2002      	movs	r0, #2
 80021e2:	4770      	bx	lr
      return HAL_ERROR;
 80021e4:	2001      	movs	r0, #1
 80021e6:	4770      	bx	lr
 80021e8:	2001      	movs	r0, #1
 80021ea:	4770      	bx	lr
    __HAL_LOCK(huart);
 80021ec:	2002      	movs	r0, #2
}
 80021ee:	4770      	bx	lr
 80021f0:	08002101 	.word	0x08002101
 80021f4:	08002143 	.word	0x08002143

080021f8 <HAL_UART_TxCpltCallback>:
}
 80021f8:	4770      	bx	lr

080021fa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80021fa:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80021fc:	6801      	ldr	r1, [r0, #0]
 80021fe:	680a      	ldr	r2, [r1, #0]
 8002200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002204:	600a      	str	r2, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002206:	2220      	movs	r2, #32
 8002208:	6742      	str	r2, [r0, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800220a:	2200      	movs	r2, #0
 800220c:	6642      	str	r2, [r0, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800220e:	f7ff fff3 	bl	80021f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002212:	bd08      	pop	{r3, pc}

08002214 <HAL_UART_ErrorCallback>:
}
 8002214:	4770      	bx	lr
	...

08002218 <HAL_UART_IRQHandler>:
{
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800221c:	6801      	ldr	r1, [r0, #0]
 800221e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002220:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002222:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002224:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8002228:	401a      	ands	r2, r3
 800222a:	d10c      	bne.n	8002246 <HAL_UART_IRQHandler+0x2e>
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800222c:	f013 0f20 	tst.w	r3, #32
 8002230:	d009      	beq.n	8002246 <HAL_UART_IRQHandler+0x2e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002232:	f010 0f20 	tst.w	r0, #32
 8002236:	d006      	beq.n	8002246 <HAL_UART_IRQHandler+0x2e>
      if (huart->RxISR != NULL)
 8002238:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800223a:	2b00      	cmp	r3, #0
 800223c:	f000 80a1 	beq.w	8002382 <HAL_UART_IRQHandler+0x16a>
        huart->RxISR(huart);
 8002240:	4620      	mov	r0, r4
 8002242:	4798      	blx	r3
 8002244:	e09d      	b.n	8002382 <HAL_UART_IRQHandler+0x16a>
  if ((errorflags != 0U)
 8002246:	2a00      	cmp	r2, #0
 8002248:	d07d      	beq.n	8002346 <HAL_UART_IRQHandler+0x12e>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800224a:	f015 0201 	ands.w	r2, r5, #1
 800224e:	d102      	bne.n	8002256 <HAL_UART_IRQHandler+0x3e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 8002250:	f410 7f90 	tst.w	r0, #288	; 0x120
 8002254:	d077      	beq.n	8002346 <HAL_UART_IRQHandler+0x12e>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002256:	f013 0f01 	tst.w	r3, #1
 800225a:	d007      	beq.n	800226c <HAL_UART_IRQHandler+0x54>
 800225c:	f410 7f80 	tst.w	r0, #256	; 0x100
 8002260:	d004      	beq.n	800226c <HAL_UART_IRQHandler+0x54>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002262:	2501      	movs	r5, #1
 8002264:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002266:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002268:	4329      	orrs	r1, r5
 800226a:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800226c:	f013 0f02 	tst.w	r3, #2
 8002270:	d007      	beq.n	8002282 <HAL_UART_IRQHandler+0x6a>
 8002272:	b132      	cbz	r2, 8002282 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002274:	6821      	ldr	r1, [r4, #0]
 8002276:	2502      	movs	r5, #2
 8002278:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800227a:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 800227c:	f041 0104 	orr.w	r1, r1, #4
 8002280:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002282:	f013 0f04 	tst.w	r3, #4
 8002286:	d007      	beq.n	8002298 <HAL_UART_IRQHandler+0x80>
 8002288:	b132      	cbz	r2, 8002298 <HAL_UART_IRQHandler+0x80>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800228a:	6821      	ldr	r1, [r4, #0]
 800228c:	2504      	movs	r5, #4
 800228e:	620d      	str	r5, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002290:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002292:	f041 0102 	orr.w	r1, r1, #2
 8002296:	67e1      	str	r1, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002298:	f013 0f08 	tst.w	r3, #8
 800229c:	d009      	beq.n	80022b2 <HAL_UART_IRQHandler+0x9a>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800229e:	f010 0f20 	tst.w	r0, #32
 80022a2:	d100      	bne.n	80022a6 <HAL_UART_IRQHandler+0x8e>
 80022a4:	b12a      	cbz	r2, 80022b2 <HAL_UART_IRQHandler+0x9a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80022a6:	6822      	ldr	r2, [r4, #0]
 80022a8:	2108      	movs	r1, #8
 80022aa:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022ac:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80022ae:	430a      	orrs	r2, r1
 80022b0:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80022b2:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80022b6:	d00a      	beq.n	80022ce <HAL_UART_IRQHandler+0xb6>
 80022b8:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 80022bc:	d007      	beq.n	80022ce <HAL_UART_IRQHandler+0xb6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80022be:	6822      	ldr	r2, [r4, #0]
 80022c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80022c4:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80022c6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80022c8:	f042 0220 	orr.w	r2, r2, #32
 80022cc:	67e2      	str	r2, [r4, #124]	; 0x7c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ce:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	d056      	beq.n	8002382 <HAL_UART_IRQHandler+0x16a>
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80022d4:	f013 0f20 	tst.w	r3, #32
 80022d8:	d006      	beq.n	80022e8 <HAL_UART_IRQHandler+0xd0>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80022da:	f010 0f20 	tst.w	r0, #32
 80022de:	d003      	beq.n	80022e8 <HAL_UART_IRQHandler+0xd0>
        if (huart->RxISR != NULL)
 80022e0:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80022e2:	b10b      	cbz	r3, 80022e8 <HAL_UART_IRQHandler+0xd0>
          huart->RxISR(huart);
 80022e4:	4620      	mov	r0, r4
 80022e6:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80022e8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80022ea:	6823      	ldr	r3, [r4, #0]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	f013 0f40 	tst.w	r3, #64	; 0x40
 80022f2:	d102      	bne.n	80022fa <HAL_UART_IRQHandler+0xe2>
 80022f4:	f012 0f28 	tst.w	r2, #40	; 0x28
 80022f8:	d01f      	beq.n	800233a <HAL_UART_IRQHandler+0x122>
        UART_EndRxTransfer(huart);
 80022fa:	4620      	mov	r0, r4
 80022fc:	f7ff fef1 	bl	80020e2 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002300:	6823      	ldr	r3, [r4, #0]
 8002302:	689a      	ldr	r2, [r3, #8]
 8002304:	f012 0f40 	tst.w	r2, #64	; 0x40
 8002308:	d013      	beq.n	8002332 <HAL_UART_IRQHandler+0x11a>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800230a:	689a      	ldr	r2, [r3, #8]
 800230c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002310:	609a      	str	r2, [r3, #8]
          if (huart->hdmarx != NULL)
 8002312:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8002314:	b14b      	cbz	r3, 800232a <HAL_UART_IRQHandler+0x112>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002316:	4a1d      	ldr	r2, [pc, #116]	; (800238c <HAL_UART_IRQHandler+0x174>)
 8002318:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800231a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800231c:	f7fe fe7a 	bl	8001014 <HAL_DMA_Abort_IT>
 8002320:	b378      	cbz	r0, 8002382 <HAL_UART_IRQHandler+0x16a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002322:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002324:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8002326:	4798      	blx	r3
 8002328:	e02b      	b.n	8002382 <HAL_UART_IRQHandler+0x16a>
            HAL_UART_ErrorCallback(huart);
 800232a:	4620      	mov	r0, r4
 800232c:	f7ff ff72 	bl	8002214 <HAL_UART_ErrorCallback>
 8002330:	e027      	b.n	8002382 <HAL_UART_IRQHandler+0x16a>
          HAL_UART_ErrorCallback(huart);
 8002332:	4620      	mov	r0, r4
 8002334:	f7ff ff6e 	bl	8002214 <HAL_UART_ErrorCallback>
 8002338:	e023      	b.n	8002382 <HAL_UART_IRQHandler+0x16a>
        HAL_UART_ErrorCallback(huart);
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff ff6a 	bl	8002214 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002340:	2300      	movs	r3, #0
 8002342:	67e3      	str	r3, [r4, #124]	; 0x7c
 8002344:	e01d      	b.n	8002382 <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002346:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800234a:	d002      	beq.n	8002352 <HAL_UART_IRQHandler+0x13a>
 800234c:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8002350:	d10a      	bne.n	8002368 <HAL_UART_IRQHandler+0x150>
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002352:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002356:	d00e      	beq.n	8002376 <HAL_UART_IRQHandler+0x15e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002358:	f010 0f80 	tst.w	r0, #128	; 0x80
 800235c:	d00b      	beq.n	8002376 <HAL_UART_IRQHandler+0x15e>
    if (huart->TxISR != NULL)
 800235e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002360:	b17b      	cbz	r3, 8002382 <HAL_UART_IRQHandler+0x16a>
      huart->TxISR(huart);
 8002362:	4620      	mov	r0, r4
 8002364:	4798      	blx	r3
 8002366:	e00c      	b.n	8002382 <HAL_UART_IRQHandler+0x16a>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002368:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800236c:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 800236e:	4620      	mov	r0, r4
 8002370:	f000 fa1e 	bl	80027b0 <HAL_UARTEx_WakeupCallback>
    return;
 8002374:	e005      	b.n	8002382 <HAL_UART_IRQHandler+0x16a>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002376:	f013 0f40 	tst.w	r3, #64	; 0x40
 800237a:	d002      	beq.n	8002382 <HAL_UART_IRQHandler+0x16a>
 800237c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002380:	d100      	bne.n	8002384 <HAL_UART_IRQHandler+0x16c>
}
 8002382:	bd38      	pop	{r3, r4, r5, pc}
    UART_EndTransmit_IT(huart);
 8002384:	4620      	mov	r0, r4
 8002386:	f7ff ff38 	bl	80021fa <UART_EndTransmit_IT>
    return;
 800238a:	e7fa      	b.n	8002382 <HAL_UART_IRQHandler+0x16a>
 800238c:	08002391 	.word	0x08002391

08002390 <UART_DMAAbortOnError>:
{
 8002390:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002392:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800239a:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 800239e:	f7ff ff39 	bl	8002214 <HAL_UART_ErrorCallback>
}
 80023a2:	bd08      	pop	{r3, pc}

080023a4 <UART_SetConfig>:
{
 80023a4:	b510      	push	{r4, lr}
 80023a6:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80023a8:	6883      	ldr	r3, [r0, #8]
 80023aa:	6902      	ldr	r2, [r0, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	6942      	ldr	r2, [r0, #20]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	69c2      	ldr	r2, [r0, #28]
 80023b4:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023b6:	6801      	ldr	r1, [r0, #0]
 80023b8:	6808      	ldr	r0, [r1, #0]
 80023ba:	4a6c      	ldr	r2, [pc, #432]	; (800256c <UART_SetConfig+0x1c8>)
 80023bc:	4002      	ands	r2, r0
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c2:	6822      	ldr	r2, [r4, #0]
 80023c4:	6853      	ldr	r3, [r2, #4]
 80023c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80023ca:	68e1      	ldr	r1, [r4, #12]
 80023cc:	430b      	orrs	r3, r1
 80023ce:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023d0:	69a2      	ldr	r2, [r4, #24]
  tmpreg |= huart->Init.OneBitSampling;
 80023d2:	6a23      	ldr	r3, [r4, #32]
 80023d4:	431a      	orrs	r2, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023d6:	6821      	ldr	r1, [r4, #0]
 80023d8:	688b      	ldr	r3, [r1, #8]
 80023da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	4a62      	ldr	r2, [pc, #392]	; (8002570 <UART_SetConfig+0x1cc>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d015      	beq.n	8002416 <UART_SetConfig+0x72>
 80023ea:	4a62      	ldr	r2, [pc, #392]	; (8002574 <UART_SetConfig+0x1d0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d028      	beq.n	8002442 <UART_SetConfig+0x9e>
 80023f0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d020      	beq.n	800243a <UART_SetConfig+0x96>
 80023f8:	2310      	movs	r3, #16
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80023fa:	69e2      	ldr	r2, [r4, #28]
 80023fc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002400:	d021      	beq.n	8002446 <UART_SetConfig+0xa2>
    switch (clocksource)
 8002402:	2b08      	cmp	r3, #8
 8002404:	f200 80ab 	bhi.w	800255e <UART_SetConfig+0x1ba>
 8002408:	e8df f003 	tbb	[pc, r3]
 800240c:	a98b816c 	.word	0xa98b816c
 8002410:	a9a9a996 	.word	0xa9a9a996
 8002414:	a0          	.byte	0xa0
 8002415:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002416:	4b58      	ldr	r3, [pc, #352]	; (8002578 <UART_SetConfig+0x1d4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	2b03      	cmp	r3, #3
 8002420:	d809      	bhi.n	8002436 <UART_SetConfig+0x92>
 8002422:	e8df f003 	tbb	[pc, r3]
 8002426:	0402      	.short	0x0402
 8002428:	0c06      	.short	0x0c06
 800242a:	2300      	movs	r3, #0
 800242c:	e7e5      	b.n	80023fa <UART_SetConfig+0x56>
 800242e:	2304      	movs	r3, #4
 8002430:	e7e3      	b.n	80023fa <UART_SetConfig+0x56>
 8002432:	2308      	movs	r3, #8
 8002434:	e7e1      	b.n	80023fa <UART_SetConfig+0x56>
 8002436:	2310      	movs	r3, #16
 8002438:	e7df      	b.n	80023fa <UART_SetConfig+0x56>
 800243a:	2300      	movs	r3, #0
 800243c:	e7dd      	b.n	80023fa <UART_SetConfig+0x56>
 800243e:	2302      	movs	r3, #2
 8002440:	e7db      	b.n	80023fa <UART_SetConfig+0x56>
 8002442:	2300      	movs	r3, #0
 8002444:	e7d9      	b.n	80023fa <UART_SetConfig+0x56>
    switch (clocksource)
 8002446:	2b08      	cmp	r3, #8
 8002448:	d849      	bhi.n	80024de <UART_SetConfig+0x13a>
 800244a:	e8df f003 	tbb	[pc, r3]
 800244e:	1e05      	.short	0x1e05
 8002450:	48344829 	.word	0x48344829
 8002454:	4848      	.short	0x4848
 8002456:	3f          	.byte	0x3f
 8002457:	00          	.byte	0x00
        pclk = HAL_RCC_GetPCLK1Freq();
 8002458:	f7ff fb0c 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800245c:	6862      	ldr	r2, [r4, #4]
 800245e:	0853      	lsrs	r3, r2, #1
 8002460:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002464:	fbb3 f3f2 	udiv	r3, r3, r2
 8002468:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800246a:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800246c:	f1a3 0110 	sub.w	r1, r3, #16
 8002470:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002474:	4291      	cmp	r1, r2
 8002476:	d875      	bhi.n	8002564 <UART_SetConfig+0x1c0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002478:	b29a      	uxth	r2, r3
 800247a:	f022 020f 	bic.w	r2, r2, #15
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800247e:	f3c3 0342 	ubfx	r3, r3, #1, #3
 8002482:	4313      	orrs	r3, r2
      huart->Instance->BRR = brrtemp;
 8002484:	6822      	ldr	r2, [r4, #0]
 8002486:	60d3      	str	r3, [r2, #12]
 8002488:	e03d      	b.n	8002506 <UART_SetConfig+0x162>
        pclk = HAL_RCC_GetPCLK2Freq();
 800248a:	f7ff fb09 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800248e:	6862      	ldr	r2, [r4, #4]
 8002490:	0853      	lsrs	r3, r2, #1
 8002492:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002496:	fbb3 f3f2 	udiv	r3, r3, r2
 800249a:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800249c:	2000      	movs	r0, #0
        break;
 800249e:	e7e5      	b.n	800246c <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80024a0:	6862      	ldr	r2, [r4, #4]
 80024a2:	0853      	lsrs	r3, r2, #1
 80024a4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80024a8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80024ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80024b0:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024b2:	2000      	movs	r0, #0
        break;
 80024b4:	e7da      	b.n	800246c <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetSysClockFreq();
 80024b6:	f7ff f9cd 	bl	8001854 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80024ba:	6862      	ldr	r2, [r4, #4]
 80024bc:	0853      	lsrs	r3, r2, #1
 80024be:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80024c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80024c6:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024c8:	2000      	movs	r0, #0
        break;
 80024ca:	e7cf      	b.n	800246c <UART_SetConfig+0xc8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80024cc:	6862      	ldr	r2, [r4, #4]
 80024ce:	0853      	lsrs	r3, r2, #1
 80024d0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80024d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80024d8:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024da:	2000      	movs	r0, #0
        break;
 80024dc:	e7c6      	b.n	800246c <UART_SetConfig+0xc8>
        ret = HAL_ERROR;
 80024de:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 80024e0:	2300      	movs	r3, #0
 80024e2:	e7c3      	b.n	800246c <UART_SetConfig+0xc8>
        pclk = HAL_RCC_GetPCLK1Freq();
 80024e4:	f7ff fac6 	bl	8001a74 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80024e8:	6862      	ldr	r2, [r4, #4]
 80024ea:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80024ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80024f2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80024f4:	2000      	movs	r0, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80024f6:	f1a3 0110 	sub.w	r1, r3, #16
 80024fa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80024fe:	4291      	cmp	r1, r2
 8002500:	d832      	bhi.n	8002568 <UART_SetConfig+0x1c4>
      huart->Instance->BRR = usartdiv;
 8002502:	6822      	ldr	r2, [r4, #0]
 8002504:	60d3      	str	r3, [r2, #12]
  huart->RxISR = NULL;
 8002506:	2300      	movs	r3, #0
 8002508:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800250a:	6663      	str	r3, [r4, #100]	; 0x64
}
 800250c:	bd10      	pop	{r4, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 800250e:	f7ff fac7 	bl	8001aa0 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002512:	6862      	ldr	r2, [r4, #4]
 8002514:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002518:	fbb3 f3f2 	udiv	r3, r3, r2
 800251c:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800251e:	2000      	movs	r0, #0
        break;
 8002520:	e7e9      	b.n	80024f6 <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002522:	6862      	ldr	r2, [r4, #4]
 8002524:	0853      	lsrs	r3, r2, #1
 8002526:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800252a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 800252e:	fbb3 f3f2 	udiv	r3, r3, r2
 8002532:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002534:	2000      	movs	r0, #0
        break;
 8002536:	e7de      	b.n	80024f6 <UART_SetConfig+0x152>
        pclk = HAL_RCC_GetSysClockFreq();
 8002538:	f7ff f98c 	bl	8001854 <HAL_RCC_GetSysClockFreq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800253c:	6862      	ldr	r2, [r4, #4]
 800253e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002542:	fbb3 f3f2 	udiv	r3, r3, r2
 8002546:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002548:	2000      	movs	r0, #0
        break;
 800254a:	e7d4      	b.n	80024f6 <UART_SetConfig+0x152>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800254c:	6862      	ldr	r2, [r4, #4]
 800254e:	0853      	lsrs	r3, r2, #1
 8002550:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8002554:	fbb3 f3f2 	udiv	r3, r3, r2
 8002558:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800255a:	2000      	movs	r0, #0
        break;
 800255c:	e7cb      	b.n	80024f6 <UART_SetConfig+0x152>
        ret = HAL_ERROR;
 800255e:	2001      	movs	r0, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002560:	2300      	movs	r3, #0
 8002562:	e7c8      	b.n	80024f6 <UART_SetConfig+0x152>
      ret = HAL_ERROR;
 8002564:	2001      	movs	r0, #1
 8002566:	e7ce      	b.n	8002506 <UART_SetConfig+0x162>
      ret = HAL_ERROR;
 8002568:	2001      	movs	r0, #1
 800256a:	e7cc      	b.n	8002506 <UART_SetConfig+0x162>
 800256c:	efff69f3 	.word	0xefff69f3
 8002570:	40013800 	.word	0x40013800
 8002574:	40004400 	.word	0x40004400
 8002578:	40021000 	.word	0x40021000

0800257c <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800257c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800257e:	f013 0f01 	tst.w	r3, #1
 8002582:	d006      	beq.n	8002592 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002584:	6802      	ldr	r2, [r0, #0]
 8002586:	6853      	ldr	r3, [r2, #4]
 8002588:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800258c:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800258e:	430b      	orrs	r3, r1
 8002590:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002592:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002594:	f013 0f02 	tst.w	r3, #2
 8002598:	d006      	beq.n	80025a8 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800259a:	6802      	ldr	r2, [r0, #0]
 800259c:	6853      	ldr	r3, [r2, #4]
 800259e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a2:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80025a4:	430b      	orrs	r3, r1
 80025a6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80025a8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025aa:	f013 0f04 	tst.w	r3, #4
 80025ae:	d006      	beq.n	80025be <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80025b0:	6802      	ldr	r2, [r0, #0]
 80025b2:	6853      	ldr	r3, [r2, #4]
 80025b4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025b8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80025ba:	430b      	orrs	r3, r1
 80025bc:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80025be:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025c0:	f013 0f08 	tst.w	r3, #8
 80025c4:	d006      	beq.n	80025d4 <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80025c6:	6802      	ldr	r2, [r0, #0]
 80025c8:	6853      	ldr	r3, [r2, #4]
 80025ca:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80025ce:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80025d0:	430b      	orrs	r3, r1
 80025d2:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80025d4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025d6:	f013 0f10 	tst.w	r3, #16
 80025da:	d006      	beq.n	80025ea <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80025dc:	6802      	ldr	r2, [r0, #0]
 80025de:	6893      	ldr	r3, [r2, #8]
 80025e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80025e4:	6b81      	ldr	r1, [r0, #56]	; 0x38
 80025e6:	430b      	orrs	r3, r1
 80025e8:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80025ea:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025ec:	f013 0f20 	tst.w	r3, #32
 80025f0:	d006      	beq.n	8002600 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80025f2:	6802      	ldr	r2, [r0, #0]
 80025f4:	6893      	ldr	r3, [r2, #8]
 80025f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80025fa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 80025fc:	430b      	orrs	r3, r1
 80025fe:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002602:	f013 0f40 	tst.w	r3, #64	; 0x40
 8002606:	d00a      	beq.n	800261e <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002608:	6802      	ldr	r2, [r0, #0]
 800260a:	6853      	ldr	r3, [r2, #4]
 800260c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002610:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8002612:	430b      	orrs	r3, r1
 8002614:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002616:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002618:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800261c:	d00b      	beq.n	8002636 <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800261e:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002620:	f013 0f80 	tst.w	r3, #128	; 0x80
 8002624:	d006      	beq.n	8002634 <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002626:	6802      	ldr	r2, [r0, #0]
 8002628:	6853      	ldr	r3, [r2, #4]
 800262a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800262e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8002630:	430b      	orrs	r3, r1
 8002632:	6053      	str	r3, [r2, #4]
}
 8002634:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002636:	6802      	ldr	r2, [r0, #0]
 8002638:	6853      	ldr	r3, [r2, #4]
 800263a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800263e:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8002640:	430b      	orrs	r3, r1
 8002642:	6053      	str	r3, [r2, #4]
 8002644:	e7eb      	b.n	800261e <UART_AdvFeatureConfig+0xa2>

08002646 <UART_WaitOnFlagUntilTimeout>:
{
 8002646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800264a:	4604      	mov	r4, r0
 800264c:	460f      	mov	r7, r1
 800264e:	4616      	mov	r6, r2
 8002650:	4698      	mov	r8, r3
 8002652:	9d06      	ldr	r5, [sp, #24]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002654:	6823      	ldr	r3, [r4, #0]
 8002656:	69db      	ldr	r3, [r3, #28]
 8002658:	ea37 0303 	bics.w	r3, r7, r3
 800265c:	bf0c      	ite	eq
 800265e:	2301      	moveq	r3, #1
 8002660:	2300      	movne	r3, #0
 8002662:	42b3      	cmp	r3, r6
 8002664:	d13a      	bne.n	80026dc <UART_WaitOnFlagUntilTimeout+0x96>
    if (Timeout != HAL_MAX_DELAY)
 8002666:	f1b5 3fff 	cmp.w	r5, #4294967295
 800266a:	d0f3      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800266c:	f7fe fa58 	bl	8000b20 <HAL_GetTick>
 8002670:	eba0 0008 	sub.w	r0, r0, r8
 8002674:	42a8      	cmp	r0, r5
 8002676:	d81f      	bhi.n	80026b8 <UART_WaitOnFlagUntilTimeout+0x72>
 8002678:	b1f5      	cbz	r5, 80026b8 <UART_WaitOnFlagUntilTimeout+0x72>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800267a:	6823      	ldr	r3, [r4, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	f012 0f04 	tst.w	r2, #4
 8002682:	d0e7      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0xe>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	f412 6f00 	tst.w	r2, #2048	; 0x800
 800268a:	d0e3      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0xe>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800268c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002690:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002692:	6822      	ldr	r2, [r4, #0]
 8002694:	6813      	ldr	r3, [r2, #0]
 8002696:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800269a:	6013      	str	r3, [r2, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800269c:	6822      	ldr	r2, [r4, #0]
 800269e:	6893      	ldr	r3, [r2, #8]
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6093      	str	r3, [r2, #8]
          huart->gState = HAL_UART_STATE_READY;
 80026a6:	2320      	movs	r3, #32
 80026a8:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80026aa:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80026ac:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80026ae:	2300      	movs	r3, #0
 80026b0:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80026b4:	2003      	movs	r0, #3
 80026b6:	e012      	b.n	80026de <UART_WaitOnFlagUntilTimeout+0x98>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80026b8:	6822      	ldr	r2, [r4, #0]
 80026ba:	6813      	ldr	r3, [r2, #0]
 80026bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80026c0:	6013      	str	r3, [r2, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026c2:	6822      	ldr	r2, [r4, #0]
 80026c4:	6893      	ldr	r3, [r2, #8]
 80026c6:	f023 0301 	bic.w	r3, r3, #1
 80026ca:	6093      	str	r3, [r2, #8]
        huart->gState = HAL_UART_STATE_READY;
 80026cc:	2320      	movs	r3, #32
 80026ce:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80026d0:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 80026d2:	2300      	movs	r3, #0
 80026d4:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
        return HAL_TIMEOUT;
 80026d8:	2003      	movs	r0, #3
 80026da:	e000      	b.n	80026de <UART_WaitOnFlagUntilTimeout+0x98>
  return HAL_OK;
 80026dc:	2000      	movs	r0, #0
}
 80026de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080026e2 <UART_CheckIdleState>:
{
 80026e2:	b530      	push	{r4, r5, lr}
 80026e4:	b083      	sub	sp, #12
 80026e6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026e8:	2300      	movs	r3, #0
 80026ea:	67c3      	str	r3, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80026ec:	f7fe fa18 	bl	8000b20 <HAL_GetTick>
 80026f0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80026f2:	6823      	ldr	r3, [r4, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f013 0f08 	tst.w	r3, #8
 80026fa:	d10c      	bne.n	8002716 <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f013 0f04 	tst.w	r3, #4
 8002704:	d115      	bne.n	8002732 <UART_CheckIdleState+0x50>
  huart->gState = HAL_UART_STATE_READY;
 8002706:	2320      	movs	r3, #32
 8002708:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800270a:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 800270c:	2000      	movs	r0, #0
 800270e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
}
 8002712:	b003      	add	sp, #12
 8002714:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002716:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	4603      	mov	r3, r0
 800271e:	2200      	movs	r2, #0
 8002720:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002724:	4620      	mov	r0, r4
 8002726:	f7ff ff8e 	bl	8002646 <UART_WaitOnFlagUntilTimeout>
 800272a:	2800      	cmp	r0, #0
 800272c:	d0e6      	beq.n	80026fc <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 800272e:	2003      	movs	r0, #3
 8002730:	e7ef      	b.n	8002712 <UART_CheckIdleState+0x30>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002732:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	462b      	mov	r3, r5
 800273a:	2200      	movs	r2, #0
 800273c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002740:	4620      	mov	r0, r4
 8002742:	f7ff ff80 	bl	8002646 <UART_WaitOnFlagUntilTimeout>
 8002746:	2800      	cmp	r0, #0
 8002748:	d0dd      	beq.n	8002706 <UART_CheckIdleState+0x24>
      return HAL_TIMEOUT;
 800274a:	2003      	movs	r0, #3
 800274c:	e7e1      	b.n	8002712 <UART_CheckIdleState+0x30>

0800274e <HAL_UART_Init>:
  if (huart == NULL)
 800274e:	b368      	cbz	r0, 80027ac <HAL_UART_Init+0x5e>
{
 8002750:	b510      	push	{r4, lr}
 8002752:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002754:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8002756:	b303      	cbz	r3, 800279a <HAL_UART_Init+0x4c>
  huart->gState = HAL_UART_STATE_BUSY;
 8002758:	2324      	movs	r3, #36	; 0x24
 800275a:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800275c:	6822      	ldr	r2, [r4, #0]
 800275e:	6813      	ldr	r3, [r2, #0]
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002766:	4620      	mov	r0, r4
 8002768:	f7ff fe1c 	bl	80023a4 <UART_SetConfig>
 800276c:	2801      	cmp	r0, #1
 800276e:	d013      	beq.n	8002798 <HAL_UART_Init+0x4a>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002770:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002772:	b9bb      	cbnz	r3, 80027a4 <HAL_UART_Init+0x56>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002774:	6822      	ldr	r2, [r4, #0]
 8002776:	6853      	ldr	r3, [r2, #4]
 8002778:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 800277c:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800277e:	6822      	ldr	r2, [r4, #0]
 8002780:	6893      	ldr	r3, [r2, #8]
 8002782:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8002786:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8002788:	6822      	ldr	r2, [r4, #0]
 800278a:	6813      	ldr	r3, [r2, #0]
 800278c:	f043 0301 	orr.w	r3, r3, #1
 8002790:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff ffa5 	bl	80026e2 <UART_CheckIdleState>
}
 8002798:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 800279a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800279e:	f7fd ffcd 	bl	800073c <HAL_UART_MspInit>
 80027a2:	e7d9      	b.n	8002758 <HAL_UART_Init+0xa>
    UART_AdvFeatureConfig(huart);
 80027a4:	4620      	mov	r0, r4
 80027a6:	f7ff fee9 	bl	800257c <UART_AdvFeatureConfig>
 80027aa:	e7e3      	b.n	8002774 <HAL_UART_Init+0x26>
    return HAL_ERROR;
 80027ac:	2001      	movs	r0, #1
}
 80027ae:	4770      	bx	lr

080027b0 <HAL_UARTEx_WakeupCallback>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80027b0:	4770      	bx	lr
	...

080027b4 <__libc_init_array>:
 80027b4:	b570      	push	{r4, r5, r6, lr}
 80027b6:	4e0d      	ldr	r6, [pc, #52]	; (80027ec <__libc_init_array+0x38>)
 80027b8:	4c0d      	ldr	r4, [pc, #52]	; (80027f0 <__libc_init_array+0x3c>)
 80027ba:	1ba4      	subs	r4, r4, r6
 80027bc:	10a4      	asrs	r4, r4, #2
 80027be:	2500      	movs	r5, #0
 80027c0:	42a5      	cmp	r5, r4
 80027c2:	d109      	bne.n	80027d8 <__libc_init_array+0x24>
 80027c4:	4e0b      	ldr	r6, [pc, #44]	; (80027f4 <__libc_init_array+0x40>)
 80027c6:	4c0c      	ldr	r4, [pc, #48]	; (80027f8 <__libc_init_array+0x44>)
 80027c8:	f000 f820 	bl	800280c <_init>
 80027cc:	1ba4      	subs	r4, r4, r6
 80027ce:	10a4      	asrs	r4, r4, #2
 80027d0:	2500      	movs	r5, #0
 80027d2:	42a5      	cmp	r5, r4
 80027d4:	d105      	bne.n	80027e2 <__libc_init_array+0x2e>
 80027d6:	bd70      	pop	{r4, r5, r6, pc}
 80027d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027dc:	4798      	blx	r3
 80027de:	3501      	adds	r5, #1
 80027e0:	e7ee      	b.n	80027c0 <__libc_init_array+0xc>
 80027e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80027e6:	4798      	blx	r3
 80027e8:	3501      	adds	r5, #1
 80027ea:	e7f2      	b.n	80027d2 <__libc_init_array+0x1e>
 80027ec:	08002904 	.word	0x08002904
 80027f0:	08002904 	.word	0x08002904
 80027f4:	08002904 	.word	0x08002904
 80027f8:	08002908 	.word	0x08002908

080027fc <memset>:
 80027fc:	4402      	add	r2, r0
 80027fe:	4603      	mov	r3, r0
 8002800:	4293      	cmp	r3, r2
 8002802:	d100      	bne.n	8002806 <memset+0xa>
 8002804:	4770      	bx	lr
 8002806:	f803 1b01 	strb.w	r1, [r3], #1
 800280a:	e7f9      	b.n	8002800 <memset+0x4>

0800280c <_init>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr

08002818 <_fini>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr
